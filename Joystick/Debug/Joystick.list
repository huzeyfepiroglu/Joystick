
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008774  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080088fc  080088fc  000188fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008934  08008934  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08008934  08008934  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008934  08008934  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008934  08008934  00018934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008938  08008938  00018938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800893c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  20000010  0800894c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  0800894c  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a22  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a16  00000000  00000000  00037aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  0003b4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc3  00000000  00000000  0003c920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ddfe  00000000  00000000  0003d8e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b411  00000000  00000000  0005b6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adbca  00000000  00000000  00076af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053d0  00000000  00000000  001246bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00129a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080088e4 	.word	0x080088e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080088e4 	.word	0x080088e4

080001c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001d8:	4b2e      	ldr	r3, [pc, #184]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001da:	4a2f      	ldr	r2, [pc, #188]	; (8000298 <MX_ADC1_Init+0xd0>)
 80001dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001de:	4b2d      	ldr	r3, [pc, #180]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80001e6:	4b2b      	ldr	r3, [pc, #172]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001ec:	4b29      	ldr	r3, [pc, #164]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f2:	4b28      	ldr	r3, [pc, #160]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001f4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80001f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001fa:	4b26      	ldr	r3, [pc, #152]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000200:	4b24      	ldr	r3, [pc, #144]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000202:	2204      	movs	r2, #4
 8000204:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000206:	4823      	ldr	r0, [pc, #140]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000208:	f002 fc3c 	bl	8002a84 <HAL_ADC_Init>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000212:	f002 f823 	bl	800225c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000216:	2307      	movs	r3, #7
 8000218:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800021a:	2301      	movs	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800021e:	2307      	movs	r3, #7
 8000220:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4619      	mov	r1, r3
 8000226:	481b      	ldr	r0, [pc, #108]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000228:	f002 fda2 	bl	8002d70 <HAL_ADC_ConfigChannel>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000232:	f002 f813 	bl	800225c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000236:	230e      	movs	r3, #14
 8000238:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800023a:	2302      	movs	r3, #2
 800023c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4619      	mov	r1, r3
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000244:	f002 fd94 	bl	8002d70 <HAL_ADC_ConfigChannel>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800024e:	f002 f805 	bl	800225c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000252:	230f      	movs	r3, #15
 8000254:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000256:	2303      	movs	r3, #3
 8000258:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4619      	mov	r1, r3
 800025e:	480d      	ldr	r0, [pc, #52]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000260:	f002 fd86 	bl	8002d70 <HAL_ADC_ConfigChannel>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800026a:	f001 fff7 	bl	800225c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800026e:	2308      	movs	r3, #8
 8000270:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000272:	2304      	movs	r3, #4
 8000274:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4619      	mov	r1, r3
 800027a:	4806      	ldr	r0, [pc, #24]	; (8000294 <MX_ADC1_Init+0xcc>)
 800027c:	f002 fd78 	bl	8002d70 <HAL_ADC_ConfigChannel>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000286:	f001 ffe9 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800028a:	bf00      	nop
 800028c:	3710      	adds	r7, #16
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	2000002c 	.word	0x2000002c
 8000298:	40012400 	.word	0x40012400

0800029c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08c      	sub	sp, #48	; 0x30
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a4:	f107 031c 	add.w	r3, r7, #28
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a42      	ldr	r2, [pc, #264]	; (80003c4 <HAL_ADC_MspInit+0x128>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d17d      	bne.n	80003ba <HAL_ADC_MspInit+0x11e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002be:	4b42      	ldr	r3, [pc, #264]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a41      	ldr	r2, [pc, #260]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6193      	str	r3, [r2, #24]
 80002ca:	4b3f      	ldr	r3, [pc, #252]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002d2:	61bb      	str	r3, [r7, #24]
 80002d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	4b3c      	ldr	r3, [pc, #240]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a3b      	ldr	r2, [pc, #236]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b39      	ldr	r3, [pc, #228]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ea:	617b      	str	r3, [r7, #20]
 80002ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ee:	4b36      	ldr	r3, [pc, #216]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a35      	ldr	r2, [pc, #212]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b33      	ldr	r3, [pc, #204]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000302:	613b      	str	r3, [r7, #16]
 8000304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000306:	4b30      	ldr	r3, [pc, #192]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a2f      	ldr	r2, [pc, #188]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 800030c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	4b2d      	ldr	r3, [pc, #180]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = FIN_ADC4_Pin;
 800031e:	2380      	movs	r3, #128	; 0x80
 8000320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000322:	2303      	movs	r3, #3
 8000324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FIN_ADC4_GPIO_Port, &GPIO_InitStruct);
 800032a:	f107 031c 	add.w	r3, r7, #28
 800032e:	4619      	mov	r1, r3
 8000330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000334:	f004 fa2a 	bl	800478c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FIN_ADC3_Pin|FIN_ADC2_Pin;
 8000338:	2330      	movs	r3, #48	; 0x30
 800033a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800033c:	2303      	movs	r3, #3
 800033e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000344:	f107 031c 	add.w	r3, r7, #28
 8000348:	4619      	mov	r1, r3
 800034a:	4820      	ldr	r0, [pc, #128]	; (80003cc <HAL_ADC_MspInit+0x130>)
 800034c:	f004 fa1e 	bl	800478c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FIN_ADC4B0_Pin;
 8000350:	2301      	movs	r3, #1
 8000352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000354:	2303      	movs	r3, #3
 8000356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FIN_ADC4B0_GPIO_Port, &GPIO_InitStruct);
 800035c:	f107 031c 	add.w	r3, r7, #28
 8000360:	4619      	mov	r1, r3
 8000362:	481b      	ldr	r0, [pc, #108]	; (80003d0 <HAL_ADC_MspInit+0x134>)
 8000364:	f004 fa12 	bl	800478c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <HAL_ADC_MspInit+0x13c>)
 800036c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800036e:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 800037c:	2280      	movs	r2, #128	; 0x80
 800037e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000386:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 800038a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800038e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000392:	2220      	movs	r2, #32
 8000394:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000398:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800039c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800039e:	480d      	ldr	r0, [pc, #52]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 80003a0:	f003 fded 	bl	8003f7e <HAL_DMA_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 80003aa:	f001 ff57 	bl	800225c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a08      	ldr	r2, [pc, #32]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 80003b2:	621a      	str	r2, [r3, #32]
 80003b4:	4a07      	ldr	r2, [pc, #28]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003ba:	bf00      	nop
 80003bc:	3730      	adds	r7, #48	; 0x30
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40012400 	.word	0x40012400
 80003c8:	40021000 	.word	0x40021000
 80003cc:	48000800 	.word	0x48000800
 80003d0:	48000400 	.word	0x48000400
 80003d4:	2000005c 	.word	0x2000005c
 80003d8:	40020008 	.word	0x40020008

080003dc <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003e0:	4b17      	ldr	r3, [pc, #92]	; (8000440 <MX_CAN_Init+0x64>)
 80003e2:	4a18      	ldr	r2, [pc, #96]	; (8000444 <MX_CAN_Init+0x68>)
 80003e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80003e6:	4b16      	ldr	r3, [pc, #88]	; (8000440 <MX_CAN_Init+0x64>)
 80003e8:	2202      	movs	r2, #2
 80003ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003ec:	4b14      	ldr	r3, [pc, #80]	; (8000440 <MX_CAN_Init+0x64>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003f2:	4b13      	ldr	r3, [pc, #76]	; (8000440 <MX_CAN_Init+0x64>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_CAN_Init+0x64>)
 80003fa:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80003fe:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_CAN_Init+0x64>)
 8000402:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000406:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000408:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <MX_CAN_Init+0x64>)
 800040a:	2200      	movs	r2, #0
 800040c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_CAN_Init+0x64>)
 8000410:	2200      	movs	r2, #0
 8000412:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000414:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <MX_CAN_Init+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_CAN_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <MX_CAN_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_CAN_Init+0x64>)
 8000428:	2200      	movs	r2, #0
 800042a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800042c:	4804      	ldr	r0, [pc, #16]	; (8000440 <MX_CAN_Init+0x64>)
 800042e:	f002 fe2a 	bl	8003086 <HAL_CAN_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000438:	f001 ff10 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	200000a0 	.word	0x200000a0
 8000444:	40006400 	.word	0x40006400

08000448 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08a      	sub	sp, #40	; 0x28
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a1b      	ldr	r2, [pc, #108]	; (80004d4 <HAL_CAN_MspInit+0x8c>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d130      	bne.n	80004cc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800046a:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a1a      	ldr	r2, [pc, #104]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 8000470:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800047e:	613b      	str	r3, [r7, #16]
 8000480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 8000488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800049a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800049e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a0:	2302      	movs	r3, #2
 80004a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a8:	2303      	movs	r3, #3
 80004aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80004ac:	2309      	movs	r3, #9
 80004ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	4619      	mov	r1, r3
 80004b6:	4809      	ldr	r0, [pc, #36]	; (80004dc <HAL_CAN_MspInit+0x94>)
 80004b8:	f004 f968 	bl	800478c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	2014      	movs	r0, #20
 80004c2:	f003 fd22 	bl	8003f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80004c6:	2014      	movs	r0, #20
 80004c8:	f003 fd3b 	bl	8003f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80004cc:	bf00      	nop
 80004ce:	3728      	adds	r7, #40	; 0x28
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40006400 	.word	0x40006400
 80004d8:	40021000 	.word	0x40021000
 80004dc:	48000400 	.word	0x48000400

080004e0 <CAN_ConfigFilter>:
//  HAL_CAN_ConfigFilter(&hcan, &f);
//}

/* Tüm standart ID'leri kabul eden basit mask filtre (FIFO0) */
void CAN_ConfigFilter(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilter = {0};
 80004e6:	463b      	mov	r3, r7
 80004e8:	2228      	movs	r2, #40	; 0x28
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f008 f9cc 	bl	800888a <memset>

  sFilter.FilterBank = 0;                          // 0..27 arası
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
  sFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
  sFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80004fa:	2301      	movs	r3, #1
 80004fc:	61fb      	str	r3, [r7, #28]
  sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]

  /* Accept-all: ID=0, MASK=0 */
  sFilter.FilterIdHigh      = 0x0000;
 8000502:	2300      	movs	r3, #0
 8000504:	603b      	str	r3, [r7, #0]
  sFilter.FilterIdLow       = 0x0000;
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
  sFilter.FilterMaskIdHigh  = 0x0000;
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
  sFilter.FilterMaskIdLow   = 0x0000;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]

  sFilter.FilterActivation = ENABLE;
 8000512:	2301      	movs	r3, #1
 8000514:	623b      	str	r3, [r7, #32]

  if (HAL_CAN_ConfigFilter(&hcan, &sFilter) != HAL_OK) {
 8000516:	463b      	mov	r3, r7
 8000518:	4619      	mov	r1, r3
 800051a:	4806      	ldr	r0, [pc, #24]	; (8000534 <CAN_ConfigFilter+0x54>)
 800051c:	f002 feae 	bl	800327c <HAL_CAN_ConfigFilter>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <CAN_ConfigFilter+0x4a>
    Error_Handler();
 8000526:	f001 fe99 	bl	800225c <Error_Handler>
  }
}
 800052a:	bf00      	nop
 800052c:	3728      	adds	r7, #40	; 0x28
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200000a0 	.word	0x200000a0

08000538 <CAN_StartIT>:

/* CAN'i başlat + RX interrupt'larını aktive et */
void CAN_StartIT(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800053c:	4809      	ldr	r0, [pc, #36]	; (8000564 <CAN_StartIT+0x2c>)
 800053e:	f002 ff67 	bl	8003410 <HAL_CAN_Start>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <CAN_StartIT+0x14>
    Error_Handler();
 8000548:	f001 fe88 	bl	800225c <Error_Handler>
  }

  /* FIFO0'da mesaj gelince kesme, ayrıca TX mailbox boşalması vs. */
  if (HAL_CAN_ActivateNotification(&hcan,
 800054c:	f240 5103 	movw	r1, #1283	; 0x503
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <CAN_StartIT+0x2c>)
 8000552:	f003 f993 	bl	800387c <HAL_CAN_ActivateNotification>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <CAN_StartIT+0x28>
      CAN_IT_RX_FIFO0_MSG_PENDING |
      CAN_IT_TX_MAILBOX_EMPTY |
      CAN_IT_ERROR_WARNING |
      CAN_IT_BUSOFF) != HAL_OK)
  {
    Error_Handler();
 800055c:	f001 fe7e 	bl	800225c <Error_Handler>
  }
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200000a0 	.word	0x200000a0

08000568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056e:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <MX_DMA_Init+0x70>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <MX_DMA_Init+0x70>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <MX_DMA_Init+0x70>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <MX_DMA_Init+0x70>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a13      	ldr	r2, [pc, #76]	; (80005d8 <MX_DMA_Init+0x70>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <MX_DMA_Init+0x70>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	200b      	movs	r0, #11
 80005a4:	f003 fcb1 	bl	8003f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005a8:	200b      	movs	r0, #11
 80005aa:	f003 fcca 	bl	8003f42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2100      	movs	r1, #0
 80005b2:	200f      	movs	r0, #15
 80005b4:	f003 fca9 	bl	8003f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80005b8:	200f      	movs	r0, #15
 80005ba:	f003 fcc2 	bl	8003f42 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	203a      	movs	r0, #58	; 0x3a
 80005c4:	f003 fca1 	bl	8003f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80005c8:	203a      	movs	r0, #58	; 0x3a
 80005ca:	f003 fcba 	bl	8003f42 <HAL_NVIC_EnableIRQ>

}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08c      	sub	sp, #48	; 0x30
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b46      	ldr	r3, [pc, #280]	; (800070c <MX_GPIO_Init+0x130>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a45      	ldr	r2, [pc, #276]	; (800070c <MX_GPIO_Init+0x130>)
 80005f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b43      	ldr	r3, [pc, #268]	; (800070c <MX_GPIO_Init+0x130>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000606:	61bb      	str	r3, [r7, #24]
 8000608:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060a:	4b40      	ldr	r3, [pc, #256]	; (800070c <MX_GPIO_Init+0x130>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a3f      	ldr	r2, [pc, #252]	; (800070c <MX_GPIO_Init+0x130>)
 8000610:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b3d      	ldr	r3, [pc, #244]	; (800070c <MX_GPIO_Init+0x130>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b3a      	ldr	r3, [pc, #232]	; (800070c <MX_GPIO_Init+0x130>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a39      	ldr	r2, [pc, #228]	; (800070c <MX_GPIO_Init+0x130>)
 8000628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b37      	ldr	r3, [pc, #220]	; (800070c <MX_GPIO_Init+0x130>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b34      	ldr	r3, [pc, #208]	; (800070c <MX_GPIO_Init+0x130>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a33      	ldr	r2, [pc, #204]	; (800070c <MX_GPIO_Init+0x130>)
 8000640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b31      	ldr	r3, [pc, #196]	; (800070c <MX_GPIO_Init+0x130>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	4b2e      	ldr	r3, [pc, #184]	; (800070c <MX_GPIO_Init+0x130>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a2d      	ldr	r2, [pc, #180]	; (800070c <MX_GPIO_Init+0x130>)
 8000658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b2b      	ldr	r3, [pc, #172]	; (800070c <MX_GPIO_Init+0x130>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066a:	4b28      	ldr	r3, [pc, #160]	; (800070c <MX_GPIO_Init+0x130>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a27      	ldr	r2, [pc, #156]	; (800070c <MX_GPIO_Init+0x130>)
 8000670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b25      	ldr	r3, [pc, #148]	; (800070c <MX_GPIO_Init+0x130>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = BTN_18_Pin|BTN_17_Pin|BTN_23_Pin|BTN_24_Pin
 8000682:	f64f 73cf 	movw	r3, #65487	; 0xffcf
 8000686:	61fb      	str	r3, [r7, #28]
                          |BTN_21_Pin|BTN_22_Pin|BTN_07_Pin|BTN_15_Pin
                          |BTN_16_Pin|BTN_13_Pin|BTN_12_Pin|BTN_27_Pin
                          |BTN_28_Pin|BTN_25_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	481e      	ldr	r0, [pc, #120]	; (8000710 <MX_GPIO_Init+0x134>)
 8000698:	f004 f878 	bl	800478c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = BTN_08_Pin|BTN_05_Pin|BTN_06_Pin|BTN_03_Pin
 800069c:	f248 137f 	movw	r3, #33151	; 0x817f
 80006a0:	61fb      	str	r3, [r7, #28]
                          |BTN_19_Pin|BTN_01_Pin|BTN_02_Pin|BTN_29_Pin
                          |BTN_09_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f004 f86a 	bl	800478c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_04_Pin|BTN_20_Pin|BTN_26_Pin|BTN_32_Pin
 80006b8:	f24c 0378 	movw	r3, #49272	; 0xc078
 80006bc:	61fb      	str	r3, [r7, #28]
                          |BTN_31_Pin|BTN_30_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	4619      	mov	r1, r3
 80006cc:	4811      	ldr	r0, [pc, #68]	; (8000714 <MX_GPIO_Init+0x138>)
 80006ce:	f004 f85d 	bl	800478c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_14_Pin;
 80006d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_14_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_GPIO_Init+0x13c>)
 80006e8:	f004 f850 	bl	800478c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = BTN_11_Pin|BTN_10_Pin;
 80006ec:	23c0      	movs	r3, #192	; 0xc0
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4807      	ldr	r0, [pc, #28]	; (800071c <MX_GPIO_Init+0x140>)
 8000700:	f004 f844 	bl	800478c <HAL_GPIO_Init>

}
 8000704:	bf00      	nop
 8000706:	3730      	adds	r7, #48	; 0x30
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000
 8000710:	48000800 	.word	0x48000800
 8000714:	48000400 	.word	0x48000400
 8000718:	48000c00 	.word	0x48000c00
 800071c:	48001400 	.word	0x48001400

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000724:	f002 f924 	bl	8002970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f84a 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f7ff ff56 	bl	80005dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000730:	f7ff ff1a 	bl	8000568 <MX_DMA_Init>
  MX_ADC1_Init();
 8000734:	f7ff fd48 	bl	80001c8 <MX_ADC1_Init>
  MX_CAN_Init();
 8000738:	f7ff fe50 	bl	80003dc <MX_CAN_Init>
  MX_SDADC1_Init();
 800073c:	f001 fd94 	bl	8002268 <MX_SDADC1_Init>
  MX_TIM2_Init();
 8000740:	f001 ff6c 	bl	800261c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000744:	f001 ffb6 	bl	80026b4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000748:	f002 f842 	bl	80027d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(1000);
 800074c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000750:	f002 f974 	bl	8002a3c <HAL_Delay>
	checkBootloader();
 8000754:	f000 f8f0 	bl	8000938 <checkBootloader>

/*Baslangic için default config data atamasi*/
	writeDefaultConfigPage();
 8000758:	f001 fca4 	bl	80020a4 <writeDefaultConfigPage>
	HAL_TIM_Base_Start_IT(&htim2);
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <main+0x88>)
 800075e:	f006 fab7 	bl	8006cd0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000762:	4812      	ldr	r0, [pc, #72]	; (80007ac <main+0x8c>)
 8000764:	f006 fab4 	bl	8006cd0 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_DMA(&huart1, &rxDataIn, 1);
 8000768:	2201      	movs	r2, #1
 800076a:	4911      	ldr	r1, [pc, #68]	; (80007b0 <main+0x90>)
 800076c:	4811      	ldr	r0, [pc, #68]	; (80007b4 <main+0x94>)
 800076e:	f006 ffa1 	bl	80076b4 <HAL_UART_Receive_DMA>

	CAN_ConfigFilter();       // Tüm ID'leri kabul et (mask filtre)
 8000772:	f7ff feb5 	bl	80004e0 <CAN_ConfigFilter>
	CAN_StartIT();            // CAN'i başlat + RX interrupt aç
 8000776:	f7ff fedf 	bl	8000538 <CAN_StartIT>
//	  HAL_CAN_Start(&hcan);                              // CAN’ı başlat
//	  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // FIFO0 RX kesmesi


	//fingerAnalogread start
	HAL_ADCEx_Calibration_Start(&hadc1);
 800077a:	480f      	ldr	r0, [pc, #60]	; (80007b8 <main+0x98>)
 800077c:	f002 fa5a 	bl	8002c34 <HAL_ADCEx_Calibration_Start>
	HAL_SDADC_CalibrationStart(&hsdadc1, SDADC_CALIBRATION_SEQ_1);
 8000780:	2100      	movs	r1, #0
 8000782:	480e      	ldr	r0, [pc, #56]	; (80007bc <main+0x9c>)
 8000784:	f006 f82c 	bl	80067e0 <HAL_SDADC_CalibrationStart>
	HAL_SDADC_PollForCalibEvent(&hsdadc1, 1000);
 8000788:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800078c:	480b      	ldr	r0, [pc, #44]	; (80007bc <main+0x9c>)
 800078e:	f006 f867 	bl	8006860 <HAL_SDADC_PollForCalibEvent>
	configurationSettings();
 8000792:	f000 f879 	bl	8000888 <configurationSettings>
	initDigitalInputs(getDigitalInputs());
 8000796:	f000 fce5 	bl	8001164 <getDigitalInputs>
 800079a:	4603      	mov	r3, r0
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fb15 	bl	8000dcc <initDigitalInputs>
//	    {
//	      can_rx_flag = 0;
//	      //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);    // bir şey alındı -> LED değiştir
//	      // rxh.StdId, rxh.DLC, rxdata[] burada kullanılabilir
//	    }
	  mainLoop();
 80007a2:	f000 f895 	bl	80008d0 <mainLoop>
 80007a6:	e7fc      	b.n	80007a2 <main+0x82>
 80007a8:	2000056c 	.word	0x2000056c
 80007ac:	200005b8 	.word	0x200005b8
 80007b0:	2000037f 	.word	0x2000037f
 80007b4:	20000604 	.word	0x20000604
 80007b8:	2000002c 	.word	0x2000002c
 80007bc:	200004e4 	.word	0x200004e4

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b09a      	sub	sp, #104	; 0x68
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007ca:	2228      	movs	r2, #40	; 0x28
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f008 f85b 	bl	800888a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e4:	463b      	mov	r3, r7
 80007e6:	222c      	movs	r2, #44	; 0x2c
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f008 f84d 	bl	800888a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f0:	2301      	movs	r3, #1
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV3;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fe:	2301      	movs	r3, #1
 8000800:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000802:	2302      	movs	r3, #2
 8000804:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800080c:	2300      	movs	r3, #0
 800080e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000814:	4618      	mov	r0, r3
 8000816:	f004 fa0f 	bl	8004c38 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000820:	f001 fd1c 	bl	800225c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2302      	movs	r3, #2
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000834:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800083a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f005 fa37 	bl	8005cb4 <HAL_RCC_ClockConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800084c:	f001 fd06 	bl	800225c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1
 8000850:	f640 0381 	movw	r3, #2177	; 0x881
 8000854:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SDADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000856:	2301      	movs	r3, #1
 8000858:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV4;
 800085a:	f04f 4308 	mov.w	r3, #2281701376	; 0x88000000
 800085e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	4618      	mov	r0, r3
 8000868:	f005 fc46 	bl	80060f8 <HAL_RCCEx_PeriphCLKConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000872:	f001 fcf3 	bl	800225c <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8000876:	f44f 7000 	mov.w	r0, #512	; 0x200
 800087a:	f004 f919 	bl	8004ab0 <HAL_PWREx_EnableSDADC>
}
 800087e:	bf00      	nop
 8000880:	3768      	adds	r7, #104	; 0x68
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <configurationSettings>:

/* USER CODE BEGIN 4 */
void configurationSettings(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	//check for DEFAULT/USER Configuration
	flashReadValue = (*(uint32_t*)CONFIG_DATA_DEFAULT_SELECT);
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <configurationSettings+0x38>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <configurationSettings+0x3c>)
 8000894:	701a      	strb	r2, [r3, #0]
	flashReadValue = 0xff;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <configurationSettings+0x3c>)
 8000898:	22ff      	movs	r2, #255	; 0xff
 800089a:	701a      	strb	r2, [r3, #0]
	if(flashReadValue == 0xFF)
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <configurationSettings+0x3c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2bff      	cmp	r3, #255	; 0xff
 80008a2:	d103      	bne.n	80008ac <configurationSettings+0x24>
	{
		loadDefaultValues(&userTkkConfig);
 80008a4:	4808      	ldr	r0, [pc, #32]	; (80008c8 <configurationSettings+0x40>)
 80008a6:	f001 f817 	bl	80018d8 <loadDefaultValues>
 80008aa:	e002      	b.n	80008b2 <configurationSettings+0x2a>
	}
	else
	{
		readFlashUserConf(&userTkkConfig);
 80008ac:	4806      	ldr	r0, [pc, #24]	; (80008c8 <configurationSettings+0x40>)
 80008ae:	f000 ffbb 	bl	8001828 <readFlashUserConf>
	}

	calculateJostickBorders(&userTkkConfig, &tkkJoystickBorder);
 80008b2:	4906      	ldr	r1, [pc, #24]	; (80008cc <configurationSettings+0x44>)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <configurationSettings+0x40>)
 80008b6:	f000 f9a3 	bl	8000c00 <calculateJostickBorders>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	0800e000 	.word	0x0800e000
 80008c4:	200004be 	.word	0x200004be
 80008c8:	200003e8 	.word	0x200003e8
 80008cc:	20000488 	.word	0x20000488

080008d0 <mainLoop>:
void mainLoop(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	if(sampleAnalogInputs == true)
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <mainLoop+0x4c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d014      	beq.n	8000906 <mainLoop+0x36>
		{

			//averageAnalogInputs(&AnADC_Values[0], &AnADC_Read[0], ANALOG_COUNT, AVERAGE_WINDOW);
			averageAnalogInputs(AnADC_Values, AnADC_Read, ANALOG_COUNT, AVERAGE_WINDOW);
 80008dc:	2302      	movs	r3, #2
 80008de:	2202      	movs	r2, #2
 80008e0:	490f      	ldr	r1, [pc, #60]	; (8000920 <mainLoop+0x50>)
 80008e2:	4810      	ldr	r0, [pc, #64]	; (8000924 <mainLoop+0x54>)
 80008e4:	f000 f9e3 	bl	8000cae <averageAnalogInputs>
			calculateAxisData(&tkkJoystickBorder, &AnADC_Values[0], &fittedAnAdc_Values[0], XAXIS);
 80008e8:	2301      	movs	r3, #1
 80008ea:	4a0f      	ldr	r2, [pc, #60]	; (8000928 <mainLoop+0x58>)
 80008ec:	490d      	ldr	r1, [pc, #52]	; (8000924 <mainLoop+0x54>)
 80008ee:	480f      	ldr	r0, [pc, #60]	; (800092c <mainLoop+0x5c>)
 80008f0:	f000 f8b0 	bl	8000a54 <calculateAxisData>
			calculateAxisData(&tkkJoystickBorder, &AnADC_Values[1], &fittedAnAdc_Values[1], YAXIS);
 80008f4:	2300      	movs	r3, #0
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <mainLoop+0x60>)
 80008f8:	490e      	ldr	r1, [pc, #56]	; (8000934 <mainLoop+0x64>)
 80008fa:	480c      	ldr	r0, [pc, #48]	; (800092c <mainLoop+0x5c>)
 80008fc:	f000 f8aa 	bl	8000a54 <calculateAxisData>
			sampleAnalogInputs = false;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <mainLoop+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
		}

		sampleDigitalInputs(getDigitalInputs());
 8000906:	f000 fc2d 	bl	8001164 <getDigitalInputs>
 800090a:	4603      	mov	r3, r0
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fb9b 	bl	8001048 <sampleDigitalInputs>
		SDADC_ScanConversion();
 8000912:	f000 f9ff 	bl	8000d14 <SDADC_ScanConversion>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000c8 	.word	0x200000c8
 8000920:	200000cc 	.word	0x200000cc
 8000924:	200000d4 	.word	0x200000d4
 8000928:	200000dc 	.word	0x200000dc
 800092c:	20000488 	.word	0x20000488
 8000930:	200000e0 	.word	0x200000e0
 8000934:	200000d8 	.word	0x200000d8

08000938 <checkBootloader>:

void checkBootloader(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	bootValue = *(uint32_t*)CONFIG_BOOTMODE_INIT_OFFSET;
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <checkBootloader+0x48>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	b29a      	uxth	r2, r3
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <checkBootloader+0x4c>)
 8000944:	801a      	strh	r2, [r3, #0]
	if(bootValue == 0x00CD)
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <checkBootloader+0x4c>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	2bcd      	cmp	r3, #205	; 0xcd
 800094c:	d115      	bne.n	800097a <checkBootloader+0x42>
	{
			HAL_FLASH_Unlock();
 800094e:	f003 fdb5 	bl	80044bc <HAL_FLASH_Unlock>
			static FLASH_EraseInitTypeDef eraseInit;
			eraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <checkBootloader+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
			eraseInit.PageAddress = CONFIG_BOOTMODE_BASE_ADDR; // düzenlenecek !!!!!!!!!!!!!!!!!!!!*/
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <checkBootloader+0x50>)
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <checkBootloader+0x54>)
 800095c:	605a      	str	r2, [r3, #4]
			eraseInit.NbPages     = 1;
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <checkBootloader+0x50>)
 8000960:	2201      	movs	r2, #1
 8000962:	609a      	str	r2, [r3, #8]

			if (HAL_FLASHEx_Erase(&eraseInit, &PAGEError) != HAL_OK)
 8000964:	490a      	ldr	r1, [pc, #40]	; (8000990 <checkBootloader+0x58>)
 8000966:	4808      	ldr	r0, [pc, #32]	; (8000988 <checkBootloader+0x50>)
 8000968:	f003 fe6c 	bl	8004644 <HAL_FLASHEx_Erase>
			{
			}
			HAL_Delay(100);
 800096c:	2064      	movs	r0, #100	; 0x64
 800096e:	f002 f865 	bl	8002a3c <HAL_Delay>
			HAL_FLASH_Lock();
 8000972:	f003 fdc9 	bl	8004508 <HAL_FLASH_Lock>
		bootloaderInit();
 8000976:	f000 f841 	bl	80009fc <bootloaderInit>
	}
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	0800a002 	.word	0x0800a002
 8000984:	200004bc 	.word	0x200004bc
 8000988:	200004c0 	.word	0x200004c0
 800098c:	0800a000 	.word	0x0800a000
 8000990:	20000394 	.word	0x20000394

08000994 <bootloaderCommand>:

void bootloaderCommand(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800099a:	f003 fd8f 	bl	80044bc <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInitStruct_BOOT;
	EraseInitStruct_BOOT.TypeErase   = FLASH_TYPEERASE_PAGES;
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
	EraseInitStruct_BOOT.PageAddress = CONFIG_BOOTMODE_BASE_ADDR; // düzenlenecek !!!!!!!!!!!!!!!!!!!!*/
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <bootloaderCommand+0x58>)
 80009a4:	60bb      	str	r3, [r7, #8]
	EraseInitStruct_BOOT.NbPages     = 1;
 80009a6:	2301      	movs	r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct_BOOT, &PAGEError) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4910      	ldr	r1, [pc, #64]	; (80009f0 <bootloaderCommand+0x5c>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	f003 fe48 	bl	8004644 <HAL_FLASHEx_Erase>
	{

	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_BOOTMODE_INIT_OFFSET, 0x00CD);
 80009b4:	f04f 02cd 	mov.w	r2, #205	; 0xcd
 80009b8:	f04f 0300 	mov.w	r3, #0
 80009bc:	490d      	ldr	r1, [pc, #52]	; (80009f4 <bootloaderCommand+0x60>)
 80009be:	2001      	movs	r0, #1
 80009c0:	f003 fd0c 	bl	80043dc <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80009c4:	f003 fda0 	bl	8004508 <HAL_FLASH_Lock>
	bootValue = *(uint32_t*)CONFIG_BOOTMODE_INIT_OFFSET;
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <bootloaderCommand+0x60>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <bootloaderCommand+0x64>)
 80009d0:	801a      	strh	r2, [r3, #0]

	if(bootValue == 0x00CD)
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <bootloaderCommand+0x64>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	2bcd      	cmp	r3, #205	; 0xcd
 80009d8:	d103      	bne.n	80009e2 <bootloaderCommand+0x4e>
	{
		sendAckUart();
 80009da:	f000 ffd5 	bl	8001988 <sendAckUart>
		HAL_NVIC_SystemReset();
 80009de:	f003 fabe 	bl	8003f5e <HAL_NVIC_SystemReset>
	}
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	0800a000 	.word	0x0800a000
 80009f0:	20000394 	.word	0x20000394
 80009f4:	0800a002 	.word	0x0800a002
 80009f8:	200004bc 	.word	0x200004bc

080009fc <bootloaderInit>:

void bootloaderInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	SysMemBootJump = (void(*)(void)) (*((uint32_t*) (0x1FFFD800 + 4)));
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <bootloaderInit+0x48>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <bootloaderInit+0x4c>)
 8000a0a:	601a      	str	r2, [r3, #0]

	HAL_RCC_DeInit();
 8000a0c:	f004 f870 	bl	8004af0 <HAL_RCC_DeInit>
	SysTick -> CTRL = 0;
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <bootloaderInit+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
	SysTick -> LOAD = 0;
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <bootloaderInit+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
	SysTick -> VAL  = 0;
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <bootloaderInit+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	2301      	movs	r3, #1
 8000a24:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	f383 8810 	msr	PRIMASK, r3
}
 8000a2c:	bf00      	nop
	__set_PRIMASK(1);

	__set_MSP(DEFAULT_MSP_VALUE);
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <bootloaderInit+0x54>)
 8000a30:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f383 8808 	msr	MSP, r3
}
 8000a38:	bf00      	nop
	SysMemBootJump();
 8000a3a:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <bootloaderInit+0x4c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4798      	blx	r3
	while(1);
 8000a40:	e7fe      	b.n	8000a40 <bootloaderInit+0x44>
 8000a42:	bf00      	nop
 8000a44:	1fffd804 	.word	0x1fffd804
 8000a48:	200004b8 	.word	0x200004b8
 8000a4c:	e000e010 	.word	0xe000e010
 8000a50:	20001258 	.word	0x20001258

08000a54 <calculateAxisData>:
}
void calculateAxisData(joystickBorder* tempJoystickBorder, uint32_t* tempAnADC_Value, int32_t* fittedAnAdc_Values, bool axisData)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b087      	sub	sp, #28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
 8000a60:	70fb      	strb	r3, [r7, #3]
	joystickBorder* joystickBorderPtr;
	joystickBorderPtr = tempJoystickBorder;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	617b      	str	r3, [r7, #20]
	errX = GPIO_PIN_RESET;
 8000a66:	4b64      	ldr	r3, [pc, #400]	; (8000bf8 <calculateAxisData+0x1a4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
	errY = GPIO_PIN_RESET;
 8000a6c:	4b63      	ldr	r3, [pc, #396]	; (8000bfc <calculateAxisData+0x1a8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
	//calculate x-Axis
	if(axisData == XAXIS)
 8000a72:	78fb      	ldrb	r3, [r7, #3]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d05d      	beq.n	8000b34 <calculateAxisData+0xe0>
	{
		if(*tempAnADC_Value <= joystickBorderPtr->xLeftLow)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d806      	bhi.n	8000a92 <calculateAxisData+0x3e>
		{
			//*fittedAnAdc_Values = -32766;
			//*fittedAnAdc_Values = -2048;  #huzeyfe
			*fittedAnAdc_Values = 0;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
			errX = GPIO_PIN_SET;
 8000a8a:	4b5b      	ldr	r3, [pc, #364]	; (8000bf8 <calculateAxisData+0x1a4>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
				*fittedAnAdc_Values = 0;
			}
		}

	}
}
 8000a90:	e0ac      	b.n	8000bec <calculateAxisData+0x198>
		else if(*tempAnADC_Value >= joystickBorderPtr->xRightHigh)
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	691b      	ldr	r3, [r3, #16]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d307      	bcc.n	8000aae <calculateAxisData+0x5a>
			errX = GPIO_PIN_SET;
 8000a9e:	4b56      	ldr	r3, [pc, #344]	; (8000bf8 <calculateAxisData+0x1a4>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	701a      	strb	r2, [r3, #0]
			*fittedAnAdc_Values = 65535;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aaa:	601a      	str	r2, [r3, #0]
}
 8000aac:	e09e      	b.n	8000bec <calculateAxisData+0x198>
		else if(*tempAnADC_Value >= joystickBorderPtr -> xRightLow)
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d31c      	bcc.n	8000af4 <calculateAxisData+0xa0>
			*fittedAnAdc_Values = (((int)((*tempAnADC_Value) - (joystickBorderPtr->xRightLow))) * 65535) / (joystickBorderPtr -> xRightRange);
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	041b      	lsls	r3, r3, #16
 8000aca:	1a9b      	subs	r3, r3, r2
 8000acc:	461a      	mov	r2, r3
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values >= 65535)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	f340 8081 	ble.w	8000bec <calculateAxisData+0x198>
				*fittedAnAdc_Values = 65535;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af0:	601a      	str	r2, [r3, #0]
}
 8000af2:	e07b      	b.n	8000bec <calculateAxisData+0x198>
		else if(*tempAnADC_Value < (joystickBorderPtr -> xLeftHigh))
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d275      	bcs.n	8000bec <calculateAxisData+0x198>
			*fittedAnAdc_Values = -((((int)((int)(joystickBorderPtr->xLeftHigh) - (int)(*tempAnADC_Value))) * (int)65535) / (joystickBorderPtr -> xLeftRange));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	461a      	mov	r2, r3
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1ad2      	subs	r2, r2, r3
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	041b      	lsls	r3, r3, #16
 8000b10:	1a9b      	subs	r3, r3, r2
 8000b12:	461a      	mov	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1c:	425b      	negs	r3, r3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values <= 0)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	dc5f      	bgt.n	8000bec <calculateAxisData+0x198>
				*fittedAnAdc_Values = 0;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
}
 8000b32:	e05b      	b.n	8000bec <calculateAxisData+0x198>
		if(*tempAnADC_Value <= joystickBorderPtr->yDownLow)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d806      	bhi.n	8000b4e <calculateAxisData+0xfa>
			errY = GPIO_PIN_SET;
 8000b40:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <calculateAxisData+0x1a8>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
			*fittedAnAdc_Values = 0;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	e04e      	b.n	8000bec <calculateAxisData+0x198>
		else if(*tempAnADC_Value >= joystickBorderPtr->yUpHigh)
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d307      	bcc.n	8000b6a <calculateAxisData+0x116>
			*fittedAnAdc_Values = 65535;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b60:	601a      	str	r2, [r3, #0]
			errY = GPIO_PIN_SET;
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <calculateAxisData+0x1a8>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
}
 8000b68:	e040      	b.n	8000bec <calculateAxisData+0x198>
		else if(*tempAnADC_Value >= joystickBorderPtr -> yUpLow)
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d31b      	bcc.n	8000bae <calculateAxisData+0x15a>
			*fittedAnAdc_Values = (((int)((*tempAnADC_Value) - (joystickBorderPtr->yUpLow))) * 65535) / (joystickBorderPtr -> yUpRange);
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	461a      	mov	r2, r3
 8000b82:	4613      	mov	r3, r2
 8000b84:	041b      	lsls	r3, r3, #16
 8000b86:	1a9b      	subs	r3, r3, r2
 8000b88:	461a      	mov	r2, r3
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values >= 65535)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	dd23      	ble.n	8000bec <calculateAxisData+0x198>
				*fittedAnAdc_Values = 65535;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000baa:	601a      	str	r2, [r3, #0]
}
 8000bac:	e01e      	b.n	8000bec <calculateAxisData+0x198>
		else if(*tempAnADC_Value < (joystickBorderPtr -> yDownHigh))
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d218      	bcs.n	8000bec <calculateAxisData+0x198>
			*fittedAnAdc_Values = -((((int)((int)(joystickBorderPtr->yDownHigh) - (int)(*tempAnADC_Value))) * (int)65535) / (joystickBorderPtr -> yDownRange));
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	1ad2      	subs	r2, r2, r3
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	041b      	lsls	r3, r3, #16
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	461a      	mov	r2, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	6a1b      	ldr	r3, [r3, #32]
 8000bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd6:	425b      	negs	r3, r3
 8000bd8:	461a      	mov	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values <= 0)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	dc02      	bgt.n	8000bec <calculateAxisData+0x198>
				*fittedAnAdc_Values = 0;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
}
 8000bec:	bf00      	nop
 8000bee:	371c      	adds	r7, #28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	200000c9 	.word	0x200000c9
 8000bfc:	200000ca 	.word	0x200000ca

08000c00 <calculateJostickBorders>:
/* calculating joystick borders*/
void calculateJostickBorders(ConfigData* tempConfigData, joystickBorder* tempJoystickBorder)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	ConfigData* configDataPtr;
	configDataPtr = tempConfigData;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	60fb      	str	r3, [r7, #12]

	joystickBorder* joystickBorderPtr;
	joystickBorderPtr = tempJoystickBorder;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	60bb      	str	r3, [r7, #8]

	joystickBorderPtr -> xLeftHigh 		= (configDataPtr -> xMid) - 1;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	88db      	ldrh	r3, [r3, #6]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	461a      	mov	r2, r3
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	605a      	str	r2, [r3, #4]
	joystickBorderPtr -> xLeftLow  		= configDataPtr -> xMin;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	885b      	ldrh	r3, [r3, #2]
 8000c22:	461a      	mov	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	601a      	str	r2, [r3, #0]
	joystickBorderPtr -> xLeftRange 	= (joystickBorderPtr -> xLeftHigh) - (joystickBorderPtr -> xLeftLow);
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	1ad2      	subs	r2, r2, r3
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	609a      	str	r2, [r3, #8]

	joystickBorderPtr -> xRightLow 		= (configDataPtr -> xMid) + 1;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	88db      	ldrh	r3, [r3, #6]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	60da      	str	r2, [r3, #12]
	joystickBorderPtr -> xRightHigh  	= configDataPtr -> xMax;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	889b      	ldrh	r3, [r3, #4]
 8000c46:	461a      	mov	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	611a      	str	r2, [r3, #16]
	joystickBorderPtr -> xRightRange 	= (joystickBorderPtr -> xRightHigh) - (joystickBorderPtr -> xRightLow);
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	691a      	ldr	r2, [r3, #16]
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	1ad2      	subs	r2, r2, r3
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	615a      	str	r2, [r3, #20]

	joystickBorderPtr -> yUpHigh 		= configDataPtr -> yMax;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	895b      	ldrh	r3, [r3, #10]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
	joystickBorderPtr -> yUpLow  		= (configDataPtr -> yMid) + 1;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	899b      	ldrh	r3, [r3, #12]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
	joystickBorderPtr -> yUpRange 		= (joystickBorderPtr -> yUpHigh) - (joystickBorderPtr -> yUpLow);
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c78:	1ad2      	subs	r2, r2, r3
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	62da      	str	r2, [r3, #44]	; 0x2c

	joystickBorderPtr -> yDownLow 		= configDataPtr -> yMin;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	891b      	ldrh	r3, [r3, #8]
 8000c82:	461a      	mov	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	619a      	str	r2, [r3, #24]
	joystickBorderPtr -> yDownHigh  	= (configDataPtr -> yMid) - 1;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	899b      	ldrh	r3, [r3, #12]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	61da      	str	r2, [r3, #28]
	joystickBorderPtr -> yDownRange 	= (joystickBorderPtr -> yDownHigh) - (joystickBorderPtr -> yDownLow);
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	69da      	ldr	r2, [r3, #28]
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	1ad2      	subs	r2, r2, r3
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	621a      	str	r2, [r3, #32]

}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <averageAnalogInputs>:
		@Param 				: none
		@description	:

*/
void averageAnalogInputs(uint32_t* ADC_BUFFERPtr, uint32_t* ADC_READPtr, uint32_t COUNT, uint32_t AVERAGE_WINDOW)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b089      	sub	sp, #36	; 0x24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	603b      	str	r3, [r7, #0]
	uint32_t i = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
	uint32_t* tempADC_BUFFERPtr = ADC_BUFFERPtr;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	61bb      	str	r3, [r7, #24]
	uint32_t* tempADC_READPtr = ADC_READPtr;
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	617b      	str	r3, [r7, #20]

	for(i = 0; i < COUNT; i++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
 8000ccc:	e016      	b.n	8000cfc <averageAnalogInputs+0x4e>
	{
		*tempADC_BUFFERPtr = ((*tempADC_BUFFERPtr)*(AVERAGE_WINDOW - 1) + (*tempADC_READPtr))/AVERAGE_WINDOW;
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	683a      	ldr	r2, [r7, #0]
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	fb03 f202 	mul.w	r2, r3, r2
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	441a      	add	r2, r3
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	601a      	str	r2, [r3, #0]
		tempADC_BUFFERPtr++;
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	3304      	adds	r3, #4
 8000cee:	61bb      	str	r3, [r7, #24]
		tempADC_READPtr++;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	617b      	str	r3, [r7, #20]
	for(i = 0; i < COUNT; i++)
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	61fb      	str	r3, [r7, #28]
 8000cfc:	69fa      	ldr	r2, [r7, #28]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d3e4      	bcc.n	8000cce <averageAnalogInputs+0x20>
	}
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SDADC_ScanConversion>:
		@Param 				: none
		@description	:

*/
void SDADC_ScanConversion(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0


		if(HAL_SDADC_ConfigChannel(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4927      	ldr	r1, [pc, #156]	; (8000db8 <SDADC_ScanConversion+0xa4>)
 8000d1c:	4827      	ldr	r0, [pc, #156]	; (8000dbc <SDADC_ScanConversion+0xa8>)
 8000d1e:	f005 fc7b 	bl	8006618 <HAL_SDADC_ConfigChannel>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SDADC_ScanConversion+0x18>
		{
			Error_Handler();
 8000d28:	f001 fa98 	bl	800225c <Error_Handler>
		}

		HAL_SDADC_Start(&hsdadc1);
 8000d2c:	4823      	ldr	r0, [pc, #140]	; (8000dbc <SDADC_ScanConversion+0xa8>)
 8000d2e:	f005 fdd0 	bl	80068d2 <HAL_SDADC_Start>
		if(HAL_SDADC_PollForConversion(&hsdadc1, 1000) != HAL_OK)
 8000d32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d36:	4821      	ldr	r0, [pc, #132]	; (8000dbc <SDADC_ScanConversion+0xa8>)
 8000d38:	f005 fde6 	bl	8006908 <HAL_SDADC_PollForConversion>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d005      	beq.n	8000d4e <SDADC_ScanConversion+0x3a>
		{
			 SDADCErrorCounter++;
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <SDADC_ScanConversion+0xac>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <SDADC_ScanConversion+0xac>)
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	e008      	b.n	8000d60 <SDADC_ScanConversion+0x4c>
		}
		else
		{
			AnADC_Read[0] = (HAL_SDADC_GetValue(&hsdadc1) + 0x8000) & 0xFFFF;
 8000d4e:	481b      	ldr	r0, [pc, #108]	; (8000dbc <SDADC_ScanConversion+0xa8>)
 8000d50:	f005 fe4f 	bl	80069f2 <HAL_SDADC_GetValue>
 8000d54:	4603      	mov	r3, r0
 8000d56:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	4a19      	ldr	r2, [pc, #100]	; (8000dc4 <SDADC_ScanConversion+0xb0>)
 8000d5e:	6013      	str	r3, [r2, #0]

		}
		HAL_SDADC_Stop(&hsdadc1);
 8000d60:	4816      	ldr	r0, [pc, #88]	; (8000dbc <SDADC_ScanConversion+0xa8>)
 8000d62:	f005 fe2b 	bl	80069bc <HAL_SDADC_Stop>

		if(HAL_SDADC_ConfigChannel(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
 8000d66:	2201      	movs	r2, #1
 8000d68:	4917      	ldr	r1, [pc, #92]	; (8000dc8 <SDADC_ScanConversion+0xb4>)
 8000d6a:	4814      	ldr	r0, [pc, #80]	; (8000dbc <SDADC_ScanConversion+0xa8>)
 8000d6c:	f005 fc54 	bl	8006618 <HAL_SDADC_ConfigChannel>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SDADC_ScanConversion+0x66>
		{
			Error_Handler();
 8000d76:	f001 fa71 	bl	800225c <Error_Handler>
		}

		HAL_SDADC_Start(&hsdadc1);
 8000d7a:	4810      	ldr	r0, [pc, #64]	; (8000dbc <SDADC_ScanConversion+0xa8>)
 8000d7c:	f005 fda9 	bl	80068d2 <HAL_SDADC_Start>
		if(HAL_SDADC_PollForConversion(&hsdadc1, 1000) != HAL_OK)
 8000d80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <SDADC_ScanConversion+0xa8>)
 8000d86:	f005 fdbf 	bl	8006908 <HAL_SDADC_PollForConversion>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d005      	beq.n	8000d9c <SDADC_ScanConversion+0x88>
		{
			 SDADCErrorCounter++;
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <SDADC_ScanConversion+0xac>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <SDADC_ScanConversion+0xac>)
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e008      	b.n	8000dae <SDADC_ScanConversion+0x9a>
		}
		else
		{
			AnADC_Read[1] = (HAL_SDADC_GetValue(&hsdadc1) + 0x8000) & 0xFFFF;
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <SDADC_ScanConversion+0xa8>)
 8000d9e:	f005 fe28 	bl	80069f2 <HAL_SDADC_GetValue>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <SDADC_ScanConversion+0xb0>)
 8000dac:	6053      	str	r3, [r2, #4]
		}
		HAL_SDADC_Stop(&hsdadc1);
 8000dae:	4803      	ldr	r0, [pc, #12]	; (8000dbc <SDADC_ScanConversion+0xa8>)
 8000db0:	f005 fe04 	bl	80069bc <HAL_SDADC_Stop>

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	00040010 	.word	0x00040010
 8000dbc:	200004e4 	.word	0x200004e4
 8000dc0:	200000e4 	.word	0x200000e4
 8000dc4:	200000cc 	.word	0x200000cc
 8000dc8:	00050020 	.word	0x00050020

08000dcc <initDigitalInputs>:
				readFlag = false;
				readState = GPIO_PIN_RESET;
*/

void initDigitalInputs(digitalInput *digitalInputPtr)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	/****************************************************
	***	CUSTOM VALUES SHOULD BE INITIALIZED MANUALLY	***
	****************************************************/
	tutamakDigitalInputs[0].inputPin 	= BTN_01_Pin;
 8000dd4:	4b97      	ldr	r3, [pc, #604]	; (8001034 <initDigitalInputs+0x268>)
 8000dd6:	2220      	movs	r2, #32
 8000dd8:	805a      	strh	r2, [r3, #2]
	tutamakDigitalInputs[0].inputPort	= BTN_01_GPIO_Port;
 8000dda:	4b96      	ldr	r3, [pc, #600]	; (8001034 <initDigitalInputs+0x268>)
 8000ddc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000de0:	605a      	str	r2, [r3, #4]
	tutamakDigitalInputs[1].inputPin 	= BTN_02_Pin;
 8000de2:	4b94      	ldr	r3, [pc, #592]	; (8001034 <initDigitalInputs+0x268>)
 8000de4:	2240      	movs	r2, #64	; 0x40
 8000de6:	82da      	strh	r2, [r3, #22]
	tutamakDigitalInputs[1].inputPort	= BTN_02_GPIO_Port;
 8000de8:	4b92      	ldr	r3, [pc, #584]	; (8001034 <initDigitalInputs+0x268>)
 8000dea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dee:	619a      	str	r2, [r3, #24]
	tutamakDigitalInputs[2].inputPin 	= BTN_03_Pin;
 8000df0:	4b90      	ldr	r3, [pc, #576]	; (8001034 <initDigitalInputs+0x268>)
 8000df2:	2208      	movs	r2, #8
 8000df4:	855a      	strh	r2, [r3, #42]	; 0x2a
	tutamakDigitalInputs[2].inputPort	= BTN_03_GPIO_Port;
 8000df6:	4b8f      	ldr	r3, [pc, #572]	; (8001034 <initDigitalInputs+0x268>)
 8000df8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dfc:	62da      	str	r2, [r3, #44]	; 0x2c
	tutamakDigitalInputs[3].inputPin 	= BTN_04_Pin;
 8000dfe:	4b8d      	ldr	r3, [pc, #564]	; (8001034 <initDigitalInputs+0x268>)
 8000e00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e04:	87da      	strh	r2, [r3, #62]	; 0x3e
	tutamakDigitalInputs[3].inputPort	= BTN_04_GPIO_Port;
 8000e06:	4b8b      	ldr	r3, [pc, #556]	; (8001034 <initDigitalInputs+0x268>)
 8000e08:	4a8b      	ldr	r2, [pc, #556]	; (8001038 <initDigitalInputs+0x26c>)
 8000e0a:	641a      	str	r2, [r3, #64]	; 0x40
	tutamakDigitalInputs[4].inputPin 	= BTN_05_Pin;
 8000e0c:	4b89      	ldr	r3, [pc, #548]	; (8001034 <initDigitalInputs+0x268>)
 8000e0e:	2202      	movs	r2, #2
 8000e10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	tutamakDigitalInputs[4].inputPort	= BTN_05_GPIO_Port;
 8000e14:	4b87      	ldr	r3, [pc, #540]	; (8001034 <initDigitalInputs+0x268>)
 8000e16:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e1a:	655a      	str	r2, [r3, #84]	; 0x54
	tutamakDigitalInputs[5].inputPin 	= BTN_06_Pin;
 8000e1c:	4b85      	ldr	r3, [pc, #532]	; (8001034 <initDigitalInputs+0x268>)
 8000e1e:	2204      	movs	r2, #4
 8000e20:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	tutamakDigitalInputs[5].inputPort	= BTN_06_GPIO_Port;
 8000e24:	4b83      	ldr	r3, [pc, #524]	; (8001034 <initDigitalInputs+0x268>)
 8000e26:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e2a:	669a      	str	r2, [r3, #104]	; 0x68
	tutamakDigitalInputs[6].inputPin 	= BTN_07_Pin;
 8000e2c:	4b81      	ldr	r3, [pc, #516]	; (8001034 <initDigitalInputs+0x268>)
 8000e2e:	2208      	movs	r2, #8
 8000e30:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	tutamakDigitalInputs[6].inputPort	= BTN_07_GPIO_Port;
 8000e34:	4b7f      	ldr	r3, [pc, #508]	; (8001034 <initDigitalInputs+0x268>)
 8000e36:	4a81      	ldr	r2, [pc, #516]	; (800103c <initDigitalInputs+0x270>)
 8000e38:	67da      	str	r2, [r3, #124]	; 0x7c
	tutamakDigitalInputs[7].inputPin 	= BTN_08_Pin;
 8000e3a:	4b7e      	ldr	r3, [pc, #504]	; (8001034 <initDigitalInputs+0x268>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	tutamakDigitalInputs[7].inputPort	= BTN_08_GPIO_Port;
 8000e42:	4b7c      	ldr	r3, [pc, #496]	; (8001034 <initDigitalInputs+0x268>)
 8000e44:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	tutamakDigitalInputs[8].inputPin 	= BTN_09_Pin;
 8000e4c:	4b79      	ldr	r3, [pc, #484]	; (8001034 <initDigitalInputs+0x268>)
 8000e4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e52:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	tutamakDigitalInputs[8].inputPort	= BTN_09_GPIO_Port;
 8000e56:	4b77      	ldr	r3, [pc, #476]	; (8001034 <initDigitalInputs+0x268>)
 8000e58:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	tutamakDigitalInputs[9].inputPin 	= BTN_10_Pin;
 8000e60:	4b74      	ldr	r3, [pc, #464]	; (8001034 <initDigitalInputs+0x268>)
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	tutamakDigitalInputs[9].inputPort	= BTN_10_GPIO_Port;
 8000e68:	4b72      	ldr	r3, [pc, #456]	; (8001034 <initDigitalInputs+0x268>)
 8000e6a:	4a75      	ldr	r2, [pc, #468]	; (8001040 <initDigitalInputs+0x274>)
 8000e6c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	tutamakDigitalInputs[10].inputPin 	= BTN_11_Pin;
 8000e70:	4b70      	ldr	r3, [pc, #448]	; (8001034 <initDigitalInputs+0x268>)
 8000e72:	2240      	movs	r2, #64	; 0x40
 8000e74:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	tutamakDigitalInputs[10].inputPort	= BTN_11_GPIO_Port;
 8000e78:	4b6e      	ldr	r3, [pc, #440]	; (8001034 <initDigitalInputs+0x268>)
 8000e7a:	4a71      	ldr	r2, [pc, #452]	; (8001040 <initDigitalInputs+0x274>)
 8000e7c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	tutamakDigitalInputs[11].inputPin 	= BTN_12_Pin;
 8000e80:	4b6c      	ldr	r3, [pc, #432]	; (8001034 <initDigitalInputs+0x268>)
 8000e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e86:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
	tutamakDigitalInputs[11].inputPort	= BTN_12_GPIO_Port;
 8000e8a:	4b6a      	ldr	r3, [pc, #424]	; (8001034 <initDigitalInputs+0x268>)
 8000e8c:	4a6b      	ldr	r2, [pc, #428]	; (800103c <initDigitalInputs+0x270>)
 8000e8e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	tutamakDigitalInputs[12].inputPin 	= BTN_13_Pin;
 8000e92:	4b68      	ldr	r3, [pc, #416]	; (8001034 <initDigitalInputs+0x268>)
 8000e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e98:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
	tutamakDigitalInputs[12].inputPort	= BTN_13_GPIO_Port;
 8000e9c:	4b65      	ldr	r3, [pc, #404]	; (8001034 <initDigitalInputs+0x268>)
 8000e9e:	4a67      	ldr	r2, [pc, #412]	; (800103c <initDigitalInputs+0x270>)
 8000ea0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	tutamakDigitalInputs[13].inputPin 	= BTN_14_Pin;
 8000ea4:	4b63      	ldr	r3, [pc, #396]	; (8001034 <initDigitalInputs+0x268>)
 8000ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eaa:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	tutamakDigitalInputs[13].inputPort	= BTN_14_GPIO_Port;
 8000eae:	4b61      	ldr	r3, [pc, #388]	; (8001034 <initDigitalInputs+0x268>)
 8000eb0:	4a64      	ldr	r2, [pc, #400]	; (8001044 <initDigitalInputs+0x278>)
 8000eb2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	tutamakDigitalInputs[14].inputPin 	= BTN_15_Pin;
 8000eb6:	4b5f      	ldr	r3, [pc, #380]	; (8001034 <initDigitalInputs+0x268>)
 8000eb8:	2240      	movs	r2, #64	; 0x40
 8000eba:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	tutamakDigitalInputs[14].inputPort	= BTN_15_GPIO_Port;
 8000ebe:	4b5d      	ldr	r3, [pc, #372]	; (8001034 <initDigitalInputs+0x268>)
 8000ec0:	4a5e      	ldr	r2, [pc, #376]	; (800103c <initDigitalInputs+0x270>)
 8000ec2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	tutamakDigitalInputs[15].inputPin 	= BTN_16_Pin;
 8000ec6:	4b5b      	ldr	r3, [pc, #364]	; (8001034 <initDigitalInputs+0x268>)
 8000ec8:	2280      	movs	r2, #128	; 0x80
 8000eca:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
	tutamakDigitalInputs[15].inputPort	= BTN_16_GPIO_Port;
 8000ece:	4b59      	ldr	r3, [pc, #356]	; (8001034 <initDigitalInputs+0x268>)
 8000ed0:	4a5a      	ldr	r2, [pc, #360]	; (800103c <initDigitalInputs+0x270>)
 8000ed2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	tutamakDigitalInputs[16].inputPin 	= BTN_17_Pin;
 8000ed6:	4b57      	ldr	r3, [pc, #348]	; (8001034 <initDigitalInputs+0x268>)
 8000ed8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000edc:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
	tutamakDigitalInputs[16].inputPort	= BTN_17_GPIO_Port;
 8000ee0:	4b54      	ldr	r3, [pc, #336]	; (8001034 <initDigitalInputs+0x268>)
 8000ee2:	4a56      	ldr	r2, [pc, #344]	; (800103c <initDigitalInputs+0x270>)
 8000ee4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	tutamakDigitalInputs[17].inputPin 	= BTN_18_Pin;
 8000ee8:	4b52      	ldr	r3, [pc, #328]	; (8001034 <initDigitalInputs+0x268>)
 8000eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eee:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
	tutamakDigitalInputs[17].inputPort	= BTN_18_GPIO_Port;
 8000ef2:	4b50      	ldr	r3, [pc, #320]	; (8001034 <initDigitalInputs+0x268>)
 8000ef4:	4a51      	ldr	r2, [pc, #324]	; (800103c <initDigitalInputs+0x270>)
 8000ef6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	tutamakDigitalInputs[18].inputPin 	= BTN_19_Pin;
 8000efa:	4b4e      	ldr	r3, [pc, #312]	; (8001034 <initDigitalInputs+0x268>)
 8000efc:	2210      	movs	r2, #16
 8000efe:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
	tutamakDigitalInputs[18].inputPort	= BTN_19_GPIO_Port;
 8000f02:	4b4c      	ldr	r3, [pc, #304]	; (8001034 <initDigitalInputs+0x268>)
 8000f04:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f08:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	tutamakDigitalInputs[19].inputPin 	= BTN_20_Pin;
 8000f0c:	4b49      	ldr	r3, [pc, #292]	; (8001034 <initDigitalInputs+0x268>)
 8000f0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f12:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e
	tutamakDigitalInputs[19].inputPort	= BTN_20_GPIO_Port;
 8000f16:	4b47      	ldr	r3, [pc, #284]	; (8001034 <initDigitalInputs+0x268>)
 8000f18:	4a47      	ldr	r2, [pc, #284]	; (8001038 <initDigitalInputs+0x26c>)
 8000f1a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	tutamakDigitalInputs[20].inputPin 	= BTN_21_Pin;
 8000f1e:	4b45      	ldr	r3, [pc, #276]	; (8001034 <initDigitalInputs+0x268>)
 8000f20:	2202      	movs	r2, #2
 8000f22:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
	tutamakDigitalInputs[20].inputPort	= BTN_21_GPIO_Port;
 8000f26:	4b43      	ldr	r3, [pc, #268]	; (8001034 <initDigitalInputs+0x268>)
 8000f28:	4a44      	ldr	r2, [pc, #272]	; (800103c <initDigitalInputs+0x270>)
 8000f2a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	tutamakDigitalInputs[21].inputPin 	= BTN_22_Pin;
 8000f2e:	4b41      	ldr	r3, [pc, #260]	; (8001034 <initDigitalInputs+0x268>)
 8000f30:	2204      	movs	r2, #4
 8000f32:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
	tutamakDigitalInputs[21].inputPort	= BTN_22_GPIO_Port;
 8000f36:	4b3f      	ldr	r3, [pc, #252]	; (8001034 <initDigitalInputs+0x268>)
 8000f38:	4a40      	ldr	r2, [pc, #256]	; (800103c <initDigitalInputs+0x270>)
 8000f3a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	tutamakDigitalInputs[22].inputPin 	= BTN_23_Pin;
 8000f3e:	4b3d      	ldr	r3, [pc, #244]	; (8001034 <initDigitalInputs+0x268>)
 8000f40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f44:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
	tutamakDigitalInputs[22].inputPort	= BTN_23_GPIO_Port;
 8000f48:	4b3a      	ldr	r3, [pc, #232]	; (8001034 <initDigitalInputs+0x268>)
 8000f4a:	4a3c      	ldr	r2, [pc, #240]	; (800103c <initDigitalInputs+0x270>)
 8000f4c:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	tutamakDigitalInputs[23].inputPin 	= BTN_24_Pin;
 8000f50:	4b38      	ldr	r3, [pc, #224]	; (8001034 <initDigitalInputs+0x268>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
	tutamakDigitalInputs[23].inputPort	= BTN_24_GPIO_Port;
 8000f58:	4b36      	ldr	r3, [pc, #216]	; (8001034 <initDigitalInputs+0x268>)
 8000f5a:	4a38      	ldr	r2, [pc, #224]	; (800103c <initDigitalInputs+0x270>)
 8000f5c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	tutamakDigitalInputs[24].inputPin 	= BTN_25_Pin;
 8000f60:	4b34      	ldr	r3, [pc, #208]	; (8001034 <initDigitalInputs+0x268>)
 8000f62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f66:	f8a3 21e2 	strh.w	r2, [r3, #482]	; 0x1e2
	tutamakDigitalInputs[24].inputPort	= BTN_25_GPIO_Port;
 8000f6a:	4b32      	ldr	r3, [pc, #200]	; (8001034 <initDigitalInputs+0x268>)
 8000f6c:	4a33      	ldr	r2, [pc, #204]	; (800103c <initDigitalInputs+0x270>)
 8000f6e:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	tutamakDigitalInputs[25].inputPin 	= BTN_26_Pin;
 8000f72:	4b30      	ldr	r3, [pc, #192]	; (8001034 <initDigitalInputs+0x268>)
 8000f74:	2208      	movs	r2, #8
 8000f76:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
	tutamakDigitalInputs[25].inputPort	= BTN_26_GPIO_Port;
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <initDigitalInputs+0x268>)
 8000f7c:	4a2e      	ldr	r2, [pc, #184]	; (8001038 <initDigitalInputs+0x26c>)
 8000f7e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	tutamakDigitalInputs[26].inputPin 	= BTN_27_Pin;
 8000f82:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <initDigitalInputs+0x268>)
 8000f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f88:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
	tutamakDigitalInputs[26].inputPort	= BTN_27_GPIO_Port;
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <initDigitalInputs+0x268>)
 8000f8e:	4a2b      	ldr	r2, [pc, #172]	; (800103c <initDigitalInputs+0x270>)
 8000f90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tutamakDigitalInputs[27].inputPin 	= BTN_28_Pin;
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <initDigitalInputs+0x268>)
 8000f96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f9a:	f8a3 221e 	strh.w	r2, [r3, #542]	; 0x21e
	tutamakDigitalInputs[27].inputPort	= BTN_28_GPIO_Port;
 8000f9e:	4b25      	ldr	r3, [pc, #148]	; (8001034 <initDigitalInputs+0x268>)
 8000fa0:	4a26      	ldr	r2, [pc, #152]	; (800103c <initDigitalInputs+0x270>)
 8000fa2:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	tutamakDigitalInputs[28].inputPin 	= BTN_29_Pin;
 8000fa6:	4b23      	ldr	r3, [pc, #140]	; (8001034 <initDigitalInputs+0x268>)
 8000fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fac:	f8a3 2232 	strh.w	r2, [r3, #562]	; 0x232
	tutamakDigitalInputs[28].inputPort	= BTN_29_GPIO_Port;
 8000fb0:	4b20      	ldr	r3, [pc, #128]	; (8001034 <initDigitalInputs+0x268>)
 8000fb2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fb6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	tutamakDigitalInputs[29].inputPin 	= BTN_30_Pin;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <initDigitalInputs+0x268>)
 8000fbc:	2240      	movs	r2, #64	; 0x40
 8000fbe:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
	tutamakDigitalInputs[29].inputPort	= BTN_30_GPIO_Port;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <initDigitalInputs+0x268>)
 8000fc4:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <initDigitalInputs+0x26c>)
 8000fc6:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	tutamakDigitalInputs[30].inputPin 	= BTN_31_Pin;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <initDigitalInputs+0x268>)
 8000fcc:	2220      	movs	r2, #32
 8000fce:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
	tutamakDigitalInputs[30].inputPort	= BTN_31_GPIO_Port;
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <initDigitalInputs+0x268>)
 8000fd4:	4a18      	ldr	r2, [pc, #96]	; (8001038 <initDigitalInputs+0x26c>)
 8000fd6:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	tutamakDigitalInputs[31].inputPin 	= BTN_32_Pin;
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <initDigitalInputs+0x268>)
 8000fdc:	2210      	movs	r2, #16
 8000fde:	f8a3 226e 	strh.w	r2, [r3, #622]	; 0x26e
	tutamakDigitalInputs[31].inputPort	= BTN_32_GPIO_Port;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <initDigitalInputs+0x268>)
 8000fe4:	4a14      	ldr	r2, [pc, #80]	; (8001038 <initDigitalInputs+0x26c>)
 8000fe6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	/***************************************************/

	uint32_t i;
	digitalInput* tempDigitalInputPtr = digitalInputPtr;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < BUTTON_COUNT; i++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e014      	b.n	800101e <initDigitalInputs+0x252>
	{
		tempDigitalInputPtr	->	inputVal = GPIO_PIN_RESET;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
		tempDigitalInputPtr	->	readFlag = false;
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	705a      	strb	r2, [r3, #1]
		tempDigitalInputPtr ->  readState= GPIO_PIN_RESET;
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	2200      	movs	r2, #0
 8001004:	721a      	strb	r2, [r3, #8]
		tempDigitalInputPtr ->  debounceTimer = 0;
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
		//for prototype debounce factor
		tempDigitalInputPtr ->  debounceFactor = 20; /*!!!!!!!!!!!!! config structtan cekilecek !!!!!!!!!!!!!!!!!*/
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	2214      	movs	r2, #20
 8001010:	611a      	str	r2, [r3, #16]
		tempDigitalInputPtr++;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	3314      	adds	r3, #20
 8001016:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < BUTTON_COUNT; i++)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b1f      	cmp	r3, #31
 8001022:	d9e7      	bls.n	8000ff4 <initDigitalInputs+0x228>
	}

}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200000e8 	.word	0x200000e8
 8001038:	48000400 	.word	0x48000400
 800103c:	48000800 	.word	0x48000800
 8001040:	48001400 	.word	0x48001400
 8001044:	48000c00 	.word	0x48000c00

08001048 <sampleDigitalInputs>:
		@description	:

*/

void sampleDigitalInputs(digitalInput *digitalInputPtr)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	digitalInput* tempDigitalInputPtr = digitalInputPtr;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < BUTTON_COUNT; i++)
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	e053      	b.n	8001102 <sampleDigitalInputs+0xba>
	{
		if(tempDigitalInputPtr -> readFlag == true)
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d04c      	beq.n	80010fc <sampleDigitalInputs+0xb4>
		{
			if(tempDigitalInputPtr -> readState == GPIO_PIN_RESET)
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	7a1b      	ldrb	r3, [r3, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d11f      	bne.n	80010aa <sampleDigitalInputs+0x62>
			{
				if(tempDigitalInputPtr -> inputVal == GPIO_PIN_RESET)
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d117      	bne.n	80010a2 <sampleDigitalInputs+0x5a>
				{
					if(tempDigitalInputPtr -> debounceTimer < tempDigitalInputPtr -> debounceFactor)
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	429a      	cmp	r2, r3
 800107c:	d204      	bcs.n	8001088 <sampleDigitalInputs+0x40>
					{
						tempDigitalInputPtr -> debounceTimer++;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60da      	str	r2, [r3, #12]
					}
					if(tempDigitalInputPtr ->debounceTimer >= tempDigitalInputPtr ->debounceFactor)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	429a      	cmp	r2, r3
 8001092:	d32d      	bcc.n	80010f0 <sampleDigitalInputs+0xa8>
					{
						tempDigitalInputPtr -> debounceTimer = 0;
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
						tempDigitalInputPtr -> readState = GPIO_PIN_SET;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	2201      	movs	r2, #1
 800109e:	721a      	strb	r2, [r3, #8]
 80010a0:	e026      	b.n	80010f0 <sampleDigitalInputs+0xa8>
					}
				}
				else
				{
					tempDigitalInputPtr -> debounceTimer = 0;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	e022      	b.n	80010f0 <sampleDigitalInputs+0xa8>
				}
			}

			else if(tempDigitalInputPtr -> readState == GPIO_PIN_SET)
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	7a1b      	ldrb	r3, [r3, #8]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d11e      	bne.n	80010f0 <sampleDigitalInputs+0xa8>
			{
				if(tempDigitalInputPtr -> inputVal == GPIO_PIN_SET)
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d117      	bne.n	80010ea <sampleDigitalInputs+0xa2>
				{
					if(tempDigitalInputPtr -> debounceTimer < tempDigitalInputPtr -> debounceFactor)
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d204      	bcs.n	80010d0 <sampleDigitalInputs+0x88>
					{
						tempDigitalInputPtr -> debounceTimer++;
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	60da      	str	r2, [r3, #12]
					}
					if(tempDigitalInputPtr ->debounceTimer >= tempDigitalInputPtr ->debounceFactor)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d309      	bcc.n	80010f0 <sampleDigitalInputs+0xa8>
					{
						tempDigitalInputPtr -> debounceTimer = 0;
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
						tempDigitalInputPtr -> readState = GPIO_PIN_RESET;
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	2200      	movs	r2, #0
 80010e6:	721a      	strb	r2, [r3, #8]
 80010e8:	e002      	b.n	80010f0 <sampleDigitalInputs+0xa8>
					}
				}
				else
				{
					tempDigitalInputPtr -> debounceTimer = 0;
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
				}
			}

			tempDigitalInputPtr   ->  readFlag = false;
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	2200      	movs	r2, #0
 80010f4:	705a      	strb	r2, [r3, #1]

			tempDigitalInputPtr++;
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	3314      	adds	r3, #20
 80010fa:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < BUTTON_COUNT; i++)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3301      	adds	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b1f      	cmp	r3, #31
 8001106:	d9a8      	bls.n	800105a <sampleDigitalInputs+0x12>
		}
	}
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <readDigitalInputs>:
/** @brief 				: function to read digital inputs sequantially
	* @param 	uint8_t DIN_NUMBER number of digital inputs to read
	* @retval None
	*/
void readDigitalInputs(digitalInput *digitalInputPtr)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
	uint32_t i;
	digitalInput* tempDigitalInputPtr = digitalInputPtr;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60bb      	str	r3, [r7, #8]

	for(i=0;i<BUTTON_COUNT;i++)
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	e014      	b.n	8001152 <readDigitalInputs+0x3c>
	{
		tempDigitalInputPtr		->		inputVal = HAL_GPIO_ReadPin(tempDigitalInputPtr->inputPort, tempDigitalInputPtr->inputPin);
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	885b      	ldrh	r3, [r3, #2]
 8001130:	4619      	mov	r1, r3
 8001132:	4610      	mov	r0, r2
 8001134:	f003 fca4 	bl	8004a80 <HAL_GPIO_ReadPin>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	701a      	strb	r2, [r3, #0]
		tempDigitalInputPtr		->		readFlag = true;
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2201      	movs	r2, #1
 8001144:	705a      	strb	r2, [r3, #1]
		tempDigitalInputPtr++;
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	3314      	adds	r3, #20
 800114a:	60bb      	str	r3, [r7, #8]
	for(i=0;i<BUTTON_COUNT;i++)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3301      	adds	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2b1f      	cmp	r3, #31
 8001156:	d9e7      	bls.n	8001128 <readDigitalInputs+0x12>
	}
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <getDigitalInputs>:
		@description	:

*/

digitalInput* getDigitalInputs(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
		return &tutamakDigitalInputs[0];
 8001168:	4b02      	ldr	r3, [pc, #8]	; (8001174 <getDigitalInputs+0x10>)
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	200000e8 	.word	0x200000e8

08001178 <sendUartFrame>:
		@Param 				: ----
		@description	: ----

*/
void sendUartFrame(UART_HandleTypeDef *huart,uint8_t* rs422Frame_, uint16_t Size, uint32_t Timeout, bool* sendFlag)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	4613      	mov	r3, r2
 8001186:	80fb      	strh	r3, [r7, #6]
	unsigned int i;
	if(*sendFlag == true && tutamakVersion == ASELSAN)
 8001188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 8103 	beq.w	8001398 <sendUartFrame+0x220>
 8001192:	4b7b      	ldr	r3, [pc, #492]	; (8001380 <sendUartFrame+0x208>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	f083 0301 	eor.w	r3, r3, #1
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 80fb 	beq.w	8001398 <sendUartFrame+0x220>
	{
		rs422Frame_[0] = RS422_HEADER;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	22b5      	movs	r2, #181	; 0xb5
 80011a6:	701a      	strb	r2, [r3, #0]


		rs422Frame_[1] = 0x00 |
					   ( tutamakDigitalInputs[14].readState << 2) 	|									//SW4-DOWN
 80011a8:	4b76      	ldr	r3, [pc, #472]	; (8001384 <sendUartFrame+0x20c>)
 80011aa:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
		rs422Frame_[1] = 0x00 |
 80011ae:	009b      	lsls	r3, r3, #2
					   ( tutamakDigitalInputs[14].readState << 2) 	|									//SW4-DOWN
 80011b0:	b25a      	sxtb	r2, r3
					   ( tutamakDigitalInputs[12].readState << 3) 	|									//SW4-UP
 80011b2:	4b74      	ldr	r3, [pc, #464]	; (8001384 <sendUartFrame+0x20c>)
 80011b4:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 80011b8:	00db      	lsls	r3, r3, #3
					   ( tutamakDigitalInputs[14].readState << 2) 	|									//SW4-DOWN
 80011ba:	b25b      	sxtb	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b25a      	sxtb	r2, r3
					   (((~(tutamakDigitalInputs[0].readState)) << 4) & 0x10);							//SW1
 80011c0:	4b70      	ldr	r3, [pc, #448]	; (8001384 <sendUartFrame+0x20c>)
 80011c2:	7a1b      	ldrb	r3, [r3, #8]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	b25b      	sxtb	r3, r3
					   ( tutamakDigitalInputs[12].readState << 3) 	|									//SW4-UP
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b25a      	sxtb	r2, r3
		rs422Frame_[1] = 0x00 |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	3301      	adds	r3, #1
					   ( tutamakDigitalInputs[12].readState << 3) 	|									//SW4-UP
 80011d8:	b2d2      	uxtb	r2, r2
		rs422Frame_[1] = 0x00 |
 80011da:	701a      	strb	r2, [r3, #0]

		rs422Frame_[2] = 0x00 |
						(((~(tutamakDigitalInputs[11].readState)) << 0) & 0x01)	| 						//SW7
 80011dc:	4b69      	ldr	r3, [pc, #420]	; (8001384 <sendUartFrame+0x20c>)
 80011de:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80011e2:	f003 0301 	and.w	r3, r3, #1
		rs422Frame_[2] = 0x00 |
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf0c      	ite	eq
 80011ea:	2301      	moveq	r3, #1
 80011ec:	2300      	movne	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	b25a      	sxtb	r2, r3
							(tutamakDigitalInputs[9].readState << 2) 			|						//SW6
 80011f2:	4b64      	ldr	r3, [pc, #400]	; (8001384 <sendUartFrame+0x20c>)
 80011f4:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80011f8:	009b      	lsls	r3, r3, #2
						(((~(tutamakDigitalInputs[11].readState)) << 0) & 0x01)	| 						//SW7
 80011fa:	b25b      	sxtb	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b25a      	sxtb	r2, r3
							(tutamakDigitalInputs[2].readState << 4);									//SW2
 8001200:	4b60      	ldr	r3, [pc, #384]	; (8001384 <sendUartFrame+0x20c>)
 8001202:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001206:	011b      	lsls	r3, r3, #4
							(tutamakDigitalInputs[9].readState << 2) 			|						//SW6
 8001208:	b25b      	sxtb	r3, r3
 800120a:	4313      	orrs	r3, r2
 800120c:	b25a      	sxtb	r2, r3
		rs422Frame_[2] = 0x00 |
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	3302      	adds	r3, #2
							(tutamakDigitalInputs[9].readState << 2) 			|						//SW6
 8001212:	b2d2      	uxtb	r2, r2
		rs422Frame_[2] = 0x00 |
 8001214:	701a      	strb	r2, [r3, #0]

		rs422Frame_[3] = (tutamakDigitalInputs[7].readState) 		|									//SW5-RIGHT
 8001216:	4b5b      	ldr	r3, [pc, #364]	; (8001384 <sendUartFrame+0x20c>)
 8001218:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800121c:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[5].readState << 1) 	|									//SW5-LEFT
 800121e:	4b59      	ldr	r3, [pc, #356]	; (8001384 <sendUartFrame+0x20c>)
 8001220:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001224:	005b      	lsls	r3, r3, #1
		rs422Frame_[3] = (tutamakDigitalInputs[7].readState) 		|									//SW5-RIGHT
 8001226:	b25b      	sxtb	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[3].readState << 2) 	|									//SW5-DOWN
 800122c:	4b55      	ldr	r3, [pc, #340]	; (8001384 <sendUartFrame+0x20c>)
 800122e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001232:	009b      	lsls	r3, r3, #2
						 (tutamakDigitalInputs[5].readState << 1) 	|									//SW5-LEFT
 8001234:	b25b      	sxtb	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[1].readState << 3) 	|									//SW5-UP
 800123a:	4b52      	ldr	r3, [pc, #328]	; (8001384 <sendUartFrame+0x20c>)
 800123c:	7f1b      	ldrb	r3, [r3, #28]
 800123e:	00db      	lsls	r3, r3, #3
						 (tutamakDigitalInputs[3].readState << 2) 	|									//SW5-DOWN
 8001240:	b25b      	sxtb	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[10].readState << 4)	|									//SW3-RIGHT
 8001246:	4b4f      	ldr	r3, [pc, #316]	; (8001384 <sendUartFrame+0x20c>)
 8001248:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 800124c:	011b      	lsls	r3, r3, #4
						 (tutamakDigitalInputs[1].readState << 3) 	|									//SW5-UP
 800124e:	b25b      	sxtb	r3, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[8].readState << 5)	|									//SW3-LEFT
 8001254:	4b4b      	ldr	r3, [pc, #300]	; (8001384 <sendUartFrame+0x20c>)
 8001256:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800125a:	015b      	lsls	r3, r3, #5
						 (tutamakDigitalInputs[10].readState << 4)	|									//SW3-RIGHT
 800125c:	b25b      	sxtb	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[6].readState << 6)	|									//SW3-DOWN
 8001262:	4b48      	ldr	r3, [pc, #288]	; (8001384 <sendUartFrame+0x20c>)
 8001264:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001268:	019b      	lsls	r3, r3, #6
						 (tutamakDigitalInputs[8].readState << 5)	|									//SW3-LEFT
 800126a:	b25b      	sxtb	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[4].readState << 7);										//SW3-UP
 8001270:	4b44      	ldr	r3, [pc, #272]	; (8001384 <sendUartFrame+0x20c>)
 8001272:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001276:	01db      	lsls	r3, r3, #7
						 (tutamakDigitalInputs[6].readState << 6)	|									//SW3-DOWN
 8001278:	b25b      	sxtb	r3, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	b25a      	sxtb	r2, r3
		rs422Frame_[3] = (tutamakDigitalInputs[7].readState) 		|									//SW5-RIGHT
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	3303      	adds	r3, #3
						 (tutamakDigitalInputs[6].readState << 6)	|									//SW3-DOWN
 8001282:	b2d2      	uxtb	r2, r2
		rs422Frame_[3] = (tutamakDigitalInputs[7].readState) 		|									//SW5-RIGHT
 8001284:	701a      	strb	r2, [r3, #0]

		if(remoteMode == 0)
 8001286:	4b40      	ldr	r3, [pc, #256]	; (8001388 <sendUartFrame+0x210>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d11a      	bne.n	80012c4 <sendUartFrame+0x14c>
		{
			//AnADC_Values[0]=( AnADC_Values[0] >> 3) & 0x1FFF;
			//AnADC_Values[1]=( AnADC_Values[1] >> 3) & 0x1FFF;

			rs422Frame_[4] = (AnADC_Values[0] >> 8) & 0xFF;// & 0x1F;			//AN2_7-0
 800128e:	4b3f      	ldr	r3, [pc, #252]	; (800138c <sendUartFrame+0x214>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	0a1a      	lsrs	r2, r3, #8
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	3304      	adds	r3, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	701a      	strb	r2, [r3, #0]
			rs422Frame_[5] =  AnADC_Values[0]       & 0xFF; 					//AN2_15-8
 800129c:	4b3b      	ldr	r3, [pc, #236]	; (800138c <sendUartFrame+0x214>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	3305      	adds	r3, #5
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	701a      	strb	r2, [r3, #0]

			rs422Frame_[6] = (AnADC_Values[1] >> 8) & 0xFF;      				//AN3_7-0
 80012a8:	4b38      	ldr	r3, [pc, #224]	; (800138c <sendUartFrame+0x214>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	0a1a      	lsrs	r2, r3, #8
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	3306      	adds	r3, #6
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	701a      	strb	r2, [r3, #0]
			rs422Frame_[7] =  AnADC_Values[1]       & 0xFF; 					//AN3_15-8
 80012b6:	4b35      	ldr	r3, [pc, #212]	; (800138c <sendUartFrame+0x214>)
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	3307      	adds	r3, #7
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e025      	b.n	8001310 <sendUartFrame+0x198>
			//fitted kullaniliyor

			//xAxisData = (AnADC_Values[0] >> 3) & 0x1FFF;
			//yAxisData = (AnADC_Values[1] >> 3) & 0x1FFF;

			rs422Frame_[4] = (fittedAnAdc_Values[0] >> 7) & 0x1F;
 80012c4:	4b32      	ldr	r3, [pc, #200]	; (8001390 <sendUartFrame+0x218>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	11db      	asrs	r3, r3, #7
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	3304      	adds	r3, #4
 80012d0:	f002 021f 	and.w	r2, r2, #31
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	701a      	strb	r2, [r3, #0]
			rs422Frame_[5] =  fittedAnAdc_Values[0]       & 0x7F;
 80012d8:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <sendUartFrame+0x218>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	3305      	adds	r3, #5
 80012e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	701a      	strb	r2, [r3, #0]

			rs422Frame_[6] = (fittedAnAdc_Values[1] >> 7) & 0x1F;
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <sendUartFrame+0x218>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	11db      	asrs	r3, r3, #7
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	3306      	adds	r3, #6
 80012f6:	f002 021f 	and.w	r2, r2, #31
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	701a      	strb	r2, [r3, #0]
			rs422Frame_[7] =  fittedAnAdc_Values[1]       & 0x7F;
 80012fe:	4b24      	ldr	r3, [pc, #144]	; (8001390 <sendUartFrame+0x218>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	3307      	adds	r3, #7
 8001308:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	701a      	strb	r2, [r3, #0]
		}

		rs422Frame_[8] = 0x00;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3308      	adds	r3, #8
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
		//rs422Frame_[8] = 0x00 |
		//								errY << 7 |
		//								errX << 6;//error byte

		/* checksum calculation */
		rs422Frame_[RS422_FRAME_SIZE-1] = 0;
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	3309      	adds	r3, #9
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
		for(i=1;i<RS422_FRAME_SIZE-1;i++)
 8001320:	2301      	movs	r3, #1
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
 8001324:	e00e      	b.n	8001344 <sendUartFrame+0x1cc>
		{
			rs422Frame_[RS422_FRAME_SIZE-1] += rs422Frame_[i];
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	3309      	adds	r3, #9
 800132a:	7819      	ldrb	r1, [r3, #0]
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001330:	4413      	add	r3, r2
 8001332:	781a      	ldrb	r2, [r3, #0]
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	3309      	adds	r3, #9
 8001338:	440a      	add	r2, r1
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	701a      	strb	r2, [r3, #0]
		for(i=1;i<RS422_FRAME_SIZE-1;i++)
 800133e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001340:	3301      	adds	r3, #1
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
 8001344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001346:	2b08      	cmp	r3, #8
 8001348:	d9ed      	bls.n	8001326 <sendUartFrame+0x1ae>
		}
		rs422Frame_[RS422_FRAME_SIZE-1] = (255-rs422Frame_[RS422_FRAME_SIZE-1]) + 1;
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	3309      	adds	r3, #9
 800134e:	781a      	ldrb	r2, [r3, #0]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	3309      	adds	r3, #9
 8001354:	4252      	negs	r2, r2
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	701a      	strb	r2, [r3, #0]
		rs422Frame_[RS422_FRAME_SIZE -1] = rs422Frame[RS422_FRAME_SIZE - 1] & 0x7F;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <sendUartFrame+0x21c>)
 800135c:	7a5a      	ldrb	r2, [r3, #9]
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3309      	adds	r3, #9
 8001362:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]

		/* transmit frame */
		  HAL_UART_Transmit(huart, (uint8_t*)rs422Frame_, 10, Timeout);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	220a      	movs	r2, #10
 800136e:	68b9      	ldr	r1, [r7, #8]
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f006 f915 	bl	80075a0 <HAL_UART_Transmit>
		*sendFlag = false;
 8001376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
	{
	// TX kuyruğu dolu vs. durumunda hata yönetimi
	}
	*sendFlag = false;
	}
}
 800137c:	e185      	b.n	800168a <sendUartFrame+0x512>
 800137e:	bf00      	nop
 8001380:	20000001 	.word	0x20000001
 8001384:	200000e8 	.word	0x200000e8
 8001388:	20000000 	.word	0x20000000
 800138c:	200000d4 	.word	0x200000d4
 8001390:	200000dc 	.word	0x200000dc
 8001394:	20000368 	.word	0x20000368
	else if(*sendFlag == true && tutamakVersion == ASELSANKONYA)
 8001398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 8174 	beq.w	800168a <sendUartFrame+0x512>
 80013a2:	4b86      	ldr	r3, [pc, #536]	; (80015bc <sendUartFrame+0x444>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 816f 	beq.w	800168a <sendUartFrame+0x512>
		rs422Frame_[0] = (((!tutamakDigitalInputs[0].readState))		|
 80013ac:	4b84      	ldr	r3, [pc, #528]	; (80015c0 <sendUartFrame+0x448>)
 80013ae:	7a1b      	ldrb	r3, [r3, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf0c      	ite	eq
 80013b4:	2301      	moveq	r3, #1
 80013b6:	2300      	movne	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[1].readState 	<< 1)	|
 80013bc:	4b80      	ldr	r3, [pc, #512]	; (80015c0 <sendUartFrame+0x448>)
 80013be:	7f1b      	ldrb	r3, [r3, #28]
 80013c0:	005b      	lsls	r3, r3, #1
		rs422Frame_[0] = (((!tutamakDigitalInputs[0].readState))		|
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[2].readState 	<< 2) 	|
 80013c8:	4b7d      	ldr	r3, [pc, #500]	; (80015c0 <sendUartFrame+0x448>)
 80013ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013ce:	009b      	lsls	r3, r3, #2
						 (   tutamakDigitalInputs[1].readState 	<< 1)	|
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[3].readState 	<< 3) 	|
 80013d6:	4b7a      	ldr	r3, [pc, #488]	; (80015c0 <sendUartFrame+0x448>)
 80013d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013dc:	00db      	lsls	r3, r3, #3
						 (   tutamakDigitalInputs[2].readState 	<< 2) 	|
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[4].readState  << 4) 	|
 80013e4:	4b76      	ldr	r3, [pc, #472]	; (80015c0 <sendUartFrame+0x448>)
 80013e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80013ea:	011b      	lsls	r3, r3, #4
						 (   tutamakDigitalInputs[3].readState 	<< 3) 	|
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[5].readState 	<< 5) 	|
 80013f2:	4b73      	ldr	r3, [pc, #460]	; (80015c0 <sendUartFrame+0x448>)
 80013f4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80013f8:	015b      	lsls	r3, r3, #5
						 (   tutamakDigitalInputs[4].readState  << 4) 	|
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[6].readState 	<< 6) 	|
 8001400:	4b6f      	ldr	r3, [pc, #444]	; (80015c0 <sendUartFrame+0x448>)
 8001402:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001406:	019b      	lsls	r3, r3, #6
						 (   tutamakDigitalInputs[5].readState 	<< 5) 	|
 8001408:	b25b      	sxtb	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[7].readState) << 7);
 800140e:	4b6c      	ldr	r3, [pc, #432]	; (80015c0 <sendUartFrame+0x448>)
 8001410:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001414:	01db      	lsls	r3, r3, #7
						 (   tutamakDigitalInputs[6].readState 	<< 6) 	|
 8001416:	b25b      	sxtb	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b25b      	sxtb	r3, r3
 800141c:	b2da      	uxtb	r2, r3
		rs422Frame_[0] = (((!tutamakDigitalInputs[0].readState))		|
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	701a      	strb	r2, [r3, #0]
		rs422Frame_[1] = (((tutamakDigitalInputs[8].readState)			|
 8001422:	4b67      	ldr	r3, [pc, #412]	; (80015c0 <sendUartFrame+0x448>)
 8001424:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8001428:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[9].readState 	<< 1)	|
 800142a:	4b65      	ldr	r3, [pc, #404]	; (80015c0 <sendUartFrame+0x448>)
 800142c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001430:	005b      	lsls	r3, r3, #1
		rs422Frame_[1] = (((tutamakDigitalInputs[8].readState)			|
 8001432:	b25b      	sxtb	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[10].readState 	<< 2) 	|
 8001438:	4b61      	ldr	r3, [pc, #388]	; (80015c0 <sendUartFrame+0x448>)
 800143a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 800143e:	009b      	lsls	r3, r3, #2
						 (  tutamakDigitalInputs[9].readState 	<< 1)	|
 8001440:	b25b      	sxtb	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b25b      	sxtb	r3, r3
						 ((!tutamakDigitalInputs[11].readState) << 3) 	|
 8001446:	4a5e      	ldr	r2, [pc, #376]	; (80015c0 <sendUartFrame+0x448>)
 8001448:	f892 20e4 	ldrb.w	r2, [r2, #228]	; 0xe4
						 (  tutamakDigitalInputs[10].readState 	<< 2) 	|
 800144c:	2a00      	cmp	r2, #0
 800144e:	d101      	bne.n	8001454 <sendUartFrame+0x2dc>
 8001450:	2208      	movs	r2, #8
 8001452:	e000      	b.n	8001456 <sendUartFrame+0x2de>
 8001454:	2200      	movs	r2, #0
 8001456:	4313      	orrs	r3, r2
 8001458:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[12].readState  << 4) 	|
 800145a:	4b59      	ldr	r3, [pc, #356]	; (80015c0 <sendUartFrame+0x448>)
 800145c:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8001460:	011b      	lsls	r3, r3, #4
						 ((!tutamakDigitalInputs[11].readState) << 3) 	|
 8001462:	b25b      	sxtb	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[13].readState 	<< 5) 	|
 8001468:	4b55      	ldr	r3, [pc, #340]	; (80015c0 <sendUartFrame+0x448>)
 800146a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800146e:	015b      	lsls	r3, r3, #5
						 (  tutamakDigitalInputs[12].readState  << 4) 	|
 8001470:	b25b      	sxtb	r3, r3
 8001472:	4313      	orrs	r3, r2
 8001474:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[14].readState 	<< 6) 	|
 8001476:	4b52      	ldr	r3, [pc, #328]	; (80015c0 <sendUartFrame+0x448>)
 8001478:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800147c:	019b      	lsls	r3, r3, #6
						 (  tutamakDigitalInputs[13].readState 	<< 5) 	|
 800147e:	b25b      	sxtb	r3, r3
 8001480:	4313      	orrs	r3, r2
 8001482:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[15].readState) << 7));
 8001484:	4b4e      	ldr	r3, [pc, #312]	; (80015c0 <sendUartFrame+0x448>)
 8001486:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 800148a:	01db      	lsls	r3, r3, #7
						 (  tutamakDigitalInputs[14].readState 	<< 6) 	|
 800148c:	b25b      	sxtb	r3, r3
 800148e:	4313      	orrs	r3, r2
 8001490:	b25a      	sxtb	r2, r3
		rs422Frame_[1] = (((tutamakDigitalInputs[8].readState)			|
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3301      	adds	r3, #1
						 (  tutamakDigitalInputs[14].readState 	<< 6) 	|
 8001496:	b2d2      	uxtb	r2, r2
		rs422Frame_[1] = (((tutamakDigitalInputs[8].readState)			|
 8001498:	701a      	strb	r2, [r3, #0]
		rs422Frame_[2] =((( tutamakDigitalInputs[16].readState)			|
 800149a:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <sendUartFrame+0x448>)
 800149c:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80014a0:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[17].readState 	<< 1)	|
 80014a2:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <sendUartFrame+0x448>)
 80014a4:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80014a8:	005b      	lsls	r3, r3, #1
		rs422Frame_[2] =((( tutamakDigitalInputs[16].readState)			|
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	4313      	orrs	r3, r2
 80014ae:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[18].readState 	<< 2) 	|
 80014b0:	4b43      	ldr	r3, [pc, #268]	; (80015c0 <sendUartFrame+0x448>)
 80014b2:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 80014b6:	009b      	lsls	r3, r3, #2
						(   tutamakDigitalInputs[17].readState 	<< 1)	|
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[19].readState 	<< 3) 	|
 80014be:	4b40      	ldr	r3, [pc, #256]	; (80015c0 <sendUartFrame+0x448>)
 80014c0:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80014c4:	00db      	lsls	r3, r3, #3
						(   tutamakDigitalInputs[18].readState 	<< 2) 	|
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[20].readState  << 4) 	|
 80014cc:	4b3c      	ldr	r3, [pc, #240]	; (80015c0 <sendUartFrame+0x448>)
 80014ce:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 80014d2:	011b      	lsls	r3, r3, #4
						(   tutamakDigitalInputs[19].readState 	<< 3) 	|
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[21].readState 	<< 5) 	|
 80014da:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <sendUartFrame+0x448>)
 80014dc:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 80014e0:	015b      	lsls	r3, r3, #5
						(   tutamakDigitalInputs[20].readState  << 4) 	|
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[22].readState 	<< 6) 	|
 80014e8:	4b35      	ldr	r3, [pc, #212]	; (80015c0 <sendUartFrame+0x448>)
 80014ea:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 80014ee:	019b      	lsls	r3, r3, #6
						(   tutamakDigitalInputs[21].readState 	<< 5) 	|
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	4313      	orrs	r3, r2
 80014f4:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[23].readState) << 7));
 80014f6:	4b32      	ldr	r3, [pc, #200]	; (80015c0 <sendUartFrame+0x448>)
 80014f8:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 80014fc:	01db      	lsls	r3, r3, #7
						(   tutamakDigitalInputs[22].readState 	<< 6) 	|
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b25a      	sxtb	r2, r3
		rs422Frame_[2] =((( tutamakDigitalInputs[16].readState)			|
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	3302      	adds	r3, #2
						(   tutamakDigitalInputs[22].readState 	<< 6) 	|
 8001508:	b2d2      	uxtb	r2, r2
		rs422Frame_[2] =((( tutamakDigitalInputs[16].readState)			|
 800150a:	701a      	strb	r2, [r3, #0]
		rs422Frame_[3] =((( tutamakDigitalInputs[24].readState)			|
 800150c:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <sendUartFrame+0x448>)
 800150e:	f893 31e8 	ldrb.w	r3, [r3, #488]	; 0x1e8
 8001512:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[25].readState 	<< 1)	|
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <sendUartFrame+0x448>)
 8001516:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800151a:	005b      	lsls	r3, r3, #1
		rs422Frame_[3] =((( tutamakDigitalInputs[24].readState)			|
 800151c:	b25b      	sxtb	r3, r3
 800151e:	4313      	orrs	r3, r2
 8001520:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[26].readState 	<< 2) 	|
 8001522:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <sendUartFrame+0x448>)
 8001524:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 8001528:	009b      	lsls	r3, r3, #2
						(   tutamakDigitalInputs[25].readState 	<< 1)	|
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[27].readState 	<< 3) 	|
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <sendUartFrame+0x448>)
 8001532:	f893 3224 	ldrb.w	r3, [r3, #548]	; 0x224
 8001536:	00db      	lsls	r3, r3, #3
						(   tutamakDigitalInputs[26].readState 	<< 2) 	|
 8001538:	b25b      	sxtb	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[28].readState  << 4) 	|
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <sendUartFrame+0x448>)
 8001540:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8001544:	011b      	lsls	r3, r3, #4
						(   tutamakDigitalInputs[27].readState 	<< 3) 	|
 8001546:	b25b      	sxtb	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[29].readState 	<< 5) 	|
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <sendUartFrame+0x448>)
 800154e:	f893 324c 	ldrb.w	r3, [r3, #588]	; 0x24c
 8001552:	015b      	lsls	r3, r3, #5
						(   tutamakDigitalInputs[28].readState  << 4) 	|
 8001554:	b25b      	sxtb	r3, r3
 8001556:	4313      	orrs	r3, r2
 8001558:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[30].readState 	<< 6) 	|
 800155a:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <sendUartFrame+0x448>)
 800155c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8001560:	019b      	lsls	r3, r3, #6
						(   tutamakDigitalInputs[29].readState 	<< 5) 	|
 8001562:	b25b      	sxtb	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[31].readState) << 7));
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <sendUartFrame+0x448>)
 800156a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800156e:	01db      	lsls	r3, r3, #7
						(   tutamakDigitalInputs[30].readState 	<< 6) 	|
 8001570:	b25b      	sxtb	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b25a      	sxtb	r2, r3
		rs422Frame_[3] =((( tutamakDigitalInputs[24].readState)			|
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	3303      	adds	r3, #3
						(   tutamakDigitalInputs[30].readState 	<< 6) 	|
 800157a:	b2d2      	uxtb	r2, r2
		rs422Frame_[3] =((( tutamakDigitalInputs[24].readState)			|
 800157c:	701a      	strb	r2, [r3, #0]
		if(remoteMode == 0)
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <sendUartFrame+0x44c>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d122      	bne.n	80015cc <sendUartFrame+0x454>
			rs422Frame_[4] = (AnADC_Values[0] >> 8) & 0xFF;// & 0x1F;			//AN2_7-0
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <sendUartFrame+0x450>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	0a1a      	lsrs	r2, r3, #8
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	3304      	adds	r3, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	701a      	strb	r2, [r3, #0]
			rs422Frame_[5] =  AnADC_Values[0]       & 0xFF; 					//AN2_15-8
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <sendUartFrame+0x450>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	3305      	adds	r3, #5
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	701a      	strb	r2, [r3, #0]
			rs422Frame_[6] = (AnADC_Values[1] >> 8) & 0xFF;      				//AN3_7-0
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <sendUartFrame+0x450>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	0a1a      	lsrs	r2, r3, #8
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	3306      	adds	r3, #6
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]
			rs422Frame_[7] =  AnADC_Values[1]       & 0xFF; 					//AN3_15-8
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <sendUartFrame+0x450>)
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3307      	adds	r3, #7
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	e02d      	b.n	8001618 <sendUartFrame+0x4a0>
 80015bc:	20000001 	.word	0x20000001
 80015c0:	200000e8 	.word	0x200000e8
 80015c4:	20000000 	.word	0x20000000
 80015c8:	200000d4 	.word	0x200000d4
			rs422Frame_[4] = (fittedAnAdc_Values[0] >> 7) & 0x1F;
 80015cc:	4b31      	ldr	r3, [pc, #196]	; (8001694 <sendUartFrame+0x51c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	11db      	asrs	r3, r3, #7
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	3304      	adds	r3, #4
 80015d8:	f002 021f 	and.w	r2, r2, #31
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	701a      	strb	r2, [r3, #0]
			rs422Frame_[5] =  fittedAnAdc_Values[0]       & 0x7F;
 80015e0:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <sendUartFrame+0x51c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	3305      	adds	r3, #5
 80015ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	701a      	strb	r2, [r3, #0]
			rs422Frame_[6] = (fittedAnAdc_Values[1] >> 7) & 0x1F;
 80015f2:	4b28      	ldr	r3, [pc, #160]	; (8001694 <sendUartFrame+0x51c>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	11db      	asrs	r3, r3, #7
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	3306      	adds	r3, #6
 80015fe:	f002 021f 	and.w	r2, r2, #31
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]
			rs422Frame_[7] =  fittedAnAdc_Values[1]       & 0x7F;
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <sendUartFrame+0x51c>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	3307      	adds	r3, #7
 8001610:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	701a      	strb	r2, [r3, #0]
	CAN_TxHeaderTypeDef txHeader = {0};
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
 8001628:	615a      	str	r2, [r3, #20]
	txHeader.StdId = 0x321;
 800162a:	f240 3321 	movw	r3, #801	; 0x321
 800162e:	61fb      	str	r3, [r7, #28]
	txHeader.IDE   = CAN_ID_STD;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.RTR   = CAN_RTR_DATA;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
	txHeader.DLC   = 8;
 8001638:	2308      	movs	r3, #8
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
	txHeader.TransmitGlobalTime = DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint8_t data[8] = { rs422Frame_[0],
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	753b      	strb	r3, [r7, #20]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	785b      	ldrb	r3, [r3, #1]
 800164c:	757b      	strb	r3, [r7, #21]
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	789b      	ldrb	r3, [r3, #2]
 8001652:	75bb      	strb	r3, [r7, #22]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	78db      	ldrb	r3, [r3, #3]
 8001658:	75fb      	strb	r3, [r7, #23]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	791b      	ldrb	r3, [r3, #4]
 800165e:	763b      	strb	r3, [r7, #24]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	795b      	ldrb	r3, [r3, #5]
 8001664:	767b      	strb	r3, [r7, #25]
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	799b      	ldrb	r3, [r3, #6]
 800166a:	76bb      	strb	r3, [r7, #26]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	79db      	ldrb	r3, [r3, #7]
 8001670:	76fb      	strb	r3, [r7, #27]
	if (HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &txMailbox) != HAL_OK)
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	f107 0214 	add.w	r2, r7, #20
 800167a:	f107 011c 	add.w	r1, r7, #28
 800167e:	4806      	ldr	r0, [pc, #24]	; (8001698 <sendUartFrame+0x520>)
 8001680:	f001 ff0a 	bl	8003498 <HAL_CAN_AddTxMessage>
	*sendFlag = false;
 8001684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
}
 800168a:	bf00      	nop
 800168c:	3738      	adds	r7, #56	; 0x38
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200000dc 	.word	0x200000dc
 8001698:	200000a0 	.word	0x200000a0

0800169c <eraseFlashUserConf>:
		@Param 			: none
		@description	:
*/

void eraseFlashUserConf(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80016a0:	f002 ff0c 	bl	80044bc <HAL_FLASH_Unlock>

	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <eraseFlashUserConf+0x34>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = CONFIG_DATA_BASE_ADDR; // düzenlenecek !!!!!!!!!!!!!!!!!!!!*/
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <eraseFlashUserConf+0x34>)
 80016ac:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <eraseFlashUserConf+0x38>)
 80016ae:	605a      	str	r2, [r3, #4]
	EraseInitStruct.NbPages     = 1;
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <eraseFlashUserConf+0x34>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	609a      	str	r2, [r3, #8]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80016b6:	4908      	ldr	r1, [pc, #32]	; (80016d8 <eraseFlashUserConf+0x3c>)
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <eraseFlashUserConf+0x34>)
 80016ba:	f002 ffc3 	bl	8004644 <HAL_FLASHEx_Erase>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d000      	beq.n	80016c6 <eraseFlashUserConf+0x2a>
	{
		while (1)
 80016c4:	e7fe      	b.n	80016c4 <eraseFlashUserConf+0x28>
		{

		}
	}

	HAL_FLASH_Lock();
 80016c6:	f002 ff1f 	bl	8004508 <HAL_FLASH_Lock>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200004cc 	.word	0x200004cc
 80016d4:	0800e000 	.word	0x0800e000
 80016d8:	20000394 	.word	0x20000394

080016dc <refreshFlashUserConf>:
		@Param 				: none
		@description	: Page Erase procedure is used before write function

*/
void refreshFlashUserConf(ConfigData *configDataPtr)
{
 80016dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016e0:	b08e      	sub	sp, #56	; 0x38
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	62f8      	str	r0, [r7, #44]	; 0x2c
	volatile uint32_t i = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
	ConfigData* tempConfigDataPtr = configDataPtr;
 80016ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ec:	637b      	str	r3, [r7, #52]	; 0x34
	eraseFlashUserConf();
 80016ee:	f7ff ffd5 	bl	800169c <eraseFlashUserConf>
	HAL_FLASH_Unlock();
 80016f2:	f002 fee3 	bl	80044bc <HAL_FLASH_Unlock>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_DEFAULT_SELECT		, 0x00 									);
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	493f      	ldr	r1, [pc, #252]	; (80017fc <refreshFlashUserConf+0x120>)
 8001700:	2001      	movs	r0, #1
 8001702:	f002 fe6b 	bl	80043dc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_INTERFACE_OFFSET		, tempConfigDataPtr -> tkkModSelection 	);
 8001706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	2200      	movs	r2, #0
 800170e:	461c      	mov	r4, r3
 8001710:	4615      	mov	r5, r2
 8001712:	4622      	mov	r2, r4
 8001714:	462b      	mov	r3, r5
 8001716:	493a      	ldr	r1, [pc, #232]	; (8001800 <refreshFlashUserConf+0x124>)
 8001718:	2001      	movs	r0, #1
 800171a:	f002 fe5f 	bl	80043dc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_X_MIDDLEPOINT_OFFSET	, tempConfigDataPtr -> xMid				);
 800171e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001720:	88db      	ldrh	r3, [r3, #6]
 8001722:	b29b      	uxth	r3, r3
 8001724:	2200      	movs	r2, #0
 8001726:	4698      	mov	r8, r3
 8001728:	4691      	mov	r9, r2
 800172a:	4642      	mov	r2, r8
 800172c:	464b      	mov	r3, r9
 800172e:	4935      	ldr	r1, [pc, #212]	; (8001804 <refreshFlashUserConf+0x128>)
 8001730:	2001      	movs	r0, #1
 8001732:	f002 fe53 	bl	80043dc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_X_MINPOINT_OFFSET		, tempConfigDataPtr -> xMin				);
 8001736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001738:	885b      	ldrh	r3, [r3, #2]
 800173a:	b29b      	uxth	r3, r3
 800173c:	2200      	movs	r2, #0
 800173e:	469a      	mov	sl, r3
 8001740:	4693      	mov	fp, r2
 8001742:	4652      	mov	r2, sl
 8001744:	465b      	mov	r3, fp
 8001746:	4930      	ldr	r1, [pc, #192]	; (8001808 <refreshFlashUserConf+0x12c>)
 8001748:	2001      	movs	r0, #1
 800174a:	f002 fe47 	bl	80043dc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_X_MAXPOINT_OFFSET		, tempConfigDataPtr -> xMax				);
 800174e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001750:	889b      	ldrh	r3, [r3, #4]
 8001752:	b29b      	uxth	r3, r3
 8001754:	2200      	movs	r2, #0
 8001756:	623b      	str	r3, [r7, #32]
 8001758:	627a      	str	r2, [r7, #36]	; 0x24
 800175a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800175e:	492b      	ldr	r1, [pc, #172]	; (800180c <refreshFlashUserConf+0x130>)
 8001760:	2001      	movs	r0, #1
 8001762:	f002 fe3b 	bl	80043dc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_Y_MIDDLEPOINT_OFFSET	, tempConfigDataPtr -> yMid				);
 8001766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001768:	899b      	ldrh	r3, [r3, #12]
 800176a:	b29b      	uxth	r3, r3
 800176c:	2200      	movs	r2, #0
 800176e:	61bb      	str	r3, [r7, #24]
 8001770:	61fa      	str	r2, [r7, #28]
 8001772:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001776:	4926      	ldr	r1, [pc, #152]	; (8001810 <refreshFlashUserConf+0x134>)
 8001778:	2001      	movs	r0, #1
 800177a:	f002 fe2f 	bl	80043dc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_Y_MINPOINT_OFFSET		, tempConfigDataPtr -> yMin				);
 800177e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001780:	891b      	ldrh	r3, [r3, #8]
 8001782:	b29b      	uxth	r3, r3
 8001784:	2200      	movs	r2, #0
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	617a      	str	r2, [r7, #20]
 800178a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800178e:	4921      	ldr	r1, [pc, #132]	; (8001814 <refreshFlashUserConf+0x138>)
 8001790:	2001      	movs	r0, #1
 8001792:	f002 fe23 	bl	80043dc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_Y_MAXPOINT_OFFSET		, tempConfigDataPtr -> yMax				);
 8001796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001798:	895b      	ldrh	r3, [r3, #10]
 800179a:	b29b      	uxth	r3, r3
 800179c:	2200      	movs	r2, #0
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	60fa      	str	r2, [r7, #12]
 80017a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017a6:	491c      	ldr	r1, [pc, #112]	; (8001818 <refreshFlashUserConf+0x13c>)
 80017a8:	2001      	movs	r0, #1
 80017aa:	f002 fe17 	bl	80043dc <HAL_FLASH_Program>

	for(i = 0; i < 32; i++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
 80017b2:	e015      	b.n	80017e0 <refreshFlashUserConf+0x104>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT, tempTkkConfig.debounceFactor[i]);
 80017b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <refreshFlashUserConf+0x140>)
 80017b8:	4413      	add	r3, r2
 80017ba:	0099      	lsls	r1, r3, #2
 80017bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017be:	4a18      	ldr	r2, [pc, #96]	; (8001820 <refreshFlashUserConf+0x144>)
 80017c0:	3304      	adds	r3, #4
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	88db      	ldrh	r3, [r3, #6]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2200      	movs	r2, #0
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017d4:	2001      	movs	r0, #1
 80017d6:	f002 fe01 	bl	80043dc <HAL_FLASH_Program>
	for(i = 0; i < 32; i++)
 80017da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017dc:	3301      	adds	r3, #1
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
 80017e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e2:	2b1f      	cmp	r3, #31
 80017e4:	d9e6      	bls.n	80017b4 <refreshFlashUserConf+0xd8>
	}

	HAL_FLASH_Lock();
 80017e6:	f002 fe8f 	bl	8004508 <HAL_FLASH_Lock>

	readFlashUserConf(&userTkkConfig);
 80017ea:	480e      	ldr	r0, [pc, #56]	; (8001824 <refreshFlashUserConf+0x148>)
 80017ec:	f000 f81c 	bl	8001828 <readFlashUserConf>
}
 80017f0:	bf00      	nop
 80017f2:	3738      	adds	r7, #56	; 0x38
 80017f4:	46bd      	mov	sp, r7
 80017f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017fa:	bf00      	nop
 80017fc:	0800e000 	.word	0x0800e000
 8001800:	0800e002 	.word	0x0800e002
 8001804:	0800e004 	.word	0x0800e004
 8001808:	0800e006 	.word	0x0800e006
 800180c:	0800e008 	.word	0x0800e008
 8001810:	0800e00a 	.word	0x0800e00a
 8001814:	0800e00c 	.word	0x0800e00c
 8001818:	0800e00e 	.word	0x0800e00e
 800181c:	02003814 	.word	0x02003814
 8001820:	20000398 	.word	0x20000398
 8001824:	200003e8 	.word	0x200003e8

08001828 <readFlashUserConf>:
		@Param 				: none
		@description	:

*/
void readFlashUserConf(ConfigData *configDataPtr)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
	ConfigData* tempConfigDataPtr = configDataPtr;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	60fb      	str	r3, [r7, #12]

	tempConfigDataPtr -> tkkModSelection 	= (*(uint32_t*)CONFIG_DATA_INTERFACE_OFFSET		);
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <readFlashUserConf+0x90>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	b29a      	uxth	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	801a      	strh	r2, [r3, #0]

	tempConfigDataPtr -> xMid 				= (*(uint32_t*)CONFIG_DATA_X_MIDDLEPOINT_OFFSET	);
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <readFlashUserConf+0x94>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	b29a      	uxth	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	80da      	strh	r2, [r3, #6]
	tempConfigDataPtr -> xMin 				= (*(uint32_t*)CONFIG_DATA_X_MINPOINT_OFFSET	);
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <readFlashUserConf+0x98>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	805a      	strh	r2, [r3, #2]
	tempConfigDataPtr -> xMax 				= (*(uint32_t*)CONFIG_DATA_X_MAXPOINT_OFFSET	);
 8001856:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <readFlashUserConf+0x9c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b29a      	uxth	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	809a      	strh	r2, [r3, #4]

	tempConfigDataPtr -> yMid 				= (*(uint32_t*)CONFIG_DATA_Y_MIDDLEPOINT_OFFSET	);
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <readFlashUserConf+0xa0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	819a      	strh	r2, [r3, #12]
	tempConfigDataPtr -> yMin 				= (*(uint32_t*)CONFIG_DATA_Y_MINPOINT_OFFSET	);
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <readFlashUserConf+0xa4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	b29a      	uxth	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	811a      	strh	r2, [r3, #8]
	tempConfigDataPtr -> yMax 				= (*(uint32_t*)CONFIG_DATA_Y_MAXPOINT_OFFSET	);
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <readFlashUserConf+0xa8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	b29a      	uxth	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	815a      	strh	r2, [r3, #10]

	for(i = 0; i < 32; i++)
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	e00f      	b.n	80018a4 <readFlashUserConf+0x7c>
	{
		tempConfigDataPtr -> debounceFactor [i] = (*(uint32_t*)(CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT));
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <readFlashUserConf+0xac>)
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	b291      	uxth	r1, r2
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	3304      	adds	r3, #4
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	460a      	mov	r2, r1
 800189c:	80da      	strh	r2, [r3, #6]
	for(i = 0; i < 32; i++)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3301      	adds	r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b1f      	cmp	r3, #31
 80018a8:	d9ec      	bls.n	8001884 <readFlashUserConf+0x5c>
	}
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	0800e002 	.word	0x0800e002
 80018bc:	0800e004 	.word	0x0800e004
 80018c0:	0800e006 	.word	0x0800e006
 80018c4:	0800e008 	.word	0x0800e008
 80018c8:	0800e00a 	.word	0x0800e00a
 80018cc:	0800e00c 	.word	0x0800e00c
 80018d0:	0800e00e 	.word	0x0800e00e
 80018d4:	02003814 	.word	0x02003814

080018d8 <loadDefaultValues>:
void loadDefaultValues(ConfigData *configDataPtr)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
	ConfigData* tempConfigDataPtr = configDataPtr;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	60fb      	str	r3, [r7, #12]

	tempConfigDataPtr -> tkkModSelection 	= (*(uint32_t*)DEFAULT_CONFIG_DATA_INTERFACE_OFFSET		);
 80018e8:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <loadDefaultValues+0x90>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	801a      	strh	r2, [r3, #0]

	tempConfigDataPtr -> xMid 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET	);
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <loadDefaultValues+0x94>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	80da      	strh	r2, [r3, #6]
	tempConfigDataPtr -> xMin 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET	);
 80018fc:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <loadDefaultValues+0x98>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	b29a      	uxth	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	805a      	strh	r2, [r3, #2]
	tempConfigDataPtr -> xMax 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET	);
 8001906:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <loadDefaultValues+0x9c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	b29a      	uxth	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	809a      	strh	r2, [r3, #4]

	tempConfigDataPtr -> yMid 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET	);
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <loadDefaultValues+0xa0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	819a      	strh	r2, [r3, #12]
	tempConfigDataPtr -> yMin 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET	);
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <loadDefaultValues+0xa4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29a      	uxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	811a      	strh	r2, [r3, #8]
	tempConfigDataPtr -> yMax 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET	);
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <loadDefaultValues+0xa8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	815a      	strh	r2, [r3, #10]

	for(i = 0; i < 32; i++)
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	e00f      	b.n	8001954 <loadDefaultValues+0x7c>
	{
		tempConfigDataPtr ->debounceFactor [i] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT));
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	009a      	lsls	r2, r3, #2
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <loadDefaultValues+0xac>)
 800193a:	4413      	add	r3, r2
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	b291      	uxth	r1, r2
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	3304      	adds	r3, #4
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	460a      	mov	r2, r1
 800194c:	80da      	strh	r2, [r3, #6]
	for(i = 0; i < 32; i++)
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	3301      	adds	r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b1f      	cmp	r3, #31
 8001958:	d9ec      	bls.n	8001934 <loadDefaultValues+0x5c>
	}
}
 800195a:	bf00      	nop
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	0800f000 	.word	0x0800f000
 800196c:	0800f002 	.word	0x0800f002
 8001970:	0800f004 	.word	0x0800f004
 8001974:	0800f006 	.word	0x0800f006
 8001978:	0800f008 	.word	0x0800f008
 800197c:	0800f00a 	.word	0x0800f00a
 8001980:	0800f00c 	.word	0x0800f00c
 8001984:	0800f00e 	.word	0x0800f00e

08001988 <sendAckUart>:

void sendAckUart(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
	volatile uint8_t uartACK[9];

	uartACK[0] = COMMAND_HEADER;
 800198e:	23a5      	movs	r3, #165	; 0xa5
 8001990:	713b      	strb	r3, [r7, #4]
	uartACK[1] = COMMAND_ACK;
 8001992:	23ff      	movs	r3, #255	; 0xff
 8001994:	717b      	strb	r3, [r7, #5]
	uartACK[2] = 0x00;
 8001996:	2300      	movs	r3, #0
 8001998:	71bb      	strb	r3, [r7, #6]
	uartACK[3] = 0x00;
 800199a:	2300      	movs	r3, #0
 800199c:	71fb      	strb	r3, [r7, #7]
	uartACK[4] = 0x00;
 800199e:	2300      	movs	r3, #0
 80019a0:	723b      	strb	r3, [r7, #8]
	uartACK[5] = 0x00;
 80019a2:	2300      	movs	r3, #0
 80019a4:	727b      	strb	r3, [r7, #9]
	uartACK[6] = 0x00;
 80019a6:	2300      	movs	r3, #0
 80019a8:	72bb      	strb	r3, [r7, #10]
	uartACK[7] = 0x00;
 80019aa:	2300      	movs	r3, #0
 80019ac:	72fb      	strb	r3, [r7, #11]
	uartACK[8] = CHECKSUM_ACK;
 80019ae:	2301      	movs	r3, #1
 80019b0:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*)uartACK, 9, 5000);
 80019b2:	1d39      	adds	r1, r7, #4
 80019b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80019b8:	2209      	movs	r2, #9
 80019ba:	4803      	ldr	r0, [pc, #12]	; (80019c8 <sendAckUart+0x40>)
 80019bc:	f005 fdf0 	bl	80075a0 <HAL_UART_Transmit>
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000604 	.word	0x20000604

080019cc <checkCommand>:
	}

}

void checkCommand(uint8_t* rxBuffer)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]

	switch (rxBuffer[1])
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3301      	adds	r3, #1
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2bdd      	cmp	r3, #221	; 0xdd
 80019e0:	f300 829d 	bgt.w	8001f1e <checkCommand+0x552>
 80019e4:	2bbb      	cmp	r3, #187	; 0xbb
 80019e6:	da05      	bge.n	80019f4 <checkCommand+0x28>
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	f300 808f 	bgt.w	8001b0c <checkCommand+0x140>
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	dc7c      	bgt.n	8001aec <checkCommand+0x120>

		case COMMAND_SET_DEFAULT_CONFIG_DATA:

		break;
	}
}
 80019f2:	e294      	b.n	8001f1e <checkCommand+0x552>
	switch (rxBuffer[1])
 80019f4:	3bbb      	subs	r3, #187	; 0xbb
 80019f6:	2b22      	cmp	r3, #34	; 0x22
 80019f8:	f200 8291 	bhi.w	8001f1e <checkCommand+0x552>
 80019fc:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <checkCommand+0x38>)
 80019fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a02:	bf00      	nop
 8001a04:	08001eff 	.word	0x08001eff
 8001a08:	08001f1f 	.word	0x08001f1f
 8001a0c:	08001f1f 	.word	0x08001f1f
 8001a10:	08001f1f 	.word	0x08001f1f
 8001a14:	08001f1f 	.word	0x08001f1f
 8001a18:	08001f1f 	.word	0x08001f1f
 8001a1c:	08001f1f 	.word	0x08001f1f
 8001a20:	08001f1f 	.word	0x08001f1f
 8001a24:	08001f1f 	.word	0x08001f1f
 8001a28:	08001f1f 	.word	0x08001f1f
 8001a2c:	08001ee3 	.word	0x08001ee3
 8001a30:	08001f1f 	.word	0x08001f1f
 8001a34:	08001f1f 	.word	0x08001f1f
 8001a38:	08001f1f 	.word	0x08001f1f
 8001a3c:	08001f1f 	.word	0x08001f1f
 8001a40:	08001f1f 	.word	0x08001f1f
 8001a44:	08001f1f 	.word	0x08001f1f
 8001a48:	08001f19 	.word	0x08001f19
 8001a4c:	08001f1f 	.word	0x08001f1f
 8001a50:	08001f1f 	.word	0x08001f1f
 8001a54:	08001f1f 	.word	0x08001f1f
 8001a58:	08001f1f 	.word	0x08001f1f
 8001a5c:	08001f1f 	.word	0x08001f1f
 8001a60:	08001f1f 	.word	0x08001f1f
 8001a64:	08001f1f 	.word	0x08001f1f
 8001a68:	08001f1f 	.word	0x08001f1f
 8001a6c:	08001ee9 	.word	0x08001ee9
 8001a70:	08001f1f 	.word	0x08001f1f
 8001a74:	08001f1f 	.word	0x08001f1f
 8001a78:	08001f1f 	.word	0x08001f1f
 8001a7c:	08001f1f 	.word	0x08001f1f
 8001a80:	08001f1f 	.word	0x08001f1f
 8001a84:	08001f1f 	.word	0x08001f1f
 8001a88:	08001f1f 	.word	0x08001f1f
 8001a8c:	08001ef3 	.word	0x08001ef3
 8001a90:	3b71      	subs	r3, #113	; 0x71
 8001a92:	2b12      	cmp	r3, #18
 8001a94:	f200 8243 	bhi.w	8001f1e <checkCommand+0x552>
 8001a98:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <checkCommand+0xd4>)
 8001a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9e:	bf00      	nop
 8001aa0:	08001d3f 	.word	0x08001d3f
 8001aa4:	08001deb 	.word	0x08001deb
 8001aa8:	08001e67 	.word	0x08001e67
 8001aac:	08001f1f 	.word	0x08001f1f
 8001ab0:	08001f1f 	.word	0x08001f1f
 8001ab4:	08001f1f 	.word	0x08001f1f
 8001ab8:	08001f1f 	.word	0x08001f1f
 8001abc:	08001f1f 	.word	0x08001f1f
 8001ac0:	08001f1f 	.word	0x08001f1f
 8001ac4:	08001f1f 	.word	0x08001f1f
 8001ac8:	08001f1f 	.word	0x08001f1f
 8001acc:	08001f1f 	.word	0x08001f1f
 8001ad0:	08001f1f 	.word	0x08001f1f
 8001ad4:	08001f1f 	.word	0x08001f1f
 8001ad8:	08001f1f 	.word	0x08001f1f
 8001adc:	08001f1f 	.word	0x08001f1f
 8001ae0:	08001bdf 	.word	0x08001bdf
 8001ae4:	08001c47 	.word	0x08001c47
 8001ae8:	08001cc3 	.word	0x08001cc3
 8001aec:	3b01      	subs	r3, #1
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	f200 8215 	bhi.w	8001f1e <checkCommand+0x552>
 8001af4:	a201      	add	r2, pc, #4	; (adr r2, 8001afc <checkCommand+0x130>)
 8001af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afa:	bf00      	nop
 8001afc:	08001b19 	.word	0x08001b19
 8001b00:	08001b2b 	.word	0x08001b2b
 8001b04:	08001b85 	.word	0x08001b85
 8001b08:	08001f1d 	.word	0x08001f1d
 8001b0c:	2b83      	cmp	r3, #131	; 0x83
 8001b0e:	f300 8206 	bgt.w	8001f1e <checkCommand+0x552>
 8001b12:	2b71      	cmp	r3, #113	; 0x71
 8001b14:	dabc      	bge.n	8001a90 <checkCommand+0xc4>
}
 8001b16:	e202      	b.n	8001f1e <checkCommand+0x552>
			tempTkkConfig.tkkModSelection = rxBuffer[2];
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b95      	ldr	r3, [pc, #596]	; (8001d78 <checkCommand+0x3ac>)
 8001b22:	801a      	strh	r2, [r3, #0]
			sendAckUart();
 8001b24:	f7ff ff30 	bl	8001988 <sendAckUart>
		break;
 8001b28:	e1f9      	b.n	8001f1e <checkCommand+0x552>
			tempTkkConfig.xMax = rxBuffer[2]<<8 | rxBuffer[3];
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3303      	adds	r3, #3
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	4b8d      	ldr	r3, [pc, #564]	; (8001d78 <checkCommand+0x3ac>)
 8001b44:	809a      	strh	r2, [r3, #4]
			tempTkkConfig.xMin = rxBuffer[4]<<8 | rxBuffer[5];
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	b21a      	sxth	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3305      	adds	r3, #5
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b86      	ldr	r3, [pc, #536]	; (8001d78 <checkCommand+0x3ac>)
 8001b60:	805a      	strh	r2, [r3, #2]
			tempTkkConfig.xMid = rxBuffer[6]<<8 | rxBuffer[7];
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3306      	adds	r3, #6
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	b21a      	sxth	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3307      	adds	r3, #7
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	4b7f      	ldr	r3, [pc, #508]	; (8001d78 <checkCommand+0x3ac>)
 8001b7c:	80da      	strh	r2, [r3, #6]
			sendAckUart();
 8001b7e:	f7ff ff03 	bl	8001988 <sendAckUart>
		break;
 8001b82:	e1cc      	b.n	8001f1e <checkCommand+0x552>
			tempTkkConfig.yMax = rxBuffer[2]<<8 | rxBuffer[3];
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3302      	adds	r3, #2
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3303      	adds	r3, #3
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	4313      	orrs	r3, r2
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <checkCommand+0x3ac>)
 8001b9e:	815a      	strh	r2, [r3, #10]
			tempTkkConfig.yMin = rxBuffer[4]<<8 | rxBuffer[5];
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	b21a      	sxth	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3305      	adds	r3, #5
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	4b6f      	ldr	r3, [pc, #444]	; (8001d78 <checkCommand+0x3ac>)
 8001bba:	811a      	strh	r2, [r3, #8]
			tempTkkConfig.yMid = rxBuffer[6]<<8 | rxBuffer[7];
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3306      	adds	r3, #6
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	b21a      	sxth	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3307      	adds	r3, #7
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <checkCommand+0x3ac>)
 8001bd6:	819a      	strh	r2, [r3, #12]
			sendAckUart();
 8001bd8:	f7ff fed6 	bl	8001988 <sendAckUart>
		break;
 8001bdc:	e19f      	b.n	8001f1e <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 8001bde:	4b67      	ldr	r3, [pc, #412]	; (8001d7c <checkCommand+0x3b0>)
 8001be0:	22a5      	movs	r2, #165	; 0xa5
 8001be2:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_MODSEL_READ;
 8001be4:	4b65      	ldr	r3, [pc, #404]	; (8001d7c <checkCommand+0x3b0>)
 8001be6:	2281      	movs	r2, #129	; 0x81
 8001be8:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] = (*(uint32_t*)CONFIG_DATA_INTERFACE_OFFSET);;
 8001bea:	4b65      	ldr	r3, [pc, #404]	; (8001d80 <checkCommand+0x3b4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	4b62      	ldr	r3, [pc, #392]	; (8001d7c <checkCommand+0x3b0>)
 8001bf2:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] = 0x00;
 8001bf4:	4b61      	ldr	r3, [pc, #388]	; (8001d7c <checkCommand+0x3b0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = 0x00;
 8001bfa:	4b60      	ldr	r3, [pc, #384]	; (8001d7c <checkCommand+0x3b0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = 0x00;
 8001c00:	4b5e      	ldr	r3, [pc, #376]	; (8001d7c <checkCommand+0x3b0>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = 0x00;
 8001c06:	4b5d      	ldr	r3, [pc, #372]	; (8001d7c <checkCommand+0x3b0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = 0x00;
 8001c0c:	4b5b      	ldr	r3, [pc, #364]	; (8001d7c <checkCommand+0x3b0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 8001c12:	2301      	movs	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	e00b      	b.n	8001c30 <checkCommand+0x264>
				rsSendFormat[8] += rsSendFormat[i];
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <checkCommand+0x3b0>)
 8001c1c:	5cd2      	ldrb	r2, [r2, r3]
 8001c1e:	4b57      	ldr	r3, [pc, #348]	; (8001d7c <checkCommand+0x3b0>)
 8001c20:	7a1b      	ldrb	r3, [r3, #8]
 8001c22:	4413      	add	r3, r2
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4b55      	ldr	r3, [pc, #340]	; (8001d7c <checkCommand+0x3b0>)
 8001c28:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b07      	cmp	r3, #7
 8001c34:	d9f0      	bls.n	8001c18 <checkCommand+0x24c>
			HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001c36:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c3a:	2209      	movs	r2, #9
 8001c3c:	494f      	ldr	r1, [pc, #316]	; (8001d7c <checkCommand+0x3b0>)
 8001c3e:	4851      	ldr	r0, [pc, #324]	; (8001d84 <checkCommand+0x3b8>)
 8001c40:	f005 fcae 	bl	80075a0 <HAL_UART_Transmit>
		break;
 8001c44:	e16b      	b.n	8001f1e <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 8001c46:	4b4d      	ldr	r3, [pc, #308]	; (8001d7c <checkCommand+0x3b0>)
 8001c48:	22a5      	movs	r2, #165	; 0xa5
 8001c4a:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_XCALIB_READ;
 8001c4c:	4b4b      	ldr	r3, [pc, #300]	; (8001d7c <checkCommand+0x3b0>)
 8001c4e:	2282      	movs	r2, #130	; 0x82
 8001c50:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] = (*(uint32_t*)(CONFIG_DATA_X_MAXPOINT_OFFSET + 1));
 8001c52:	4b4d      	ldr	r3, [pc, #308]	; (8001d88 <checkCommand+0x3bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b48      	ldr	r3, [pc, #288]	; (8001d7c <checkCommand+0x3b0>)
 8001c5a:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] = (*(uint32_t*)CONFIG_DATA_X_MAXPOINT_OFFSET);
 8001c5c:	4b4b      	ldr	r3, [pc, #300]	; (8001d8c <checkCommand+0x3c0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4b46      	ldr	r3, [pc, #280]	; (8001d7c <checkCommand+0x3b0>)
 8001c64:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = (*(uint32_t*)(CONFIG_DATA_X_MINPOINT_OFFSET + 1));
 8001c66:	4b4a      	ldr	r3, [pc, #296]	; (8001d90 <checkCommand+0x3c4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <checkCommand+0x3b0>)
 8001c6e:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = (*(uint32_t*)CONFIG_DATA_X_MINPOINT_OFFSET);
 8001c70:	4b48      	ldr	r3, [pc, #288]	; (8001d94 <checkCommand+0x3c8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <checkCommand+0x3b0>)
 8001c78:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = (*(uint32_t*)(CONFIG_DATA_X_MIDDLEPOINT_OFFSET + 1));
 8001c7a:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <checkCommand+0x3cc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	4b3e      	ldr	r3, [pc, #248]	; (8001d7c <checkCommand+0x3b0>)
 8001c82:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = (*(uint32_t*)CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 8001c84:	4b45      	ldr	r3, [pc, #276]	; (8001d9c <checkCommand+0x3d0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4b3c      	ldr	r3, [pc, #240]	; (8001d7c <checkCommand+0x3b0>)
 8001c8c:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 8001c8e:	2301      	movs	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	e00b      	b.n	8001cac <checkCommand+0x2e0>
				rsSendFormat[8] += rsSendFormat[i];
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4a39      	ldr	r2, [pc, #228]	; (8001d7c <checkCommand+0x3b0>)
 8001c98:	5cd2      	ldrb	r2, [r2, r3]
 8001c9a:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <checkCommand+0x3b0>)
 8001c9c:	7a1b      	ldrb	r3, [r3, #8]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <checkCommand+0x3b0>)
 8001ca4:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b07      	cmp	r3, #7
 8001cb0:	d9f0      	bls.n	8001c94 <checkCommand+0x2c8>
			HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001cb2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cb6:	2209      	movs	r2, #9
 8001cb8:	4930      	ldr	r1, [pc, #192]	; (8001d7c <checkCommand+0x3b0>)
 8001cba:	4832      	ldr	r0, [pc, #200]	; (8001d84 <checkCommand+0x3b8>)
 8001cbc:	f005 fc70 	bl	80075a0 <HAL_UART_Transmit>
		break;
 8001cc0:	e12d      	b.n	8001f1e <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 8001cc2:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <checkCommand+0x3b0>)
 8001cc4:	22a5      	movs	r2, #165	; 0xa5
 8001cc6:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_YCALIB_READ;
 8001cc8:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <checkCommand+0x3b0>)
 8001cca:	2283      	movs	r2, #131	; 0x83
 8001ccc:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] = (*(uint32_t*)(CONFIG_DATA_Y_MAXPOINT_OFFSET + 1));
 8001cce:	4b34      	ldr	r3, [pc, #208]	; (8001da0 <checkCommand+0x3d4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <checkCommand+0x3b0>)
 8001cd6:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] = (*(uint32_t*)CONFIG_DATA_Y_MAXPOINT_OFFSET);
 8001cd8:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <checkCommand+0x3d8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <checkCommand+0x3b0>)
 8001ce0:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = (*(uint32_t*)(CONFIG_DATA_Y_MINPOINT_OFFSET + 1));
 8001ce2:	4b31      	ldr	r3, [pc, #196]	; (8001da8 <checkCommand+0x3dc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <checkCommand+0x3b0>)
 8001cea:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = (*(uint32_t*)CONFIG_DATA_Y_MINPOINT_OFFSET);
 8001cec:	4b2f      	ldr	r3, [pc, #188]	; (8001dac <checkCommand+0x3e0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <checkCommand+0x3b0>)
 8001cf4:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = (*(uint32_t*)(CONFIG_DATA_Y_MIDDLEPOINT_OFFSET + 1));
 8001cf6:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <checkCommand+0x3e4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <checkCommand+0x3b0>)
 8001cfe:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = (*(uint32_t*)CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 8001d00:	4b2c      	ldr	r3, [pc, #176]	; (8001db4 <checkCommand+0x3e8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <checkCommand+0x3b0>)
 8001d08:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	e00b      	b.n	8001d28 <checkCommand+0x35c>
				rsSendFormat[8] += rsSendFormat[i];
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4a1a      	ldr	r2, [pc, #104]	; (8001d7c <checkCommand+0x3b0>)
 8001d14:	5cd2      	ldrb	r2, [r2, r3]
 8001d16:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <checkCommand+0x3b0>)
 8001d18:	7a1b      	ldrb	r3, [r3, #8]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <checkCommand+0x3b0>)
 8001d20:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3301      	adds	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b07      	cmp	r3, #7
 8001d2c:	d9f0      	bls.n	8001d10 <checkCommand+0x344>
			HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001d2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d32:	2209      	movs	r2, #9
 8001d34:	4911      	ldr	r1, [pc, #68]	; (8001d7c <checkCommand+0x3b0>)
 8001d36:	4813      	ldr	r0, [pc, #76]	; (8001d84 <checkCommand+0x3b8>)
 8001d38:	f005 fc32 	bl	80075a0 <HAL_UART_Transmit>
		break;
 8001d3c:	e0ef      	b.n	8001f1e <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <checkCommand+0x3b0>)
 8001d40:	22a5      	movs	r2, #165	; 0xa5
 8001d42:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_DEFAULT_MODSEL_READ;
 8001d44:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <checkCommand+0x3b0>)
 8001d46:	2271      	movs	r2, #113	; 0x71
 8001d48:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] = (*(uint32_t*)DEFAULT_CONFIG_DATA_INTERFACE_OFFSET);;
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <checkCommand+0x3ec>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <checkCommand+0x3b0>)
 8001d52:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] = 0x00;
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <checkCommand+0x3b0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = 0x00;
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <checkCommand+0x3b0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = 0x00;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <checkCommand+0x3b0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = 0x00;
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <checkCommand+0x3b0>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = 0x00;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <checkCommand+0x3b0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 8001d72:	2301      	movs	r3, #1
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	e02d      	b.n	8001dd4 <checkCommand+0x408>
 8001d78:	20000398 	.word	0x20000398
 8001d7c:	20000374 	.word	0x20000374
 8001d80:	0800e002 	.word	0x0800e002
 8001d84:	20000604 	.word	0x20000604
 8001d88:	0800e009 	.word	0x0800e009
 8001d8c:	0800e008 	.word	0x0800e008
 8001d90:	0800e007 	.word	0x0800e007
 8001d94:	0800e006 	.word	0x0800e006
 8001d98:	0800e005 	.word	0x0800e005
 8001d9c:	0800e004 	.word	0x0800e004
 8001da0:	0800e00f 	.word	0x0800e00f
 8001da4:	0800e00e 	.word	0x0800e00e
 8001da8:	0800e00d 	.word	0x0800e00d
 8001dac:	0800e00c 	.word	0x0800e00c
 8001db0:	0800e00b 	.word	0x0800e00b
 8001db4:	0800e00a 	.word	0x0800e00a
 8001db8:	0800f000 	.word	0x0800f000
				rsSendFormat[8] += rsSendFormat[i];
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4a5a      	ldr	r2, [pc, #360]	; (8001f28 <checkCommand+0x55c>)
 8001dc0:	5cd2      	ldrb	r2, [r2, r3]
 8001dc2:	4b59      	ldr	r3, [pc, #356]	; (8001f28 <checkCommand+0x55c>)
 8001dc4:	7a1b      	ldrb	r3, [r3, #8]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b57      	ldr	r3, [pc, #348]	; (8001f28 <checkCommand+0x55c>)
 8001dcc:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b07      	cmp	r3, #7
 8001dd8:	d9f0      	bls.n	8001dbc <checkCommand+0x3f0>
			HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001dda:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dde:	2209      	movs	r2, #9
 8001de0:	4951      	ldr	r1, [pc, #324]	; (8001f28 <checkCommand+0x55c>)
 8001de2:	4852      	ldr	r0, [pc, #328]	; (8001f2c <checkCommand+0x560>)
 8001de4:	f005 fbdc 	bl	80075a0 <HAL_UART_Transmit>
		break;
 8001de8:	e099      	b.n	8001f1e <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 8001dea:	4b4f      	ldr	r3, [pc, #316]	; (8001f28 <checkCommand+0x55c>)
 8001dec:	22a5      	movs	r2, #165	; 0xa5
 8001dee:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_DEFAULT_XCALIB_READ;
 8001df0:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <checkCommand+0x55c>)
 8001df2:	2272      	movs	r2, #114	; 0x72
 8001df4:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET + 1)); //MSB
 8001df6:	4b4e      	ldr	r3, [pc, #312]	; (8001f30 <checkCommand+0x564>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <checkCommand+0x55c>)
 8001dfe:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET);		 //LSB
 8001e00:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <checkCommand+0x568>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b48      	ldr	r3, [pc, #288]	; (8001f28 <checkCommand+0x55c>)
 8001e08:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET + 1));
 8001e0a:	4b4b      	ldr	r3, [pc, #300]	; (8001f38 <checkCommand+0x56c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	4b45      	ldr	r3, [pc, #276]	; (8001f28 <checkCommand+0x55c>)
 8001e12:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET);
 8001e14:	4b49      	ldr	r3, [pc, #292]	; (8001f3c <checkCommand+0x570>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4b43      	ldr	r3, [pc, #268]	; (8001f28 <checkCommand+0x55c>)
 8001e1c:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET + 1));
 8001e1e:	4b48      	ldr	r3, [pc, #288]	; (8001f40 <checkCommand+0x574>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b40      	ldr	r3, [pc, #256]	; (8001f28 <checkCommand+0x55c>)
 8001e26:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 8001e28:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <checkCommand+0x578>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b3e      	ldr	r3, [pc, #248]	; (8001f28 <checkCommand+0x55c>)
 8001e30:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 8001e32:	2301      	movs	r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	e00b      	b.n	8001e50 <checkCommand+0x484>
				rsSendFormat[8] += rsSendFormat[i];
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4a3b      	ldr	r2, [pc, #236]	; (8001f28 <checkCommand+0x55c>)
 8001e3c:	5cd2      	ldrb	r2, [r2, r3]
 8001e3e:	4b3a      	ldr	r3, [pc, #232]	; (8001f28 <checkCommand+0x55c>)
 8001e40:	7a1b      	ldrb	r3, [r3, #8]
 8001e42:	4413      	add	r3, r2
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <checkCommand+0x55c>)
 8001e48:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b07      	cmp	r3, #7
 8001e54:	d9f0      	bls.n	8001e38 <checkCommand+0x46c>
			HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001e56:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e5a:	2209      	movs	r2, #9
 8001e5c:	4932      	ldr	r1, [pc, #200]	; (8001f28 <checkCommand+0x55c>)
 8001e5e:	4833      	ldr	r0, [pc, #204]	; (8001f2c <checkCommand+0x560>)
 8001e60:	f005 fb9e 	bl	80075a0 <HAL_UART_Transmit>
		break;
 8001e64:	e05b      	b.n	8001f1e <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 8001e66:	4b30      	ldr	r3, [pc, #192]	; (8001f28 <checkCommand+0x55c>)
 8001e68:	22a5      	movs	r2, #165	; 0xa5
 8001e6a:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_DEFAULT_YCALIB_READ;
 8001e6c:	4b2e      	ldr	r3, [pc, #184]	; (8001f28 <checkCommand+0x55c>)
 8001e6e:	2273      	movs	r2, #115	; 0x73
 8001e70:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET + 1));
 8001e72:	4b35      	ldr	r3, [pc, #212]	; (8001f48 <checkCommand+0x57c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b2b      	ldr	r3, [pc, #172]	; (8001f28 <checkCommand+0x55c>)
 8001e7a:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET);
 8001e7c:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <checkCommand+0x580>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <checkCommand+0x55c>)
 8001e84:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET + 1));
 8001e86:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <checkCommand+0x584>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4b26      	ldr	r3, [pc, #152]	; (8001f28 <checkCommand+0x55c>)
 8001e8e:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET);
 8001e90:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <checkCommand+0x588>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <checkCommand+0x55c>)
 8001e98:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET + 1));
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	; (8001f58 <checkCommand+0x58c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <checkCommand+0x55c>)
 8001ea2:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 8001ea4:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <checkCommand+0x590>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <checkCommand+0x55c>)
 8001eac:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 8001eae:	2301      	movs	r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	e00b      	b.n	8001ecc <checkCommand+0x500>
				rsSendFormat[8] += rsSendFormat[i];
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <checkCommand+0x55c>)
 8001eb8:	5cd2      	ldrb	r2, [r2, r3]
 8001eba:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <checkCommand+0x55c>)
 8001ebc:	7a1b      	ldrb	r3, [r3, #8]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <checkCommand+0x55c>)
 8001ec4:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b07      	cmp	r3, #7
 8001ed0:	d9f0      	bls.n	8001eb4 <checkCommand+0x4e8>
			HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001ed2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ed6:	2209      	movs	r2, #9
 8001ed8:	4913      	ldr	r1, [pc, #76]	; (8001f28 <checkCommand+0x55c>)
 8001eda:	4814      	ldr	r0, [pc, #80]	; (8001f2c <checkCommand+0x560>)
 8001edc:	f005 fb60 	bl	80075a0 <HAL_UART_Transmit>
		break;
 8001ee0:	e01d      	b.n	8001f1e <checkCommand+0x552>
			bootloaderCommand();
 8001ee2:	f7fe fd57 	bl	8000994 <bootloaderCommand>
		break;
 8001ee6:	e01a      	b.n	8001f1e <checkCommand+0x552>
			sendAckUart();
 8001ee8:	f7ff fd4e 	bl	8001988 <sendAckUart>
			HAL_NVIC_SystemReset();
 8001eec:	f002 f837 	bl	8003f5e <HAL_NVIC_SystemReset>
		break;
 8001ef0:	e015      	b.n	8001f1e <checkCommand+0x552>
			remoteMode = 0;
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <checkCommand+0x594>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
			sendAckUart();
 8001ef8:	f7ff fd46 	bl	8001988 <sendAckUart>
		break;
 8001efc:	e00f      	b.n	8001f1e <checkCommand+0x552>
			refreshFlashUserConf(&tempTkkConfig);
 8001efe:	4819      	ldr	r0, [pc, #100]	; (8001f64 <checkCommand+0x598>)
 8001f00:	f7ff fbec 	bl	80016dc <refreshFlashUserConf>
			calculateJostickBorders(&userTkkConfig, &tkkJoystickBorder);
 8001f04:	4918      	ldr	r1, [pc, #96]	; (8001f68 <checkCommand+0x59c>)
 8001f06:	4819      	ldr	r0, [pc, #100]	; (8001f6c <checkCommand+0x5a0>)
 8001f08:	f7fe fe7a 	bl	8000c00 <calculateJostickBorders>
			remoteMode = 1;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <checkCommand+0x594>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
			sendAckUart();
 8001f12:	f7ff fd39 	bl	8001988 <sendAckUart>
		break;
 8001f16:	e002      	b.n	8001f1e <checkCommand+0x552>
		break;
 8001f18:	bf00      	nop
 8001f1a:	e000      	b.n	8001f1e <checkCommand+0x552>
		break;
 8001f1c:	bf00      	nop
}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000374 	.word	0x20000374
 8001f2c:	20000604 	.word	0x20000604
 8001f30:	0800f007 	.word	0x0800f007
 8001f34:	0800f006 	.word	0x0800f006
 8001f38:	0800f005 	.word	0x0800f005
 8001f3c:	0800f004 	.word	0x0800f004
 8001f40:	0800f003 	.word	0x0800f003
 8001f44:	0800f002 	.word	0x0800f002
 8001f48:	0800f00d 	.word	0x0800f00d
 8001f4c:	0800f00c 	.word	0x0800f00c
 8001f50:	0800f00b 	.word	0x0800f00b
 8001f54:	0800f00a 	.word	0x0800f00a
 8001f58:	0800f009 	.word	0x0800f009
 8001f5c:	0800f008 	.word	0x0800f008
 8001f60:	20000000 	.word	0x20000000
 8001f64:	20000398 	.word	0x20000398
 8001f68:	20000488 	.word	0x20000488
 8001f6c:	200003e8 	.word	0x200003e8

08001f70 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_arg)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08c      	sub	sp, #48	; 0x30
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rxHeader;
  uint8_t rxData[8];

  if (HAL_CAN_GetRxMessage(hcan_arg, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	f107 0214 	add.w	r2, r7, #20
 8001f80:	2100      	movs	r1, #0
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f001 fb58 	bl	8003638 <HAL_CAN_GetRxMessage>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d110      	bne.n	8001fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
  {
    return;
  }

  if (rxHeader.IDE == CAN_ID_STD && rxHeader.RTR == CAN_RTR_DATA)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10e      	bne.n	8001fb2 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10b      	bne.n	8001fb2 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
  {
	  if(rxHeader.StdId == 0x101)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f240 1201 	movw	r2, #257	; 0x101
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d106      	bne.n	8001fb2 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
	  {
		    checkCommand(rxData);
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fd0f 	bl	80019cc <checkCommand>
 8001fae:	e000      	b.n	8001fb2 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
    return;
 8001fb0:	bf00      	nop
	  }
  }
}
 8001fb2:	3730      	adds	r7, #48	; 0x30
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	unsigned int i;
	tempRxDataIn = rxDataIn;
 8001fc0:	4b32      	ldr	r3, [pc, #200]	; (800208c <HAL_UART_RxCpltCallback+0xd4>)
 8001fc2:	781a      	ldrb	r2, [r3, #0]
 8001fc4:	4b32      	ldr	r3, [pc, #200]	; (8002090 <HAL_UART_RxCpltCallback+0xd8>)
 8001fc6:	701a      	strb	r2, [r3, #0]

	if(rxBufferDataCounter==0 && rxDataIn==0xA5)
 8001fc8:	4b32      	ldr	r3, [pc, #200]	; (8002094 <HAL_UART_RxCpltCallback+0xdc>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10d      	bne.n	8001fec <HAL_UART_RxCpltCallback+0x34>
 8001fd0:	4b2e      	ldr	r3, [pc, #184]	; (800208c <HAL_UART_RxCpltCallback+0xd4>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2ba5      	cmp	r3, #165	; 0xa5
 8001fd6:	d109      	bne.n	8001fec <HAL_UART_RxCpltCallback+0x34>
	{
		rxBuffer[0] = rxDataIn;
 8001fd8:	4b2c      	ldr	r3, [pc, #176]	; (800208c <HAL_UART_RxCpltCallback+0xd4>)
 8001fda:	781a      	ldrb	r2, [r3, #0]
 8001fdc:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <HAL_UART_RxCpltCallback+0xe0>)
 8001fde:	701a      	strb	r2, [r3, #0]
		rxBufferDataCounter++;
 8001fe0:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <HAL_UART_RxCpltCallback+0xdc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	4a2b      	ldr	r2, [pc, #172]	; (8002094 <HAL_UART_RxCpltCallback+0xdc>)
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e04b      	b.n	8002084 <HAL_UART_RxCpltCallback+0xcc>
	}
	else if(rxBufferDataCounter>0 && rxBufferDataCounter<8)
 8001fec:	4b29      	ldr	r3, [pc, #164]	; (8002094 <HAL_UART_RxCpltCallback+0xdc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00f      	beq.n	8002014 <HAL_UART_RxCpltCallback+0x5c>
 8001ff4:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_UART_RxCpltCallback+0xdc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b07      	cmp	r3, #7
 8001ffa:	d80b      	bhi.n	8002014 <HAL_UART_RxCpltCallback+0x5c>
	{
		rxBuffer[rxBufferDataCounter] = rxDataIn;
 8001ffc:	4b25      	ldr	r3, [pc, #148]	; (8002094 <HAL_UART_RxCpltCallback+0xdc>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a22      	ldr	r2, [pc, #136]	; (800208c <HAL_UART_RxCpltCallback+0xd4>)
 8002002:	7811      	ldrb	r1, [r2, #0]
 8002004:	4a24      	ldr	r2, [pc, #144]	; (8002098 <HAL_UART_RxCpltCallback+0xe0>)
 8002006:	54d1      	strb	r1, [r2, r3]
		rxBufferDataCounter++;
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <HAL_UART_RxCpltCallback+0xdc>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	3301      	adds	r3, #1
 800200e:	4a21      	ldr	r2, [pc, #132]	; (8002094 <HAL_UART_RxCpltCallback+0xdc>)
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e037      	b.n	8002084 <HAL_UART_RxCpltCallback+0xcc>
	}
	else if(rxBufferDataCounter==8)
 8002014:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <HAL_UART_RxCpltCallback+0xdc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b08      	cmp	r3, #8
 800201a:	d12f      	bne.n	800207c <HAL_UART_RxCpltCallback+0xc4>
	{
		/* checksum control */
		rxDataCheksum = 0;
 800201c:	4b1f      	ldr	r3, [pc, #124]	; (800209c <HAL_UART_RxCpltCallback+0xe4>)
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
		rxBuffer[rxBufferDataCounter] = rxDataIn;
 8002022:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <HAL_UART_RxCpltCallback+0xdc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a19      	ldr	r2, [pc, #100]	; (800208c <HAL_UART_RxCpltCallback+0xd4>)
 8002028:	7811      	ldrb	r1, [r2, #0]
 800202a:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <HAL_UART_RxCpltCallback+0xe0>)
 800202c:	54d1      	strb	r1, [r2, r3]

		for(i=1;i<9;i++)
 800202e:	2301      	movs	r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	e00c      	b.n	800204e <HAL_UART_RxCpltCallback+0x96>
		{
			rxDataCheksum += rxBuffer[i];
 8002034:	4a18      	ldr	r2, [pc, #96]	; (8002098 <HAL_UART_RxCpltCallback+0xe0>)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4413      	add	r3, r2
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	4b17      	ldr	r3, [pc, #92]	; (800209c <HAL_UART_RxCpltCallback+0xe4>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	4413      	add	r3, r2
 8002042:	b2da      	uxtb	r2, r3
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <HAL_UART_RxCpltCallback+0xe4>)
 8002046:	701a      	strb	r2, [r3, #0]
		for(i=1;i<9;i++)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	3301      	adds	r3, #1
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d9ef      	bls.n	8002034 <HAL_UART_RxCpltCallback+0x7c>
		}
		if(rxDataCheksum==0)
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <HAL_UART_RxCpltCallback+0xe4>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d106      	bne.n	800206a <HAL_UART_RxCpltCallback+0xb2>
		{
			/* checkSum OK, process the command */
			checkCommand(rxBuffer);
 800205c:	480e      	ldr	r0, [pc, #56]	; (8002098 <HAL_UART_RxCpltCallback+0xe0>)
 800205e:	f7ff fcb5 	bl	80019cc <checkCommand>
			rxBufferDataCounter = 0; /* test breakpoint icin */
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <HAL_UART_RxCpltCallback+0xdc>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e004      	b.n	8002074 <HAL_UART_RxCpltCallback+0xbc>
		}
		else
		{
			/* error, do nothing*/
			errorCounter++;
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_UART_RxCpltCallback+0xe8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <HAL_UART_RxCpltCallback+0xe8>)
 8002072:	6013      	str	r3, [r2, #0]
		}
		rxBufferDataCounter = 0;
 8002074:	4b07      	ldr	r3, [pc, #28]	; (8002094 <HAL_UART_RxCpltCallback+0xdc>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
	}
	else
	{
		rxBufferDataCounter = 0;
	}
}
 800207a:	e003      	b.n	8002084 <HAL_UART_RxCpltCallback+0xcc>
		rxBufferDataCounter = 0;
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_UART_RxCpltCallback+0xdc>)
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
}
 8002082:	e7ff      	b.n	8002084 <HAL_UART_RxCpltCallback+0xcc>
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	2000037f 	.word	0x2000037f
 8002090:	2000037e 	.word	0x2000037e
 8002094:	20000380 	.word	0x20000380
 8002098:	20000384 	.word	0x20000384
 800209c:	2000038d 	.word	0x2000038d
 80020a0:	20000390 	.word	0x20000390

080020a4 <writeDefaultConfigPage>:

void writeDefaultConfigPage(void)
{
 80020a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a8:	b08c      	sub	sp, #48	; 0x30
 80020aa:	af00      	add	r7, sp, #0
	uint32_t index = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c

	defaultTkkConfig.tkkModSelection = TKK_MOD_RS422;
 80020b0:	4a5f      	ldr	r2, [pc, #380]	; (8002230 <writeDefaultConfigPage+0x18c>)
 80020b2:	2300      	movs	r3, #0
 80020b4:	8013      	strh	r3, [r2, #0]

	defaultTkkConfig.yMin = 32900;
 80020b6:	4a5e      	ldr	r2, [pc, #376]	; (8002230 <writeDefaultConfigPage+0x18c>)
 80020b8:	f248 0384 	movw	r3, #32900	; 0x8084
 80020bc:	8113      	strh	r3, [r2, #8]
	defaultTkkConfig.yMax = 65535;
 80020be:	4a5c      	ldr	r2, [pc, #368]	; (8002230 <writeDefaultConfigPage+0x18c>)
 80020c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c4:	8153      	strh	r3, [r2, #10]
	defaultTkkConfig.yMid = 49220;
 80020c6:	4a5a      	ldr	r2, [pc, #360]	; (8002230 <writeDefaultConfigPage+0x18c>)
 80020c8:	f24c 0344 	movw	r3, #49220	; 0xc044
 80020cc:	8193      	strh	r3, [r2, #12]

	defaultTkkConfig.xMin = 32900;
 80020ce:	4a58      	ldr	r2, [pc, #352]	; (8002230 <writeDefaultConfigPage+0x18c>)
 80020d0:	f248 0384 	movw	r3, #32900	; 0x8084
 80020d4:	8053      	strh	r3, [r2, #2]
	defaultTkkConfig.xMax = 65535;
 80020d6:	4a56      	ldr	r2, [pc, #344]	; (8002230 <writeDefaultConfigPage+0x18c>)
 80020d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020dc:	8093      	strh	r3, [r2, #4]
	defaultTkkConfig.xMid = 49220;
 80020de:	4a54      	ldr	r2, [pc, #336]	; (8002230 <writeDefaultConfigPage+0x18c>)
 80020e0:	f24c 0344 	movw	r3, #49220	; 0xc044
 80020e4:	80d3      	strh	r3, [r2, #6]

	for(index = 0; index < BUTTON_COUNT; index++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ea:	e009      	b.n	8002100 <writeDefaultConfigPage+0x5c>
	{
		defaultTkkConfig.debounceFactor[index] = 20;
 80020ec:	4950      	ldr	r1, [pc, #320]	; (8002230 <writeDefaultConfigPage+0x18c>)
 80020ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f0:	3304      	adds	r3, #4
 80020f2:	005a      	lsls	r2, r3, #1
 80020f4:	440a      	add	r2, r1
 80020f6:	2314      	movs	r3, #20
 80020f8:	80d3      	strh	r3, [r2, #6]
	for(index = 0; index < BUTTON_COUNT; index++)
 80020fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fc:	3301      	adds	r3, #1
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002102:	2b1f      	cmp	r3, #31
 8002104:	d9f2      	bls.n	80020ec <writeDefaultConfigPage+0x48>
	}

	volatile uint32_t i = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_FLASH_Unlock();
 800210a:	f002 f9d7 	bl	80044bc <HAL_FLASH_Unlock>

	static FLASH_EraseInitTypeDef EraseInitStructDefaultPage;
	EraseInitStructDefaultPage.TypeErase = FLASH_TYPEERASE_PAGES;
 800210e:	4a49      	ldr	r2, [pc, #292]	; (8002234 <writeDefaultConfigPage+0x190>)
 8002110:	2300      	movs	r3, #0
 8002112:	6013      	str	r3, [r2, #0]
	EraseInitStructDefaultPage.PageAddress = DEFAULT_CONFIG_DATA_BASE_ADDR;
 8002114:	4a47      	ldr	r2, [pc, #284]	; (8002234 <writeDefaultConfigPage+0x190>)
 8002116:	4b48      	ldr	r3, [pc, #288]	; (8002238 <writeDefaultConfigPage+0x194>)
 8002118:	6053      	str	r3, [r2, #4]
	EraseInitStructDefaultPage.NbPages = 1;
 800211a:	4a46      	ldr	r2, [pc, #280]	; (8002234 <writeDefaultConfigPage+0x190>)
 800211c:	2301      	movs	r3, #1
 800211e:	6093      	str	r3, [r2, #8]

	if(HAL_FLASHEx_Erase(&EraseInitStructDefaultPage, &PAGEError) != HAL_OK)
 8002120:	4946      	ldr	r1, [pc, #280]	; (800223c <writeDefaultConfigPage+0x198>)
 8002122:	4844      	ldr	r0, [pc, #272]	; (8002234 <writeDefaultConfigPage+0x190>)
 8002124:	f002 fa8e 	bl	8004644 <HAL_FLASHEx_Erase>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <writeDefaultConfigPage+0x8e>
	{
		Error_Handler();
 800212e:	f000 f895 	bl	800225c <Error_Handler>
	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_INTERFACE_OFFSET		, defaultTkkConfig.tkkModSelection );
 8002132:	4b3f      	ldr	r3, [pc, #252]	; (8002230 <writeDefaultConfigPage+0x18c>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	b29b      	uxth	r3, r3
 800213a:	2200      	movs	r2, #0
 800213c:	461c      	mov	r4, r3
 800213e:	4615      	mov	r5, r2
 8002140:	4622      	mov	r2, r4
 8002142:	462b      	mov	r3, r5
 8002144:	493c      	ldr	r1, [pc, #240]	; (8002238 <writeDefaultConfigPage+0x194>)
 8002146:	2001      	movs	r0, #1
 8002148:	f002 f948 	bl	80043dc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET	, defaultTkkConfig.xMid);
 800214c:	4b38      	ldr	r3, [pc, #224]	; (8002230 <writeDefaultConfigPage+0x18c>)
 800214e:	88db      	ldrh	r3, [r3, #6]
 8002150:	b29b      	uxth	r3, r3
 8002152:	b29b      	uxth	r3, r3
 8002154:	2200      	movs	r2, #0
 8002156:	4698      	mov	r8, r3
 8002158:	4691      	mov	r9, r2
 800215a:	4642      	mov	r2, r8
 800215c:	464b      	mov	r3, r9
 800215e:	4938      	ldr	r1, [pc, #224]	; (8002240 <writeDefaultConfigPage+0x19c>)
 8002160:	2001      	movs	r0, #1
 8002162:	f002 f93b 	bl	80043dc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET		, defaultTkkConfig.xMin);
 8002166:	4b32      	ldr	r3, [pc, #200]	; (8002230 <writeDefaultConfigPage+0x18c>)
 8002168:	885b      	ldrh	r3, [r3, #2]
 800216a:	b29b      	uxth	r3, r3
 800216c:	b29b      	uxth	r3, r3
 800216e:	2200      	movs	r2, #0
 8002170:	469a      	mov	sl, r3
 8002172:	4693      	mov	fp, r2
 8002174:	4652      	mov	r2, sl
 8002176:	465b      	mov	r3, fp
 8002178:	4932      	ldr	r1, [pc, #200]	; (8002244 <writeDefaultConfigPage+0x1a0>)
 800217a:	2001      	movs	r0, #1
 800217c:	f002 f92e 	bl	80043dc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET		, defaultTkkConfig.xMax);
 8002180:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <writeDefaultConfigPage+0x18c>)
 8002182:	889b      	ldrh	r3, [r3, #4]
 8002184:	b29b      	uxth	r3, r3
 8002186:	b29b      	uxth	r3, r3
 8002188:	2200      	movs	r2, #0
 800218a:	623b      	str	r3, [r7, #32]
 800218c:	627a      	str	r2, [r7, #36]	; 0x24
 800218e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002192:	492d      	ldr	r1, [pc, #180]	; (8002248 <writeDefaultConfigPage+0x1a4>)
 8002194:	2001      	movs	r0, #1
 8002196:	f002 f921 	bl	80043dc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET	, defaultTkkConfig.yMid);
 800219a:	4b25      	ldr	r3, [pc, #148]	; (8002230 <writeDefaultConfigPage+0x18c>)
 800219c:	899b      	ldrh	r3, [r3, #12]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2200      	movs	r2, #0
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	61fa      	str	r2, [r7, #28]
 80021a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ac:	4927      	ldr	r1, [pc, #156]	; (800224c <writeDefaultConfigPage+0x1a8>)
 80021ae:	2001      	movs	r0, #1
 80021b0:	f002 f914 	bl	80043dc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET		, defaultTkkConfig.yMin);
 80021b4:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <writeDefaultConfigPage+0x18c>)
 80021b6:	891b      	ldrh	r3, [r3, #8]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2200      	movs	r2, #0
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	617a      	str	r2, [r7, #20]
 80021c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021c6:	4922      	ldr	r1, [pc, #136]	; (8002250 <writeDefaultConfigPage+0x1ac>)
 80021c8:	2001      	movs	r0, #1
 80021ca:	f002 f907 	bl	80043dc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET		, defaultTkkConfig.yMax);
 80021ce:	4b18      	ldr	r3, [pc, #96]	; (8002230 <writeDefaultConfigPage+0x18c>)
 80021d0:	895b      	ldrh	r3, [r3, #10]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2200      	movs	r2, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	60fa      	str	r2, [r7, #12]
 80021dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021e0:	491c      	ldr	r1, [pc, #112]	; (8002254 <writeDefaultConfigPage+0x1b0>)
 80021e2:	2001      	movs	r0, #1
 80021e4:	f002 f8fa 	bl	80043dc <HAL_FLASH_Program>

	for(i = 0; i < 32; i++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ec:	e016      	b.n	800221c <writeDefaultConfigPage+0x178>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT, defaultTkkConfig.debounceFactor[i]);
 80021ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4919      	ldr	r1, [pc, #100]	; (8002258 <writeDefaultConfigPage+0x1b4>)
 80021f4:	4419      	add	r1, r3
 80021f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f8:	4a0d      	ldr	r2, [pc, #52]	; (8002230 <writeDefaultConfigPage+0x18c>)
 80021fa:	3304      	adds	r3, #4
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	88db      	ldrh	r3, [r3, #6]
 8002202:	b29b      	uxth	r3, r3
 8002204:	b29b      	uxth	r3, r3
 8002206:	2200      	movs	r2, #0
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002210:	2001      	movs	r0, #1
 8002212:	f002 f8e3 	bl	80043dc <HAL_FLASH_Program>
	for(i = 0; i < 32; i++)
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	3301      	adds	r3, #1
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
 800221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221e:	2b1f      	cmp	r3, #31
 8002220:	d9e5      	bls.n	80021ee <writeDefaultConfigPage+0x14a>
	}

	HAL_FLASH_Lock();
 8002222:	f002 f971 	bl	8004508 <HAL_FLASH_Lock>
}
 8002226:	bf00      	nop
 8002228:	3730      	adds	r7, #48	; 0x30
 800222a:	46bd      	mov	sp, r7
 800222c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002230:	20000438 	.word	0x20000438
 8002234:	200004d8 	.word	0x200004d8
 8002238:	0800f000 	.word	0x0800f000
 800223c:	20000394 	.word	0x20000394
 8002240:	0800f002 	.word	0x0800f002
 8002244:	0800f004 	.word	0x0800f004
 8002248:	0800f006 	.word	0x0800f006
 800224c:	0800f008 	.word	0x0800f008
 8002250:	0800f00a 	.word	0x0800f00a
 8002254:	0800f00c 	.word	0x0800f00c
 8002258:	0800f00e 	.word	0x0800f00e

0800225c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002260:	b672      	cpsid	i
}
 8002262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002264:	e7fe      	b.n	8002264 <Error_Handler+0x8>
	...

08002268 <MX_SDADC1_Init>:
SDADC_HandleTypeDef hsdadc1;
DMA_HandleTypeDef hdma_sdadc1;

/* SDADC1 init function */
void MX_SDADC1_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 800226e:	463b      	mov	r3, r7
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
  /* USER CODE END SDADC1_Init 1 */

  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 800227a:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <MX_SDADC1_Init+0x100>)
 800227c:	4a3b      	ldr	r2, [pc, #236]	; (800236c <MX_SDADC1_Init+0x104>)
 800227e:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <MX_SDADC1_Init+0x100>)
 8002282:	2200      	movs	r2, #0
 8002284:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8002286:	4b38      	ldr	r3, [pc, #224]	; (8002368 <MX_SDADC1_Init+0x100>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 800228c:	4b36      	ldr	r3, [pc, #216]	; (8002368 <MX_SDADC1_Init+0x100>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8002292:	4b35      	ldr	r3, [pc, #212]	; (8002368 <MX_SDADC1_Init+0x100>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  hsdadc1.InjectedTrigger = SDADC_SOFTWARE_TRIGGER;
 8002298:	4b33      	ldr	r3, [pc, #204]	; (8002368 <MX_SDADC1_Init+0x100>)
 800229a:	2200      	movs	r2, #0
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 800229e:	4832      	ldr	r0, [pc, #200]	; (8002368 <MX_SDADC1_Init+0x100>)
 80022a0:	f004 f89e 	bl	80063e0 <HAL_SDADC_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_SDADC1_Init+0x46>
  {
    Error_Handler();
 80022aa:	f7ff ffd7 	bl	800225c <Error_Handler>
  }

  /** Configure the Injected Mode
  */
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc1, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 80022ae:	2100      	movs	r1, #0
 80022b0:	482d      	ldr	r0, [pc, #180]	; (8002368 <MX_SDADC1_Init+0x100>)
 80022b2:	f004 fa61 	bl	8006778 <HAL_SDADC_SelectInjectedDelay>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_SDADC1_Init+0x58>
  {
    Error_Handler();
 80022bc:	f7ff ffce 	bl	800225c <Error_Handler>
  }
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 80022c0:	2100      	movs	r1, #0
 80022c2:	4829      	ldr	r0, [pc, #164]	; (8002368 <MX_SDADC1_Init+0x100>)
 80022c4:	f004 fa28 	bl	8006718 <HAL_SDADC_SelectInjectedTrigger>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_SDADC1_Init+0x6a>
  {
    Error_Handler();
 80022ce:	f7ff ffc5 	bl	800225c <Error_Handler>
  }
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc1, SDADC_CHANNEL_7|SDADC_CHANNEL_8
 80022d2:	2200      	movs	r2, #0
 80022d4:	4926      	ldr	r1, [pc, #152]	; (8002370 <MX_SDADC1_Init+0x108>)
 80022d6:	4824      	ldr	r0, [pc, #144]	; (8002368 <MX_SDADC1_Init+0x100>)
 80022d8:	f004 f9e2 	bl	80066a0 <HAL_SDADC_InjectedConfigChannel>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_SDADC1_Init+0x7e>
                              |SDADC_CHANNEL_4|SDADC_CHANNEL_5, SDADC_CONTINUOUS_CONV_OFF) != HAL_OK)
  {
    Error_Handler();
 80022e2:	f7ff ffbb 	bl	800225c <Error_Handler>
  }

  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_OFFSET;
 80022e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022ea:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 80022ec:	2300      	movs	r3, #0
 80022ee:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	461a      	mov	r2, r3
 80022fc:	2100      	movs	r1, #0
 80022fe:	481a      	ldr	r0, [pc, #104]	; (8002368 <MX_SDADC1_Init+0x100>)
 8002300:	f004 f8fe 	bl	8006500 <HAL_SDADC_PrepareChannelConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_SDADC1_Init+0xa6>
  {
    Error_Handler();
 800230a:	f7ff ffa7 	bl	800225c <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_7, SDADC_CONF_INDEX_0) != HAL_OK)
 800230e:	2200      	movs	r2, #0
 8002310:	4918      	ldr	r1, [pc, #96]	; (8002374 <MX_SDADC1_Init+0x10c>)
 8002312:	4815      	ldr	r0, [pc, #84]	; (8002368 <MX_SDADC1_Init+0x100>)
 8002314:	f004 f930 	bl	8006578 <HAL_SDADC_AssociateChannelConfig>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_SDADC1_Init+0xba>
  {
    Error_Handler();
 800231e:	f7ff ff9d 	bl	800225c <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_8, SDADC_CONF_INDEX_0) != HAL_OK)
 8002322:	2200      	movs	r2, #0
 8002324:	4914      	ldr	r1, [pc, #80]	; (8002378 <MX_SDADC1_Init+0x110>)
 8002326:	4810      	ldr	r0, [pc, #64]	; (8002368 <MX_SDADC1_Init+0x100>)
 8002328:	f004 f926 	bl	8006578 <HAL_SDADC_AssociateChannelConfig>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_SDADC1_Init+0xce>
  {
    Error_Handler();
 8002332:	f7ff ff93 	bl	800225c <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONF_INDEX_0) != HAL_OK)
 8002336:	2200      	movs	r2, #0
 8002338:	4910      	ldr	r1, [pc, #64]	; (800237c <MX_SDADC1_Init+0x114>)
 800233a:	480b      	ldr	r0, [pc, #44]	; (8002368 <MX_SDADC1_Init+0x100>)
 800233c:	f004 f91c 	bl	8006578 <HAL_SDADC_AssociateChannelConfig>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_SDADC1_Init+0xe2>
  {
    Error_Handler();
 8002346:	f7ff ff89 	bl	800225c <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONF_INDEX_0) != HAL_OK)
 800234a:	2200      	movs	r2, #0
 800234c:	490c      	ldr	r1, [pc, #48]	; (8002380 <MX_SDADC1_Init+0x118>)
 800234e:	4806      	ldr	r0, [pc, #24]	; (8002368 <MX_SDADC1_Init+0x100>)
 8002350:	f004 f912 	bl	8006578 <HAL_SDADC_AssociateChannelConfig>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_SDADC1_Init+0xf6>
  {
    Error_Handler();
 800235a:	f7ff ff7f 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200004e4 	.word	0x200004e4
 800236c:	40016000 	.word	0x40016000
 8002370:	000f01b0 	.word	0x000f01b0
 8002374:	00070080 	.word	0x00070080
 8002378:	00080100 	.word	0x00080100
 800237c:	00040010 	.word	0x00040010
 8002380:	00050020 	.word	0x00050020

08002384 <HAL_SDADC_MspInit>:

void HAL_SDADC_MspInit(SDADC_HandleTypeDef* sdadcHandle)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  if(sdadcHandle->Instance==SDADC1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a36      	ldr	r2, [pc, #216]	; (800247c <HAL_SDADC_MspInit+0xf8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d165      	bne.n	8002472 <HAL_SDADC_MspInit+0xee>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* SDADC1 clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 80023a6:	4b36      	ldr	r3, [pc, #216]	; (8002480 <HAL_SDADC_MspInit+0xfc>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	4a35      	ldr	r2, [pc, #212]	; (8002480 <HAL_SDADC_MspInit+0xfc>)
 80023ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b0:	6193      	str	r3, [r2, #24]
 80023b2:	4b33      	ldr	r3, [pc, #204]	; (8002480 <HAL_SDADC_MspInit+0xfc>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023be:	4b30      	ldr	r3, [pc, #192]	; (8002480 <HAL_SDADC_MspInit+0xfc>)
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	4a2f      	ldr	r2, [pc, #188]	; (8002480 <HAL_SDADC_MspInit+0xfc>)
 80023c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c8:	6153      	str	r3, [r2, #20]
 80023ca:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <HAL_SDADC_MspInit+0xfc>)
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023d6:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <HAL_SDADC_MspInit+0xfc>)
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	4a29      	ldr	r2, [pc, #164]	; (8002480 <HAL_SDADC_MspInit+0xfc>)
 80023dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023e0:	6153      	str	r3, [r2, #20]
 80023e2:	4b27      	ldr	r3, [pc, #156]	; (8002480 <HAL_SDADC_MspInit+0xfc>)
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> SDADC1_AIN5P
    PB2     ------> SDADC1_AIN4P
    PE8     ------> SDADC1_AIN8P
    PE9     ------> SDADC1_AIN7P
    */
    GPIO_InitStruct.Pin = AN_ADC4_Pin|AN_ADC3_Pin;
 80023ee:	2306      	movs	r3, #6
 80023f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023f2:	2303      	movs	r3, #3
 80023f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4619      	mov	r1, r3
 8002400:	4820      	ldr	r0, [pc, #128]	; (8002484 <HAL_SDADC_MspInit+0x100>)
 8002402:	f002 f9c3 	bl	800478c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AN_ADC2_Pin|AN_ADC1_Pin;
 8002406:	f44f 7340 	mov.w	r3, #768	; 0x300
 800240a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800240c:	2303      	movs	r3, #3
 800240e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4619      	mov	r1, r3
 800241a:	481b      	ldr	r0, [pc, #108]	; (8002488 <HAL_SDADC_MspInit+0x104>)
 800241c:	f002 f9b6 	bl	800478c <HAL_GPIO_Init>

    /* SDADC1 DMA Init */
    /* SDADC1 Init */
    hdma_sdadc1.Instance = DMA2_Channel3;
 8002420:	4b1a      	ldr	r3, [pc, #104]	; (800248c <HAL_SDADC_MspInit+0x108>)
 8002422:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <HAL_SDADC_MspInit+0x10c>)
 8002424:	601a      	str	r2, [r3, #0]
    hdma_sdadc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002426:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_SDADC_MspInit+0x108>)
 8002428:	2200      	movs	r2, #0
 800242a:	605a      	str	r2, [r3, #4]
    hdma_sdadc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_SDADC_MspInit+0x108>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
    hdma_sdadc1.Init.MemInc = DMA_MINC_ENABLE;
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_SDADC_MspInit+0x108>)
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	60da      	str	r2, [r3, #12]
    hdma_sdadc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_SDADC_MspInit+0x108>)
 800243a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800243e:	611a      	str	r2, [r3, #16]
    hdma_sdadc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_SDADC_MspInit+0x108>)
 8002442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002446:	615a      	str	r2, [r3, #20]
    hdma_sdadc1.Init.Mode = DMA_CIRCULAR;
 8002448:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_SDADC_MspInit+0x108>)
 800244a:	2220      	movs	r2, #32
 800244c:	619a      	str	r2, [r3, #24]
    hdma_sdadc1.Init.Priority = DMA_PRIORITY_HIGH;
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_SDADC_MspInit+0x108>)
 8002450:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002454:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_sdadc1) != HAL_OK)
 8002456:	480d      	ldr	r0, [pc, #52]	; (800248c <HAL_SDADC_MspInit+0x108>)
 8002458:	f001 fd91 	bl	8003f7e <HAL_DMA_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_SDADC_MspInit+0xe2>
    {
      Error_Handler();
 8002462:	f7ff fefb 	bl	800225c <Error_Handler>
    }

    __HAL_LINKDMA(sdadcHandle,hdma,hdma_sdadc1);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a08      	ldr	r2, [pc, #32]	; (800248c <HAL_SDADC_MspInit+0x108>)
 800246a:	615a      	str	r2, [r3, #20]
 800246c:	4a07      	ldr	r2, [pc, #28]	; (800248c <HAL_SDADC_MspInit+0x108>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SDADC1_MspInit 1 */

  /* USER CODE END SDADC1_MspInit 1 */
  }
}
 8002472:	bf00      	nop
 8002474:	3728      	adds	r7, #40	; 0x28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40016000 	.word	0x40016000
 8002480:	40021000 	.word	0x40021000
 8002484:	48000400 	.word	0x48000400
 8002488:	48001000 	.word	0x48001000
 800248c:	20000528 	.word	0x20000528
 8002490:	40020430 	.word	0x40020430

08002494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_MspInit+0x44>)
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <HAL_MspInit+0x44>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6193      	str	r3, [r2, #24]
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <HAL_MspInit+0x44>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_MspInit+0x44>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <HAL_MspInit+0x44>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024bc:	61d3      	str	r3, [r2, #28]
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_MspInit+0x44>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000

080024dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024e0:	e7fe      	b.n	80024e0 <NMI_Handler+0x4>

080024e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e6:	e7fe      	b.n	80024e6 <HardFault_Handler+0x4>

080024e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <MemManage_Handler+0x4>

080024ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f2:	e7fe      	b.n	80024f2 <BusFault_Handler+0x4>

080024f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <UsageFault_Handler+0x4>

080024fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002528:	f000 fa68 	bl	80029fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}

08002530 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <DMA1_Channel1_IRQHandler+0x10>)
 8002536:	f001 fe44 	bl	80041c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	2000005c 	.word	0x2000005c

08002544 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <DMA1_Channel5_IRQHandler+0x10>)
 800254a:	f001 fe3a 	bl	80041c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	2000068c 	.word	0x2000068c

08002558 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <CAN_RX0_IRQHandler+0x10>)
 800255e:	f001 f9b3 	bl	80038c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200000a0 	.word	0x200000a0

0800256c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  sendUartFlag = true;
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <TIM2_IRQHandler+0x2c>)
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
		sendUartFrame(&huart1, rs422Frame, 10 , 5000, &sendUartFlag);
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <TIM2_IRQHandler+0x2c>)
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002580:	220a      	movs	r2, #10
 8002582:	4906      	ldr	r1, [pc, #24]	; (800259c <TIM2_IRQHandler+0x30>)
 8002584:	4806      	ldr	r0, [pc, #24]	; (80025a0 <TIM2_IRQHandler+0x34>)
 8002586:	f7fe fdf7 	bl	8001178 <sendUartFrame>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800258a:	4806      	ldr	r0, [pc, #24]	; (80025a4 <TIM2_IRQHandler+0x38>)
 800258c:	f004 fc08 	bl	8006da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	2000037d 	.word	0x2000037d
 800259c:	20000368 	.word	0x20000368
 80025a0:	20000604 	.word	0x20000604
 80025a4:	2000056c 	.word	0x2000056c

080025a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	  //analog sample flag
		//SDADC_ScanConversion();
		sampleAnalogInputs = true;
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <TIM3_IRQHandler+0x20>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]

		//digital read function
		readDigitalInputs(getDigitalInputs());
 80025b2:	f7fe fdd7 	bl	8001164 <getDigitalInputs>
 80025b6:	4603      	mov	r3, r0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fdac 	bl	8001116 <readDigitalInputs>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025be:	4803      	ldr	r0, [pc, #12]	; (80025cc <TIM3_IRQHandler+0x24>)
 80025c0:	f004 fbee 	bl	8006da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200000c8 	.word	0x200000c8
 80025cc:	200005b8 	.word	0x200005b8

080025d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <USART1_IRQHandler+0x10>)
 80025d6:	f005 f8b1 	bl	800773c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000604 	.word	0x20000604

080025e4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc1);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <DMA2_Channel3_IRQHandler+0x10>)
 80025ea:	f001 fdea 	bl	80041c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000528 	.word	0x20000528

080025f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <SystemInit+0x20>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <SystemInit+0x20>)
 8002604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002622:	f107 0308 	add.w	r3, r7, #8
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002630:	463b      	mov	r3, r7
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002638:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <MX_TIM2_Init+0x94>)
 800263a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800263e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8002640:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <MX_TIM2_Init+0x94>)
 8002642:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002646:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002648:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <MX_TIM2_Init+0x94>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 800264e:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <MX_TIM2_Init+0x94>)
 8002650:	2204      	movs	r2, #4
 8002652:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <MX_TIM2_Init+0x94>)
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <MX_TIM2_Init+0x94>)
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002660:	4813      	ldr	r0, [pc, #76]	; (80026b0 <MX_TIM2_Init+0x94>)
 8002662:	f004 fae5 	bl	8006c30 <HAL_TIM_Base_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800266c:	f7ff fdf6 	bl	800225c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002674:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002676:	f107 0308 	add.w	r3, r7, #8
 800267a:	4619      	mov	r1, r3
 800267c:	480c      	ldr	r0, [pc, #48]	; (80026b0 <MX_TIM2_Init+0x94>)
 800267e:	f004 fc7f 	bl	8006f80 <HAL_TIM_ConfigClockSource>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002688:	f7ff fde8 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268c:	2300      	movs	r3, #0
 800268e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002694:	463b      	mov	r3, r7
 8002696:	4619      	mov	r1, r3
 8002698:	4805      	ldr	r0, [pc, #20]	; (80026b0 <MX_TIM2_Init+0x94>)
 800269a:	f004 feab 	bl	80073f4 <HAL_TIMEx_MasterConfigSynchronization>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80026a4:	f7ff fdda 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026a8:	bf00      	nop
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	2000056c 	.word	0x2000056c

080026b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ba:	f107 0308 	add.w	r3, r7, #8
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c8:	463b      	mov	r3, r7
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026d0:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <MX_TIM3_Init+0x94>)
 80026d2:	4a1e      	ldr	r2, [pc, #120]	; (800274c <MX_TIM3_Init+0x98>)
 80026d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4800;
 80026d6:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <MX_TIM3_Init+0x94>)
 80026d8:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 80026dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <MX_TIM3_Init+0x94>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4;
 80026e4:	4b18      	ldr	r3, [pc, #96]	; (8002748 <MX_TIM3_Init+0x94>)
 80026e6:	2204      	movs	r2, #4
 80026e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ea:	4b17      	ldr	r3, [pc, #92]	; (8002748 <MX_TIM3_Init+0x94>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <MX_TIM3_Init+0x94>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026f6:	4814      	ldr	r0, [pc, #80]	; (8002748 <MX_TIM3_Init+0x94>)
 80026f8:	f004 fa9a 	bl	8006c30 <HAL_TIM_Base_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002702:	f7ff fdab 	bl	800225c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800270a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800270c:	f107 0308 	add.w	r3, r7, #8
 8002710:	4619      	mov	r1, r3
 8002712:	480d      	ldr	r0, [pc, #52]	; (8002748 <MX_TIM3_Init+0x94>)
 8002714:	f004 fc34 	bl	8006f80 <HAL_TIM_ConfigClockSource>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800271e:	f7ff fd9d 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800272a:	463b      	mov	r3, r7
 800272c:	4619      	mov	r1, r3
 800272e:	4806      	ldr	r0, [pc, #24]	; (8002748 <MX_TIM3_Init+0x94>)
 8002730:	f004 fe60 	bl	80073f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800273a:	f7ff fd8f 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200005b8 	.word	0x200005b8
 800274c:	40000400 	.word	0x40000400

08002750 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002760:	d114      	bne.n	800278c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002762:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_TIM_Base_MspInit+0x78>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <HAL_TIM_Base_MspInit+0x78>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	61d3      	str	r3, [r2, #28]
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_TIM_Base_MspInit+0x78>)
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	201c      	movs	r0, #28
 8002780:	f001 fbc3 	bl	8003f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002784:	201c      	movs	r0, #28
 8002786:	f001 fbdc 	bl	8003f42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800278a:	e018      	b.n	80027be <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0e      	ldr	r2, [pc, #56]	; (80027cc <HAL_TIM_Base_MspInit+0x7c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d113      	bne.n	80027be <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002796:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <HAL_TIM_Base_MspInit+0x78>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	4a0b      	ldr	r2, [pc, #44]	; (80027c8 <HAL_TIM_Base_MspInit+0x78>)
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	61d3      	str	r3, [r2, #28]
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_TIM_Base_MspInit+0x78>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	201d      	movs	r0, #29
 80027b4:	f001 fba9 	bl	8003f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027b8:	201d      	movs	r0, #29
 80027ba:	f001 fbc2 	bl	8003f42 <HAL_NVIC_EnableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40000400 	.word	0x40000400

080027d0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <MX_USART1_UART_Init+0x58>)
 80027d6:	4a15      	ldr	r2, [pc, #84]	; (800282c <MX_USART1_UART_Init+0x5c>)
 80027d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <MX_USART1_UART_Init+0x58>)
 80027dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027e2:	4b11      	ldr	r3, [pc, #68]	; (8002828 <MX_USART1_UART_Init+0x58>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <MX_USART1_UART_Init+0x58>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <MX_USART1_UART_Init+0x58>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <MX_USART1_UART_Init+0x58>)
 80027f6:	220c      	movs	r2, #12
 80027f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <MX_USART1_UART_Init+0x58>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <MX_USART1_UART_Init+0x58>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <MX_USART1_UART_Init+0x58>)
 8002808:	2200      	movs	r2, #0
 800280a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <MX_USART1_UART_Init+0x58>)
 800280e:	2200      	movs	r2, #0
 8002810:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002812:	4805      	ldr	r0, [pc, #20]	; (8002828 <MX_USART1_UART_Init+0x58>)
 8002814:	f004 fe76 	bl	8007504 <HAL_UART_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800281e:	f7ff fd1d 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000604 	.word	0x20000604
 800282c:	40013800 	.word	0x40013800

08002830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a2f      	ldr	r2, [pc, #188]	; (800290c <HAL_UART_MspInit+0xdc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d158      	bne.n	8002904 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002852:	4b2f      	ldr	r3, [pc, #188]	; (8002910 <HAL_UART_MspInit+0xe0>)
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	4a2e      	ldr	r2, [pc, #184]	; (8002910 <HAL_UART_MspInit+0xe0>)
 8002858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800285c:	6193      	str	r3, [r2, #24]
 800285e:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <HAL_UART_MspInit+0xe0>)
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286a:	4b29      	ldr	r3, [pc, #164]	; (8002910 <HAL_UART_MspInit+0xe0>)
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	4a28      	ldr	r2, [pc, #160]	; (8002910 <HAL_UART_MspInit+0xe0>)
 8002870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002874:	6153      	str	r3, [r2, #20]
 8002876:	4b26      	ldr	r3, [pc, #152]	; (8002910 <HAL_UART_MspInit+0xe0>)
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002882:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002890:	2303      	movs	r3, #3
 8002892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002894:	2307      	movs	r3, #7
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	4619      	mov	r1, r3
 800289e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a2:	f001 ff73 	bl	800478c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80028a6:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <HAL_UART_MspInit+0xe4>)
 80028a8:	4a1b      	ldr	r2, [pc, #108]	; (8002918 <HAL_UART_MspInit+0xe8>)
 80028aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_UART_MspInit+0xe4>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <HAL_UART_MspInit+0xe4>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_UART_MspInit+0xe4>)
 80028ba:	2280      	movs	r2, #128	; 0x80
 80028bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_UART_MspInit+0xe4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028c4:	4b13      	ldr	r3, [pc, #76]	; (8002914 <HAL_UART_MspInit+0xe4>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_UART_MspInit+0xe4>)
 80028cc:	2220      	movs	r2, #32
 80028ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028d0:	4b10      	ldr	r3, [pc, #64]	; (8002914 <HAL_UART_MspInit+0xe4>)
 80028d2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80028d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028d8:	480e      	ldr	r0, [pc, #56]	; (8002914 <HAL_UART_MspInit+0xe4>)
 80028da:	f001 fb50 	bl	8003f7e <HAL_DMA_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 80028e4:	f7ff fcba 	bl	800225c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <HAL_UART_MspInit+0xe4>)
 80028ec:	675a      	str	r2, [r3, #116]	; 0x74
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_UART_MspInit+0xe4>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028f4:	2200      	movs	r2, #0
 80028f6:	2100      	movs	r1, #0
 80028f8:	2025      	movs	r0, #37	; 0x25
 80028fa:	f001 fb06 	bl	8003f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028fe:	2025      	movs	r0, #37	; 0x25
 8002900:	f001 fb1f 	bl	8003f42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002904:	bf00      	nop
 8002906:	3728      	adds	r7, #40	; 0x28
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40013800 	.word	0x40013800
 8002910:	40021000 	.word	0x40021000
 8002914:	2000068c 	.word	0x2000068c
 8002918:	40020058 	.word	0x40020058

0800291c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800291c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002954 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002920:	f7ff fe6a 	bl	80025f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002924:	480c      	ldr	r0, [pc, #48]	; (8002958 <LoopForever+0x6>)
  ldr r1, =_edata
 8002926:	490d      	ldr	r1, [pc, #52]	; (800295c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002928:	4a0d      	ldr	r2, [pc, #52]	; (8002960 <LoopForever+0xe>)
  movs r3, #0
 800292a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800292c:	e002      	b.n	8002934 <LoopCopyDataInit>

0800292e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002932:	3304      	adds	r3, #4

08002934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002938:	d3f9      	bcc.n	800292e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <LoopForever+0x12>)
  ldr r4, =_ebss
 800293c:	4c0a      	ldr	r4, [pc, #40]	; (8002968 <LoopForever+0x16>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002940:	e001      	b.n	8002946 <LoopFillZerobss>

08002942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002944:	3204      	adds	r2, #4

08002946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002948:	d3fb      	bcc.n	8002942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800294a:	f005 ffa7 	bl	800889c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800294e:	f7fd fee7 	bl	8000720 <main>

08002952 <LoopForever>:

LoopForever:
    b LoopForever
 8002952:	e7fe      	b.n	8002952 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002954:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800295c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002960:	0800893c 	.word	0x0800893c
  ldr r2, =_sbss
 8002964:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002968:	200006f8 	.word	0x200006f8

0800296c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800296c:	e7fe      	b.n	800296c <ADC1_IRQHandler>
	...

08002970 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <HAL_Init+0x28>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a07      	ldr	r2, [pc, #28]	; (8002998 <HAL_Init+0x28>)
 800297a:	f043 0310 	orr.w	r3, r3, #16
 800297e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002980:	2003      	movs	r0, #3
 8002982:	f001 fab7 	bl	8003ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002986:	2000      	movs	r0, #0
 8002988:	f000 f808 	bl	800299c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800298c:	f7ff fd82 	bl	8002494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40022000 	.word	0x40022000

0800299c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_InitTick+0x54>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <HAL_InitTick+0x58>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	4619      	mov	r1, r3
 80029ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f001 fad3 	bl	8003f66 <HAL_SYSTICK_Config>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00e      	b.n	80029e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b0f      	cmp	r3, #15
 80029ce:	d80a      	bhi.n	80029e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029d0:	2200      	movs	r2, #0
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295
 80029d8:	f001 fa97 	bl	8003f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029dc:	4a06      	ldr	r2, [pc, #24]	; (80029f8 <HAL_InitTick+0x5c>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	e000      	b.n	80029e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20000004 	.word	0x20000004
 80029f4:	2000000c 	.word	0x2000000c
 80029f8:	20000008 	.word	0x20000008

080029fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_IncTick+0x20>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_IncTick+0x24>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <HAL_IncTick+0x24>)
 8002a0e:	6013      	str	r3, [r2, #0]
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	2000000c 	.word	0x2000000c
 8002a20:	200006d0 	.word	0x200006d0

08002a24 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return uwTick;  
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <HAL_GetTick+0x14>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	200006d0 	.word	0x200006d0

08002a3c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7ff ffee 	bl	8002a24 <HAL_GetTick>
 8002a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a54:	d005      	beq.n	8002a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <HAL_Delay+0x44>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4413      	add	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002a62:	bf00      	nop
 8002a64:	f7ff ffde 	bl	8002a24 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d8f7      	bhi.n	8002a64 <HAL_Delay+0x28>
  {
  }
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000000c 	.word	0x2000000c

08002a84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0be      	b.n	8002c24 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fd fbea 	bl	800029c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fa9b 	bl	8003004 <ADC_ConversionStop_Disable>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 8099 	bne.w	8002c12 <HAL_ADC_Init+0x18e>
 8002ae0:	7dfb      	ldrb	r3, [r7, #23]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f040 8095 	bne.w	8002c12 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002af0:	f023 0302 	bic.w	r3, r3, #2
 8002af4:	f043 0202 	orr.w	r2, r3, #2
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8002b04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	7b1b      	ldrb	r3, [r3, #12]
 8002b0a:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 8002b0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1c:	d003      	beq.n	8002b26 <HAL_ADC_Init+0xa2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d102      	bne.n	8002b2c <HAL_ADC_Init+0xa8>
 8002b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b2a:	e000      	b.n	8002b2e <HAL_ADC_Init+0xaa>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	7d1b      	ldrb	r3, [r3, #20]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d119      	bne.n	8002b70 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7b1b      	ldrb	r3, [r3, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d109      	bne.n	8002b58 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	e00b      	b.n	8002b70 <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	f043 0220 	orr.w	r2, r3, #32
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f043 0201 	orr.w	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <HAL_ADC_Init+0x1a8>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	430b      	orrs	r3, r1
 8002b96:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba0:	d003      	beq.n	8002baa <HAL_ADC_Init+0x126>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d104      	bne.n	8002bb4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	051b      	lsls	r3, r3, #20
 8002bb2:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <HAL_ADC_Init+0x1ac>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bee:	e018      	b.n	8002c22 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	f023 0312 	bic.w	r3, r3, #18
 8002bf8:	f043 0210 	orr.w	r2, r3, #16
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	f043 0201 	orr.w	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c10:	e007      	b.n	8002c22 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	f043 0210 	orr.w	r2, r3, #16
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	ffe1f7fd 	.word	0xffe1f7fd
 8002c30:	ff1f0efe 	.word	0xff1f0efe

08002c34 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADCEx_Calibration_Start+0x1e>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e08a      	b.n	8002d68 <HAL_ADCEx_Calibration_Start+0x134>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f9d2 	bl	8003004 <ADC_ConversionStop_Disable>
 8002c60:	4603      	mov	r3, r0
 8002c62:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d179      	bne.n	8002d5e <HAL_ADCEx_Calibration_Start+0x12a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c72:	f023 0302 	bic.w	r3, r3, #2
 8002c76:	f043 0202 	orr.w	r2, r3, #2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Wait two ADC clock cycles */
    while(wait_loop_index < ADC_CYCLE_WORST_CASE_CPU_CYCLES *2U)
 8002c7e:	e002      	b.n	8002c86 <HAL_ADCEx_Calibration_Start+0x52>
    {
      wait_loop_index++;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	3301      	adds	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index < ADC_CYCLE_WORST_CASE_CPU_CYCLES *2U)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2bff      	cmp	r3, #255	; 0xff
 8002c8a:	d9f9      	bls.n	8002c80 <HAL_ADCEx_Calibration_Start+0x4c>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f95f 	bl	8002f50 <ADC_Enable>
    

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0208 	orr.w	r2, r2, #8
 8002ca0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002ca2:	f7ff febf 	bl	8002a24 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002ca8:	e01b      	b.n	8002ce2 <HAL_ADCEx_Calibration_Start+0xae>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002caa:	f7ff febb 	bl	8002a24 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b0a      	cmp	r3, #10
 8002cb6:	d914      	bls.n	8002ce2 <HAL_ADCEx_Calibration_Start+0xae>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	f023 0312 	bic.w	r3, r3, #18
 8002cce:	f043 0210 	orr.w	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e042      	b.n	8002d68 <HAL_ADCEx_Calibration_Start+0x134>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d0dc      	beq.n	8002caa <HAL_ADCEx_Calibration_Start+0x76>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0204 	orr.w	r2, r2, #4
 8002cfe:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002d00:	f7ff fe90 	bl	8002a24 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002d06:	e01b      	b.n	8002d40 <HAL_ADCEx_Calibration_Start+0x10c>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002d08:	f7ff fe8c 	bl	8002a24 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b0a      	cmp	r3, #10
 8002d14:	d914      	bls.n	8002d40 <HAL_ADCEx_Calibration_Start+0x10c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d10d      	bne.n	8002d40 <HAL_ADCEx_Calibration_Start+0x10c>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	f023 0312 	bic.w	r3, r3, #18
 8002d2c:	f043 0210 	orr.w	r2, r3, #16
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;            
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e013      	b.n	8002d68 <HAL_ADCEx_Calibration_Start+0x134>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d0dc      	beq.n	8002d08 <HAL_ADCEx_Calibration_Start+0xd4>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	f023 0303 	bic.w	r3, r3, #3
 8002d56:	f043 0201 	orr.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x20>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e0d2      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x1c6>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b06      	cmp	r3, #6
 8002d9e:	d81c      	bhi.n	8002dda <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	3b05      	subs	r3, #5
 8002db2:	221f      	movs	r2, #31
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	4019      	ands	r1, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	3b05      	subs	r3, #5
 8002dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	635a      	str	r2, [r3, #52]	; 0x34
 8002dd8:	e03c      	b.n	8002e54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b0c      	cmp	r3, #12
 8002de0:	d81c      	bhi.n	8002e1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	3b23      	subs	r3, #35	; 0x23
 8002df4:	221f      	movs	r2, #31
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	4019      	ands	r1, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3b23      	subs	r3, #35	; 0x23
 8002e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
 8002e1a:	e01b      	b.n	8002e54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3b41      	subs	r3, #65	; 0x41
 8002e2e:	221f      	movs	r2, #31
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	4019      	ands	r1, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	3b41      	subs	r3, #65	; 0x41
 8002e48:	fa00 f203 	lsl.w	r2, r0, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b0a      	cmp	r3, #10
 8002e5a:	d91c      	bls.n	8002e96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68d9      	ldr	r1, [r3, #12]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3b1e      	subs	r3, #30
 8002e6e:	2207      	movs	r2, #7
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	4019      	ands	r1, r3
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	6898      	ldr	r0, [r3, #8]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	3b1e      	subs	r3, #30
 8002e88:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	60da      	str	r2, [r3, #12]
 8002e94:	e019      	b.n	8002eca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6919      	ldr	r1, [r3, #16]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	2207      	movs	r2, #7
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	4019      	ands	r1, r3
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	6898      	ldr	r0, [r3, #8]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	4413      	add	r3, r2
 8002ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b10      	cmp	r3, #16
 8002ed0:	d003      	beq.n	8002eda <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ed6:	2b11      	cmp	r3, #17
 8002ed8:	d11e      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ee8:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b10      	cmp	r3, #16
 8002ef0:	d11c      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ef2:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <HAL_ADC_ConfigChannel+0x1d4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a14      	ldr	r2, [pc, #80]	; (8002f48 <HAL_ADC_ConfigChannel+0x1d8>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	0c9a      	lsrs	r2, r3, #18
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8002f08:	e002      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f9      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002f16:	e009      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b12      	cmp	r3, #18
 8002f1e:	d105      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 8002f20:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_ADC_ConfigChannel+0x1dc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <HAL_ADC_ConfigChannel+0x1dc>)
 8002f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f2a:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	20000004 	.word	0x20000004
 8002f48:	431bde83 	.word	0x431bde83
 8002f4c:	40010000 	.word	0x40010000

08002f50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d040      	beq.n	8002ff0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0201 	orr.w	r2, r2, #1
 8002f7c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f7e:	4b1f      	ldr	r3, [pc, #124]	; (8002ffc <ADC_Enable+0xac>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1f      	ldr	r2, [pc, #124]	; (8003000 <ADC_Enable+0xb0>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	0c9b      	lsrs	r3, r3, #18
 8002f8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f8c:	e002      	b.n	8002f94 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f9      	bne.n	8002f8e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f9a:	f7ff fd43 	bl	8002a24 <HAL_GetTick>
 8002f9e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fa0:	e01f      	b.n	8002fe2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fa2:	f7ff fd3f 	bl	8002a24 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d918      	bls.n	8002fe2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d011      	beq.n	8002fe2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	f043 0210 	orr.w	r2, r3, #16
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	f043 0201 	orr.w	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e007      	b.n	8002ff2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d1d8      	bne.n	8002fa2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000004 	.word	0x20000004
 8003000:	431bde83 	.word	0x431bde83

08003004 <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b01      	cmp	r3, #1
 800301c:	d12e      	bne.n	800307c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0201 	bic.w	r2, r2, #1
 800302c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800302e:	f7ff fcf9 	bl	8002a24 <HAL_GetTick>
 8003032:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003034:	e01b      	b.n	800306e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003036:	f7ff fcf5 	bl	8002a24 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d914      	bls.n	800306e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b01      	cmp	r3, #1
 8003050:	d10d      	bne.n	800306e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	f043 0210 	orr.w	r2, r3, #16
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	f043 0201 	orr.w	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e007      	b.n	800307e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b01      	cmp	r3, #1
 800307a:	d0dc      	beq.n	8003036 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0ed      	b.n	8003274 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7fd f9cf 	bl	8000448 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0201 	orr.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030ba:	f7ff fcb3 	bl	8002a24 <HAL_GetTick>
 80030be:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030c0:	e012      	b.n	80030e8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030c2:	f7ff fcaf 	bl	8002a24 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b0a      	cmp	r3, #10
 80030ce:	d90b      	bls.n	80030e8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2205      	movs	r2, #5
 80030e0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0c5      	b.n	8003274 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0e5      	beq.n	80030c2 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0202 	bic.w	r2, r2, #2
 8003104:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003106:	f7ff fc8d 	bl	8002a24 <HAL_GetTick>
 800310a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800310c:	e012      	b.n	8003134 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800310e:	f7ff fc89 	bl	8002a24 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b0a      	cmp	r3, #10
 800311a:	d90b      	bls.n	8003134 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2205      	movs	r2, #5
 800312c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e09f      	b.n	8003274 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e5      	bne.n	800310e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	7e1b      	ldrb	r3, [r3, #24]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d108      	bne.n	800315c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	e007      	b.n	800316c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800316a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7e5b      	ldrb	r3, [r3, #25]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d108      	bne.n	8003186 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e007      	b.n	8003196 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003194:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	7e9b      	ldrb	r3, [r3, #26]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d108      	bne.n	80031b0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0220 	orr.w	r2, r2, #32
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	e007      	b.n	80031c0 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0220 	bic.w	r2, r2, #32
 80031be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7edb      	ldrb	r3, [r3, #27]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d108      	bne.n	80031da <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0210 	bic.w	r2, r2, #16
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	e007      	b.n	80031ea <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0210 	orr.w	r2, r2, #16
 80031e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7f1b      	ldrb	r3, [r3, #28]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d108      	bne.n	8003204 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0208 	orr.w	r2, r2, #8
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e007      	b.n	8003214 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0208 	bic.w	r2, r2, #8
 8003212:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7f5b      	ldrb	r3, [r3, #29]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d108      	bne.n	800322e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0204 	orr.w	r2, r2, #4
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	e007      	b.n	800323e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0204 	bic.w	r2, r2, #4
 800323c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	ea42 0103 	orr.w	r1, r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	1e5a      	subs	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003292:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d003      	beq.n	80032a2 <HAL_CAN_ConfigFilter+0x26>
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	2b02      	cmp	r3, #2
 800329e:	f040 80aa 	bne.w	80033f6 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80032a8:	f043 0201 	orr.w	r2, r3, #1
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 031f 	and.w	r3, r3, #31
 80032ba:	2201      	movs	r2, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	401a      	ands	r2, r3
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d123      	bne.n	8003324 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	401a      	ands	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80032fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3248      	adds	r2, #72	; 0x48
 8003304:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003318:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800331a:	6979      	ldr	r1, [r7, #20]
 800331c:	3348      	adds	r3, #72	; 0x48
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	440b      	add	r3, r1
 8003322:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d122      	bne.n	8003372 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	431a      	orrs	r2, r3
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800334c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3248      	adds	r2, #72	; 0x48
 8003352:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003366:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003368:	6979      	ldr	r1, [r7, #20]
 800336a:	3348      	adds	r3, #72	; 0x48
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	440b      	add	r3, r1
 8003370:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	43db      	mvns	r3, r3
 8003384:	401a      	ands	r2, r3
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800338c:	e007      	b.n	800339e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	431a      	orrs	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	401a      	ands	r2, r3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80033b8:	e007      	b.n	80033ca <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d107      	bne.n	80033e2 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	431a      	orrs	r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033e8:	f023 0201 	bic.w	r2, r3, #1
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e006      	b.n	8003404 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
  }
}
 8003404:	4618      	mov	r0, r3
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	d12e      	bne.n	8003482 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800343c:	f7ff faf2 	bl	8002a24 <HAL_GetTick>
 8003440:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003442:	e012      	b.n	800346a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003444:	f7ff faee 	bl	8002a24 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b0a      	cmp	r3, #10
 8003450:	d90b      	bls.n	800346a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2205      	movs	r2, #5
 8003462:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e012      	b.n	8003490 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e5      	bne.n	8003444 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	e006      	b.n	8003490 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
  }
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003498:	b480      	push	{r7}
 800349a:	b089      	sub	sp, #36	; 0x24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80034b6:	7ffb      	ldrb	r3, [r7, #31]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d003      	beq.n	80034c4 <HAL_CAN_AddTxMessage+0x2c>
 80034bc:	7ffb      	ldrb	r3, [r7, #31]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	f040 80ad 	bne.w	800361e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d105      	bne.n	80034e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8095 	beq.w	800360e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	0e1b      	lsrs	r3, r3, #24
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80034ee:	2201      	movs	r2, #1
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	409a      	lsls	r2, r3
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10d      	bne.n	800351c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	6809      	ldr	r1, [r1, #0]
 800350e:	431a      	orrs	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	3318      	adds	r3, #24
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	440b      	add	r3, r1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e00f      	b.n	800353c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003526:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800352c:	68f9      	ldr	r1, [r7, #12]
 800352e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003530:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	3318      	adds	r3, #24
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	440b      	add	r3, r1
 800353a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6819      	ldr	r1, [r3, #0]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	3318      	adds	r3, #24
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	440b      	add	r3, r1
 800354c:	3304      	adds	r3, #4
 800354e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	7d1b      	ldrb	r3, [r3, #20]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d111      	bne.n	800357c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	3318      	adds	r3, #24
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	4413      	add	r3, r2
 8003564:	3304      	adds	r3, #4
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	6811      	ldr	r1, [r2, #0]
 800356c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3318      	adds	r3, #24
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	440b      	add	r3, r1
 8003578:	3304      	adds	r3, #4
 800357a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3307      	adds	r3, #7
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	061a      	lsls	r2, r3, #24
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3306      	adds	r3, #6
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	041b      	lsls	r3, r3, #16
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3305      	adds	r3, #5
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	4313      	orrs	r3, r2
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	3204      	adds	r2, #4
 800359c:	7812      	ldrb	r2, [r2, #0]
 800359e:	4610      	mov	r0, r2
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	6811      	ldr	r1, [r2, #0]
 80035a4:	ea43 0200 	orr.w	r2, r3, r0
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	440b      	add	r3, r1
 80035ae:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80035b2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3303      	adds	r3, #3
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	061a      	lsls	r2, r3, #24
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3302      	adds	r3, #2
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	041b      	lsls	r3, r3, #16
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3301      	adds	r3, #1
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	4313      	orrs	r3, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	7812      	ldrb	r2, [r2, #0]
 80035d4:	4610      	mov	r0, r2
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	6811      	ldr	r1, [r2, #0]
 80035da:	ea43 0200 	orr.w	r2, r3, r0
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	440b      	add	r3, r1
 80035e4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80035e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	3318      	adds	r3, #24
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	4413      	add	r3, r2
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	6811      	ldr	r1, [r2, #0]
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3318      	adds	r3, #24
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	440b      	add	r3, r1
 8003608:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e00e      	b.n	800362c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e006      	b.n	800362c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
  }
}
 800362c:	4618      	mov	r0, r3
 800362e:	3724      	adds	r7, #36	; 0x24
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800364c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800364e:	7dfb      	ldrb	r3, [r7, #23]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d003      	beq.n	800365c <HAL_CAN_GetRxMessage+0x24>
 8003654:	7dfb      	ldrb	r3, [r7, #23]
 8003656:	2b02      	cmp	r3, #2
 8003658:	f040 8103 	bne.w	8003862 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10e      	bne.n	8003680 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d116      	bne.n	800369e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0f7      	b.n	8003870 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d107      	bne.n	800369e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0e8      	b.n	8003870 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	331b      	adds	r3, #27
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	4413      	add	r3, r2
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0204 	and.w	r2, r3, #4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10c      	bne.n	80036d6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	331b      	adds	r3, #27
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	4413      	add	r3, r2
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	0d5b      	lsrs	r3, r3, #21
 80036cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e00b      	b.n	80036ee <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	331b      	adds	r3, #27
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	4413      	add	r3, r2
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	08db      	lsrs	r3, r3, #3
 80036e6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	331b      	adds	r3, #27
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	4413      	add	r3, r2
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0202 	and.w	r2, r3, #2
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	331b      	adds	r3, #27
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	4413      	add	r3, r2
 8003710:	3304      	adds	r3, #4
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2208      	movs	r2, #8
 8003720:	611a      	str	r2, [r3, #16]
 8003722:	e00b      	b.n	800373c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	331b      	adds	r3, #27
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	4413      	add	r3, r2
 8003730:	3304      	adds	r3, #4
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 020f 	and.w	r2, r3, #15
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	331b      	adds	r3, #27
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	4413      	add	r3, r2
 8003748:	3304      	adds	r3, #4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	0a1b      	lsrs	r3, r3, #8
 800374e:	b2da      	uxtb	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	331b      	adds	r3, #27
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	4413      	add	r3, r2
 8003760:	3304      	adds	r3, #4
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	0c1b      	lsrs	r3, r3, #16
 8003766:	b29a      	uxth	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	4413      	add	r3, r2
 8003776:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	4413      	add	r3, r2
 800378c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	0a1a      	lsrs	r2, r3, #8
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	3301      	adds	r3, #1
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	0c1a      	lsrs	r2, r3, #16
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	3302      	adds	r3, #2
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	4413      	add	r3, r2
 80037c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	0e1a      	lsrs	r2, r3, #24
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	3303      	adds	r3, #3
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	4413      	add	r3, r2
 80037da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	3304      	adds	r3, #4
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	0a1a      	lsrs	r2, r3, #8
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	3305      	adds	r3, #5
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	4413      	add	r3, r2
 800380c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	0c1a      	lsrs	r2, r3, #16
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	3306      	adds	r3, #6
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	4413      	add	r3, r2
 8003826:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	0e1a      	lsrs	r2, r3, #24
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	3307      	adds	r3, #7
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d108      	bne.n	800384e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0220 	orr.w	r2, r2, #32
 800384a:	60da      	str	r2, [r3, #12]
 800384c:	e007      	b.n	800385e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 0220 	orr.w	r2, r2, #32
 800385c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	e006      	b.n	8003870 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
  }
}
 8003870:	4618      	mov	r0, r3
 8003872:	371c      	adds	r7, #28
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800388c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d002      	beq.n	800389a <HAL_CAN_ActivateNotification+0x1e>
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d109      	bne.n	80038ae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6959      	ldr	r1, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e006      	b.n	80038bc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
  }
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80038d0:	2300      	movs	r3, #0
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d07c      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d023      	beq.n	8003960 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2201      	movs	r2, #1
 800391e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f983 	bl	8003c36 <HAL_CAN_TxMailbox0CompleteCallback>
 8003930:	e016      	b.n	8003960 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d004      	beq.n	8003946 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
 8003944:	e00c      	b.n	8003960 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d004      	beq.n	800395a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
 8003958:	e002      	b.n	8003960 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f989 	bl	8003c72 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003966:	2b00      	cmp	r3, #0
 8003968:	d024      	beq.n	80039b4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003972:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f963 	bl	8003c4a <HAL_CAN_TxMailbox1CompleteCallback>
 8003984:	e016      	b.n	80039b4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
 8003998:	e00c      	b.n	80039b4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d004      	beq.n	80039ae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
 80039ac:	e002      	b.n	80039b4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f969 	bl	8003c86 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d024      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80039c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f943 	bl	8003c5e <HAL_CAN_TxMailbox2CompleteCallback>
 80039d8:	e016      	b.n	8003a08 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d004      	beq.n	80039ee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
 80039ec:	e00c      	b.n	8003a08 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d004      	beq.n	8003a02 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003a00:	e002      	b.n	8003a08 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f949 	bl	8003c9a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00c      	beq.n	8003a2c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2210      	movs	r2, #16
 8003a2a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d006      	beq.n	8003a4e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2208      	movs	r2, #8
 8003a46:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f930 	bl	8003cae <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d009      	beq.n	8003a6c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fe fa82 	bl	8001f70 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00c      	beq.n	8003a90 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2210      	movs	r2, #16
 8003a8e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	f003 0320 	and.w	r3, r3, #32
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d006      	beq.n	8003ab2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f912 	bl	8003cd6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d009      	beq.n	8003ad0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f8f9 	bl	8003cc2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d006      	beq.n	8003af2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2210      	movs	r2, #16
 8003aea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f8fc 	bl	8003cea <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00b      	beq.n	8003b14 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d006      	beq.n	8003b14 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f8f5 	bl	8003cfe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d07b      	beq.n	8003c16 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d072      	beq.n	8003c0e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d008      	beq.n	8003b44 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	f043 0302 	orr.w	r3, r3, #2
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	f043 0304 	orr.w	r3, r3, #4
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d043      	beq.n	8003c0e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d03e      	beq.n	8003c0e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b96:	2b60      	cmp	r3, #96	; 0x60
 8003b98:	d02b      	beq.n	8003bf2 <HAL_CAN_IRQHandler+0x32a>
 8003b9a:	2b60      	cmp	r3, #96	; 0x60
 8003b9c:	d82e      	bhi.n	8003bfc <HAL_CAN_IRQHandler+0x334>
 8003b9e:	2b50      	cmp	r3, #80	; 0x50
 8003ba0:	d022      	beq.n	8003be8 <HAL_CAN_IRQHandler+0x320>
 8003ba2:	2b50      	cmp	r3, #80	; 0x50
 8003ba4:	d82a      	bhi.n	8003bfc <HAL_CAN_IRQHandler+0x334>
 8003ba6:	2b40      	cmp	r3, #64	; 0x40
 8003ba8:	d019      	beq.n	8003bde <HAL_CAN_IRQHandler+0x316>
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d826      	bhi.n	8003bfc <HAL_CAN_IRQHandler+0x334>
 8003bae:	2b30      	cmp	r3, #48	; 0x30
 8003bb0:	d010      	beq.n	8003bd4 <HAL_CAN_IRQHandler+0x30c>
 8003bb2:	2b30      	cmp	r3, #48	; 0x30
 8003bb4:	d822      	bhi.n	8003bfc <HAL_CAN_IRQHandler+0x334>
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d002      	beq.n	8003bc0 <HAL_CAN_IRQHandler+0x2f8>
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d005      	beq.n	8003bca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003bbe:	e01d      	b.n	8003bfc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	f043 0308 	orr.w	r3, r3, #8
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bc8:	e019      	b.n	8003bfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	f043 0310 	orr.w	r3, r3, #16
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bd2:	e014      	b.n	8003bfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	f043 0320 	orr.w	r3, r3, #32
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bdc:	e00f      	b.n	8003bfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003be6:	e00a      	b.n	8003bfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bf0:	e005      	b.n	8003bfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bfa:	e000      	b.n	8003bfe <HAL_CAN_IRQHandler+0x336>
            break;
 8003bfc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699a      	ldr	r2, [r3, #24]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c0c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2204      	movs	r2, #4
 8003c14:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f872 	bl	8003d12 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003c2e:	bf00      	nop
 8003c30:	3728      	adds	r7, #40	; 0x28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
	...

08003d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <__NVIC_SetPriorityGrouping+0x44>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d44:	4013      	ands	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d5a:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <__NVIC_SetPriorityGrouping+0x44>)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	60d3      	str	r3, [r2, #12]
}
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	e000ed00 	.word	0xe000ed00

08003d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <__NVIC_GetPriorityGrouping+0x18>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	0a1b      	lsrs	r3, r3, #8
 8003d7a:	f003 0307 	and.w	r3, r3, #7
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	e000ed00 	.word	0xe000ed00

08003d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	db0b      	blt.n	8003db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	f003 021f 	and.w	r2, r3, #31
 8003da4:	4907      	ldr	r1, [pc, #28]	; (8003dc4 <__NVIC_EnableIRQ+0x38>)
 8003da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	2001      	movs	r0, #1
 8003dae:	fa00 f202 	lsl.w	r2, r0, r2
 8003db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	e000e100 	.word	0xe000e100

08003dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	6039      	str	r1, [r7, #0]
 8003dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	db0a      	blt.n	8003df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	490c      	ldr	r1, [pc, #48]	; (8003e14 <__NVIC_SetPriority+0x4c>)
 8003de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de6:	0112      	lsls	r2, r2, #4
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	440b      	add	r3, r1
 8003dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003df0:	e00a      	b.n	8003e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	4908      	ldr	r1, [pc, #32]	; (8003e18 <__NVIC_SetPriority+0x50>)
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	3b04      	subs	r3, #4
 8003e00:	0112      	lsls	r2, r2, #4
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	440b      	add	r3, r1
 8003e06:	761a      	strb	r2, [r3, #24]
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	e000e100 	.word	0xe000e100
 8003e18:	e000ed00 	.word	0xe000ed00

08003e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b089      	sub	sp, #36	; 0x24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f1c3 0307 	rsb	r3, r3, #7
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	bf28      	it	cs
 8003e3a:	2304      	movcs	r3, #4
 8003e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	3304      	adds	r3, #4
 8003e42:	2b06      	cmp	r3, #6
 8003e44:	d902      	bls.n	8003e4c <NVIC_EncodePriority+0x30>
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	3b03      	subs	r3, #3
 8003e4a:	e000      	b.n	8003e4e <NVIC_EncodePriority+0x32>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e50:	f04f 32ff 	mov.w	r2, #4294967295
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43da      	mvns	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	401a      	ands	r2, r3
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e64:	f04f 31ff 	mov.w	r1, #4294967295
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6e:	43d9      	mvns	r1, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e74:	4313      	orrs	r3, r2
         );
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3724      	adds	r7, #36	; 0x24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
	...

08003e84 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e88:	f3bf 8f4f 	dsb	sy
}
 8003e8c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <__NVIC_SystemReset+0x24>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003e96:	4904      	ldr	r1, [pc, #16]	; (8003ea8 <__NVIC_SystemReset+0x24>)
 8003e98:	4b04      	ldr	r3, [pc, #16]	; (8003eac <__NVIC_SystemReset+0x28>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e9e:	f3bf 8f4f 	dsb	sy
}
 8003ea2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003ea4:	bf00      	nop
 8003ea6:	e7fd      	b.n	8003ea4 <__NVIC_SystemReset+0x20>
 8003ea8:	e000ed00 	.word	0xe000ed00
 8003eac:	05fa0004 	.word	0x05fa0004

08003eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ec0:	d301      	bcc.n	8003ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e00f      	b.n	8003ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <SysTick_Config+0x40>)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ece:	210f      	movs	r1, #15
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed4:	f7ff ff78 	bl	8003dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ed8:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <SysTick_Config+0x40>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ede:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <SysTick_Config+0x40>)
 8003ee0:	2207      	movs	r2, #7
 8003ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	e000e010 	.word	0xe000e010

08003ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff ff13 	bl	8003d28 <__NVIC_SetPriorityGrouping>
}
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b086      	sub	sp, #24
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	4603      	mov	r3, r0
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
 8003f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f1c:	f7ff ff28 	bl	8003d70 <__NVIC_GetPriorityGrouping>
 8003f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	6978      	ldr	r0, [r7, #20]
 8003f28:	f7ff ff78 	bl	8003e1c <NVIC_EncodePriority>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f32:	4611      	mov	r1, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ff47 	bl	8003dc8 <__NVIC_SetPriority>
}
 8003f3a:	bf00      	nop
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	4603      	mov	r3, r0
 8003f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff ff1b 	bl	8003d8c <__NVIC_EnableIRQ>
}
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003f62:	f7ff ff8f 	bl	8003e84 <__NVIC_SystemReset>

08003f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff ff9e 	bl	8003eb0 <SysTick_Config>
 8003f74:	4603      	mov	r3, r0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e037      	b.n	8004004 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003faa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003fae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f9bc 	bl	8004364 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_DMA_Start_IT+0x20>
 8004028:	2302      	movs	r3, #2
 800402a:	e04a      	b.n	80040c2 <HAL_DMA_Start_IT+0xb6>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800403a:	2b01      	cmp	r3, #1
 800403c:	d13a      	bne.n	80040b4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f950 	bl	8004308 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 020e 	orr.w	r2, r2, #14
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	e00f      	b.n	80040a2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 020a 	orr.w	r2, r2, #10
 8004090:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0204 	bic.w	r2, r2, #4
 80040a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0201 	orr.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	e005      	b.n	80040c0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80040bc:	2302      	movs	r3, #2
 80040be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e02e      	b.n	800413a <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d008      	beq.n	80040f8 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2204      	movs	r2, #4
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e020      	b.n	800413a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 020e 	bic.w	r2, r2, #14
 8004106:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0201 	bic.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004120:	2101      	movs	r1, #1
 8004122:	fa01 f202 	lsl.w	r2, r1, r2
 8004126:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004158:	2b02      	cmp	r3, #2
 800415a:	d005      	beq.n	8004168 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2204      	movs	r2, #4
 8004160:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
 8004166:	e027      	b.n	80041b8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 020e 	bic.w	r2, r2, #14
 8004176:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0201 	bic.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004190:	2101      	movs	r1, #1
 8004192:	fa01 f202 	lsl.w	r2, r1, r2
 8004196:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	4798      	blx	r3
    }
  }
  return status;
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	2204      	movs	r2, #4
 80041e0:	409a      	lsls	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d024      	beq.n	8004234 <HAL_DMA_IRQHandler+0x72>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d01f      	beq.n	8004234 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d107      	bne.n	8004212 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0204 	bic.w	r2, r2, #4
 8004210:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421a:	2104      	movs	r1, #4
 800421c:	fa01 f202 	lsl.w	r2, r1, r2
 8004220:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	2b00      	cmp	r3, #0
 8004228:	d06a      	beq.n	8004300 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004232:	e065      	b.n	8004300 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	2202      	movs	r2, #2
 800423a:	409a      	lsls	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4013      	ands	r3, r2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d02c      	beq.n	800429e <HAL_DMA_IRQHandler+0xdc>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d027      	beq.n	800429e <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10b      	bne.n	8004274 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 020a 	bic.w	r2, r2, #10
 800426a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427c:	2102      	movs	r1, #2
 800427e:	fa01 f202 	lsl.w	r2, r1, r2
 8004282:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	d035      	beq.n	8004300 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800429c:	e030      	b.n	8004300 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	2208      	movs	r2, #8
 80042a4:	409a      	lsls	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d028      	beq.n	8004300 <HAL_DMA_IRQHandler+0x13e>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d023      	beq.n	8004300 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 020e 	bic.w	r2, r2, #14
 80042c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d0:	2101      	movs	r1, #1
 80042d2:	fa01 f202 	lsl.w	r2, r1, r2
 80042d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	4798      	blx	r3
    }
  }
}
 80042fe:	e7ff      	b.n	8004300 <HAL_DMA_IRQHandler+0x13e>
 8004300:	bf00      	nop
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	2101      	movs	r1, #1
 8004320:	fa01 f202 	lsl.w	r2, r1, r2
 8004324:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b10      	cmp	r3, #16
 8004334:	d108      	bne.n	8004348 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004346:	e007      	b.n	8004358 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	60da      	str	r2, [r3, #12]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <DMA_CalcBaseAndBitshift+0x60>)
 8004374:	429a      	cmp	r2, r3
 8004376:	d80f      	bhi.n	8004398 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004380:	4413      	add	r3, r2
 8004382:	4a12      	ldr	r2, [pc, #72]	; (80043cc <DMA_CalcBaseAndBitshift+0x68>)
 8004384:	fba2 2303 	umull	r2, r3, r2, r3
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	009a      	lsls	r2, r3, #2
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a0f      	ldr	r2, [pc, #60]	; (80043d0 <DMA_CalcBaseAndBitshift+0x6c>)
 8004394:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004396:	e00e      	b.n	80043b6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <DMA_CalcBaseAndBitshift+0x70>)
 80043a0:	4413      	add	r3, r2
 80043a2:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <DMA_CalcBaseAndBitshift+0x68>)
 80043a4:	fba2 2303 	umull	r2, r3, r2, r3
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	009a      	lsls	r2, r3, #2
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a09      	ldr	r2, [pc, #36]	; (80043d8 <DMA_CalcBaseAndBitshift+0x74>)
 80043b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40020407 	.word	0x40020407
 80043c8:	bffdfff8 	.word	0xbffdfff8
 80043cc:	cccccccd 	.word	0xcccccccd
 80043d0:	40020000 	.word	0x40020000
 80043d4:	bffdfbf8 	.word	0xbffdfbf8
 80043d8:	40020400 	.word	0x40020400

080043dc <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80043dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80043f6:	4b2f      	ldr	r3, [pc, #188]	; (80044b4 <HAL_FLASH_Program+0xd8>)
 80043f8:	7e1b      	ldrb	r3, [r3, #24]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_FLASH_Program+0x26>
 80043fe:	2302      	movs	r3, #2
 8004400:	e054      	b.n	80044ac <HAL_FLASH_Program+0xd0>
 8004402:	4b2c      	ldr	r3, [pc, #176]	; (80044b4 <HAL_FLASH_Program+0xd8>)
 8004404:	2201      	movs	r2, #1
 8004406:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004408:	f24c 3050 	movw	r0, #50000	; 0xc350
 800440c:	f000 f8a8 	bl	8004560 <FLASH_WaitForLastOperation>
 8004410:	4603      	mov	r3, r0
 8004412:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d144      	bne.n	80044a4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d102      	bne.n	8004426 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004420:	2301      	movs	r3, #1
 8004422:	757b      	strb	r3, [r7, #21]
 8004424:	e007      	b.n	8004436 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d102      	bne.n	8004432 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800442c:	2302      	movs	r3, #2
 800442e:	757b      	strb	r3, [r7, #21]
 8004430:	e001      	b.n	8004436 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004432:	2304      	movs	r3, #4
 8004434:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004436:	2300      	movs	r3, #0
 8004438:	75bb      	strb	r3, [r7, #22]
 800443a:	e02d      	b.n	8004498 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800443c:	7dbb      	ldrb	r3, [r7, #22]
 800443e:	005a      	lsls	r2, r3, #1
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	eb02 0c03 	add.w	ip, r2, r3
 8004446:	7dbb      	ldrb	r3, [r7, #22]
 8004448:	0119      	lsls	r1, r3, #4
 800444a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800444e:	f1c1 0620 	rsb	r6, r1, #32
 8004452:	f1a1 0020 	sub.w	r0, r1, #32
 8004456:	fa22 f401 	lsr.w	r4, r2, r1
 800445a:	fa03 f606 	lsl.w	r6, r3, r6
 800445e:	4334      	orrs	r4, r6
 8004460:	fa23 f000 	lsr.w	r0, r3, r0
 8004464:	4304      	orrs	r4, r0
 8004466:	fa23 f501 	lsr.w	r5, r3, r1
 800446a:	b2a3      	uxth	r3, r4
 800446c:	4619      	mov	r1, r3
 800446e:	4660      	mov	r0, ip
 8004470:	f000 f85a 	bl	8004528 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004474:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004478:	f000 f872 	bl	8004560 <FLASH_WaitForLastOperation>
 800447c:	4603      	mov	r3, r0
 800447e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004480:	4b0d      	ldr	r3, [pc, #52]	; (80044b8 <HAL_FLASH_Program+0xdc>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	4a0c      	ldr	r2, [pc, #48]	; (80044b8 <HAL_FLASH_Program+0xdc>)
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800448c:	7dfb      	ldrb	r3, [r7, #23]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d107      	bne.n	80044a2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004492:	7dbb      	ldrb	r3, [r7, #22]
 8004494:	3301      	adds	r3, #1
 8004496:	75bb      	strb	r3, [r7, #22]
 8004498:	7dba      	ldrb	r2, [r7, #22]
 800449a:	7d7b      	ldrb	r3, [r7, #21]
 800449c:	429a      	cmp	r2, r3
 800449e:	d3cd      	bcc.n	800443c <HAL_FLASH_Program+0x60>
 80044a0:	e000      	b.n	80044a4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80044a2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80044a4:	4b03      	ldr	r3, [pc, #12]	; (80044b4 <HAL_FLASH_Program+0xd8>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	761a      	strb	r2, [r3, #24]

  return status;
 80044aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b4:	200006d8 	.word	0x200006d8
 80044b8:	40022000 	.word	0x40022000

080044bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80044c6:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <HAL_FLASH_Unlock+0x40>)
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00d      	beq.n	80044ee <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80044d2:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <HAL_FLASH_Unlock+0x40>)
 80044d4:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <HAL_FLASH_Unlock+0x44>)
 80044d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80044d8:	4b08      	ldr	r3, [pc, #32]	; (80044fc <HAL_FLASH_Unlock+0x40>)
 80044da:	4a0a      	ldr	r2, [pc, #40]	; (8004504 <HAL_FLASH_Unlock+0x48>)
 80044dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80044de:	4b07      	ldr	r3, [pc, #28]	; (80044fc <HAL_FLASH_Unlock+0x40>)
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80044ee:	79fb      	ldrb	r3, [r7, #7]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40022000 	.word	0x40022000
 8004500:	45670123 	.word	0x45670123
 8004504:	cdef89ab 	.word	0xcdef89ab

08004508 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <HAL_FLASH_Lock+0x1c>)
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	4a04      	ldr	r2, [pc, #16]	; (8004524 <HAL_FLASH_Lock+0x1c>)
 8004512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004516:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	40022000 	.word	0x40022000

08004528 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004534:	4b08      	ldr	r3, [pc, #32]	; (8004558 <FLASH_Program_HalfWord+0x30>)
 8004536:	2200      	movs	r2, #0
 8004538:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <FLASH_Program_HalfWord+0x34>)
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	4a07      	ldr	r2, [pc, #28]	; (800455c <FLASH_Program_HalfWord+0x34>)
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	887a      	ldrh	r2, [r7, #2]
 800454a:	801a      	strh	r2, [r3, #0]
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	200006d8 	.word	0x200006d8
 800455c:	40022000 	.word	0x40022000

08004560 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004568:	f7fe fa5c 	bl	8002a24 <HAL_GetTick>
 800456c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800456e:	e010      	b.n	8004592 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004576:	d00c      	beq.n	8004592 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <FLASH_WaitForLastOperation+0x2e>
 800457e:	f7fe fa51 	bl	8002a24 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	429a      	cmp	r2, r3
 800458c:	d201      	bcs.n	8004592 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e01f      	b.n	80045d2 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004592:	4b12      	ldr	r3, [pc, #72]	; (80045dc <FLASH_WaitForLastOperation+0x7c>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b01      	cmp	r3, #1
 800459c:	d0e8      	beq.n	8004570 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800459e:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <FLASH_WaitForLastOperation+0x7c>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d102      	bne.n	80045b0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80045aa:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <FLASH_WaitForLastOperation+0x7c>)
 80045ac:	2220      	movs	r2, #32
 80045ae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <FLASH_WaitForLastOperation+0x7c>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b10      	cmp	r3, #16
 80045ba:	d005      	beq.n	80045c8 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80045bc:	4b07      	ldr	r3, [pc, #28]	; (80045dc <FLASH_WaitForLastOperation+0x7c>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d103      	bne.n	80045d0 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80045c8:	f000 f80a 	bl	80045e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40022000 	.word	0x40022000

080045e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80045ea:	4b14      	ldr	r3, [pc, #80]	; (800463c <FLASH_SetErrorCode+0x5c>)
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d109      	bne.n	800460a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80045f6:	4b12      	ldr	r3, [pc, #72]	; (8004640 <FLASH_SetErrorCode+0x60>)
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f043 0302 	orr.w	r3, r3, #2
 80045fe:	4a10      	ldr	r2, [pc, #64]	; (8004640 <FLASH_SetErrorCode+0x60>)
 8004600:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f043 0310 	orr.w	r3, r3, #16
 8004608:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800460a:	4b0c      	ldr	r3, [pc, #48]	; (800463c <FLASH_SetErrorCode+0x5c>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f003 0304 	and.w	r3, r3, #4
 8004612:	2b04      	cmp	r3, #4
 8004614:	d109      	bne.n	800462a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004616:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <FLASH_SetErrorCode+0x60>)
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	4a08      	ldr	r2, [pc, #32]	; (8004640 <FLASH_SetErrorCode+0x60>)
 8004620:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f043 0304 	orr.w	r3, r3, #4
 8004628:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800462a:	4a04      	ldr	r2, [pc, #16]	; (800463c <FLASH_SetErrorCode+0x5c>)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60d3      	str	r3, [r2, #12]
}  
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	40022000 	.word	0x40022000
 8004640:	200006d8 	.word	0x200006d8

08004644 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004656:	4b2e      	ldr	r3, [pc, #184]	; (8004710 <HAL_FLASHEx_Erase+0xcc>)
 8004658:	7e1b      	ldrb	r3, [r3, #24]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_FLASHEx_Erase+0x1e>
 800465e:	2302      	movs	r3, #2
 8004660:	e052      	b.n	8004708 <HAL_FLASHEx_Erase+0xc4>
 8004662:	4b2b      	ldr	r3, [pc, #172]	; (8004710 <HAL_FLASHEx_Erase+0xcc>)
 8004664:	2201      	movs	r2, #1
 8004666:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d115      	bne.n	800469c <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004670:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004674:	f7ff ff74 	bl	8004560 <FLASH_WaitForLastOperation>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d140      	bne.n	8004700 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800467e:	f000 f84b 	bl	8004718 <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004682:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004686:	f7ff ff6b 	bl	8004560 <FLASH_WaitForLastOperation>
 800468a:	4603      	mov	r3, r0
 800468c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800468e:	4b21      	ldr	r3, [pc, #132]	; (8004714 <HAL_FLASHEx_Erase+0xd0>)
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	4a20      	ldr	r2, [pc, #128]	; (8004714 <HAL_FLASHEx_Erase+0xd0>)
 8004694:	f023 0304 	bic.w	r3, r3, #4
 8004698:	6113      	str	r3, [r2, #16]
 800469a:	e031      	b.n	8004700 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800469c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80046a0:	f7ff ff5e 	bl	8004560 <FLASH_WaitForLastOperation>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d12a      	bne.n	8004700 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	f04f 32ff 	mov.w	r2, #4294967295
 80046b0:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	e019      	b.n	80046ee <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80046ba:	68b8      	ldr	r0, [r7, #8]
 80046bc:	f000 f846 	bl	800474c <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80046c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80046c4:	f7ff ff4c 	bl	8004560 <FLASH_WaitForLastOperation>
 80046c8:	4603      	mov	r3, r0
 80046ca:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80046cc:	4b11      	ldr	r3, [pc, #68]	; (8004714 <HAL_FLASHEx_Erase+0xd0>)
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	4a10      	ldr	r2, [pc, #64]	; (8004714 <HAL_FLASHEx_Erase+0xd0>)
 80046d2:	f023 0302 	bic.w	r3, r3, #2
 80046d6:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	601a      	str	r2, [r3, #0]
            break;
 80046e4:	e00c      	b.n	8004700 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ec:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	02da      	lsls	r2, r3, #11
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4413      	add	r3, r2
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d3dc      	bcc.n	80046ba <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004700:	4b03      	ldr	r3, [pc, #12]	; (8004710 <HAL_FLASHEx_Erase+0xcc>)
 8004702:	2200      	movs	r2, #0
 8004704:	761a      	strb	r2, [r3, #24]

  return status;
 8004706:	7bfb      	ldrb	r3, [r7, #15]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	200006d8 	.word	0x200006d8
 8004714:	40022000 	.word	0x40022000

08004718 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800471c:	4b09      	ldr	r3, [pc, #36]	; (8004744 <FLASH_MassErase+0x2c>)
 800471e:	2200      	movs	r2, #0
 8004720:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004722:	4b09      	ldr	r3, [pc, #36]	; (8004748 <FLASH_MassErase+0x30>)
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	4a08      	ldr	r2, [pc, #32]	; (8004748 <FLASH_MassErase+0x30>)
 8004728:	f043 0304 	orr.w	r3, r3, #4
 800472c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800472e:	4b06      	ldr	r3, [pc, #24]	; (8004748 <FLASH_MassErase+0x30>)
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	4a05      	ldr	r2, [pc, #20]	; (8004748 <FLASH_MassErase+0x30>)
 8004734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004738:	6113      	str	r3, [r2, #16]
}
 800473a:	bf00      	nop
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	200006d8 	.word	0x200006d8
 8004748:	40022000 	.word	0x40022000

0800474c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004754:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <FLASH_PageErase+0x38>)
 8004756:	2200      	movs	r2, #0
 8004758:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800475a:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <FLASH_PageErase+0x3c>)
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <FLASH_PageErase+0x3c>)
 8004760:	f043 0302 	orr.w	r3, r3, #2
 8004764:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004766:	4a08      	ldr	r2, [pc, #32]	; (8004788 <FLASH_PageErase+0x3c>)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800476c:	4b06      	ldr	r3, [pc, #24]	; (8004788 <FLASH_PageErase+0x3c>)
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	4a05      	ldr	r2, [pc, #20]	; (8004788 <FLASH_PageErase+0x3c>)
 8004772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004776:	6113      	str	r3, [r2, #16]
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	200006d8 	.word	0x200006d8
 8004788:	40022000 	.word	0x40022000

0800478c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800479a:	e154      	b.n	8004a46 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	2101      	movs	r1, #1
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	fa01 f303 	lsl.w	r3, r1, r3
 80047a8:	4013      	ands	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 8146 	beq.w	8004a40 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d005      	beq.n	80047cc <HAL_GPIO_Init+0x40>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d130      	bne.n	800482e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	2203      	movs	r2, #3
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	43db      	mvns	r3, r3
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	4013      	ands	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004802:	2201      	movs	r2, #1
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43db      	mvns	r3, r3
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4013      	ands	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	091b      	lsrs	r3, r3, #4
 8004818:	f003 0201 	and.w	r2, r3, #1
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b03      	cmp	r3, #3
 8004838:	d017      	beq.n	800486a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	2203      	movs	r2, #3
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4013      	ands	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d123      	bne.n	80048be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	08da      	lsrs	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3208      	adds	r2, #8
 800487e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004882:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	220f      	movs	r2, #15
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4013      	ands	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	08da      	lsrs	r2, r3, #3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3208      	adds	r2, #8
 80048b8:	6939      	ldr	r1, [r7, #16]
 80048ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	2203      	movs	r2, #3
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	43db      	mvns	r3, r3
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4013      	ands	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f003 0203 	and.w	r2, r3, #3
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 80a0 	beq.w	8004a40 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004900:	4b58      	ldr	r3, [pc, #352]	; (8004a64 <HAL_GPIO_Init+0x2d8>)
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	4a57      	ldr	r2, [pc, #348]	; (8004a64 <HAL_GPIO_Init+0x2d8>)
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	6193      	str	r3, [r2, #24]
 800490c:	4b55      	ldr	r3, [pc, #340]	; (8004a64 <HAL_GPIO_Init+0x2d8>)
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004918:	4a53      	ldr	r2, [pc, #332]	; (8004a68 <HAL_GPIO_Init+0x2dc>)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	089b      	lsrs	r3, r3, #2
 800491e:	3302      	adds	r3, #2
 8004920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004924:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	220f      	movs	r2, #15
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	43db      	mvns	r3, r3
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4013      	ands	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004942:	d019      	beq.n	8004978 <HAL_GPIO_Init+0x1ec>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a49      	ldr	r2, [pc, #292]	; (8004a6c <HAL_GPIO_Init+0x2e0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d013      	beq.n	8004974 <HAL_GPIO_Init+0x1e8>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a48      	ldr	r2, [pc, #288]	; (8004a70 <HAL_GPIO_Init+0x2e4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00d      	beq.n	8004970 <HAL_GPIO_Init+0x1e4>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a47      	ldr	r2, [pc, #284]	; (8004a74 <HAL_GPIO_Init+0x2e8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d007      	beq.n	800496c <HAL_GPIO_Init+0x1e0>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a46      	ldr	r2, [pc, #280]	; (8004a78 <HAL_GPIO_Init+0x2ec>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d101      	bne.n	8004968 <HAL_GPIO_Init+0x1dc>
 8004964:	2304      	movs	r3, #4
 8004966:	e008      	b.n	800497a <HAL_GPIO_Init+0x1ee>
 8004968:	2305      	movs	r3, #5
 800496a:	e006      	b.n	800497a <HAL_GPIO_Init+0x1ee>
 800496c:	2303      	movs	r3, #3
 800496e:	e004      	b.n	800497a <HAL_GPIO_Init+0x1ee>
 8004970:	2302      	movs	r3, #2
 8004972:	e002      	b.n	800497a <HAL_GPIO_Init+0x1ee>
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <HAL_GPIO_Init+0x1ee>
 8004978:	2300      	movs	r3, #0
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	f002 0203 	and.w	r2, r2, #3
 8004980:	0092      	lsls	r2, r2, #2
 8004982:	4093      	lsls	r3, r2
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	4313      	orrs	r3, r2
 8004988:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800498a:	4937      	ldr	r1, [pc, #220]	; (8004a68 <HAL_GPIO_Init+0x2dc>)
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	089b      	lsrs	r3, r3, #2
 8004990:	3302      	adds	r3, #2
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004998:	4b38      	ldr	r3, [pc, #224]	; (8004a7c <HAL_GPIO_Init+0x2f0>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	43db      	mvns	r3, r3
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4013      	ands	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80049bc:	4a2f      	ldr	r2, [pc, #188]	; (8004a7c <HAL_GPIO_Init+0x2f0>)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049c2:	4b2e      	ldr	r3, [pc, #184]	; (8004a7c <HAL_GPIO_Init+0x2f0>)
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	43db      	mvns	r3, r3
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4013      	ands	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80049e6:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <HAL_GPIO_Init+0x2f0>)
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049ec:	4b23      	ldr	r3, [pc, #140]	; (8004a7c <HAL_GPIO_Init+0x2f0>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	43db      	mvns	r3, r3
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4013      	ands	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004a10:	4a1a      	ldr	r2, [pc, #104]	; (8004a7c <HAL_GPIO_Init+0x2f0>)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a16:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <HAL_GPIO_Init+0x2f0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4013      	ands	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004a3a:	4a10      	ldr	r2, [pc, #64]	; (8004a7c <HAL_GPIO_Init+0x2f0>)
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	3301      	adds	r3, #1
 8004a44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f47f aea3 	bne.w	800479c <HAL_GPIO_Init+0x10>
  }
}
 8004a56:	bf00      	nop
 8004a58:	bf00      	nop
 8004a5a:	371c      	adds	r7, #28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	40021000 	.word	0x40021000
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	48000400 	.word	0x48000400
 8004a70:	48000800 	.word	0x48000800
 8004a74:	48000c00 	.word	0x48000c00
 8004a78:	48001000 	.word	0x48001000
 8004a7c:	40010400 	.word	0x40010400

08004a80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	887b      	ldrh	r3, [r7, #2]
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
 8004a9c:	e001      	b.n	8004aa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_PWREx_EnableSDADC+0x38>)
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	4a0a      	ldr	r2, [pc, #40]	; (8004ae8 <HAL_PWREx_EnableSDADC+0x38>)
 8004abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	61d3      	str	r3, [r2, #28]
 8004ac4:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <HAL_PWREx_EnableSDADC+0x38>)
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <HAL_PWREx_EnableSDADC+0x3c>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	4905      	ldr	r1, [pc, #20]	; (8004aec <HAL_PWREx_EnableSDADC+0x3c>)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	600b      	str	r3, [r1, #0]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40007000 	.word	0x40007000

08004af0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004afa:	4b49      	ldr	r3, [pc, #292]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a48      	ldr	r2, [pc, #288]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004b00:	f043 0301 	orr.w	r3, r3, #1
 8004b04:	6013      	str	r3, [r2, #0]

  /* Insure HSIRDY bit is set before writing default HSITRIM value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8004b06:	f7fd ff8d 	bl	8002a24 <HAL_GetTick>
 8004b0a:	60f8      	str	r0, [r7, #12]

  /* Wait till HSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_DeInit+0x30>
  {
    if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b0e:	f7fd ff89 	bl	8002a24 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e07b      	b.n	8004c18 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004b20:	4b3f      	ldr	r3, [pc, #252]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f0      	beq.n	8004b0e <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM default value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, RCC_CR_HSITRIM_4);
 8004b2c:	4b3c      	ldr	r3, [pc, #240]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004b34:	4a3a      	ldr	r2, [pc, #232]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3a:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2 | RCC_CFGR_MCO);
 8004b3c:	4b38      	ldr	r3, [pc, #224]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	4937      	ldr	r1, [pc, #220]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004b42:	4b38      	ldr	r3, [pc, #224]	; (8004c24 <HAL_RCC_DeInit+0x134>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	604b      	str	r3, [r1, #4]

  /* Insure HSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8004b48:	f7fd ff6c 	bl	8002a24 <HAL_GetTick>
 8004b4c:	60f8      	str	r0, [r7, #12]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004b4e:	e00a      	b.n	8004b66 <HAL_RCC_DeInit+0x76>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b50:	f7fd ff68 	bl	8002a24 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_DeInit+0x76>
    {
      return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e058      	b.n	8004c18 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004b66:	4b2e      	ldr	r3, [pc, #184]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1ee      	bne.n	8004b50 <HAL_RCC_DeInit+0x60>
    }
  }

  /* Update the SystemCoreClock global variable for HSI as system clock source */
  SystemCoreClock = HSI_VALUE;
 8004b72:	4b2d      	ldr	r3, [pc, #180]	; (8004c28 <HAL_RCC_DeInit+0x138>)
 8004b74:	4a2d      	ldr	r2, [pc, #180]	; (8004c2c <HAL_RCC_DeInit+0x13c>)
 8004b76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b78:	4b2d      	ldr	r3, [pc, #180]	; (8004c30 <HAL_RCC_DeInit+0x140>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fd ff0d 	bl	800299c <HAL_InitTick>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_RCC_DeInit+0x9c>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e045      	b.n	8004c18 <HAL_RCC_DeInit+0x128>
  }

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 8004b8c:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a23      	ldr	r2, [pc, #140]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004b92:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004b9c:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a1f      	ldr	r2, [pc, #124]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ba6:	6013      	str	r3, [r2, #0]

  /* Insure PLLRDY is reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8004ba8:	f7fd ff3c 	bl	8002a24 <HAL_GetTick>
 8004bac:	60f8      	str	r0, [r7, #12]
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_DeInit+0xd2>
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb0:	f7fd ff38 	bl	8002a24 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_DeInit+0xd2>
    {
      return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e02a      	b.n	8004c18 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc2:	4b17      	ldr	r3, [pc, #92]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_DeInit+0xc0>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8004bce:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 8004bd4:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 8004bda:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	4a0e      	ldr	r2, [pc, #56]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004be6:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8004bea:	6093      	str	r3, [r2, #8]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <HAL_RCC_DeInit+0x130>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	609a      	str	r2, [r3, #8]
 8004bf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bf6:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	fa93 f3a3 	rbit	r3, r3
 8004bfe:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c00:	687b      	ldr	r3, [r7, #4]

  /* Reset all CSR flags */
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8004c02:	fab3 f383 	clz	r3, r3
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <HAL_RCC_DeInit+0x144>)
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	461a      	mov	r2, r3
 8004c12:	2301      	movs	r3, #1
 8004c14:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40021000 	.word	0x40021000
 8004c24:	f8ffc00c 	.word	0xf8ffc00c
 8004c28:	20000004 	.word	0x20000004
 8004c2c:	007a1200 	.word	0x007a1200
 8004c30:	20000008 	.word	0x20000008
 8004c34:	10908120 	.word	0x10908120

08004c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c48:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d102      	bne.n	8004c5e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f001 b823 	b.w	8005ca4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 817d 	beq.w	8004f6e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004c74:	4bbc      	ldr	r3, [pc, #752]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f003 030c 	and.w	r3, r3, #12
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d00c      	beq.n	8004c9a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c80:	4bb9      	ldr	r3, [pc, #740]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 030c 	and.w	r3, r3, #12
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d15c      	bne.n	8004d46 <HAL_RCC_OscConfig+0x10e>
 8004c8c:	4bb6      	ldr	r3, [pc, #728]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c98:	d155      	bne.n	8004d46 <HAL_RCC_OscConfig+0x10e>
 8004c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c9e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004ca6:	fa93 f3a3 	rbit	r3, r3
 8004caa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8004cae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb2:	fab3 f383 	clz	r3, r3
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	095b      	lsrs	r3, r3, #5
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	f043 0301 	orr.w	r3, r3, #1
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d102      	bne.n	8004ccc <HAL_RCC_OscConfig+0x94>
 8004cc6:	4ba8      	ldr	r3, [pc, #672]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	e015      	b.n	8004cf8 <HAL_RCC_OscConfig+0xc0>
 8004ccc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cd0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004cd8:	fa93 f3a3 	rbit	r3, r3
 8004cdc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ce4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004ce8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004cec:	fa93 f3a3 	rbit	r3, r3
 8004cf0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004cf4:	4b9c      	ldr	r3, [pc, #624]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cfc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004d00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004d04:	fa92 f2a2 	rbit	r2, r2
 8004d08:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004d0c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004d10:	fab2 f282 	clz	r2, r2
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	f042 0220 	orr.w	r2, r2, #32
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	f002 021f 	and.w	r2, r2, #31
 8004d20:	2101      	movs	r1, #1
 8004d22:	fa01 f202 	lsl.w	r2, r1, r2
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 811f 	beq.w	8004f6c <HAL_RCC_OscConfig+0x334>
 8004d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f040 8116 	bne.w	8004f6c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f000 bfaf 	b.w	8005ca4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d56:	d106      	bne.n	8004d66 <HAL_RCC_OscConfig+0x12e>
 8004d58:	4b83      	ldr	r3, [pc, #524]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a82      	ldr	r2, [pc, #520]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	e036      	b.n	8004dd4 <HAL_RCC_OscConfig+0x19c>
 8004d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10c      	bne.n	8004d90 <HAL_RCC_OscConfig+0x158>
 8004d76:	4b7c      	ldr	r3, [pc, #496]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a7b      	ldr	r2, [pc, #492]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	4b79      	ldr	r3, [pc, #484]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a78      	ldr	r2, [pc, #480]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e021      	b.n	8004dd4 <HAL_RCC_OscConfig+0x19c>
 8004d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x184>
 8004da2:	4b71      	ldr	r3, [pc, #452]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a70      	ldr	r2, [pc, #448]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	4b6e      	ldr	r3, [pc, #440]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a6d      	ldr	r2, [pc, #436]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	e00b      	b.n	8004dd4 <HAL_RCC_OscConfig+0x19c>
 8004dbc:	4b6a      	ldr	r3, [pc, #424]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a69      	ldr	r2, [pc, #420]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	4b67      	ldr	r3, [pc, #412]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a66      	ldr	r2, [pc, #408]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dd2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004dd4:	4b64      	ldr	r3, [pc, #400]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	f023 020f 	bic.w	r2, r3, #15
 8004ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	495f      	ldr	r1, [pc, #380]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d059      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfe:	f7fd fe11 	bl	8002a24 <HAL_GetTick>
 8004e02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e06:	e00a      	b.n	8004e1e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e08:	f7fd fe0c 	bl	8002a24 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b64      	cmp	r3, #100	; 0x64
 8004e16:	d902      	bls.n	8004e1e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	f000 bf43 	b.w	8005ca4 <HAL_RCC_OscConfig+0x106c>
 8004e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e22:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004e2a:	fa93 f3a3 	rbit	r3, r3
 8004e2e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004e32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e36:	fab3 f383 	clz	r3, r3
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	095b      	lsrs	r3, r3, #5
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	f043 0301 	orr.w	r3, r3, #1
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d102      	bne.n	8004e50 <HAL_RCC_OscConfig+0x218>
 8004e4a:	4b47      	ldr	r3, [pc, #284]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	e015      	b.n	8004e7c <HAL_RCC_OscConfig+0x244>
 8004e50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e54:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004e5c:	fa93 f3a3 	rbit	r3, r3
 8004e60:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e68:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004e6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004e70:	fa93 f3a3 	rbit	r3, r3
 8004e74:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004e78:	4b3b      	ldr	r3, [pc, #236]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e80:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004e84:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004e88:	fa92 f2a2 	rbit	r2, r2
 8004e8c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004e90:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004e94:	fab2 f282 	clz	r2, r2
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	f042 0220 	orr.w	r2, r2, #32
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	f002 021f 	and.w	r2, r2, #31
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0ab      	beq.n	8004e08 <HAL_RCC_OscConfig+0x1d0>
 8004eb0:	e05d      	b.n	8004f6e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb2:	f7fd fdb7 	bl	8002a24 <HAL_GetTick>
 8004eb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ebc:	f7fd fdb2 	bl	8002a24 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b64      	cmp	r3, #100	; 0x64
 8004eca:	d902      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	f000 bee9 	b.w	8005ca4 <HAL_RCC_OscConfig+0x106c>
 8004ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ed6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eda:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004ede:	fa93 f3a3 	rbit	r3, r3
 8004ee2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004ee6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eea:	fab3 f383 	clz	r3, r3
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	095b      	lsrs	r3, r3, #5
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d102      	bne.n	8004f04 <HAL_RCC_OscConfig+0x2cc>
 8004efe:	4b1a      	ldr	r3, [pc, #104]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	e015      	b.n	8004f30 <HAL_RCC_OscConfig+0x2f8>
 8004f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f08:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004f10:	fa93 f3a3 	rbit	r3, r3
 8004f14:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f1c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004f20:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004f24:	fa93 f3a3 	rbit	r3, r3
 8004f28:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	; (8004f68 <HAL_RCC_OscConfig+0x330>)
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f34:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004f38:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004f3c:	fa92 f2a2 	rbit	r2, r2
 8004f40:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004f44:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004f48:	fab2 f282 	clz	r2, r2
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	f042 0220 	orr.w	r2, r2, #32
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	f002 021f 	and.w	r2, r2, #31
 8004f58:	2101      	movs	r1, #1
 8004f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1ab      	bne.n	8004ebc <HAL_RCC_OscConfig+0x284>
 8004f64:	e003      	b.n	8004f6e <HAL_RCC_OscConfig+0x336>
 8004f66:	bf00      	nop
 8004f68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 817d 	beq.w	800527e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004f84:	4ba6      	ldr	r3, [pc, #664]	; (8005220 <HAL_RCC_OscConfig+0x5e8>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f003 030c 	and.w	r3, r3, #12
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00b      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004f90:	4ba3      	ldr	r3, [pc, #652]	; (8005220 <HAL_RCC_OscConfig+0x5e8>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f003 030c 	and.w	r3, r3, #12
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d172      	bne.n	8005082 <HAL_RCC_OscConfig+0x44a>
 8004f9c:	4ba0      	ldr	r3, [pc, #640]	; (8005220 <HAL_RCC_OscConfig+0x5e8>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d16c      	bne.n	8005082 <HAL_RCC_OscConfig+0x44a>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004fb2:	fa93 f3a3 	rbit	r3, r3
 8004fb6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004fba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d102      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x3a0>
 8004fd2:	4b93      	ldr	r3, [pc, #588]	; (8005220 <HAL_RCC_OscConfig+0x5e8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	e013      	b.n	8005000 <HAL_RCC_OscConfig+0x3c8>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fde:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004fe2:	fa93 f3a3 	rbit	r3, r3
 8004fe6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004fea:	2302      	movs	r3, #2
 8004fec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004ff0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004ff4:	fa93 f3a3 	rbit	r3, r3
 8004ff8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004ffc:	4b88      	ldr	r3, [pc, #544]	; (8005220 <HAL_RCC_OscConfig+0x5e8>)
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	2202      	movs	r2, #2
 8005002:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005006:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800500a:	fa92 f2a2 	rbit	r2, r2
 800500e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005012:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005016:	fab2 f282 	clz	r2, r2
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	f042 0220 	orr.w	r2, r2, #32
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	f002 021f 	and.w	r2, r2, #31
 8005026:	2101      	movs	r1, #1
 8005028:	fa01 f202 	lsl.w	r2, r1, r2
 800502c:	4013      	ands	r3, r2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <HAL_RCC_OscConfig+0x410>
 8005032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005036:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d002      	beq.n	8005048 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f000 be2e 	b.w	8005ca4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005048:	4b75      	ldr	r3, [pc, #468]	; (8005220 <HAL_RCC_OscConfig+0x5e8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005054:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	21f8      	movs	r1, #248	; 0xf8
 800505e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005062:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005066:	fa91 f1a1 	rbit	r1, r1
 800506a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800506e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005072:	fab1 f181 	clz	r1, r1
 8005076:	b2c9      	uxtb	r1, r1
 8005078:	408b      	lsls	r3, r1
 800507a:	4969      	ldr	r1, [pc, #420]	; (8005220 <HAL_RCC_OscConfig+0x5e8>)
 800507c:	4313      	orrs	r3, r2
 800507e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005080:	e0fd      	b.n	800527e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005086:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 8088 	beq.w	80051a4 <HAL_RCC_OscConfig+0x56c>
 8005094:	2301      	movs	r3, #1
 8005096:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800509e:	fa93 f3a3 	rbit	r3, r3
 80050a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80050a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050aa:	fab3 f383 	clz	r3, r3
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	461a      	mov	r2, r3
 80050bc:	2301      	movs	r3, #1
 80050be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c0:	f7fd fcb0 	bl	8002a24 <HAL_GetTick>
 80050c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c8:	e00a      	b.n	80050e0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ca:	f7fd fcab 	bl	8002a24 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d902      	bls.n	80050e0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	f000 bde2 	b.w	8005ca4 <HAL_RCC_OscConfig+0x106c>
 80050e0:	2302      	movs	r3, #2
 80050e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80050ea:	fa93 f3a3 	rbit	r3, r3
 80050ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80050f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f6:	fab3 f383 	clz	r3, r3
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b01      	cmp	r3, #1
 8005108:	d102      	bne.n	8005110 <HAL_RCC_OscConfig+0x4d8>
 800510a:	4b45      	ldr	r3, [pc, #276]	; (8005220 <HAL_RCC_OscConfig+0x5e8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	e013      	b.n	8005138 <HAL_RCC_OscConfig+0x500>
 8005110:	2302      	movs	r3, #2
 8005112:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005116:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800511a:	fa93 f3a3 	rbit	r3, r3
 800511e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005122:	2302      	movs	r3, #2
 8005124:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005128:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800512c:	fa93 f3a3 	rbit	r3, r3
 8005130:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005134:	4b3a      	ldr	r3, [pc, #232]	; (8005220 <HAL_RCC_OscConfig+0x5e8>)
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	2202      	movs	r2, #2
 800513a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800513e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005142:	fa92 f2a2 	rbit	r2, r2
 8005146:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800514a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800514e:	fab2 f282 	clz	r2, r2
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	f042 0220 	orr.w	r2, r2, #32
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	f002 021f 	and.w	r2, r2, #31
 800515e:	2101      	movs	r1, #1
 8005160:	fa01 f202 	lsl.w	r2, r1, r2
 8005164:	4013      	ands	r3, r2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0af      	beq.n	80050ca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516a:	4b2d      	ldr	r3, [pc, #180]	; (8005220 <HAL_RCC_OscConfig+0x5e8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005176:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	21f8      	movs	r1, #248	; 0xf8
 8005180:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005184:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005188:	fa91 f1a1 	rbit	r1, r1
 800518c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005190:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005194:	fab1 f181 	clz	r1, r1
 8005198:	b2c9      	uxtb	r1, r1
 800519a:	408b      	lsls	r3, r1
 800519c:	4920      	ldr	r1, [pc, #128]	; (8005220 <HAL_RCC_OscConfig+0x5e8>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]
 80051a2:	e06c      	b.n	800527e <HAL_RCC_OscConfig+0x646>
 80051a4:	2301      	movs	r3, #1
 80051a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80051ae:	fa93 f3a3 	rbit	r3, r3
 80051b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80051b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ba:	fab3 f383 	clz	r3, r3
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	461a      	mov	r2, r3
 80051cc:	2300      	movs	r3, #0
 80051ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d0:	f7fd fc28 	bl	8002a24 <HAL_GetTick>
 80051d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d8:	e00a      	b.n	80051f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051da:	f7fd fc23 	bl	8002a24 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d902      	bls.n	80051f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	f000 bd5a 	b.w	8005ca4 <HAL_RCC_OscConfig+0x106c>
 80051f0:	2302      	movs	r3, #2
 80051f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80051fa:	fa93 f3a3 	rbit	r3, r3
 80051fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005206:	fab3 f383 	clz	r3, r3
 800520a:	b2db      	uxtb	r3, r3
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b01      	cmp	r3, #1
 8005218:	d104      	bne.n	8005224 <HAL_RCC_OscConfig+0x5ec>
 800521a:	4b01      	ldr	r3, [pc, #4]	; (8005220 <HAL_RCC_OscConfig+0x5e8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	e015      	b.n	800524c <HAL_RCC_OscConfig+0x614>
 8005220:	40021000 	.word	0x40021000
 8005224:	2302      	movs	r3, #2
 8005226:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800522e:	fa93 f3a3 	rbit	r3, r3
 8005232:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005236:	2302      	movs	r3, #2
 8005238:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800523c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005240:	fa93 f3a3 	rbit	r3, r3
 8005244:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005248:	4bc8      	ldr	r3, [pc, #800]	; (800556c <HAL_RCC_OscConfig+0x934>)
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	2202      	movs	r2, #2
 800524e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005252:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005256:	fa92 f2a2 	rbit	r2, r2
 800525a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800525e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005262:	fab2 f282 	clz	r2, r2
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	f042 0220 	orr.w	r2, r2, #32
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	f002 021f 	and.w	r2, r2, #31
 8005272:	2101      	movs	r1, #1
 8005274:	fa01 f202 	lsl.w	r2, r1, r2
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1ad      	bne.n	80051da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005282:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 8110 	beq.w	80054b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005298:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d079      	beq.n	8005398 <HAL_RCC_OscConfig+0x760>
 80052a4:	2301      	movs	r3, #1
 80052a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052ae:	fa93 f3a3 	rbit	r3, r3
 80052b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80052b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ba:	fab3 f383 	clz	r3, r3
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	4bab      	ldr	r3, [pc, #684]	; (8005570 <HAL_RCC_OscConfig+0x938>)
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	461a      	mov	r2, r3
 80052ca:	2301      	movs	r3, #1
 80052cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ce:	f7fd fba9 	bl	8002a24 <HAL_GetTick>
 80052d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052d6:	e00a      	b.n	80052ee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052d8:	f7fd fba4 	bl	8002a24 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d902      	bls.n	80052ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	f000 bcdb 	b.w	8005ca4 <HAL_RCC_OscConfig+0x106c>
 80052ee:	2302      	movs	r3, #2
 80052f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052f8:	fa93 f3a3 	rbit	r3, r3
 80052fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005304:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005308:	2202      	movs	r2, #2
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005310:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	fa93 f2a3 	rbit	r2, r3
 800531a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800531e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800532c:	2202      	movs	r2, #2
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	fa93 f2a3 	rbit	r2, r3
 800533e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005342:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005346:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005348:	4b88      	ldr	r3, [pc, #544]	; (800556c <HAL_RCC_OscConfig+0x934>)
 800534a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800534c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005350:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005354:	2102      	movs	r1, #2
 8005356:	6019      	str	r1, [r3, #0]
 8005358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	fa93 f1a3 	rbit	r1, r3
 8005366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800536a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800536e:	6019      	str	r1, [r3, #0]
  return result;
 8005370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005374:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	fab3 f383 	clz	r3, r3
 800537e:	b2db      	uxtb	r3, r3
 8005380:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005384:	b2db      	uxtb	r3, r3
 8005386:	f003 031f 	and.w	r3, r3, #31
 800538a:	2101      	movs	r1, #1
 800538c:	fa01 f303 	lsl.w	r3, r1, r3
 8005390:	4013      	ands	r3, r2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0a0      	beq.n	80052d8 <HAL_RCC_OscConfig+0x6a0>
 8005396:	e08d      	b.n	80054b4 <HAL_RCC_OscConfig+0x87c>
 8005398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800539c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80053a0:	2201      	movs	r2, #1
 80053a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	fa93 f2a3 	rbit	r2, r3
 80053b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80053ba:	601a      	str	r2, [r3, #0]
  return result;
 80053bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80053c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053c6:	fab3 f383 	clz	r3, r3
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	461a      	mov	r2, r3
 80053ce:	4b68      	ldr	r3, [pc, #416]	; (8005570 <HAL_RCC_OscConfig+0x938>)
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	461a      	mov	r2, r3
 80053d6:	2300      	movs	r3, #0
 80053d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053da:	f7fd fb23 	bl	8002a24 <HAL_GetTick>
 80053de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053e2:	e00a      	b.n	80053fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053e4:	f7fd fb1e 	bl	8002a24 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d902      	bls.n	80053fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	f000 bc55 	b.w	8005ca4 <HAL_RCC_OscConfig+0x106c>
 80053fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005402:	2202      	movs	r2, #2
 8005404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800540a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	fa93 f2a3 	rbit	r2, r3
 8005414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005418:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005422:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005426:	2202      	movs	r2, #2
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800542e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	fa93 f2a3 	rbit	r2, r3
 8005438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800543c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800544a:	2202      	movs	r2, #2
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	fa93 f2a3 	rbit	r2, r3
 800545c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005460:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005464:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005466:	4b41      	ldr	r3, [pc, #260]	; (800556c <HAL_RCC_OscConfig+0x934>)
 8005468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800546a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800546e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005472:	2102      	movs	r1, #2
 8005474:	6019      	str	r1, [r3, #0]
 8005476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800547a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	fa93 f1a3 	rbit	r1, r3
 8005484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005488:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800548c:	6019      	str	r1, [r3, #0]
  return result;
 800548e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005492:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	fab3 f383 	clz	r3, r3
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	f003 031f 	and.w	r3, r3, #31
 80054a8:	2101      	movs	r1, #1
 80054aa:	fa01 f303 	lsl.w	r3, r1, r3
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d197      	bne.n	80053e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 81a1 	beq.w	800580c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ca:	2300      	movs	r3, #0
 80054cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054d0:	4b26      	ldr	r3, [pc, #152]	; (800556c <HAL_RCC_OscConfig+0x934>)
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d116      	bne.n	800550a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054dc:	4b23      	ldr	r3, [pc, #140]	; (800556c <HAL_RCC_OscConfig+0x934>)
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	4a22      	ldr	r2, [pc, #136]	; (800556c <HAL_RCC_OscConfig+0x934>)
 80054e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e6:	61d3      	str	r3, [r2, #28]
 80054e8:	4b20      	ldr	r3, [pc, #128]	; (800556c <HAL_RCC_OscConfig+0x934>)
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80054f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054fe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005502:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550a:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <HAL_RCC_OscConfig+0x93c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005512:	2b00      	cmp	r3, #0
 8005514:	d11a      	bne.n	800554c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005516:	4b17      	ldr	r3, [pc, #92]	; (8005574 <HAL_RCC_OscConfig+0x93c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a16      	ldr	r2, [pc, #88]	; (8005574 <HAL_RCC_OscConfig+0x93c>)
 800551c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005520:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005522:	f7fd fa7f 	bl	8002a24 <HAL_GetTick>
 8005526:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800552a:	e009      	b.n	8005540 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800552c:	f7fd fa7a 	bl	8002a24 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b64      	cmp	r3, #100	; 0x64
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e3b1      	b.n	8005ca4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005540:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <HAL_RCC_OscConfig+0x93c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0ef      	beq.n	800552c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800554c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005550:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d10d      	bne.n	8005578 <HAL_RCC_OscConfig+0x940>
 800555c:	4b03      	ldr	r3, [pc, #12]	; (800556c <HAL_RCC_OscConfig+0x934>)
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	4a02      	ldr	r2, [pc, #8]	; (800556c <HAL_RCC_OscConfig+0x934>)
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	6213      	str	r3, [r2, #32]
 8005568:	e03c      	b.n	80055e4 <HAL_RCC_OscConfig+0x9ac>
 800556a:	bf00      	nop
 800556c:	40021000 	.word	0x40021000
 8005570:	10908120 	.word	0x10908120
 8005574:	40007000 	.word	0x40007000
 8005578:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800557c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10c      	bne.n	80055a2 <HAL_RCC_OscConfig+0x96a>
 8005588:	4bc1      	ldr	r3, [pc, #772]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	4ac0      	ldr	r2, [pc, #768]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	6213      	str	r3, [r2, #32]
 8005594:	4bbe      	ldr	r3, [pc, #760]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	4abd      	ldr	r2, [pc, #756]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 800559a:	f023 0304 	bic.w	r3, r3, #4
 800559e:	6213      	str	r3, [r2, #32]
 80055a0:	e020      	b.n	80055e4 <HAL_RCC_OscConfig+0x9ac>
 80055a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	2b05      	cmp	r3, #5
 80055b0:	d10c      	bne.n	80055cc <HAL_RCC_OscConfig+0x994>
 80055b2:	4bb7      	ldr	r3, [pc, #732]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	4ab6      	ldr	r2, [pc, #728]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 80055b8:	f043 0304 	orr.w	r3, r3, #4
 80055bc:	6213      	str	r3, [r2, #32]
 80055be:	4bb4      	ldr	r3, [pc, #720]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	4ab3      	ldr	r2, [pc, #716]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	6213      	str	r3, [r2, #32]
 80055ca:	e00b      	b.n	80055e4 <HAL_RCC_OscConfig+0x9ac>
 80055cc:	4bb0      	ldr	r3, [pc, #704]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	4aaf      	ldr	r2, [pc, #700]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 80055d2:	f023 0301 	bic.w	r3, r3, #1
 80055d6:	6213      	str	r3, [r2, #32]
 80055d8:	4bad      	ldr	r3, [pc, #692]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	4aac      	ldr	r2, [pc, #688]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 80055de:	f023 0304 	bic.w	r3, r3, #4
 80055e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 8081 	beq.w	80056f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f6:	f7fd fa15 	bl	8002a24 <HAL_GetTick>
 80055fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055fe:	e00b      	b.n	8005618 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005600:	f7fd fa10 	bl	8002a24 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005610:	4293      	cmp	r3, r2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e345      	b.n	8005ca4 <HAL_RCC_OscConfig+0x106c>
 8005618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800561c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005620:	2202      	movs	r2, #2
 8005622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005628:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	fa93 f2a3 	rbit	r2, r3
 8005632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005636:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005640:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005644:	2202      	movs	r2, #2
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800564c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	fa93 f2a3 	rbit	r2, r3
 8005656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800565a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800565e:	601a      	str	r2, [r3, #0]
  return result;
 8005660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005664:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005668:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566a:	fab3 f383 	clz	r3, r3
 800566e:	b2db      	uxtb	r3, r3
 8005670:	095b      	lsrs	r3, r3, #5
 8005672:	b2db      	uxtb	r3, r3
 8005674:	f043 0302 	orr.w	r3, r3, #2
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d102      	bne.n	8005684 <HAL_RCC_OscConfig+0xa4c>
 800567e:	4b84      	ldr	r3, [pc, #528]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	e013      	b.n	80056ac <HAL_RCC_OscConfig+0xa74>
 8005684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005688:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800568c:	2202      	movs	r2, #2
 800568e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005694:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	fa93 f2a3 	rbit	r2, r3
 800569e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	4b79      	ldr	r3, [pc, #484]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80056b4:	2102      	movs	r1, #2
 80056b6:	6011      	str	r1, [r2, #0]
 80056b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80056c0:	6812      	ldr	r2, [r2, #0]
 80056c2:	fa92 f1a2 	rbit	r1, r2
 80056c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80056ce:	6011      	str	r1, [r2, #0]
  return result;
 80056d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056d4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80056d8:	6812      	ldr	r2, [r2, #0]
 80056da:	fab2 f282 	clz	r2, r2
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	f002 021f 	and.w	r2, r2, #31
 80056ea:	2101      	movs	r1, #1
 80056ec:	fa01 f202 	lsl.w	r2, r1, r2
 80056f0:	4013      	ands	r3, r2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d084      	beq.n	8005600 <HAL_RCC_OscConfig+0x9c8>
 80056f6:	e07f      	b.n	80057f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f8:	f7fd f994 	bl	8002a24 <HAL_GetTick>
 80056fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005700:	e00b      	b.n	800571a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005702:	f7fd f98f 	bl	8002a24 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e2c4      	b.n	8005ca4 <HAL_RCC_OscConfig+0x106c>
 800571a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800571e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005722:	2202      	movs	r2, #2
 8005724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	fa93 f2a3 	rbit	r2, r3
 8005734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005738:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005742:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005746:	2202      	movs	r2, #2
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800574e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	fa93 f2a3 	rbit	r2, r3
 8005758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800575c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005760:	601a      	str	r2, [r3, #0]
  return result;
 8005762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005766:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800576a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800576c:	fab3 f383 	clz	r3, r3
 8005770:	b2db      	uxtb	r3, r3
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	b2db      	uxtb	r3, r3
 8005776:	f043 0302 	orr.w	r3, r3, #2
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d102      	bne.n	8005786 <HAL_RCC_OscConfig+0xb4e>
 8005780:	4b43      	ldr	r3, [pc, #268]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	e013      	b.n	80057ae <HAL_RCC_OscConfig+0xb76>
 8005786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800578a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800578e:	2202      	movs	r2, #2
 8005790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005796:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	fa93 f2a3 	rbit	r2, r3
 80057a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	4b39      	ldr	r3, [pc, #228]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80057b6:	2102      	movs	r1, #2
 80057b8:	6011      	str	r1, [r2, #0]
 80057ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80057c2:	6812      	ldr	r2, [r2, #0]
 80057c4:	fa92 f1a2 	rbit	r1, r2
 80057c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80057d0:	6011      	str	r1, [r2, #0]
  return result;
 80057d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057d6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	fab2 f282 	clz	r2, r2
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	f002 021f 	and.w	r2, r2, #31
 80057ec:	2101      	movs	r1, #1
 80057ee:	fa01 f202 	lsl.w	r2, r1, r2
 80057f2:	4013      	ands	r3, r2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d184      	bne.n	8005702 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d105      	bne.n	800580c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005800:	4b23      	ldr	r3, [pc, #140]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	4a22      	ldr	r2, [pc, #136]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 8005806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800580a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800580c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005810:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8242 	beq.w	8005ca2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800581e:	4b1c      	ldr	r3, [pc, #112]	; (8005890 <HAL_RCC_OscConfig+0xc58>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f003 030c 	and.w	r3, r3, #12
 8005826:	2b08      	cmp	r3, #8
 8005828:	f000 8213 	beq.w	8005c52 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800582c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005830:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	2b02      	cmp	r3, #2
 800583a:	f040 8162 	bne.w	8005b02 <HAL_RCC_OscConfig+0xeca>
 800583e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005842:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005846:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800584a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005850:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	fa93 f2a3 	rbit	r2, r3
 800585a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800585e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005862:	601a      	str	r2, [r3, #0]
  return result;
 8005864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005868:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800586c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800586e:	fab3 f383 	clz	r3, r3
 8005872:	b2db      	uxtb	r3, r3
 8005874:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005878:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	461a      	mov	r2, r3
 8005880:	2300      	movs	r3, #0
 8005882:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005884:	f7fd f8ce 	bl	8002a24 <HAL_GetTick>
 8005888:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800588c:	e00c      	b.n	80058a8 <HAL_RCC_OscConfig+0xc70>
 800588e:	bf00      	nop
 8005890:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005894:	f7fd f8c6 	bl	8002a24 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e1fd      	b.n	8005ca4 <HAL_RCC_OscConfig+0x106c>
 80058a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80058b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	fa93 f2a3 	rbit	r2, r3
 80058c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80058cc:	601a      	str	r2, [r3, #0]
  return result;
 80058ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80058d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058d8:	fab3 f383 	clz	r3, r3
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d102      	bne.n	80058f2 <HAL_RCC_OscConfig+0xcba>
 80058ec:	4bb0      	ldr	r3, [pc, #704]	; (8005bb0 <HAL_RCC_OscConfig+0xf78>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	e027      	b.n	8005942 <HAL_RCC_OscConfig+0xd0a>
 80058f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80058fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005904:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	fa93 f2a3 	rbit	r2, r3
 800590e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005912:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800591c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005920:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800592a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	fa93 f2a3 	rbit	r2, r3
 8005934:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005938:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	4b9c      	ldr	r3, [pc, #624]	; (8005bb0 <HAL_RCC_OscConfig+0xf78>)
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005946:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800594a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800594e:	6011      	str	r1, [r2, #0]
 8005950:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005954:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	fa92 f1a2 	rbit	r1, r2
 800595e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005962:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005966:	6011      	str	r1, [r2, #0]
  return result;
 8005968:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800596c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005970:	6812      	ldr	r2, [r2, #0]
 8005972:	fab2 f282 	clz	r2, r2
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	f042 0220 	orr.w	r2, r2, #32
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	f002 021f 	and.w	r2, r2, #31
 8005982:	2101      	movs	r1, #1
 8005984:	fa01 f202 	lsl.w	r2, r1, r2
 8005988:	4013      	ands	r3, r2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d182      	bne.n	8005894 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800598e:	4b88      	ldr	r3, [pc, #544]	; (8005bb0 <HAL_RCC_OscConfig+0xf78>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800599a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80059a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	430b      	orrs	r3, r1
 80059b0:	497f      	ldr	r1, [pc, #508]	; (8005bb0 <HAL_RCC_OscConfig+0xf78>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	604b      	str	r3, [r1, #4]
 80059b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80059be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059c8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	fa93 f2a3 	rbit	r2, r3
 80059d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80059da:	601a      	str	r2, [r3, #0]
  return result;
 80059dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80059e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059e6:	fab3 f383 	clz	r3, r3
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80059f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	461a      	mov	r2, r3
 80059f8:	2301      	movs	r3, #1
 80059fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fc:	f7fd f812 	bl	8002a24 <HAL_GetTick>
 8005a00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a04:	e009      	b.n	8005a1a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a06:	f7fd f80d 	bl	8002a24 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e144      	b.n	8005ca4 <HAL_RCC_OscConfig+0x106c>
 8005a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a1e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005a22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a2c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	fa93 f2a3 	rbit	r2, r3
 8005a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a3a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005a3e:	601a      	str	r2, [r3, #0]
  return result;
 8005a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a44:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005a48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a4a:	fab3 f383 	clz	r3, r3
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	095b      	lsrs	r3, r3, #5
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f043 0301 	orr.w	r3, r3, #1
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d102      	bne.n	8005a64 <HAL_RCC_OscConfig+0xe2c>
 8005a5e:	4b54      	ldr	r3, [pc, #336]	; (8005bb0 <HAL_RCC_OscConfig+0xf78>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	e027      	b.n	8005ab4 <HAL_RCC_OscConfig+0xe7c>
 8005a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a68:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005a6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a76:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	fa93 f2a3 	rbit	r2, r3
 8005a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a84:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a8e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005a92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a9c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	fa93 f2a3 	rbit	r2, r3
 8005aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aaa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	4b3f      	ldr	r3, [pc, #252]	; (8005bb0 <HAL_RCC_OscConfig+0xf78>)
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ab8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005abc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005ac0:	6011      	str	r1, [r2, #0]
 8005ac2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ac6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	fa92 f1a2 	rbit	r1, r2
 8005ad0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ad4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005ad8:	6011      	str	r1, [r2, #0]
  return result;
 8005ada:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ade:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005ae2:	6812      	ldr	r2, [r2, #0]
 8005ae4:	fab2 f282 	clz	r2, r2
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	f042 0220 	orr.w	r2, r2, #32
 8005aee:	b2d2      	uxtb	r2, r2
 8005af0:	f002 021f 	and.w	r2, r2, #31
 8005af4:	2101      	movs	r1, #1
 8005af6:	fa01 f202 	lsl.w	r2, r1, r2
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d082      	beq.n	8005a06 <HAL_RCC_OscConfig+0xdce>
 8005b00:	e0cf      	b.n	8005ca2 <HAL_RCC_OscConfig+0x106a>
 8005b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b06:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005b0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b14:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	fa93 f2a3 	rbit	r2, r3
 8005b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b22:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005b26:	601a      	str	r2, [r3, #0]
  return result;
 8005b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b2c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005b30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b32:	fab3 f383 	clz	r3, r3
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	461a      	mov	r2, r3
 8005b44:	2300      	movs	r3, #0
 8005b46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b48:	f7fc ff6c 	bl	8002a24 <HAL_GetTick>
 8005b4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b50:	e009      	b.n	8005b66 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b52:	f7fc ff67 	bl	8002a24 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e09e      	b.n	8005ca4 <HAL_RCC_OscConfig+0x106c>
 8005b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b6a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005b6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b78:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	fa93 f2a3 	rbit	r2, r3
 8005b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005b8a:	601a      	str	r2, [r3, #0]
  return result;
 8005b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b90:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005b94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b96:	fab3 f383 	clz	r3, r3
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	f043 0301 	orr.w	r3, r3, #1
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d104      	bne.n	8005bb4 <HAL_RCC_OscConfig+0xf7c>
 8005baa:	4b01      	ldr	r3, [pc, #4]	; (8005bb0 <HAL_RCC_OscConfig+0xf78>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	e029      	b.n	8005c04 <HAL_RCC_OscConfig+0xfcc>
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bb8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bc6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	fa93 f2a3 	rbit	r2, r3
 8005bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bd4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bde:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005be2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	fa93 f2a3 	rbit	r2, r3
 8005bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bfa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	4b2b      	ldr	r3, [pc, #172]	; (8005cb0 <HAL_RCC_OscConfig+0x1078>)
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c08:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005c0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005c10:	6011      	str	r1, [r2, #0]
 8005c12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c16:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005c1a:	6812      	ldr	r2, [r2, #0]
 8005c1c:	fa92 f1a2 	rbit	r1, r2
 8005c20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c24:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005c28:	6011      	str	r1, [r2, #0]
  return result;
 8005c2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c2e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	fab2 f282 	clz	r2, r2
 8005c38:	b2d2      	uxtb	r2, r2
 8005c3a:	f042 0220 	orr.w	r2, r2, #32
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	f002 021f 	and.w	r2, r2, #31
 8005c44:	2101      	movs	r1, #1
 8005c46:	fa01 f202 	lsl.w	r2, r1, r2
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d180      	bne.n	8005b52 <HAL_RCC_OscConfig+0xf1a>
 8005c50:	e027      	b.n	8005ca2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e01e      	b.n	8005ca4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c66:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <HAL_RCC_OscConfig+0x1078>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005c72:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d10b      	bne.n	8005c9e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005c86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005c8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d001      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	40021000 	.word	0x40021000

08005cb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b09e      	sub	sp, #120	; 0x78
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e162      	b.n	8005f92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ccc:	4b90      	ldr	r3, [pc, #576]	; (8005f10 <HAL_RCC_ClockConfig+0x25c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d910      	bls.n	8005cfc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cda:	4b8d      	ldr	r3, [pc, #564]	; (8005f10 <HAL_RCC_ClockConfig+0x25c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f023 0207 	bic.w	r2, r3, #7
 8005ce2:	498b      	ldr	r1, [pc, #556]	; (8005f10 <HAL_RCC_ClockConfig+0x25c>)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cea:	4b89      	ldr	r3, [pc, #548]	; (8005f10 <HAL_RCC_ClockConfig+0x25c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d001      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e14a      	b.n	8005f92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d08:	4b82      	ldr	r3, [pc, #520]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	497f      	ldr	r1, [pc, #508]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 80dc 	beq.w	8005ee0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d13c      	bne.n	8005daa <HAL_RCC_ClockConfig+0xf6>
 8005d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d38:	fa93 f3a3 	rbit	r3, r3
 8005d3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d40:	fab3 f383 	clz	r3, r3
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	f043 0301 	orr.w	r3, r3, #1
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d102      	bne.n	8005d5a <HAL_RCC_ClockConfig+0xa6>
 8005d54:	4b6f      	ldr	r3, [pc, #444]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	e00f      	b.n	8005d7a <HAL_RCC_ClockConfig+0xc6>
 8005d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d62:	fa93 f3a3 	rbit	r3, r3
 8005d66:	667b      	str	r3, [r7, #100]	; 0x64
 8005d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d6c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d70:	fa93 f3a3 	rbit	r3, r3
 8005d74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d76:	4b67      	ldr	r3, [pc, #412]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d82:	fa92 f2a2 	rbit	r2, r2
 8005d86:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005d88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d8a:	fab2 f282 	clz	r2, r2
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	f042 0220 	orr.w	r2, r2, #32
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	f002 021f 	and.w	r2, r2, #31
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8005da0:	4013      	ands	r3, r2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d17b      	bne.n	8005e9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e0f3      	b.n	8005f92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d13c      	bne.n	8005e2c <HAL_RCC_ClockConfig+0x178>
 8005db2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005db6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dba:	fa93 f3a3 	rbit	r3, r3
 8005dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dc2:	fab3 f383 	clz	r3, r3
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	095b      	lsrs	r3, r3, #5
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	f043 0301 	orr.w	r3, r3, #1
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d102      	bne.n	8005ddc <HAL_RCC_ClockConfig+0x128>
 8005dd6:	4b4f      	ldr	r3, [pc, #316]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	e00f      	b.n	8005dfc <HAL_RCC_ClockConfig+0x148>
 8005ddc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005de0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005de4:	fa93 f3a3 	rbit	r3, r3
 8005de8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dee:	643b      	str	r3, [r7, #64]	; 0x40
 8005df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df2:	fa93 f3a3 	rbit	r3, r3
 8005df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005df8:	4b46      	ldr	r3, [pc, #280]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e00:	63ba      	str	r2, [r7, #56]	; 0x38
 8005e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e04:	fa92 f2a2 	rbit	r2, r2
 8005e08:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e0c:	fab2 f282 	clz	r2, r2
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	f042 0220 	orr.w	r2, r2, #32
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	f002 021f 	and.w	r2, r2, #31
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e22:	4013      	ands	r3, r2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d13a      	bne.n	8005e9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e0b2      	b.n	8005f92 <HAL_RCC_ClockConfig+0x2de>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e32:	fa93 f3a3 	rbit	r3, r3
 8005e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e3a:	fab3 f383 	clz	r3, r3
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	095b      	lsrs	r3, r3, #5
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	f043 0301 	orr.w	r3, r3, #1
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d102      	bne.n	8005e54 <HAL_RCC_ClockConfig+0x1a0>
 8005e4e:	4b31      	ldr	r3, [pc, #196]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	e00d      	b.n	8005e70 <HAL_RCC_ClockConfig+0x1bc>
 8005e54:	2302      	movs	r3, #2
 8005e56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5a:	fa93 f3a3 	rbit	r3, r3
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e60:	2302      	movs	r3, #2
 8005e62:	623b      	str	r3, [r7, #32]
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	fa93 f3a3 	rbit	r3, r3
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	4b29      	ldr	r3, [pc, #164]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2202      	movs	r2, #2
 8005e72:	61ba      	str	r2, [r7, #24]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	fa92 f2a2 	rbit	r2, r2
 8005e7a:	617a      	str	r2, [r7, #20]
  return result;
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	fab2 f282 	clz	r2, r2
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	f042 0220 	orr.w	r2, r2, #32
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	f002 021f 	and.w	r2, r2, #31
 8005e8e:	2101      	movs	r1, #1
 8005e90:	fa01 f202 	lsl.w	r2, r1, r2
 8005e94:	4013      	ands	r3, r2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e079      	b.n	8005f92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e9e:	4b1d      	ldr	r3, [pc, #116]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f023 0203 	bic.w	r2, r3, #3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	491a      	ldr	r1, [pc, #104]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005eb0:	f7fc fdb8 	bl	8002a24 <HAL_GetTick>
 8005eb4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eb6:	e00a      	b.n	8005ece <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eb8:	f7fc fdb4 	bl	8002a24 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e061      	b.n	8005f92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ece:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <HAL_RCC_ClockConfig+0x260>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f003 020c 	and.w	r2, r3, #12
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d1eb      	bne.n	8005eb8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <HAL_RCC_ClockConfig+0x25c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0307 	and.w	r3, r3, #7
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d214      	bcs.n	8005f18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eee:	4b08      	ldr	r3, [pc, #32]	; (8005f10 <HAL_RCC_ClockConfig+0x25c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f023 0207 	bic.w	r2, r3, #7
 8005ef6:	4906      	ldr	r1, [pc, #24]	; (8005f10 <HAL_RCC_ClockConfig+0x25c>)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005efe:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <HAL_RCC_ClockConfig+0x25c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d005      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e040      	b.n	8005f92 <HAL_RCC_ClockConfig+0x2de>
 8005f10:	40022000 	.word	0x40022000
 8005f14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d008      	beq.n	8005f36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f24:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <HAL_RCC_ClockConfig+0x2e8>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	491a      	ldr	r1, [pc, #104]	; (8005f9c <HAL_RCC_ClockConfig+0x2e8>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d009      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f42:	4b16      	ldr	r3, [pc, #88]	; (8005f9c <HAL_RCC_ClockConfig+0x2e8>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	4912      	ldr	r1, [pc, #72]	; (8005f9c <HAL_RCC_ClockConfig+0x2e8>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005f56:	f000 f829 	bl	8005fac <HAL_RCC_GetSysClockFreq>
 8005f5a:	4601      	mov	r1, r0
 8005f5c:	4b0f      	ldr	r3, [pc, #60]	; (8005f9c <HAL_RCC_ClockConfig+0x2e8>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f64:	22f0      	movs	r2, #240	; 0xf0
 8005f66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	fa92 f2a2 	rbit	r2, r2
 8005f6e:	60fa      	str	r2, [r7, #12]
  return result;
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	fab2 f282 	clz	r2, r2
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	40d3      	lsrs	r3, r2
 8005f7a:	4a09      	ldr	r2, [pc, #36]	; (8005fa0 <HAL_RCC_ClockConfig+0x2ec>)
 8005f7c:	5cd3      	ldrb	r3, [r2, r3]
 8005f7e:	fa21 f303 	lsr.w	r3, r1, r3
 8005f82:	4a08      	ldr	r2, [pc, #32]	; (8005fa4 <HAL_RCC_ClockConfig+0x2f0>)
 8005f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005f86:	4b08      	ldr	r3, [pc, #32]	; (8005fa8 <HAL_RCC_ClockConfig+0x2f4>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fc fd06 	bl	800299c <HAL_InitTick>
  
  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3778      	adds	r7, #120	; 0x78
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	080088fc 	.word	0x080088fc
 8005fa4:	20000004 	.word	0x20000004
 8005fa8:	20000008 	.word	0x20000008

08005fac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60bb      	str	r3, [r7, #8]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005fc6:	4b1e      	ldr	r3, [pc, #120]	; (8006040 <HAL_RCC_GetSysClockFreq+0x94>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f003 030c 	and.w	r3, r3, #12
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d002      	beq.n	8005fdc <HAL_RCC_GetSysClockFreq+0x30>
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d003      	beq.n	8005fe2 <HAL_RCC_GetSysClockFreq+0x36>
 8005fda:	e026      	b.n	800602a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005fdc:	4b19      	ldr	r3, [pc, #100]	; (8006044 <HAL_RCC_GetSysClockFreq+0x98>)
 8005fde:	613b      	str	r3, [r7, #16]
      break;
 8005fe0:	e026      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	0c9b      	lsrs	r3, r3, #18
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	4a17      	ldr	r2, [pc, #92]	; (8006048 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005fec:	5cd3      	ldrb	r3, [r2, r3]
 8005fee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005ff0:	4b13      	ldr	r3, [pc, #76]	; (8006040 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	4a14      	ldr	r2, [pc, #80]	; (800604c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ffa:	5cd3      	ldrb	r3, [r2, r3]
 8005ffc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d008      	beq.n	800601a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006008:	4a0e      	ldr	r2, [pc, #56]	; (8006044 <HAL_RCC_GetSysClockFreq+0x98>)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	fb02 f303 	mul.w	r3, r2, r3
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	e004      	b.n	8006024 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a0c      	ldr	r2, [pc, #48]	; (8006050 <HAL_RCC_GetSysClockFreq+0xa4>)
 800601e:	fb02 f303 	mul.w	r3, r2, r3
 8006022:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	613b      	str	r3, [r7, #16]
      break;
 8006028:	e002      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800602a:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <HAL_RCC_GetSysClockFreq+0xa8>)
 800602c:	613b      	str	r3, [r7, #16]
      break;
 800602e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006030:	693b      	ldr	r3, [r7, #16]
}
 8006032:	4618      	mov	r0, r3
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40021000 	.word	0x40021000
 8006044:	016e3600 	.word	0x016e3600
 8006048:	08008914 	.word	0x08008914
 800604c:	08008924 	.word	0x08008924
 8006050:	003d0900 	.word	0x003d0900
 8006054:	007a1200 	.word	0x007a1200

08006058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006058:	b480      	push	{r7}
 800605a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800605c:	4b03      	ldr	r3, [pc, #12]	; (800606c <HAL_RCC_GetHCLKFreq+0x14>)
 800605e:	681b      	ldr	r3, [r3, #0]
}
 8006060:	4618      	mov	r0, r3
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	20000004 	.word	0x20000004

08006070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006076:	f7ff ffef 	bl	8006058 <HAL_RCC_GetHCLKFreq>
 800607a:	4601      	mov	r1, r0
 800607c:	4b0b      	ldr	r3, [pc, #44]	; (80060ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006084:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006088:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	fa92 f2a2 	rbit	r2, r2
 8006090:	603a      	str	r2, [r7, #0]
  return result;
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	fab2 f282 	clz	r2, r2
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	40d3      	lsrs	r3, r2
 800609c:	4a04      	ldr	r2, [pc, #16]	; (80060b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800609e:	5cd3      	ldrb	r3, [r2, r3]
 80060a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	40021000 	.word	0x40021000
 80060b0:	0800890c 	.word	0x0800890c

080060b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80060ba:	f7ff ffcd 	bl	8006058 <HAL_RCC_GetHCLKFreq>
 80060be:	4601      	mov	r1, r0
 80060c0:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80060c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80060cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	fa92 f2a2 	rbit	r2, r2
 80060d4:	603a      	str	r2, [r7, #0]
  return result;
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	fab2 f282 	clz	r2, r2
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	40d3      	lsrs	r3, r2
 80060e0:	4a04      	ldr	r2, [pc, #16]	; (80060f4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80060e2:	5cd3      	ldrb	r3, [r2, r3]
 80060e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80060e8:	4618      	mov	r0, r3
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	40021000 	.word	0x40021000
 80060f4:	0800890c 	.word	0x0800890c

080060f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b092      	sub	sp, #72	; 0x48
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006108:	2300      	movs	r3, #0
 800610a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 80d4 	beq.w	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800611c:	4b4e      	ldr	r3, [pc, #312]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10e      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006128:	4b4b      	ldr	r3, [pc, #300]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	4a4a      	ldr	r2, [pc, #296]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800612e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006132:	61d3      	str	r3, [r2, #28]
 8006134:	4b48      	ldr	r3, [pc, #288]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006140:	2301      	movs	r3, #1
 8006142:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006146:	4b45      	ldr	r3, [pc, #276]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614e:	2b00      	cmp	r3, #0
 8006150:	d118      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006152:	4b42      	ldr	r3, [pc, #264]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a41      	ldr	r2, [pc, #260]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800615c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800615e:	f7fc fc61 	bl	8002a24 <HAL_GetTick>
 8006162:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006164:	e008      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006166:	f7fc fc5d 	bl	8002a24 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b64      	cmp	r3, #100	; 0x64
 8006172:	d901      	bls.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e12d      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006178:	4b38      	ldr	r3, [pc, #224]	; (800625c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0f0      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006184:	4b34      	ldr	r3, [pc, #208]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800618e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 8084 	beq.w	800629e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800619e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d07c      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061a4:	4b2c      	ldr	r3, [pc, #176]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	fa93 f3a3 	rbit	r3, r3
 80061ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061be:	fab3 f383 	clz	r3, r3
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	4b26      	ldr	r3, [pc, #152]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	461a      	mov	r2, r3
 80061ce:	2301      	movs	r3, #1
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	fa93 f3a3 	rbit	r3, r3
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80061e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061e2:	fab3 f383 	clz	r3, r3
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	461a      	mov	r2, r3
 80061ea:	4b1d      	ldr	r3, [pc, #116]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	461a      	mov	r2, r3
 80061f2:	2300      	movs	r3, #0
 80061f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80061f6:	4a18      	ldr	r2, [pc, #96]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80061fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d04b      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006206:	f7fc fc0d 	bl	8002a24 <HAL_GetTick>
 800620a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800620c:	e00a      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800620e:	f7fc fc09 	bl	8002a24 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	f241 3288 	movw	r2, #5000	; 0x1388
 800621c:	4293      	cmp	r3, r2
 800621e:	d901      	bls.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e0d7      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8006224:	2302      	movs	r3, #2
 8006226:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	fa93 f3a3 	rbit	r3, r3
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
 8006230:	2302      	movs	r3, #2
 8006232:	623b      	str	r3, [r7, #32]
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	fa93 f3a3 	rbit	r3, r3
 800623a:	61fb      	str	r3, [r7, #28]
  return result;
 800623c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800623e:	fab3 f383 	clz	r3, r3
 8006242:	b2db      	uxtb	r3, r3
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	b2db      	uxtb	r3, r3
 8006248:	f043 0302 	orr.w	r3, r3, #2
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d108      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006252:	4b01      	ldr	r3, [pc, #4]	; (8006258 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	e00d      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006258:	40021000 	.word	0x40021000
 800625c:	40007000 	.word	0x40007000
 8006260:	10908100 	.word	0x10908100
 8006264:	2302      	movs	r3, #2
 8006266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	fa93 f3a3 	rbit	r3, r3
 800626e:	617b      	str	r3, [r7, #20]
 8006270:	4b5a      	ldr	r3, [pc, #360]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	2202      	movs	r2, #2
 8006276:	613a      	str	r2, [r7, #16]
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	fa92 f2a2 	rbit	r2, r2
 800627e:	60fa      	str	r2, [r7, #12]
  return result;
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	fab2 f282 	clz	r2, r2
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	f002 021f 	and.w	r2, r2, #31
 8006292:	2101      	movs	r1, #1
 8006294:	fa01 f202 	lsl.w	r2, r1, r2
 8006298:	4013      	ands	r3, r2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0b7      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800629e:	4b4f      	ldr	r3, [pc, #316]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	494c      	ldr	r1, [pc, #304]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80062b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d105      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062b8:	4b48      	ldr	r3, [pc, #288]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	4a47      	ldr	r2, [pc, #284]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80062be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d008      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062d0:	4b42      	ldr	r3, [pc, #264]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80062d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d4:	f023 0203 	bic.w	r2, r3, #3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	493f      	ldr	r1, [pc, #252]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d008      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062ee:	4b3b      	ldr	r3, [pc, #236]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80062f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	4938      	ldr	r1, [pc, #224]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800630c:	4b33      	ldr	r3, [pc, #204]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006310:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	4930      	ldr	r1, [pc, #192]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800631a:	4313      	orrs	r3, r2
 800631c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b00      	cmp	r3, #0
 8006328:	d008      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800632a:	4b2c      	ldr	r3, [pc, #176]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632e:	f023 0210 	bic.w	r2, r3, #16
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	4929      	ldr	r1, [pc, #164]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006338:	4313      	orrs	r3, r2
 800633a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d008      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006348:	4b24      	ldr	r3, [pc, #144]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006354:	4921      	ldr	r1, [pc, #132]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006356:	4313      	orrs	r3, r2
 8006358:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d008      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006366:	4b1d      	ldr	r3, [pc, #116]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	f023 0220 	bic.w	r2, r3, #32
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	491a      	ldr	r1, [pc, #104]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006374:	4313      	orrs	r3, r2
 8006376:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8006384:	4b15      	ldr	r3, [pc, #84]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	4912      	ldr	r1, [pc, #72]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006392:	4313      	orrs	r3, r2
 8006394:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d008      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 80063a2:	4b0e      	ldr	r3, [pc, #56]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	490b      	ldr	r1, [pc, #44]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d008      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063c0:	4b06      	ldr	r3, [pc, #24]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	4903      	ldr	r1, [pc, #12]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3748      	adds	r7, #72	; 0x48
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40021000 	.word	0x40021000

080063e0 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check SDADC handle */
  if(hsdadc == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e07f      	b.n	80064f2 <HAL_SDADC_Init+0x112>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));

  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	625a      	str	r2, [r3, #36]	; 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	629a      	str	r2, [r3, #40]	; 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	62da      	str	r2, [r3, #44]	; 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800641c:	631a      	str	r2, [r3, #48]	; 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	635a      	str	r2, [r3, #52]	; 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	639a      	str	r2, [r3, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7fb ffa7 	bl	8002384 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8006444:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6819      	ldr	r1, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8006454:	431a      	orrs	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800646c:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6859      	ldr	r1, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8006480:	4b1e      	ldr	r3, [pc, #120]	; (80064fc <HAL_SDADC_Init+0x11c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	429a      	cmp	r2, r3
 800648e:	d00f      	beq.n	80064b0 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8006490:	4b1a      	ldr	r3, [pc, #104]	; (80064fc <HAL_SDADC_Init+0x11c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a19      	ldr	r2, [pc, #100]	; (80064fc <HAL_SDADC_Init+0x11c>)
 8006496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800649a:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 800649c:	4b17      	ldr	r3, [pc, #92]	; (80064fc <HAL_SDADC_Init+0x11c>)
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	4915      	ldr	r1, [pc, #84]	; (80064fc <HAL_SDADC_Init+0x11c>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	600b      	str	r3, [r1, #0]

    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 80064aa:	2002      	movs	r0, #2
 80064ac:	f7fc fac6 	bl	8002a3c <HAL_Delay>
  }

  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0201 	orr.w	r2, r2, #1
 80064be:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  tickstart = HAL_GetTick();
 80064c0:	f7fc fab0 	bl	8002a24 <HAL_GetTick>
 80064c4:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 80064c6:	e008      	b.n	80064da <HAL_SDADC_Init+0xfa>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 80064c8:	f7fc faac 	bl	8002a24 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2bc8      	cmp	r3, #200	; 0xc8
 80064d4:	d901      	bls.n	80064da <HAL_SDADC_Init+0xfa>
    {
      return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e00b      	b.n	80064f2 <HAL_SDADC_Init+0x112>
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1ef      	bne.n	80064c8 <HAL_SDADC_Init+0xe8>
    }
  }

  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return HAL status */
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	40016000 	.word	0x40016000

08006500 <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006516:	2b01      	cmp	r3, #1
 8006518:	d002      	beq.n	8006520 <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	75fb      	strb	r3, [r7, #23]
 800651e:	e025      	b.n	800656c <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fa7d 	bl	8006a20 <SDADC_EnterInitMode>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d006      	beq.n	800653a <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	22ff      	movs	r2, #255	; 0xff
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	75fb      	strb	r3, [r7, #23]
 8006538:	e018      	b.n	800656c <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8006544:	4413      	add	r3, r2
 8006546:	3320      	adds	r3, #32
 8006548:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006552:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 8006558:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006560:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 8006562:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006564:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fa7d 	bl	8006a66 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 800656c:	7dfb      	ldrb	r3, [r7, #23]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800658e:	2b01      	cmp	r3, #1
 8006590:	d002      	beq.n	8006598 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	75fb      	strb	r3, [r7, #23]
 8006596:	e037      	b.n	8006608 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 fa41 	bl	8006a20 <SDADC_EnterInitMode>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d006      	beq.n	80065b2 <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	22ff      	movs	r2, #255	; 0xff
 80065a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	75fb      	strb	r3, [r7, #23]
 80065b0:	e02a      	b.n	8006608 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	4a17      	ldr	r2, [pc, #92]	; (8006614 <HAL_SDADC_AssociateChannelConfig+0x9c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d01f      	beq.n	80065fa <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	0c1b      	lsrs	r3, r3, #16
 80065be:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	f003 031f 	and.w	r3, r3, #31
 80065ce:	2203      	movs	r2, #3
 80065d0:	fa02 f303 	lsl.w	r3, r2, r3
 80065d4:	43da      	mvns	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	400a      	ands	r2, r1
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	f003 031f 	and.w	r3, r3, #31
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	409a      	lsls	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	641a      	str	r2, [r3, #64]	; 0x40
 80065f8:	e003      	b.n	8006602 <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	645a      	str	r2, [r3, #68]	; 0x44
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 fa2f 	bl	8006a66 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8006608:	7dfb      	ldrb	r3, [r7, #23]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	00080100 	.word	0x00080100

08006618 <HAL_SDADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_ConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                          uint32_t Channel,
                                          uint32_t ContinuousMode)
{
 8006618:	b480      	push	{r7}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662e:	2b00      	cmp	r3, #0
 8006630:	d02a      	beq.n	8006688 <HAL_SDADC_ConfigChannel+0x70>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006638:	2bff      	cmp	r3, #255	; 0xff
 800663a:	d025      	beq.n	8006688 <HAL_SDADC_ConfigChannel+0x70>
  {
    /* Set RCH[3:0] and RCONT bits in SDADC_CR2 */
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 029e 	bic.w	r2, r2, #5177344	; 0x4f0000
 800664a:	605a      	str	r2, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d10c      	bne.n	800666c <HAL_SDADC_ConfigChannel+0x54>
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK) | SDADC_CR2_RCONT);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	4b10      	ldr	r3, [pc, #64]	; (800669c <HAL_SDADC_ConfigChannel+0x84>)
 800665c:	400b      	ands	r3, r1
 800665e:	431a      	orrs	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	e009      	b.n	8006680 <HAL_SDADC_ConfigChannel+0x68>
    }
    else
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK));
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6859      	ldr	r1, [r3, #4]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	0c1b      	lsrs	r3, r3, #16
 8006676:	041b      	lsls	r3, r3, #16
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	6812      	ldr	r2, [r2, #0]
 800667c:	430b      	orrs	r3, r1
 800667e:	6053      	str	r3, [r2, #4]
    }
    /* Store continuous mode information */
    hsdadc->RegularContMode = ContinuousMode;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	619a      	str	r2, [r3, #24]
 8006686:	e001      	b.n	800668c <HAL_SDADC_ConfigChannel+0x74>
  }
  else
  {
    status = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800668c:	7dfb      	ldrb	r3, [r7, #23]
}
 800668e:	4618      	mov	r0, r3
 8006690:	371c      	adds	r7, #28
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	ffbf0000 	.word	0xffbf0000

080066a0 <HAL_SDADC_InjectedConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                                  uint32_t Channel,
                                                  uint32_t ContinuousMode)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d027      	beq.n	800670a <HAL_SDADC_InjectedConfigChannel+0x6a>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c0:	2bff      	cmp	r3, #255	; 0xff
 80066c2:	d022      	beq.n	800670a <HAL_SDADC_InjectedConfigChannel+0x6a>
  {
    /* Set JCHG[8:0] bits in SDADC_JCHG */
    hsdadc->Instance->JCHGR = (uint32_t) (Channel & SDADC_LSB_MASK);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	b292      	uxth	r2, r2
 80066cc:	615a      	str	r2, [r3, #20]
    /* Set or clear JCONT bit in SDADC_CR2 */
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d108      	bne.n	80066e6 <HAL_SDADC_InjectedConfigChannel+0x46>
    {
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0220 	orr.w	r2, r2, #32
 80066e2:	605a      	str	r2, [r3, #4]
 80066e4:	e007      	b.n	80066f6 <HAL_SDADC_InjectedConfigChannel+0x56>
    }
    else
    {
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0220 	bic.w	r2, r2, #32
 80066f4:	605a      	str	r2, [r3, #4]
    }
    /* Store continuous mode information */
    hsdadc->InjectedContMode = ContinuousMode;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	61da      	str	r2, [r3, #28]
    /* Store number of injected channels */
    hsdadc->InjectedChannelsNbr = SDADC_GetInjChannelsNbr(Channel);
 80066fc:	68b8      	ldr	r0, [r7, #8]
 80066fe:	f000 f9c4 	bl	8006a8a <SDADC_GetInjChannelsNbr>
 8006702:	4602      	mov	r2, r0
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	621a      	str	r2, [r3, #32]
 8006708:	e001      	b.n	800670e <HAL_SDADC_InjectedConfigChannel+0x6e>
  }
  else
  {
    status = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800670e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <HAL_SDADC_SelectInjectedTrigger>:
  *            @arg SDADC_SYNCHRONOUS_TRIGGER : Synchronous with SDADC1 (only for SDADC2 and SDADC3).
  *            @arg SDADC_EXTERNAL_TRIGGER : External trigger.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedTrigger(SDADC_HandleTypeDef *hsdadc, uint32_t Trigger)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_TRIGGER(Trigger));

  /* Check parameters compatibility */
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a12      	ldr	r2, [pc, #72]	; (8006774 <HAL_SDADC_SelectInjectedTrigger+0x5c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d105      	bne.n	800673c <HAL_SDADC_SelectInjectedTrigger+0x24>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d102      	bne.n	800673c <HAL_SDADC_SelectInjectedTrigger+0x24>
  {
    status = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	73fb      	strb	r3, [r7, #15]
 800673a:	e014      	b.n	8006766 <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006742:	2b01      	cmp	r3, #1
 8006744:	d009      	beq.n	800675a <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800674c:	2b02      	cmp	r3, #2
 800674e:	d004      	beq.n	800675a <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_REG))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8006756:	2b03      	cmp	r3, #3
 8006758:	d103      	bne.n	8006762 <HAL_SDADC_SelectInjectedTrigger+0x4a>
  {
    /* Store regular trigger information */
    hsdadc->InjectedTrigger = Trigger;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006760:	e001      	b.n	8006766 <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  else
  {
    status = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8006766:	7bfb      	ldrb	r3, [r7, #15]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	40016000 	.word	0x40016000

08006778 <HAL_SDADC_SelectInjectedDelay>:
  *         This parameter can be a value of @ref SDADC_InjectedDelay.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedDelay(SDADC_HandleTypeDef *hsdadc,
                                                uint32_t InjectedDelay)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_DELAY(InjectedDelay));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800678c:	2b01      	cmp	r3, #1
 800678e:	d120      	bne.n	80067d2 <HAL_SDADC_SelectInjectedDelay+0x5a>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f945 	bl	8006a20 <SDADC_EnterInitMode>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d006      	beq.n	80067aa <HAL_SDADC_SelectInjectedDelay+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	22ff      	movs	r2, #255	; 0xff
 80067a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	73fb      	strb	r3, [r7, #15]
 80067a8:	e015      	b.n	80067d6 <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
    else
    {
      /* Set JDS bit in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JDS);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067b8:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= InjectedDelay;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6859      	ldr	r1, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f94b 	bl	8006a66 <SDADC_ExitInitMode>
 80067d0:	e001      	b.n	80067d6 <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_SDADC_CalibrationStart>:
  *         This parameter can be a value of @ref SDADC_CalibrationSequence.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_CalibrationStart(SDADC_HandleTypeDef *hsdadc,
                                             uint32_t CalibrationSequence)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_CALIB_SEQUENCE(CalibrationSequence));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d12c      	bne.n	8006852 <HAL_SDADC_CalibrationStart+0x72>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f911 	bl	8006a20 <SDADC_EnterInitMode>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d006      	beq.n	8006812 <HAL_SDADC_CalibrationStart+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	22ff      	movs	r2, #255	; 0xff
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	73fb      	strb	r3, [r7, #15]
 8006810:	e021      	b.n	8006856 <HAL_SDADC_CalibrationStart+0x76>
    }
    else
    {
      /* Set CALIBCNT[1:0] bits in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0206 	bic.w	r2, r2, #6
 8006820:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6859      	ldr	r1, [r3, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f917 	bl	8006a66 <SDADC_ExitInitMode>

      /* Set STARTCALIB in SDADC_CR2 */
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f042 0210 	orr.w	r2, r2, #16
 8006846:	605a      	str	r2, [r3, #4]

      /* Set SDADC in calibration state */
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006850:	e001      	b.n	8006856 <HAL_SDADC_CalibrationStart+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8006856:	7bfb      	ldrb	r3, [r7, #15]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_SDADC_PollForCalibEvent>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForCalibEvent(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006870:	2b02      	cmp	r3, #2
 8006872:	d001      	beq.n	8006878 <HAL_SDADC_PollForCalibEvent+0x18>
  {
    /* Return error status */
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e028      	b.n	80068ca <HAL_SDADC_PollForCalibEvent+0x6a>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006878:	f7fc f8d4 	bl	8002a24 <HAL_GetTick>
 800687c:	60f8      	str	r0, [r7, #12]

    /* Wait EOCALF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 800687e:	e010      	b.n	80068a2 <HAL_SDADC_PollForCalibEvent+0x42>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006886:	d00c      	beq.n	80068a2 <HAL_SDADC_PollForCalibEvent+0x42>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8006888:	f7fc f8cc 	bl	8002a24 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	429a      	cmp	r2, r3
 8006896:	d302      	bcc.n	800689e <HAL_SDADC_PollForCalibEvent+0x3e>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_SDADC_PollForCalibEvent+0x42>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e013      	b.n	80068ca <HAL_SDADC_PollForCalibEvent+0x6a>
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d1e7      	bne.n	8006880 <HAL_SDADC_PollForCalibEvent+0x20>
        }
      }
    }
    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0201 	orr.w	r2, r2, #1
 80068be:	60da      	str	r2, [r3, #12]

    /* Set SDADC in ready state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_OK;
 80068c8:	2300      	movs	r3, #0
  }
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <HAL_SDADC_Start>:
  *         or if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Start(SDADC_HandleTypeDef *hsdadc)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d004      	beq.n	80068ee <HAL_SDADC_Start+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_INJ))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d105      	bne.n	80068fa <HAL_SDADC_Start+0x28>
  {
    /* Start regular conversion */
    status = SDADC_RegConvStart(hsdadc);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f8ef 	bl	8006ad2 <SDADC_RegConvStart>
 80068f4:	4603      	mov	r3, r0
 80068f6:	73fb      	strb	r3, [r7, #15]
 80068f8:	e001      	b.n	80068fe <HAL_SDADC_Start+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_SDADC_PollForConversion>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForConversion(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006918:	2b03      	cmp	r3, #3
 800691a:	d006      	beq.n	800692a <HAL_SDADC_PollForConversion+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8006922:	2b05      	cmp	r3, #5
 8006924:	d001      	beq.n	800692a <HAL_SDADC_PollForConversion+0x22>
  {
    /* Return error status */
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e044      	b.n	80069b4 <HAL_SDADC_PollForConversion+0xac>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800692a:	f7fc f87b 	bl	8002a24 <HAL_GetTick>
 800692e:	60f8      	str	r0, [r7, #12]

    /* Wait REOCF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 8006930:	e010      	b.n	8006954 <HAL_SDADC_PollForConversion+0x4c>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006938:	d00c      	beq.n	8006954 <HAL_SDADC_PollForConversion+0x4c>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 800693a:	f7fc f873 	bl	8002a24 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d302      	bcc.n	8006950 <HAL_SDADC_PollForConversion+0x48>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <HAL_SDADC_PollForConversion+0x4c>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e02f      	b.n	80069b4 <HAL_SDADC_PollForConversion+0xac>
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 0308 	and.w	r3, r3, #8
 800695e:	2b08      	cmp	r3, #8
 8006960:	d1e7      	bne.n	8006932 <HAL_SDADC_PollForConversion+0x2a>
        }
      }
    }
    /* Check if overrun occurs */
    if((hsdadc->Instance->ISR & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f003 0310 	and.w	r3, r3, #16
 800696c:	2b10      	cmp	r3, #16
 800696e:	d10d      	bne.n	800698c <HAL_SDADC_PollForConversion+0x84>
    {
      /* Update error code and call error callback */
      hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
      hsdadc->ErrorCallback(hsdadc);
#else
      HAL_SDADC_ErrorCallback(hsdadc);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f848 	bl	8006a0c <HAL_SDADC_ErrorCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

      /* Set CLRROVRF bit in SDADC_CLRISR register */
      hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0210 	orr.w	r2, r2, #16
 800698a:	60da      	str	r2, [r3, #12]
    }
    /* Update SDADC state only if not continuous conversion and SW trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10e      	bne.n	80069b2 <HAL_SDADC_PollForConversion+0xaa>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10a      	bne.n	80069b2 <HAL_SDADC_PollForConversion+0xaa>
    {
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d101      	bne.n	80069aa <HAL_SDADC_PollForConversion+0xa2>
 80069a6:	2201      	movs	r2, #1
 80069a8:	e000      	b.n	80069ac <HAL_SDADC_PollForConversion+0xa4>
 80069aa:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Return function status */
    return HAL_OK;
 80069b2:	2300      	movs	r3, #0
  }
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_SDADC_Stop>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Stop(SDADC_HandleTypeDef *hsdadc)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d007      	beq.n	80069de <HAL_SDADC_Stop+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 80069d4:	2b05      	cmp	r3, #5
 80069d6:	d002      	beq.n	80069de <HAL_SDADC_Stop+0x22>
  {
    /* Return error status */
    status = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
 80069dc:	e004      	b.n	80069e8 <HAL_SDADC_Stop+0x2c>
  }
  else
  {
    /* Stop regular conversion */
    status = SDADC_RegConvStop(hsdadc);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f8b5 	bl	8006b4e <SDADC_RegConvStop>
 80069e4:	4603      	mov	r3, r0
 80069e6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_SDADC_GetValue>:
  * @brief  This function allows to get regular conversion value.
  * @param  hsdadc SDADC handle.
  * @retval Regular conversion value
  */
uint32_t HAL_SDADC_GetValue(SDADC_HandleTypeDef *hsdadc)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Return regular conversion value */
  return hsdadc->Instance->RDATAR;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006a36:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 8006a38:	f7fb fff4 	bl	8002a24 <HAL_GetTick>
 8006a3c:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8006a3e:	e008      	b.n	8006a52 <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8006a40:	f7fb fff0 	bl	8002a24 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2bc8      	cmp	r3, #200	; 0xc8
 8006a4c:	d901      	bls.n	8006a52 <SDADC_EnterInitMode+0x32>
    {
      return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e005      	b.n	8006a5e <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	daf1      	bge.n	8006a40 <SDADC_EnterInitMode+0x20>
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006a7c:	601a      	str	r2, [r3, #0]
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <SDADC_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t SDADC_GetInjChannelsNbr(uint32_t Channels)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b087      	sub	sp, #28
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0UL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	617b      	str	r3, [r7, #20]
  uint32_t tmp,i;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & SDADC_LSB_MASK);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	e00d      	b.n	8006abe <SDADC_GetInjChannelsNbr+0x34>
  {
    if((tmp & 0x00000001UL) != 0UL)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <SDADC_GetInjChannelsNbr+0x28>
    {
      nbChannels++;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	617b      	str	r3, [r7, #20]
    }
    tmp = (uint32_t) (tmp >> 1UL);
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	085b      	lsrs	r3, r3, #1
 8006ab6:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3301      	adds	r3, #1
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d9ee      	bls.n	8006aa2 <SDADC_GetInjChannelsNbr+0x18>
  }
  return nbChannels;
 8006ac4:	697b      	ldr	r3, [r7, #20]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <SDADC_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d108      	bne.n	8006af8 <SDADC_RegConvStart+0x26>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006af4:	605a      	str	r2, [r3, #4]
 8006af6:	e017      	b.n	8006b28 <SDADC_RegConvStart+0x56>
  }
  else /* synchronous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff ff91 	bl	8006a20 <SDADC_EnterInitMode>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d006      	beq.n	8006b12 <SDADC_RegConvStart+0x40>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	22ff      	movs	r2, #255	; 0xff
 8006b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	73fb      	strb	r3, [r7, #15]
 8006b10:	e00a      	b.n	8006b28 <SDADC_RegConvStart+0x56>
    }
    else
    {
      /* Set RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b20:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff ff9f 	bl	8006a66 <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <SDADC_RegConvStart+0x72>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d101      	bne.n	8006b3c <SDADC_RegConvStart+0x6a>
 8006b38:	2203      	movs	r2, #3
 8006b3a:	e000      	b.n	8006b3e <SDADC_RegConvStart+0x6c>
 8006b3c:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <SDADC_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStop(SDADC_HandleTypeDef* hsdadc)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t dummy_read_for_register_reset;

  /* Check continuous mode */
  if(hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_ON)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d10c      	bne.n	8006b78 <SDADC_RegConvStop+0x2a>
  {
    /* Clear REOCF by reading SDADC_RDATAR register */
    dummy_read_for_register_reset = hsdadc->Instance->RDATAR;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b64:	60bb      	str	r3, [r7, #8]
    UNUSED(dummy_read_for_register_reset);
 8006b66:	68bb      	ldr	r3, [r7, #8]

    /* Clear RCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 &= ~(SDADC_CR2_RCONT);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8006b76:	605a      	str	r2, [r3, #4]
  }
  /* Wait for the end of regular conversion */
  tickstart = HAL_GetTick();
 8006b78:	f7fb ff54 	bl	8002a24 <HAL_GetTick>
 8006b7c:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_RCIP) != 0UL)
 8006b7e:	e00c      	b.n	8006b9a <SDADC_RegConvStop+0x4c>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8006b80:	f7fb ff50 	bl	8002a24 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2bc8      	cmp	r3, #200	; 0xc8
 8006b8c:	d905      	bls.n	8006b9a <SDADC_RegConvStop+0x4c>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	22ff      	movs	r2, #255	; 0xff
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e046      	b.n	8006c28 <SDADC_RegConvStop+0xda>
  while((hsdadc->Instance->ISR & SDADC_ISR_RCIP) != 0UL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1eb      	bne.n	8006b80 <SDADC_RegConvStop+0x32>
    }
  }
  /* Check if trigger is synchronous */
  if(hsdadc->RegularTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d116      	bne.n	8006bde <SDADC_RegConvStop+0x90>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff ff35 	bl	8006a20 <SDADC_EnterInitMode>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <SDADC_RegConvStop+0x7a>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	22ff      	movs	r2, #255	; 0xff
 8006bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e02f      	b.n	8006c28 <SDADC_RegConvStop+0xda>
    }
    else
    {
      /* Clear RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_RSYNC);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bd6:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff ff44 	bl	8006a66 <SDADC_ExitInitMode>
    }
  }
  /* Check if continuous mode */
  if(hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_ON)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d107      	bne.n	8006bf6 <SDADC_RegConvStop+0xa8>
  {
    /* Restore RCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RCONT;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006bf4:	605a      	str	r2, [r3, #4]
  }
  /* Clear REOCF by reading SDADC_RDATAR register */
  dummy_read_for_register_reset = hsdadc->Instance->RDATAR;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bfc:	60bb      	str	r3, [r7, #8]
  UNUSED(dummy_read_for_register_reset);
 8006bfe:	68bb      	ldr	r3, [r7, #8]

  /* Set CLRROVRF bit in SDADC_CLRISR register */
  hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0210 	orr.w	r2, r2, #16
 8006c0e:	60da      	str	r2, [r3, #12]

  /* Update SDADC state */
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                  HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d101      	bne.n	8006c1e <SDADC_RegConvStop+0xd0>
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	e000      	b.n	8006c20 <SDADC_RegConvStop+0xd2>
 8006c1e:	2204      	movs	r2, #4
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e041      	b.n	8006cc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d106      	bne.n	8006c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7fb fd7a 	bl	8002750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f000 fa80 	bl	8007174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d001      	beq.n	8006ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e049      	b.n	8006d7c <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68da      	ldr	r2, [r3, #12]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0201 	orr.w	r2, r2, #1
 8006cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d08:	d01d      	beq.n	8006d46 <HAL_TIM_Base_Start_IT+0x76>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a1e      	ldr	r2, [pc, #120]	; (8006d88 <HAL_TIM_Base_Start_IT+0xb8>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d018      	beq.n	8006d46 <HAL_TIM_Base_Start_IT+0x76>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a1c      	ldr	r2, [pc, #112]	; (8006d8c <HAL_TIM_Base_Start_IT+0xbc>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d013      	beq.n	8006d46 <HAL_TIM_Base_Start_IT+0x76>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a1b      	ldr	r2, [pc, #108]	; (8006d90 <HAL_TIM_Base_Start_IT+0xc0>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d00e      	beq.n	8006d46 <HAL_TIM_Base_Start_IT+0x76>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a19      	ldr	r2, [pc, #100]	; (8006d94 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d009      	beq.n	8006d46 <HAL_TIM_Base_Start_IT+0x76>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d004      	beq.n	8006d46 <HAL_TIM_Base_Start_IT+0x76>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a16      	ldr	r2, [pc, #88]	; (8006d9c <HAL_TIM_Base_Start_IT+0xcc>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d111      	bne.n	8006d6a <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b06      	cmp	r3, #6
 8006d56:	d010      	beq.n	8006d7a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f042 0201 	orr.w	r2, r2, #1
 8006d66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d68:	e007      	b.n	8006d7a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f042 0201 	orr.w	r2, r2, #1
 8006d78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	40000400 	.word	0x40000400
 8006d8c:	40000800 	.word	0x40000800
 8006d90:	40000c00 	.word	0x40000c00
 8006d94:	40001800 	.word	0x40001800
 8006d98:	40014000 	.word	0x40014000
 8006d9c:	40015c00 	.word	0x40015c00

08006da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d020      	beq.n	8006e04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01b      	beq.n	8006e04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f06f 0202 	mvn.w	r2, #2
 8006dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f9a3 	bl	8007136 <HAL_TIM_IC_CaptureCallback>
 8006df0:	e005      	b.n	8006dfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f995 	bl	8007122 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f9a6 	bl	800714a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	f003 0304 	and.w	r3, r3, #4
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d020      	beq.n	8006e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d01b      	beq.n	8006e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f06f 0204 	mvn.w	r2, #4
 8006e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2202      	movs	r2, #2
 8006e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f97d 	bl	8007136 <HAL_TIM_IC_CaptureCallback>
 8006e3c:	e005      	b.n	8006e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f96f 	bl	8007122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f980 	bl	800714a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d020      	beq.n	8006e9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f003 0308 	and.w	r3, r3, #8
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01b      	beq.n	8006e9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f06f 0208 	mvn.w	r2, #8
 8006e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2204      	movs	r2, #4
 8006e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f957 	bl	8007136 <HAL_TIM_IC_CaptureCallback>
 8006e88:	e005      	b.n	8006e96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f949 	bl	8007122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f95a 	bl	800714a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f003 0310 	and.w	r3, r3, #16
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d020      	beq.n	8006ee8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f003 0310 	and.w	r3, r3, #16
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01b      	beq.n	8006ee8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f06f 0210 	mvn.w	r2, #16
 8006eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2208      	movs	r2, #8
 8006ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f931 	bl	8007136 <HAL_TIM_IC_CaptureCallback>
 8006ed4:	e005      	b.n	8006ee2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f923 	bl	8007122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f934 	bl	800714a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00c      	beq.n	8006f0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d007      	beq.n	8006f0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f06f 0201 	mvn.w	r2, #1
 8006f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f901 	bl	800710e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00c      	beq.n	8006f30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d007      	beq.n	8006f30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fae0 	bl	80074f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00c      	beq.n	8006f54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d007      	beq.n	8006f54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f905 	bl	800715e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00c      	beq.n	8006f78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d007      	beq.n	8006f78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f06f 0220 	mvn.w	r2, #32
 8006f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fab2 	bl	80074dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f78:	bf00      	nop
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d101      	bne.n	8006f9c <HAL_TIM_ConfigClockSource+0x1c>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e0b4      	b.n	8007106 <HAL_TIM_ConfigClockSource+0x186>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fd4:	d03e      	beq.n	8007054 <HAL_TIM_ConfigClockSource+0xd4>
 8006fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fda:	f200 8087 	bhi.w	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8006fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe2:	f000 8086 	beq.w	80070f2 <HAL_TIM_ConfigClockSource+0x172>
 8006fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fea:	d87f      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8006fec:	2b70      	cmp	r3, #112	; 0x70
 8006fee:	d01a      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0xa6>
 8006ff0:	2b70      	cmp	r3, #112	; 0x70
 8006ff2:	d87b      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8006ff4:	2b60      	cmp	r3, #96	; 0x60
 8006ff6:	d050      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x11a>
 8006ff8:	2b60      	cmp	r3, #96	; 0x60
 8006ffa:	d877      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8006ffc:	2b50      	cmp	r3, #80	; 0x50
 8006ffe:	d03c      	beq.n	800707a <HAL_TIM_ConfigClockSource+0xfa>
 8007000:	2b50      	cmp	r3, #80	; 0x50
 8007002:	d873      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8007004:	2b40      	cmp	r3, #64	; 0x40
 8007006:	d058      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x13a>
 8007008:	2b40      	cmp	r3, #64	; 0x40
 800700a:	d86f      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 800700c:	2b30      	cmp	r3, #48	; 0x30
 800700e:	d064      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x15a>
 8007010:	2b30      	cmp	r3, #48	; 0x30
 8007012:	d86b      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8007014:	2b20      	cmp	r3, #32
 8007016:	d060      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x15a>
 8007018:	2b20      	cmp	r3, #32
 800701a:	d867      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 800701c:	2b00      	cmp	r3, #0
 800701e:	d05c      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x15a>
 8007020:	2b10      	cmp	r3, #16
 8007022:	d05a      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x15a>
 8007024:	e062      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007036:	f000 f9bd 	bl	80073b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007048:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	609a      	str	r2, [r3, #8]
      break;
 8007052:	e04f      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007064:	f000 f9a6 	bl	80073b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007076:	609a      	str	r2, [r3, #8]
      break;
 8007078:	e03c      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007086:	461a      	mov	r2, r3
 8007088:	f000 f91a 	bl	80072c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2150      	movs	r1, #80	; 0x50
 8007092:	4618      	mov	r0, r3
 8007094:	f000 f973 	bl	800737e <TIM_ITRx_SetConfig>
      break;
 8007098:	e02c      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070a6:	461a      	mov	r2, r3
 80070a8:	f000 f939 	bl	800731e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2160      	movs	r1, #96	; 0x60
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 f963 	bl	800737e <TIM_ITRx_SetConfig>
      break;
 80070b8:	e01c      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070c6:	461a      	mov	r2, r3
 80070c8:	f000 f8fa 	bl	80072c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2140      	movs	r1, #64	; 0x40
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 f953 	bl	800737e <TIM_ITRx_SetConfig>
      break;
 80070d8:	e00c      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4619      	mov	r1, r3
 80070e4:	4610      	mov	r0, r2
 80070e6:	f000 f94a 	bl	800737e <TIM_ITRx_SetConfig>
      break;
 80070ea:	e003      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	73fb      	strb	r3, [r7, #15]
      break;
 80070f0:	e000      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007116:	bf00      	nop
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007152:	bf00      	nop
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
	...

08007174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800718a:	d00f      	beq.n	80071ac <TIM_Base_SetConfig+0x38>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a42      	ldr	r2, [pc, #264]	; (8007298 <TIM_Base_SetConfig+0x124>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00b      	beq.n	80071ac <TIM_Base_SetConfig+0x38>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a41      	ldr	r2, [pc, #260]	; (800729c <TIM_Base_SetConfig+0x128>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d007      	beq.n	80071ac <TIM_Base_SetConfig+0x38>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a40      	ldr	r2, [pc, #256]	; (80072a0 <TIM_Base_SetConfig+0x12c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_Base_SetConfig+0x38>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a3f      	ldr	r2, [pc, #252]	; (80072a4 <TIM_Base_SetConfig+0x130>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d108      	bne.n	80071be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c4:	d027      	beq.n	8007216 <TIM_Base_SetConfig+0xa2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a33      	ldr	r2, [pc, #204]	; (8007298 <TIM_Base_SetConfig+0x124>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d023      	beq.n	8007216 <TIM_Base_SetConfig+0xa2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a32      	ldr	r2, [pc, #200]	; (800729c <TIM_Base_SetConfig+0x128>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d01f      	beq.n	8007216 <TIM_Base_SetConfig+0xa2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a31      	ldr	r2, [pc, #196]	; (80072a0 <TIM_Base_SetConfig+0x12c>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d01b      	beq.n	8007216 <TIM_Base_SetConfig+0xa2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a31      	ldr	r2, [pc, #196]	; (80072a8 <TIM_Base_SetConfig+0x134>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d017      	beq.n	8007216 <TIM_Base_SetConfig+0xa2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a30      	ldr	r2, [pc, #192]	; (80072ac <TIM_Base_SetConfig+0x138>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d013      	beq.n	8007216 <TIM_Base_SetConfig+0xa2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a2f      	ldr	r2, [pc, #188]	; (80072b0 <TIM_Base_SetConfig+0x13c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d00f      	beq.n	8007216 <TIM_Base_SetConfig+0xa2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a2e      	ldr	r2, [pc, #184]	; (80072b4 <TIM_Base_SetConfig+0x140>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d00b      	beq.n	8007216 <TIM_Base_SetConfig+0xa2>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a2d      	ldr	r2, [pc, #180]	; (80072b8 <TIM_Base_SetConfig+0x144>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d007      	beq.n	8007216 <TIM_Base_SetConfig+0xa2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a2c      	ldr	r2, [pc, #176]	; (80072bc <TIM_Base_SetConfig+0x148>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d003      	beq.n	8007216 <TIM_Base_SetConfig+0xa2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a24      	ldr	r2, [pc, #144]	; (80072a4 <TIM_Base_SetConfig+0x130>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d108      	bne.n	8007228 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800721c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	4313      	orrs	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a19      	ldr	r2, [pc, #100]	; (80072b4 <TIM_Base_SetConfig+0x140>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d007      	beq.n	8007264 <TIM_Base_SetConfig+0xf0>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a18      	ldr	r2, [pc, #96]	; (80072b8 <TIM_Base_SetConfig+0x144>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d003      	beq.n	8007264 <TIM_Base_SetConfig+0xf0>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a17      	ldr	r2, [pc, #92]	; (80072bc <TIM_Base_SetConfig+0x148>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d103      	bne.n	800726c <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	691a      	ldr	r2, [r3, #16]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b01      	cmp	r3, #1
 800727c:	d105      	bne.n	800728a <TIM_Base_SetConfig+0x116>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f023 0201 	bic.w	r2, r3, #1
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	611a      	str	r2, [r3, #16]
  }
}
 800728a:	bf00      	nop
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	40000400 	.word	0x40000400
 800729c:	40000800 	.word	0x40000800
 80072a0:	40000c00 	.word	0x40000c00
 80072a4:	40015c00 	.word	0x40015c00
 80072a8:	40001800 	.word	0x40001800
 80072ac:	40001c00 	.word	0x40001c00
 80072b0:	40002000 	.word	0x40002000
 80072b4:	40014000 	.word	0x40014000
 80072b8:	40014400 	.word	0x40014400
 80072bc:	40014800 	.word	0x40014800

080072c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b087      	sub	sp, #28
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	f023 0201 	bic.w	r2, r3, #1
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f023 030a 	bic.w	r3, r3, #10
 80072fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	621a      	str	r2, [r3, #32]
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800731e:	b480      	push	{r7}
 8007320:	b087      	sub	sp, #28
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	f023 0210 	bic.w	r2, r3, #16
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007348:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	031b      	lsls	r3, r3, #12
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800735a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	621a      	str	r2, [r3, #32]
}
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800737e:	b480      	push	{r7}
 8007380:	b085      	sub	sp, #20
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007394:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4313      	orrs	r3, r2
 800739c:	f043 0307 	orr.w	r3, r3, #7
 80073a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	609a      	str	r2, [r3, #8]
}
 80073a8:	bf00      	nop
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
 80073c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	021a      	lsls	r2, r3, #8
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	431a      	orrs	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4313      	orrs	r3, r2
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	609a      	str	r2, [r3, #8]
}
 80073e8:	bf00      	nop
 80073ea:	371c      	adds	r7, #28
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007404:	2b01      	cmp	r3, #1
 8007406:	d101      	bne.n	800740c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007408:	2302      	movs	r3, #2
 800740a:	e055      	b.n	80074b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800744e:	d01d      	beq.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a1b      	ldr	r2, [pc, #108]	; (80074c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d018      	beq.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a1a      	ldr	r2, [pc, #104]	; (80074c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d013      	beq.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a18      	ldr	r2, [pc, #96]	; (80074cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d00e      	beq.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a17      	ldr	r2, [pc, #92]	; (80074d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d009      	beq.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a15      	ldr	r2, [pc, #84]	; (80074d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d004      	beq.n	800748c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a14      	ldr	r2, [pc, #80]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d10c      	bne.n	80074a6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007492:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	4313      	orrs	r3, r2
 800749c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	40000400 	.word	0x40000400
 80074c8:	40000800 	.word	0x40000800
 80074cc:	40000c00 	.word	0x40000c00
 80074d0:	40001800 	.word	0x40001800
 80074d4:	40014000 	.word	0x40014000
 80074d8:	40015c00 	.word	0x40015c00

080074dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e040      	b.n	8007598 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d106      	bne.n	800752c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7fb f982 	bl	8002830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2224      	movs	r2, #36	; 0x24
 8007530:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0201 	bic.w	r2, r2, #1
 8007540:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fd80 	bl	8008050 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fc03 	bl	8007d5c <UART_SetConfig>
 8007556:	4603      	mov	r3, r0
 8007558:	2b01      	cmp	r3, #1
 800755a:	d101      	bne.n	8007560 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e01b      	b.n	8007598 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800756e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689a      	ldr	r2, [r3, #8]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800757e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0201 	orr.w	r2, r2, #1
 800758e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fdff 	bl	8008194 <UART_CheckIdleState>
 8007596:	4603      	mov	r3, r0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08a      	sub	sp, #40	; 0x28
 80075a4:	af02      	add	r7, sp, #8
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	603b      	str	r3, [r7, #0]
 80075ac:	4613      	mov	r3, r2
 80075ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	d178      	bne.n	80076aa <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <HAL_UART_Transmit+0x24>
 80075be:	88fb      	ldrh	r3, [r7, #6]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e071      	b.n	80076ac <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2221      	movs	r2, #33	; 0x21
 80075d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075d6:	f7fb fa25 	bl	8002a24 <HAL_GetTick>
 80075da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	88fa      	ldrh	r2, [r7, #6]
 80075e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	88fa      	ldrh	r2, [r7, #6]
 80075e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f4:	d108      	bne.n	8007608 <HAL_UART_Transmit+0x68>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d104      	bne.n	8007608 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	61bb      	str	r3, [r7, #24]
 8007606:	e003      	b.n	8007610 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800760c:	2300      	movs	r3, #0
 800760e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007610:	e030      	b.n	8007674 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2200      	movs	r2, #0
 800761a:	2180      	movs	r1, #128	; 0x80
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 fe61 	bl	80082e4 <UART_WaitOnFlagUntilTimeout>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d004      	beq.n	8007632 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2220      	movs	r2, #32
 800762c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e03c      	b.n	80076ac <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10b      	bne.n	8007650 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	881a      	ldrh	r2, [r3, #0]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007644:	b292      	uxth	r2, r2
 8007646:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	3302      	adds	r3, #2
 800764c:	61bb      	str	r3, [r7, #24]
 800764e:	e008      	b.n	8007662 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	781a      	ldrb	r2, [r3, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	b292      	uxth	r2, r2
 800765a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	3301      	adds	r3, #1
 8007660:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007668:	b29b      	uxth	r3, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	b29a      	uxth	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1c8      	bne.n	8007612 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2200      	movs	r2, #0
 8007688:	2140      	movs	r1, #64	; 0x40
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 fe2a 	bl	80082e4 <UART_WaitOnFlagUntilTimeout>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d004      	beq.n	80076a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2220      	movs	r2, #32
 800769a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e005      	b.n	80076ac <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2220      	movs	r2, #32
 80076a4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	e000      	b.n	80076ac <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80076aa:	2302      	movs	r3, #2
  }
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3720      	adds	r7, #32
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08a      	sub	sp, #40	; 0x28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	4613      	mov	r3, r2
 80076c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	d132      	bne.n	8007732 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <HAL_UART_Receive_DMA+0x24>
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e02b      	b.n	8007734 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d018      	beq.n	8007722 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	613b      	str	r3, [r7, #16]
   return(result);
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007704:	627b      	str	r3, [r7, #36]	; 0x24
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	623b      	str	r3, [r7, #32]
 8007710:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	69f9      	ldr	r1, [r7, #28]
 8007714:	6a3a      	ldr	r2, [r7, #32]
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	61bb      	str	r3, [r7, #24]
   return(result);
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e6      	bne.n	80076f0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007722:	88fb      	ldrh	r3, [r7, #6]
 8007724:	461a      	mov	r2, r3
 8007726:	68b9      	ldr	r1, [r7, #8]
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fe49 	bl	80083c0 <UART_Start_Receive_DMA>
 800772e:	4603      	mov	r3, r0
 8007730:	e000      	b.n	8007734 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007732:	2302      	movs	r3, #2
  }
}
 8007734:	4618      	mov	r0, r3
 8007736:	3728      	adds	r7, #40	; 0x28
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b0ba      	sub	sp, #232	; 0xe8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007762:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007766:	f640 030f 	movw	r3, #2063	; 0x80f
 800776a:	4013      	ands	r3, r2
 800776c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007770:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007774:	2b00      	cmp	r3, #0
 8007776:	d115      	bne.n	80077a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777c:	f003 0320 	and.w	r3, r3, #32
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00f      	beq.n	80077a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007788:	f003 0320 	and.w	r3, r3, #32
 800778c:	2b00      	cmp	r3, #0
 800778e:	d009      	beq.n	80077a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 82ab 	beq.w	8007cf0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4798      	blx	r3
      }
      return;
 80077a2:	e2a5      	b.n	8007cf0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80077a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 8117 	beq.w	80079dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80077ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80077ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80077be:	4b85      	ldr	r3, [pc, #532]	; (80079d4 <HAL_UART_IRQHandler+0x298>)
 80077c0:	4013      	ands	r3, r2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 810a 	beq.w	80079dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d011      	beq.n	80077f8 <HAL_UART_IRQHandler+0xbc>
 80077d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00b      	beq.n	80077f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2201      	movs	r2, #1
 80077e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ee:	f043 0201 	orr.w	r2, r3, #1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	2b00      	cmp	r3, #0
 8007802:	d011      	beq.n	8007828 <HAL_UART_IRQHandler+0xec>
 8007804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2202      	movs	r2, #2
 8007816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800781e:	f043 0204 	orr.w	r2, r3, #4
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782c:	f003 0304 	and.w	r3, r3, #4
 8007830:	2b00      	cmp	r3, #0
 8007832:	d011      	beq.n	8007858 <HAL_UART_IRQHandler+0x11c>
 8007834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00b      	beq.n	8007858 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2204      	movs	r2, #4
 8007846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800784e:	f043 0202 	orr.w	r2, r3, #2
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b00      	cmp	r3, #0
 8007862:	d017      	beq.n	8007894 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007868:	f003 0320 	and.w	r3, r3, #32
 800786c:	2b00      	cmp	r3, #0
 800786e:	d105      	bne.n	800787c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007874:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00b      	beq.n	8007894 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2208      	movs	r2, #8
 8007882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800788a:	f043 0208 	orr.w	r2, r3, #8
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800789c:	2b00      	cmp	r3, #0
 800789e:	d012      	beq.n	80078c6 <HAL_UART_IRQHandler+0x18a>
 80078a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00c      	beq.n	80078c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078bc:	f043 0220 	orr.w	r2, r3, #32
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 8211 	beq.w	8007cf4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80078d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d6:	f003 0320 	and.w	r3, r3, #32
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00d      	beq.n	80078fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078e2:	f003 0320 	and.w	r3, r3, #32
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d007      	beq.n	80078fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d003      	beq.n	80078fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007900:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790e:	2b40      	cmp	r3, #64	; 0x40
 8007910:	d005      	beq.n	800791e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007916:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800791a:	2b00      	cmp	r3, #0
 800791c:	d04f      	beq.n	80079be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fe14 	bl	800854c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792e:	2b40      	cmp	r3, #64	; 0x40
 8007930:	d141      	bne.n	80079b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3308      	adds	r3, #8
 8007938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800794c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	3308      	adds	r3, #8
 800795a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800795e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007966:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800796a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1d9      	bne.n	8007932 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007982:	2b00      	cmp	r3, #0
 8007984:	d013      	beq.n	80079ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800798a:	4a13      	ldr	r2, [pc, #76]	; (80079d8 <HAL_UART_IRQHandler+0x29c>)
 800798c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007992:	4618      	mov	r0, r3
 8007994:	f7fc fbd7 	bl	8004146 <HAL_DMA_Abort_IT>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d017      	beq.n	80079ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80079a8:	4610      	mov	r0, r2
 80079aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ac:	e00f      	b.n	80079ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f9be 	bl	8007d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b4:	e00b      	b.n	80079ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f9ba 	bl	8007d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079bc:	e007      	b.n	80079ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f9b6 	bl	8007d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80079cc:	e192      	b.n	8007cf4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ce:	bf00      	nop
    return;
 80079d0:	e190      	b.n	8007cf4 <HAL_UART_IRQHandler+0x5b8>
 80079d2:	bf00      	nop
 80079d4:	04000120 	.word	0x04000120
 80079d8:	080087f7 	.word	0x080087f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	f040 814b 	bne.w	8007c7c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80079e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ea:	f003 0310 	and.w	r3, r3, #16
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 8144 	beq.w	8007c7c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80079f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079f8:	f003 0310 	and.w	r3, r3, #16
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 813d 	beq.w	8007c7c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2210      	movs	r2, #16
 8007a08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a14:	2b40      	cmp	r3, #64	; 0x40
 8007a16:	f040 80b5 	bne.w	8007b84 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 8164 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	f080 815c 	bcs.w	8007cf8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	2b20      	cmp	r3, #32
 8007a52:	f000 8086 	beq.w	8007b62 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a62:	e853 3f00 	ldrex	r3, [r3]
 8007a66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007a80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a84:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007a8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007a90:	e841 2300 	strex	r3, r2, [r1]
 8007a94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1da      	bne.n	8007a56 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3308      	adds	r3, #8
 8007aa6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aaa:	e853 3f00 	ldrex	r3, [r3]
 8007aae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ab0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ab2:	f023 0301 	bic.w	r3, r3, #1
 8007ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3308      	adds	r3, #8
 8007ac0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ac4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ac8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007acc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ad0:	e841 2300 	strex	r3, r2, [r1]
 8007ad4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e1      	bne.n	8007aa0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ae6:	e853 3f00 	ldrex	r3, [r3]
 8007aea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3308      	adds	r3, #8
 8007afc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e3      	bne.n	8007adc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b32:	f023 0310 	bic.w	r3, r3, #16
 8007b36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b44:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b4c:	e841 2300 	strex	r3, r2, [r1]
 8007b50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e4      	bne.n	8007b22 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fc fab4 	bl	80040ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2202      	movs	r2, #2
 8007b66:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f8e1 	bl	8007d44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b82:	e0b9      	b.n	8007cf8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 80ab 	beq.w	8007cfc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007ba6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 80a6 	beq.w	8007cfc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8007bd4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e4      	bne.n	8007bb0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3308      	adds	r3, #8
 8007bec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	623b      	str	r3, [r7, #32]
   return(result);
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	f023 0301 	bic.w	r3, r3, #1
 8007bfc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3308      	adds	r3, #8
 8007c06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c0a:	633a      	str	r2, [r7, #48]	; 0x30
 8007c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c12:	e841 2300 	strex	r3, r2, [r1]
 8007c16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1e3      	bne.n	8007be6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2220      	movs	r2, #32
 8007c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 0310 	bic.w	r3, r3, #16
 8007c46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c54:	61fb      	str	r3, [r7, #28]
 8007c56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	69b9      	ldr	r1, [r7, #24]
 8007c5a:	69fa      	ldr	r2, [r7, #28]
 8007c5c:	e841 2300 	strex	r3, r2, [r1]
 8007c60:	617b      	str	r3, [r7, #20]
   return(result);
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e4      	bne.n	8007c32 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f865 	bl	8007d44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c7a:	e03f      	b.n	8007cfc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00e      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x56a>
 8007c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d008      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007c9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fde9 	bl	8008876 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ca4:	e02d      	b.n	8007d02 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00e      	beq.n	8007cd0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d008      	beq.n	8007cd0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d01c      	beq.n	8007d00 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	4798      	blx	r3
    }
    return;
 8007cce:	e017      	b.n	8007d00 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d012      	beq.n	8007d02 <HAL_UART_IRQHandler+0x5c6>
 8007cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00c      	beq.n	8007d02 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fd9a 	bl	8008822 <UART_EndTransmit_IT>
    return;
 8007cee:	e008      	b.n	8007d02 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007cf0:	bf00      	nop
 8007cf2:	e006      	b.n	8007d02 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007cf4:	bf00      	nop
 8007cf6:	e004      	b.n	8007d02 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007cf8:	bf00      	nop
 8007cfa:	e002      	b.n	8007d02 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007cfc:	bf00      	nop
 8007cfe:	e000      	b.n	8007d02 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007d00:	bf00      	nop
  }

}
 8007d02:	37e8      	adds	r7, #232	; 0xe8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	431a      	orrs	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	431a      	orrs	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007d8a:	f023 030c 	bic.w	r3, r3, #12
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	6812      	ldr	r2, [r2, #0]
 8007d92:	6979      	ldr	r1, [r7, #20]
 8007d94:	430b      	orrs	r3, r1
 8007d96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68da      	ldr	r2, [r3, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a99      	ldr	r2, [pc, #612]	; (800803c <UART_SetConfig+0x2e0>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d120      	bne.n	8007e1e <UART_SetConfig+0xc2>
 8007ddc:	4b98      	ldr	r3, [pc, #608]	; (8008040 <UART_SetConfig+0x2e4>)
 8007dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de0:	f003 0303 	and.w	r3, r3, #3
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d817      	bhi.n	8007e18 <UART_SetConfig+0xbc>
 8007de8:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <UART_SetConfig+0x94>)
 8007dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dee:	bf00      	nop
 8007df0:	08007e01 	.word	0x08007e01
 8007df4:	08007e0d 	.word	0x08007e0d
 8007df8:	08007e13 	.word	0x08007e13
 8007dfc:	08007e07 	.word	0x08007e07
 8007e00:	2301      	movs	r3, #1
 8007e02:	77fb      	strb	r3, [r7, #31]
 8007e04:	e061      	b.n	8007eca <UART_SetConfig+0x16e>
 8007e06:	2302      	movs	r3, #2
 8007e08:	77fb      	strb	r3, [r7, #31]
 8007e0a:	e05e      	b.n	8007eca <UART_SetConfig+0x16e>
 8007e0c:	2304      	movs	r3, #4
 8007e0e:	77fb      	strb	r3, [r7, #31]
 8007e10:	e05b      	b.n	8007eca <UART_SetConfig+0x16e>
 8007e12:	2308      	movs	r3, #8
 8007e14:	77fb      	strb	r3, [r7, #31]
 8007e16:	e058      	b.n	8007eca <UART_SetConfig+0x16e>
 8007e18:	2310      	movs	r3, #16
 8007e1a:	77fb      	strb	r3, [r7, #31]
 8007e1c:	e055      	b.n	8007eca <UART_SetConfig+0x16e>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a88      	ldr	r2, [pc, #544]	; (8008044 <UART_SetConfig+0x2e8>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d124      	bne.n	8007e72 <UART_SetConfig+0x116>
 8007e28:	4b85      	ldr	r3, [pc, #532]	; (8008040 <UART_SetConfig+0x2e4>)
 8007e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e34:	d011      	beq.n	8007e5a <UART_SetConfig+0xfe>
 8007e36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e3a:	d817      	bhi.n	8007e6c <UART_SetConfig+0x110>
 8007e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e40:	d011      	beq.n	8007e66 <UART_SetConfig+0x10a>
 8007e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e46:	d811      	bhi.n	8007e6c <UART_SetConfig+0x110>
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <UART_SetConfig+0xf8>
 8007e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e50:	d006      	beq.n	8007e60 <UART_SetConfig+0x104>
 8007e52:	e00b      	b.n	8007e6c <UART_SetConfig+0x110>
 8007e54:	2300      	movs	r3, #0
 8007e56:	77fb      	strb	r3, [r7, #31]
 8007e58:	e037      	b.n	8007eca <UART_SetConfig+0x16e>
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	77fb      	strb	r3, [r7, #31]
 8007e5e:	e034      	b.n	8007eca <UART_SetConfig+0x16e>
 8007e60:	2304      	movs	r3, #4
 8007e62:	77fb      	strb	r3, [r7, #31]
 8007e64:	e031      	b.n	8007eca <UART_SetConfig+0x16e>
 8007e66:	2308      	movs	r3, #8
 8007e68:	77fb      	strb	r3, [r7, #31]
 8007e6a:	e02e      	b.n	8007eca <UART_SetConfig+0x16e>
 8007e6c:	2310      	movs	r3, #16
 8007e6e:	77fb      	strb	r3, [r7, #31]
 8007e70:	e02b      	b.n	8007eca <UART_SetConfig+0x16e>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a74      	ldr	r2, [pc, #464]	; (8008048 <UART_SetConfig+0x2ec>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d124      	bne.n	8007ec6 <UART_SetConfig+0x16a>
 8007e7c:	4b70      	ldr	r3, [pc, #448]	; (8008040 <UART_SetConfig+0x2e4>)
 8007e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e80:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007e84:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007e88:	d011      	beq.n	8007eae <UART_SetConfig+0x152>
 8007e8a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007e8e:	d817      	bhi.n	8007ec0 <UART_SetConfig+0x164>
 8007e90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e94:	d011      	beq.n	8007eba <UART_SetConfig+0x15e>
 8007e96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e9a:	d811      	bhi.n	8007ec0 <UART_SetConfig+0x164>
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <UART_SetConfig+0x14c>
 8007ea0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ea4:	d006      	beq.n	8007eb4 <UART_SetConfig+0x158>
 8007ea6:	e00b      	b.n	8007ec0 <UART_SetConfig+0x164>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	77fb      	strb	r3, [r7, #31]
 8007eac:	e00d      	b.n	8007eca <UART_SetConfig+0x16e>
 8007eae:	2302      	movs	r3, #2
 8007eb0:	77fb      	strb	r3, [r7, #31]
 8007eb2:	e00a      	b.n	8007eca <UART_SetConfig+0x16e>
 8007eb4:	2304      	movs	r3, #4
 8007eb6:	77fb      	strb	r3, [r7, #31]
 8007eb8:	e007      	b.n	8007eca <UART_SetConfig+0x16e>
 8007eba:	2308      	movs	r3, #8
 8007ebc:	77fb      	strb	r3, [r7, #31]
 8007ebe:	e004      	b.n	8007eca <UART_SetConfig+0x16e>
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	77fb      	strb	r3, [r7, #31]
 8007ec4:	e001      	b.n	8007eca <UART_SetConfig+0x16e>
 8007ec6:	2310      	movs	r3, #16
 8007ec8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ed2:	d15a      	bne.n	8007f8a <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 8007ed4:	7ffb      	ldrb	r3, [r7, #31]
 8007ed6:	2b08      	cmp	r3, #8
 8007ed8:	d827      	bhi.n	8007f2a <UART_SetConfig+0x1ce>
 8007eda:	a201      	add	r2, pc, #4	; (adr r2, 8007ee0 <UART_SetConfig+0x184>)
 8007edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee0:	08007f05 	.word	0x08007f05
 8007ee4:	08007f0d 	.word	0x08007f0d
 8007ee8:	08007f15 	.word	0x08007f15
 8007eec:	08007f2b 	.word	0x08007f2b
 8007ef0:	08007f1b 	.word	0x08007f1b
 8007ef4:	08007f2b 	.word	0x08007f2b
 8007ef8:	08007f2b 	.word	0x08007f2b
 8007efc:	08007f2b 	.word	0x08007f2b
 8007f00:	08007f23 	.word	0x08007f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f04:	f7fe f8b4 	bl	8006070 <HAL_RCC_GetPCLK1Freq>
 8007f08:	61b8      	str	r0, [r7, #24]
        break;
 8007f0a:	e013      	b.n	8007f34 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f0c:	f7fe f8d2 	bl	80060b4 <HAL_RCC_GetPCLK2Freq>
 8007f10:	61b8      	str	r0, [r7, #24]
        break;
 8007f12:	e00f      	b.n	8007f34 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f14:	4b4d      	ldr	r3, [pc, #308]	; (800804c <UART_SetConfig+0x2f0>)
 8007f16:	61bb      	str	r3, [r7, #24]
        break;
 8007f18:	e00c      	b.n	8007f34 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f1a:	f7fe f847 	bl	8005fac <HAL_RCC_GetSysClockFreq>
 8007f1e:	61b8      	str	r0, [r7, #24]
        break;
 8007f20:	e008      	b.n	8007f34 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f26:	61bb      	str	r3, [r7, #24]
        break;
 8007f28:	e004      	b.n	8007f34 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	77bb      	strb	r3, [r7, #30]
        break;
 8007f32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d074      	beq.n	8008024 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	005a      	lsls	r2, r3, #1
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	085b      	lsrs	r3, r3, #1
 8007f44:	441a      	add	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	2b0f      	cmp	r3, #15
 8007f54:	d916      	bls.n	8007f84 <UART_SetConfig+0x228>
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f5c:	d212      	bcs.n	8007f84 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	f023 030f 	bic.w	r3, r3, #15
 8007f66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	085b      	lsrs	r3, r3, #1
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	f003 0307 	and.w	r3, r3, #7
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	89fb      	ldrh	r3, [r7, #14]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	89fa      	ldrh	r2, [r7, #14]
 8007f80:	60da      	str	r2, [r3, #12]
 8007f82:	e04f      	b.n	8008024 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	77bb      	strb	r3, [r7, #30]
 8007f88:	e04c      	b.n	8008024 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f8a:	7ffb      	ldrb	r3, [r7, #31]
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	d828      	bhi.n	8007fe2 <UART_SetConfig+0x286>
 8007f90:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <UART_SetConfig+0x23c>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08007fbd 	.word	0x08007fbd
 8007f9c:	08007fc5 	.word	0x08007fc5
 8007fa0:	08007fcd 	.word	0x08007fcd
 8007fa4:	08007fe3 	.word	0x08007fe3
 8007fa8:	08007fd3 	.word	0x08007fd3
 8007fac:	08007fe3 	.word	0x08007fe3
 8007fb0:	08007fe3 	.word	0x08007fe3
 8007fb4:	08007fe3 	.word	0x08007fe3
 8007fb8:	08007fdb 	.word	0x08007fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fbc:	f7fe f858 	bl	8006070 <HAL_RCC_GetPCLK1Freq>
 8007fc0:	61b8      	str	r0, [r7, #24]
        break;
 8007fc2:	e013      	b.n	8007fec <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fc4:	f7fe f876 	bl	80060b4 <HAL_RCC_GetPCLK2Freq>
 8007fc8:	61b8      	str	r0, [r7, #24]
        break;
 8007fca:	e00f      	b.n	8007fec <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fcc:	4b1f      	ldr	r3, [pc, #124]	; (800804c <UART_SetConfig+0x2f0>)
 8007fce:	61bb      	str	r3, [r7, #24]
        break;
 8007fd0:	e00c      	b.n	8007fec <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fd2:	f7fd ffeb 	bl	8005fac <HAL_RCC_GetSysClockFreq>
 8007fd6:	61b8      	str	r0, [r7, #24]
        break;
 8007fd8:	e008      	b.n	8007fec <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fde:	61bb      	str	r3, [r7, #24]
        break;
 8007fe0:	e004      	b.n	8007fec <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	77bb      	strb	r3, [r7, #30]
        break;
 8007fea:	bf00      	nop
    }

    if (pclk != 0U)
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d018      	beq.n	8008024 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	085a      	lsrs	r2, r3, #1
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	441a      	add	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	fbb2 f3f3 	udiv	r3, r2, r3
 8008004:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	2b0f      	cmp	r3, #15
 800800a:	d909      	bls.n	8008020 <UART_SetConfig+0x2c4>
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008012:	d205      	bcs.n	8008020 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	b29a      	uxth	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	60da      	str	r2, [r3, #12]
 800801e:	e001      	b.n	8008024 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008030:	7fbb      	ldrb	r3, [r7, #30]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3720      	adds	r7, #32
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	40013800 	.word	0x40013800
 8008040:	40021000 	.word	0x40021000
 8008044:	40004400 	.word	0x40004400
 8008048:	40004800 	.word	0x40004800
 800804c:	007a1200 	.word	0x007a1200

08008050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	f003 0308 	and.w	r3, r3, #8
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00a      	beq.n	800807a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00a      	beq.n	800809c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	430a      	orrs	r2, r1
 800809a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a0:	f003 0302 	and.w	r3, r3, #2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00a      	beq.n	80080be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	f003 0304 	and.w	r3, r3, #4
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	f003 0310 	and.w	r3, r3, #16
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00a      	beq.n	8008102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	430a      	orrs	r2, r1
 8008100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	f003 0320 	and.w	r3, r3, #32
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00a      	beq.n	8008124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800812c:	2b00      	cmp	r3, #0
 800812e:	d01a      	beq.n	8008166 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800814e:	d10a      	bne.n	8008166 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	605a      	str	r2, [r3, #4]
  }
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b098      	sub	sp, #96	; 0x60
 8008198:	af02      	add	r7, sp, #8
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081a4:	f7fa fc3e 	bl	8002a24 <HAL_GetTick>
 80081a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0308 	and.w	r3, r3, #8
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d12e      	bne.n	8008216 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081c0:	2200      	movs	r2, #0
 80081c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f88c 	bl	80082e4 <UART_WaitOnFlagUntilTimeout>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d021      	beq.n	8008216 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081da:	e853 3f00 	ldrex	r3, [r3]
 80081de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081e6:	653b      	str	r3, [r7, #80]	; 0x50
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081f0:	647b      	str	r3, [r7, #68]	; 0x44
 80081f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081f8:	e841 2300 	strex	r3, r2, [r1]
 80081fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1e6      	bne.n	80081d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2220      	movs	r2, #32
 8008208:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e062      	b.n	80082dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0304 	and.w	r3, r3, #4
 8008220:	2b04      	cmp	r3, #4
 8008222:	d149      	bne.n	80082b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800822c:	2200      	movs	r2, #0
 800822e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f856 	bl	80082e4 <UART_WaitOnFlagUntilTimeout>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d03c      	beq.n	80082b8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	e853 3f00 	ldrex	r3, [r3]
 800824a:	623b      	str	r3, [r7, #32]
   return(result);
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	461a      	mov	r2, r3
 800825a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800825c:	633b      	str	r3, [r7, #48]	; 0x30
 800825e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008260:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008264:	e841 2300 	strex	r3, r2, [r1]
 8008268:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1e6      	bne.n	800823e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3308      	adds	r3, #8
 8008276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	e853 3f00 	ldrex	r3, [r3]
 800827e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f023 0301 	bic.w	r3, r3, #1
 8008286:	64bb      	str	r3, [r7, #72]	; 0x48
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3308      	adds	r3, #8
 800828e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008290:	61fa      	str	r2, [r7, #28]
 8008292:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008294:	69b9      	ldr	r1, [r7, #24]
 8008296:	69fa      	ldr	r2, [r7, #28]
 8008298:	e841 2300 	strex	r3, r2, [r1]
 800829c:	617b      	str	r3, [r7, #20]
   return(result);
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1e5      	bne.n	8008270 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e011      	b.n	80082dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2220      	movs	r2, #32
 80082bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3758      	adds	r7, #88	; 0x58
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	603b      	str	r3, [r7, #0]
 80082f0:	4613      	mov	r3, r2
 80082f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082f4:	e04f      	b.n	8008396 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fc:	d04b      	beq.n	8008396 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082fe:	f7fa fb91 	bl	8002a24 <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	429a      	cmp	r2, r3
 800830c:	d302      	bcc.n	8008314 <UART_WaitOnFlagUntilTimeout+0x30>
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e04e      	b.n	80083b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0304 	and.w	r3, r3, #4
 8008322:	2b00      	cmp	r3, #0
 8008324:	d037      	beq.n	8008396 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	2b80      	cmp	r3, #128	; 0x80
 800832a:	d034      	beq.n	8008396 <UART_WaitOnFlagUntilTimeout+0xb2>
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2b40      	cmp	r3, #64	; 0x40
 8008330:	d031      	beq.n	8008396 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	f003 0308 	and.w	r3, r3, #8
 800833c:	2b08      	cmp	r3, #8
 800833e:	d110      	bne.n	8008362 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2208      	movs	r2, #8
 8008346:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 f8ff 	bl	800854c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2208      	movs	r2, #8
 8008352:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e029      	b.n	80083b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800836c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008370:	d111      	bne.n	8008396 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800837a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 f8e5 	bl	800854c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2220      	movs	r2, #32
 8008386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e00f      	b.n	80083b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	69da      	ldr	r2, [r3, #28]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	4013      	ands	r3, r2
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	bf0c      	ite	eq
 80083a6:	2301      	moveq	r3, #1
 80083a8:	2300      	movne	r3, #0
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	461a      	mov	r2, r3
 80083ae:	79fb      	ldrb	r3, [r7, #7]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d0a0      	beq.n	80082f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b096      	sub	sp, #88	; 0x58
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	4613      	mov	r3, r2
 80083cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	88fa      	ldrh	r2, [r7, #6]
 80083d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2222      	movs	r2, #34	; 0x22
 80083e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d028      	beq.n	8008446 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083f8:	4a3e      	ldr	r2, [pc, #248]	; (80084f4 <UART_Start_Receive_DMA+0x134>)
 80083fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008400:	4a3d      	ldr	r2, [pc, #244]	; (80084f8 <UART_Start_Receive_DMA+0x138>)
 8008402:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008408:	4a3c      	ldr	r2, [pc, #240]	; (80084fc <UART_Start_Receive_DMA+0x13c>)
 800840a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008410:	2200      	movs	r2, #0
 8008412:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3324      	adds	r3, #36	; 0x24
 800841e:	4619      	mov	r1, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008424:	461a      	mov	r2, r3
 8008426:	88fb      	ldrh	r3, [r7, #6]
 8008428:	f7fb fdf0 	bl	800400c <HAL_DMA_Start_IT>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d009      	beq.n	8008446 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2210      	movs	r2, #16
 8008436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2220      	movs	r2, #32
 800843e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e051      	b.n	80084ea <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d018      	beq.n	8008480 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008456:	e853 3f00 	ldrex	r3, [r3]
 800845a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008462:	657b      	str	r3, [r7, #84]	; 0x54
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	461a      	mov	r2, r3
 800846a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800846c:	64bb      	str	r3, [r7, #72]	; 0x48
 800846e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008470:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008474:	e841 2300 	strex	r3, r2, [r1]
 8008478:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800847a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1e6      	bne.n	800844e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3308      	adds	r3, #8
 8008486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848a:	e853 3f00 	ldrex	r3, [r3]
 800848e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	f043 0301 	orr.w	r3, r3, #1
 8008496:	653b      	str	r3, [r7, #80]	; 0x50
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3308      	adds	r3, #8
 800849e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084a0:	637a      	str	r2, [r7, #52]	; 0x34
 80084a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e5      	bne.n	8008480 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3308      	adds	r3, #8
 80084ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	613b      	str	r3, [r7, #16]
   return(result);
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	3308      	adds	r3, #8
 80084d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084d4:	623a      	str	r2, [r7, #32]
 80084d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	69f9      	ldr	r1, [r7, #28]
 80084da:	6a3a      	ldr	r2, [r7, #32]
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e5      	bne.n	80084b4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3758      	adds	r7, #88	; 0x58
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	08008615 	.word	0x08008615
 80084f8:	0800873b 	.word	0x0800873b
 80084fc:	08008779 	.word	0x08008779

08008500 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008500:	b480      	push	{r7}
 8008502:	b089      	sub	sp, #36	; 0x24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	e853 3f00 	ldrex	r3, [r3]
 8008514:	60bb      	str	r3, [r7, #8]
   return(result);
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800851c:	61fb      	str	r3, [r7, #28]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	61bb      	str	r3, [r7, #24]
 8008528:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852a:	6979      	ldr	r1, [r7, #20]
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	e841 2300 	strex	r3, r2, [r1]
 8008532:	613b      	str	r3, [r7, #16]
   return(result);
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e6      	bne.n	8008508 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2220      	movs	r2, #32
 800853e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008540:	bf00      	nop
 8008542:	3724      	adds	r7, #36	; 0x24
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800854c:	b480      	push	{r7}
 800854e:	b095      	sub	sp, #84	; 0x54
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855c:	e853 3f00 	ldrex	r3, [r3]
 8008560:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008568:	64fb      	str	r3, [r7, #76]	; 0x4c
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008572:	643b      	str	r3, [r7, #64]	; 0x40
 8008574:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008576:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008578:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800857a:	e841 2300 	strex	r3, r2, [r1]
 800857e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1e6      	bne.n	8008554 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3308      	adds	r3, #8
 800858c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	e853 3f00 	ldrex	r3, [r3]
 8008594:	61fb      	str	r3, [r7, #28]
   return(result);
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	f023 0301 	bic.w	r3, r3, #1
 800859c:	64bb      	str	r3, [r7, #72]	; 0x48
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3308      	adds	r3, #8
 80085a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ae:	e841 2300 	strex	r3, r2, [r1]
 80085b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1e5      	bne.n	8008586 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d118      	bne.n	80085f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	e853 3f00 	ldrex	r3, [r3]
 80085ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	f023 0310 	bic.w	r3, r3, #16
 80085d6:	647b      	str	r3, [r7, #68]	; 0x44
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	461a      	mov	r2, r3
 80085de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085e0:	61bb      	str	r3, [r7, #24]
 80085e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e4:	6979      	ldr	r1, [r7, #20]
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	e841 2300 	strex	r3, r2, [r1]
 80085ec:	613b      	str	r3, [r7, #16]
   return(result);
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1e6      	bne.n	80085c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2220      	movs	r2, #32
 80085f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008608:	bf00      	nop
 800860a:	3754      	adds	r7, #84	; 0x54
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b09c      	sub	sp, #112	; 0x70
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	2b20      	cmp	r3, #32
 8008628:	d071      	beq.n	800870e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800862a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800862c:	2200      	movs	r2, #0
 800862e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800863a:	e853 3f00 	ldrex	r3, [r3]
 800863e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008646:	66bb      	str	r3, [r7, #104]	; 0x68
 8008648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	461a      	mov	r2, r3
 800864e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008650:	65bb      	str	r3, [r7, #88]	; 0x58
 8008652:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008654:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008656:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008658:	e841 2300 	strex	r3, r2, [r1]
 800865c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800865e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1e6      	bne.n	8008632 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3308      	adds	r3, #8
 800866a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866e:	e853 3f00 	ldrex	r3, [r3]
 8008672:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008676:	f023 0301 	bic.w	r3, r3, #1
 800867a:	667b      	str	r3, [r7, #100]	; 0x64
 800867c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3308      	adds	r3, #8
 8008682:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008684:	647a      	str	r2, [r7, #68]	; 0x44
 8008686:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800868a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800868c:	e841 2300 	strex	r3, r2, [r1]
 8008690:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1e5      	bne.n	8008664 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	3308      	adds	r3, #8
 800869e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	e853 3f00 	ldrex	r3, [r3]
 80086a6:	623b      	str	r3, [r7, #32]
   return(result);
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ae:	663b      	str	r3, [r7, #96]	; 0x60
 80086b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3308      	adds	r3, #8
 80086b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086b8:	633a      	str	r2, [r7, #48]	; 0x30
 80086ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086c0:	e841 2300 	strex	r3, r2, [r1]
 80086c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1e5      	bne.n	8008698 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80086cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ce:	2220      	movs	r2, #32
 80086d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d118      	bne.n	800870e <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	e853 3f00 	ldrex	r3, [r3]
 80086e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f023 0310 	bic.w	r3, r3, #16
 80086f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	461a      	mov	r2, r3
 80086f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086fa:	61fb      	str	r3, [r7, #28]
 80086fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fe:	69b9      	ldr	r1, [r7, #24]
 8008700:	69fa      	ldr	r2, [r7, #28]
 8008702:	e841 2300 	strex	r3, r2, [r1]
 8008706:	617b      	str	r3, [r7, #20]
   return(result);
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1e6      	bne.n	80086dc <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800870e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008710:	2200      	movs	r2, #0
 8008712:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008718:	2b01      	cmp	r3, #1
 800871a:	d107      	bne.n	800872c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800871c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800871e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008722:	4619      	mov	r1, r3
 8008724:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008726:	f7ff fb0d 	bl	8007d44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800872a:	e002      	b.n	8008732 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800872c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800872e:	f7f9 fc43 	bl	8001fb8 <HAL_UART_RxCpltCallback>
}
 8008732:	bf00      	nop
 8008734:	3770      	adds	r7, #112	; 0x70
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008746:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2201      	movs	r2, #1
 800874c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008752:	2b01      	cmp	r3, #1
 8008754:	d109      	bne.n	800876a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800875c:	085b      	lsrs	r3, r3, #1
 800875e:	b29b      	uxth	r3, r3
 8008760:	4619      	mov	r1, r3
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f7ff faee 	bl	8007d44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008768:	e002      	b.n	8008770 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f7ff fad6 	bl	8007d1c <HAL_UART_RxHalfCpltCallback>
}
 8008770:	bf00      	nop
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800878a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008792:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800879e:	2b80      	cmp	r3, #128	; 0x80
 80087a0:	d109      	bne.n	80087b6 <UART_DMAError+0x3e>
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	2b21      	cmp	r3, #33	; 0x21
 80087a6:	d106      	bne.n	80087b6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80087b0:	6978      	ldr	r0, [r7, #20]
 80087b2:	f7ff fea5 	bl	8008500 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c0:	2b40      	cmp	r3, #64	; 0x40
 80087c2:	d109      	bne.n	80087d8 <UART_DMAError+0x60>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b22      	cmp	r3, #34	; 0x22
 80087c8:	d106      	bne.n	80087d8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80087d2:	6978      	ldr	r0, [r7, #20]
 80087d4:	f7ff feba 	bl	800854c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087de:	f043 0210 	orr.w	r2, r3, #16
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087e8:	6978      	ldr	r0, [r7, #20]
 80087ea:	f7ff faa1 	bl	8007d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ee:	bf00      	nop
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008802:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f7ff fa8b 	bl	8007d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800881a:	bf00      	nop
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b088      	sub	sp, #32
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	e853 3f00 	ldrex	r3, [r3]
 8008836:	60bb      	str	r3, [r7, #8]
   return(result);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800883e:	61fb      	str	r3, [r7, #28]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	461a      	mov	r2, r3
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	61bb      	str	r3, [r7, #24]
 800884a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884c:	6979      	ldr	r1, [r7, #20]
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	e841 2300 	strex	r3, r2, [r1]
 8008854:	613b      	str	r3, [r7, #16]
   return(result);
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1e6      	bne.n	800882a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2220      	movs	r2, #32
 8008860:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f7ff fa4d 	bl	8007d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800886e:	bf00      	nop
 8008870:	3720      	adds	r7, #32
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800887e:	bf00      	nop
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <memset>:
 800888a:	4402      	add	r2, r0
 800888c:	4603      	mov	r3, r0
 800888e:	4293      	cmp	r3, r2
 8008890:	d100      	bne.n	8008894 <memset+0xa>
 8008892:	4770      	bx	lr
 8008894:	f803 1b01 	strb.w	r1, [r3], #1
 8008898:	e7f9      	b.n	800888e <memset+0x4>
	...

0800889c <__libc_init_array>:
 800889c:	b570      	push	{r4, r5, r6, lr}
 800889e:	4d0d      	ldr	r5, [pc, #52]	; (80088d4 <__libc_init_array+0x38>)
 80088a0:	4c0d      	ldr	r4, [pc, #52]	; (80088d8 <__libc_init_array+0x3c>)
 80088a2:	1b64      	subs	r4, r4, r5
 80088a4:	10a4      	asrs	r4, r4, #2
 80088a6:	2600      	movs	r6, #0
 80088a8:	42a6      	cmp	r6, r4
 80088aa:	d109      	bne.n	80088c0 <__libc_init_array+0x24>
 80088ac:	4d0b      	ldr	r5, [pc, #44]	; (80088dc <__libc_init_array+0x40>)
 80088ae:	4c0c      	ldr	r4, [pc, #48]	; (80088e0 <__libc_init_array+0x44>)
 80088b0:	f000 f818 	bl	80088e4 <_init>
 80088b4:	1b64      	subs	r4, r4, r5
 80088b6:	10a4      	asrs	r4, r4, #2
 80088b8:	2600      	movs	r6, #0
 80088ba:	42a6      	cmp	r6, r4
 80088bc:	d105      	bne.n	80088ca <__libc_init_array+0x2e>
 80088be:	bd70      	pop	{r4, r5, r6, pc}
 80088c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80088c4:	4798      	blx	r3
 80088c6:	3601      	adds	r6, #1
 80088c8:	e7ee      	b.n	80088a8 <__libc_init_array+0xc>
 80088ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ce:	4798      	blx	r3
 80088d0:	3601      	adds	r6, #1
 80088d2:	e7f2      	b.n	80088ba <__libc_init_array+0x1e>
 80088d4:	08008934 	.word	0x08008934
 80088d8:	08008934 	.word	0x08008934
 80088dc:	08008934 	.word	0x08008934
 80088e0:	08008938 	.word	0x08008938

080088e4 <_init>:
 80088e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e6:	bf00      	nop
 80088e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ea:	bc08      	pop	{r3}
 80088ec:	469e      	mov	lr, r3
 80088ee:	4770      	bx	lr

080088f0 <_fini>:
 80088f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f2:	bf00      	nop
 80088f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088f6:	bc08      	pop	{r3}
 80088f8:	469e      	mov	lr, r3
 80088fa:	4770      	bx	lr
