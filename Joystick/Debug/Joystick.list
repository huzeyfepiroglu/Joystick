
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bb4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006d3c  08006d3c  00016d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d74  08006d74  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006d74  08006d74  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d74  08006d74  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d74  08006d74  00016d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  20000010  08006d8c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  08006d8c  00020690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015482  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036aa  00000000  00000000  00035505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  00038bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f45  00000000  00000000  00039f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dbd4  00000000  00000000  0003aead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a3c9  00000000  00000000  00058a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad967  00000000  00000000  00072e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000512c  00000000  00000000  001207b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001258e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d24 	.word	0x08006d24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006d24 	.word	0x08006d24

080001c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001d8:	4b2e      	ldr	r3, [pc, #184]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001da:	4a2f      	ldr	r2, [pc, #188]	; (8000298 <MX_ADC1_Init+0xd0>)
 80001dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001de:	4b2d      	ldr	r3, [pc, #180]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80001e6:	4b2b      	ldr	r3, [pc, #172]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001ec:	4b29      	ldr	r3, [pc, #164]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f2:	4b28      	ldr	r3, [pc, #160]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001f4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80001f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001fa:	4b26      	ldr	r3, [pc, #152]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000200:	4b24      	ldr	r3, [pc, #144]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000202:	2204      	movs	r2, #4
 8000204:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000206:	4823      	ldr	r0, [pc, #140]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000208:	f001 ffea 	bl	80021e0 <HAL_ADC_Init>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000212:	f001 fc0b 	bl	8001a2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000216:	2307      	movs	r3, #7
 8000218:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800021a:	2301      	movs	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800021e:	2307      	movs	r3, #7
 8000220:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4619      	mov	r1, r3
 8000226:	481b      	ldr	r0, [pc, #108]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000228:	f002 f950 	bl	80024cc <HAL_ADC_ConfigChannel>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000232:	f001 fbfb 	bl	8001a2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000236:	230e      	movs	r3, #14
 8000238:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800023a:	2302      	movs	r3, #2
 800023c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4619      	mov	r1, r3
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000244:	f002 f942 	bl	80024cc <HAL_ADC_ConfigChannel>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800024e:	f001 fbed 	bl	8001a2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000252:	230f      	movs	r3, #15
 8000254:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000256:	2303      	movs	r3, #3
 8000258:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4619      	mov	r1, r3
 800025e:	480d      	ldr	r0, [pc, #52]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000260:	f002 f934 	bl	80024cc <HAL_ADC_ConfigChannel>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800026a:	f001 fbdf 	bl	8001a2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800026e:	2308      	movs	r3, #8
 8000270:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000272:	2304      	movs	r3, #4
 8000274:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4619      	mov	r1, r3
 800027a:	4806      	ldr	r0, [pc, #24]	; (8000294 <MX_ADC1_Init+0xcc>)
 800027c:	f002 f926 	bl	80024cc <HAL_ADC_ConfigChannel>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000286:	f001 fbd1 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800028a:	bf00      	nop
 800028c:	3710      	adds	r7, #16
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	2000002c 	.word	0x2000002c
 8000298:	40012400 	.word	0x40012400

0800029c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08c      	sub	sp, #48	; 0x30
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a4:	f107 031c 	add.w	r3, r7, #28
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a42      	ldr	r2, [pc, #264]	; (80003c4 <HAL_ADC_MspInit+0x128>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d17d      	bne.n	80003ba <HAL_ADC_MspInit+0x11e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002be:	4b42      	ldr	r3, [pc, #264]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a41      	ldr	r2, [pc, #260]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6193      	str	r3, [r2, #24]
 80002ca:	4b3f      	ldr	r3, [pc, #252]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002d2:	61bb      	str	r3, [r7, #24]
 80002d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	4b3c      	ldr	r3, [pc, #240]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a3b      	ldr	r2, [pc, #236]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b39      	ldr	r3, [pc, #228]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ea:	617b      	str	r3, [r7, #20]
 80002ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ee:	4b36      	ldr	r3, [pc, #216]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a35      	ldr	r2, [pc, #212]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b33      	ldr	r3, [pc, #204]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000302:	613b      	str	r3, [r7, #16]
 8000304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000306:	4b30      	ldr	r3, [pc, #192]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a2f      	ldr	r2, [pc, #188]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 800030c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	4b2d      	ldr	r3, [pc, #180]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = FIN_ADC1_Pin;
 800031e:	2380      	movs	r3, #128	; 0x80
 8000320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000322:	2303      	movs	r3, #3
 8000324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FIN_ADC1_GPIO_Port, &GPIO_InitStruct);
 800032a:	f107 031c 	add.w	r3, r7, #28
 800032e:	4619      	mov	r1, r3
 8000330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000334:	f003 f806 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FIN_ADC2_Pin|FIN_ADC3_Pin;
 8000338:	2330      	movs	r3, #48	; 0x30
 800033a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800033c:	2303      	movs	r3, #3
 800033e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000344:	f107 031c 	add.w	r3, r7, #28
 8000348:	4619      	mov	r1, r3
 800034a:	4820      	ldr	r0, [pc, #128]	; (80003cc <HAL_ADC_MspInit+0x130>)
 800034c:	f002 fffa 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FIN_ADC4_Pin;
 8000350:	2301      	movs	r3, #1
 8000352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000354:	2303      	movs	r3, #3
 8000356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FIN_ADC4_GPIO_Port, &GPIO_InitStruct);
 800035c:	f107 031c 	add.w	r3, r7, #28
 8000360:	4619      	mov	r1, r3
 8000362:	481b      	ldr	r0, [pc, #108]	; (80003d0 <HAL_ADC_MspInit+0x134>)
 8000364:	f002 ffee 	bl	8003344 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <HAL_ADC_MspInit+0x13c>)
 800036c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800036e:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 800037c:	2280      	movs	r2, #128	; 0x80
 800037e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000386:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 800038a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800038e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000392:	2220      	movs	r2, #32
 8000394:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000398:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800039c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800039e:	480d      	ldr	r0, [pc, #52]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 80003a0:	f002 fc45 	bl	8002c2e <HAL_DMA_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 80003aa:	f001 fb3f 	bl	8001a2c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a08      	ldr	r2, [pc, #32]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 80003b2:	621a      	str	r2, [r3, #32]
 80003b4:	4a07      	ldr	r2, [pc, #28]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003ba:	bf00      	nop
 80003bc:	3730      	adds	r7, #48	; 0x30
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40012400 	.word	0x40012400
 80003c8:	40021000 	.word	0x40021000
 80003cc:	48000800 	.word	0x48000800
 80003d0:	48000400 	.word	0x48000400
 80003d4:	2000005c 	.word	0x2000005c
 80003d8:	40020008 	.word	0x40020008

080003dc <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <MX_CAN_Init+0x60>)
 80003e2:	4a17      	ldr	r2, [pc, #92]	; (8000440 <MX_CAN_Init+0x64>)
 80003e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_CAN_Init+0x60>)
 80003e8:	2210      	movs	r2, #16
 80003ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <MX_CAN_Init+0x60>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <MX_CAN_Init+0x60>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80003f8:	4b10      	ldr	r3, [pc, #64]	; (800043c <MX_CAN_Init+0x60>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <MX_CAN_Init+0x60>)
 8000400:	2200      	movs	r2, #0
 8000402:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000404:	4b0d      	ldr	r3, [pc, #52]	; (800043c <MX_CAN_Init+0x60>)
 8000406:	2200      	movs	r2, #0
 8000408:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_CAN_Init+0x60>)
 800040c:	2200      	movs	r2, #0
 800040e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <MX_CAN_Init+0x60>)
 8000412:	2200      	movs	r2, #0
 8000414:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <MX_CAN_Init+0x60>)
 8000418:	2200      	movs	r2, #0
 800041a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800041c:	4b07      	ldr	r3, [pc, #28]	; (800043c <MX_CAN_Init+0x60>)
 800041e:	2200      	movs	r2, #0
 8000420:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000422:	4b06      	ldr	r3, [pc, #24]	; (800043c <MX_CAN_Init+0x60>)
 8000424:	2200      	movs	r2, #0
 8000426:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000428:	4804      	ldr	r0, [pc, #16]	; (800043c <MX_CAN_Init+0x60>)
 800042a:	f002 f9da 	bl	80027e2 <HAL_CAN_Init>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000434:	f001 fafa 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	200000a0 	.word	0x200000a0
 8000440:	40006400 	.word	0x40006400

08000444 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a17      	ldr	r2, [pc, #92]	; (80004c0 <HAL_CAN_MspInit+0x7c>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d128      	bne.n	80004b8 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000466:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <HAL_CAN_MspInit+0x80>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a16      	ldr	r2, [pc, #88]	; (80004c4 <HAL_CAN_MspInit+0x80>)
 800046c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <HAL_CAN_MspInit+0x80>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <HAL_CAN_MspInit+0x80>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a10      	ldr	r2, [pc, #64]	; (80004c4 <HAL_CAN_MspInit+0x80>)
 8000484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <HAL_CAN_MspInit+0x80>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000496:	f44f 7340 	mov.w	r3, #768	; 0x300
 800049a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049c:	2302      	movs	r3, #2
 800049e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a4:	2303      	movs	r3, #3
 80004a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80004a8:	2309      	movs	r3, #9
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	4619      	mov	r1, r3
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <HAL_CAN_MspInit+0x84>)
 80004b4:	f002 ff46 	bl	8003344 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80004b8:	bf00      	nop
 80004ba:	3728      	adds	r7, #40	; 0x28
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40006400 	.word	0x40006400
 80004c4:	40021000 	.word	0x40021000
 80004c8:	48000400 	.word	0x48000400

080004cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d2:	4b1a      	ldr	r3, [pc, #104]	; (800053c <MX_DMA_Init+0x70>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a19      	ldr	r2, [pc, #100]	; (800053c <MX_DMA_Init+0x70>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <MX_DMA_Init+0x70>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ea:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_DMA_Init+0x70>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a13      	ldr	r2, [pc, #76]	; (800053c <MX_DMA_Init+0x70>)
 80004f0:	f043 0302 	orr.w	r3, r3, #2
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_DMA_Init+0x70>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f003 0302 	and.w	r3, r3, #2
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	200b      	movs	r0, #11
 8000508:	f002 fb57 	bl	8002bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800050c:	200b      	movs	r0, #11
 800050e:	f002 fb70 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	200d      	movs	r0, #13
 8000518:	f002 fb4f 	bl	8002bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800051c:	200d      	movs	r0, #13
 800051e:	f002 fb68 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2100      	movs	r1, #0
 8000526:	203a      	movs	r0, #58	; 0x3a
 8000528:	f002 fb47 	bl	8002bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 800052c:	203a      	movs	r0, #58	; 0x3a
 800052e:	f002 fb60 	bl	8002bf2 <HAL_NVIC_EnableIRQ>

}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08c      	sub	sp, #48	; 0x30
 8000544:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 031c 	add.w	r3, r7, #28
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	4b46      	ldr	r3, [pc, #280]	; (8000670 <MX_GPIO_Init+0x130>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a45      	ldr	r2, [pc, #276]	; (8000670 <MX_GPIO_Init+0x130>)
 800055c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b43      	ldr	r3, [pc, #268]	; (8000670 <MX_GPIO_Init+0x130>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800056a:	61bb      	str	r3, [r7, #24]
 800056c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800056e:	4b40      	ldr	r3, [pc, #256]	; (8000670 <MX_GPIO_Init+0x130>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a3f      	ldr	r2, [pc, #252]	; (8000670 <MX_GPIO_Init+0x130>)
 8000574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b3d      	ldr	r3, [pc, #244]	; (8000670 <MX_GPIO_Init+0x130>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b3a      	ldr	r3, [pc, #232]	; (8000670 <MX_GPIO_Init+0x130>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a39      	ldr	r2, [pc, #228]	; (8000670 <MX_GPIO_Init+0x130>)
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b37      	ldr	r3, [pc, #220]	; (8000670 <MX_GPIO_Init+0x130>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b34      	ldr	r3, [pc, #208]	; (8000670 <MX_GPIO_Init+0x130>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a33      	ldr	r2, [pc, #204]	; (8000670 <MX_GPIO_Init+0x130>)
 80005a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b31      	ldr	r3, [pc, #196]	; (8000670 <MX_GPIO_Init+0x130>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005b6:	4b2e      	ldr	r3, [pc, #184]	; (8000670 <MX_GPIO_Init+0x130>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a2d      	ldr	r2, [pc, #180]	; (8000670 <MX_GPIO_Init+0x130>)
 80005bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <MX_GPIO_Init+0x130>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ce:	4b28      	ldr	r3, [pc, #160]	; (8000670 <MX_GPIO_Init+0x130>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a27      	ldr	r2, [pc, #156]	; (8000670 <MX_GPIO_Init+0x130>)
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b25      	ldr	r3, [pc, #148]	; (8000670 <MX_GPIO_Init+0x130>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BTN_30_Pin|BTN_29_Pin|BTN_28_Pin|BTN_27_Pin
 80005e6:	f24f 33cf 	movw	r3, #62415	; 0xf3cf
 80005ea:	61fb      	str	r3, [r7, #28]
                          |BTN_26_Pin|BTN_25_Pin|BTN_24_Pin|BTN_04_Pin
                          |BTN_05_Pin|BTN_06_Pin|BTN_07_Pin|BTN_12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4619      	mov	r1, r3
 80005fa:	481e      	ldr	r0, [pc, #120]	; (8000674 <MX_GPIO_Init+0x134>)
 80005fc:	f002 fea2 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = BTN_23_Pin|BTN_22_Pin|BTN_21_Pin|BTN_20_Pin
 8000600:	f240 337f 	movw	r3, #895	; 0x37f
 8000604:	61fb      	str	r3, [r7, #28]
                          |BTN_19_Pin|BTN_18_Pin|BTN_17_Pin|BTN_08_Pin
                          |BTN_09_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000606:	2300      	movs	r3, #0
 8000608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	4619      	mov	r1, r3
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f002 fe94 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_01_Pin|BTN_02_Pin|BTN_14_Pin|BTN_15_Pin
 800061c:	f24c 03f8 	movw	r3, #49400	; 0xc0f8
 8000620:	61fb      	str	r3, [r7, #28]
                          |BTN_16_Pin|BTN_32_Pin|BTN_31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000622:	2300      	movs	r3, #0
 8000624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4811      	ldr	r0, [pc, #68]	; (8000678 <MX_GPIO_Init+0x138>)
 8000632:	f002 fe87 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = BTN_03_Pin|BTN_13_Pin;
 8000636:	f44f 7382 	mov.w	r3, #260	; 0x104
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063c:	2300      	movs	r3, #0
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4619      	mov	r1, r3
 800064a:	480c      	ldr	r0, [pc, #48]	; (800067c <MX_GPIO_Init+0x13c>)
 800064c:	f002 fe7a 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = BTN_10_Pin|BTN_11_Pin;
 8000650:	23c0      	movs	r3, #192	; 0xc0
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4619      	mov	r1, r3
 8000662:	4807      	ldr	r0, [pc, #28]	; (8000680 <MX_GPIO_Init+0x140>)
 8000664:	f002 fe6e 	bl	8003344 <HAL_GPIO_Init>

}
 8000668:	bf00      	nop
 800066a:	3730      	adds	r7, #48	; 0x30
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000
 8000674:	48000800 	.word	0x48000800
 8000678:	48000400 	.word	0x48000400
 800067c:	48000c00 	.word	0x48000c00
 8000680:	48001400 	.word	0x48001400

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f001 fd20 	bl	80020cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f83a 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f7ff ff56 	bl	8000540 <MX_GPIO_Init>
  MX_DMA_Init();
 8000694:	f7ff ff1a 	bl	80004cc <MX_DMA_Init>
  MX_ADC1_Init();
 8000698:	f7ff fd96 	bl	80001c8 <MX_ADC1_Init>
  MX_CAN_Init();
 800069c:	f7ff fe9e 	bl	80003dc <MX_CAN_Init>
  MX_SDADC1_Init();
 80006a0:	f001 f9ca 	bl	8001a38 <MX_SDADC1_Init>
  MX_TIM2_Init();
 80006a4:	f001 fb70 	bl	8001d88 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006a8:	f001 fbba 	bl	8001e20 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80006ac:	f001 fc46 	bl	8001f3c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(1000);
 80006b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b4:	f001 fd70 	bl	8002198 <HAL_Delay>
	checkBootloader();
 80006b8:	f000 f8d4 	bl	8000864 <checkBootloader>

/*Baslangic için default config data atamasi*/
//writeDefaultConfigPage();
	HAL_UART_Receive_DMA(&huart3, &rxDataIn, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	490d      	ldr	r1, [pc, #52]	; (80006f4 <main+0x70>)
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <main+0x74>)
 80006c2:	f005 fd51 	bl	8006168 <HAL_UART_Receive_DMA>

	//fingerAnalogread start
	HAL_ADCEx_Calibration_Start(&hadc1);
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <main+0x78>)
 80006c8:	f001 fe62 	bl	8002390 <HAL_ADCEx_Calibration_Start>
	HAL_SDADC_CalibrationStart(&hsdadc1, SDADC_CALIBRATION_SEQ_1);
 80006cc:	2100      	movs	r1, #0
 80006ce:	480c      	ldr	r0, [pc, #48]	; (8000700 <main+0x7c>)
 80006d0:	f004 fe4a 	bl	8005368 <HAL_SDADC_CalibrationStart>
	HAL_SDADC_PollForCalibEvent(&hsdadc1, 1000);
 80006d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006d8:	4809      	ldr	r0, [pc, #36]	; (8000700 <main+0x7c>)
 80006da:	f004 fe85 	bl	80053e8 <HAL_SDADC_PollForCalibEvent>
	configurationSettings();
 80006de:	f000 f86d 	bl	80007bc <configurationSettings>
	initDigitalInputs(getDigitalInputs());
 80006e2:	f000 fcb1 	bl	8001048 <getDigitalInputs>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fb09 	bl	8000d00 <initDigitalInputs>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mainLoop();
 80006ee:	f000 f885 	bl	80007fc <mainLoop>
 80006f2:	e7fc      	b.n	80006ee <main+0x6a>
 80006f4:	20000372 	.word	0x20000372
 80006f8:	200005a0 	.word	0x200005a0
 80006fc:	2000002c 	.word	0x2000002c
 8000700:	20000480 	.word	0x20000480

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09a      	sub	sp, #104	; 0x68
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800070e:	2228      	movs	r2, #40	; 0x28
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f006 fad9 	bl	8006cca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	222c      	movs	r2, #44	; 0x2c
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f006 facb 	bl	8006cca <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000734:	2302      	movs	r3, #2
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073c:	2310      	movs	r3, #16
 800073e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000740:	2300      	movs	r3, #0
 8000742:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000748:	4618      	mov	r0, r3
 800074a:	f003 f839 	bl	80037c0 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000754:	f001 f96a 	bl	8001a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000768:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800076e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f004 f861 	bl	800483c <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000780:	f001 f954 	bl	8001a2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC1
 8000784:	f640 0384 	movw	r3, #2180	; 0x884
 8000788:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SDADC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV8;
 800078e:	f04f 4318 	mov.w	r3, #2550136832	; 0x98000000
 8000792:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	4618      	mov	r0, r3
 800079c:	f004 fa70 	bl	8004c80 <HAL_RCCEx_PeriphCLKConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007a6:	f001 f941 	bl	8001a2c <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 80007aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ae:	f002 ff43 	bl	8003638 <HAL_PWREx_EnableSDADC>
}
 80007b2:	bf00      	nop
 80007b4:	3768      	adds	r7, #104	; 0x68
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <configurationSettings>:

/* USER CODE BEGIN 4 */
void configurationSettings(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	//check for DEFAULT/USER Configuration
	flashReadValue = (*(uint32_t*)CONFIG_DATA_DEFAULT_SELECT);
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <configurationSettings+0x30>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <configurationSettings+0x34>)
 80007c8:	701a      	strb	r2, [r3, #0]
	if(flashReadValue == 0xFF)
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <configurationSettings+0x34>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2bff      	cmp	r3, #255	; 0xff
 80007d0:	d103      	bne.n	80007da <configurationSettings+0x1e>
	{
		loadDefaultValues(&userTkkConfig);
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <configurationSettings+0x38>)
 80007d4:	f000 fd60 	bl	8001298 <loadDefaultValues>
 80007d8:	e002      	b.n	80007e0 <configurationSettings+0x24>
	}
	else
	{
		readFlashUserConf(&userTkkConfig);
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <configurationSettings+0x38>)
 80007dc:	f000 fd04 	bl	80011e8 <readFlashUserConf>
	}

	calculateJostickBorders(&userTkkConfig, &tkkJoystickBorder);
 80007e0:	4905      	ldr	r1, [pc, #20]	; (80007f8 <configurationSettings+0x3c>)
 80007e2:	4804      	ldr	r0, [pc, #16]	; (80007f4 <configurationSettings+0x38>)
 80007e4:	f000 f9a6 	bl	8000b34 <calculateJostickBorders>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	0800e000 	.word	0x0800e000
 80007f0:	20000466 	.word	0x20000466
 80007f4:	200003dc 	.word	0x200003dc
 80007f8:	2000042c 	.word	0x2000042c

080007fc <mainLoop>:
void mainLoop(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	if(sampleAnalogInputs == true)
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <mainLoop+0x4c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d014      	beq.n	8000832 <mainLoop+0x36>
		{

			//averageAnalogInputs(&AnADC_Values[0], &AnADC_Read[0], ANALOG_COUNT, AVERAGE_WINDOW);
			averageAnalogInputs(AnADC_Values, AnADC_Read, ANALOG_COUNT, AVERAGE_WINDOW);
 8000808:	2302      	movs	r3, #2
 800080a:	2202      	movs	r2, #2
 800080c:	490f      	ldr	r1, [pc, #60]	; (800084c <mainLoop+0x50>)
 800080e:	4810      	ldr	r0, [pc, #64]	; (8000850 <mainLoop+0x54>)
 8000810:	f000 f9e7 	bl	8000be2 <averageAnalogInputs>
			calculateAxisData(&tkkJoystickBorder, &AnADC_Values[0], &fittedAnAdc_Values[0], 1);
 8000814:	2301      	movs	r3, #1
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <mainLoop+0x58>)
 8000818:	490d      	ldr	r1, [pc, #52]	; (8000850 <mainLoop+0x54>)
 800081a:	480f      	ldr	r0, [pc, #60]	; (8000858 <mainLoop+0x5c>)
 800081c:	f000 f8b0 	bl	8000980 <calculateAxisData>
			calculateAxisData(&tkkJoystickBorder, &AnADC_Values[1], &fittedAnAdc_Values[1], 0);
 8000820:	2300      	movs	r3, #0
 8000822:	4a0e      	ldr	r2, [pc, #56]	; (800085c <mainLoop+0x60>)
 8000824:	490e      	ldr	r1, [pc, #56]	; (8000860 <mainLoop+0x64>)
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <mainLoop+0x5c>)
 8000828:	f000 f8aa 	bl	8000980 <calculateAxisData>
			sampleAnalogInputs = false;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <mainLoop+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
		}
		sampleDigitalInputs(getDigitalInputs());
 8000832:	f000 fc09 	bl	8001048 <getDigitalInputs>
 8000836:	4603      	mov	r3, r0
 8000838:	4618      	mov	r0, r3
 800083a:	f000 fb9d 	bl	8000f78 <sampleDigitalInputs>
		SDADC_ScanConversion();
 800083e:	f000 fa03 	bl	8000c48 <SDADC_ScanConversion>
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000c8 	.word	0x200000c8
 800084c:	200000cc 	.word	0x200000cc
 8000850:	200000d4 	.word	0x200000d4
 8000854:	200000dc 	.word	0x200000dc
 8000858:	2000042c 	.word	0x2000042c
 800085c:	200000e0 	.word	0x200000e0
 8000860:	200000d8 	.word	0x200000d8

08000864 <checkBootloader>:

void checkBootloader(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	bootValue = *(uint32_t*)CONFIG_BOOTMODE_INIT_OFFSET;
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <checkBootloader+0x48>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	b29a      	uxth	r2, r3
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <checkBootloader+0x4c>)
 8000870:	801a      	strh	r2, [r3, #0]
	if(bootValue == 0x00CD)
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <checkBootloader+0x4c>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	2bcd      	cmp	r3, #205	; 0xcd
 8000878:	d115      	bne.n	80008a6 <checkBootloader+0x42>
	{
			HAL_FLASH_Unlock();
 800087a:	f002 fbfb 	bl	8003074 <HAL_FLASH_Unlock>
			static FLASH_EraseInitTypeDef eraseInit;
			eraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <checkBootloader+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
			eraseInit.PageAddress = CONFIG_BOOTMODE_BASE_ADDR; // düzenlenecek !!!!!!!!!!!!!!!!!!!!*/
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <checkBootloader+0x50>)
 8000886:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <checkBootloader+0x54>)
 8000888:	605a      	str	r2, [r3, #4]
			eraseInit.NbPages     = 1;
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <checkBootloader+0x50>)
 800088c:	2201      	movs	r2, #1
 800088e:	609a      	str	r2, [r3, #8]

			if (HAL_FLASHEx_Erase(&eraseInit, &PAGEError) != HAL_OK)
 8000890:	490a      	ldr	r1, [pc, #40]	; (80008bc <checkBootloader+0x58>)
 8000892:	4808      	ldr	r0, [pc, #32]	; (80008b4 <checkBootloader+0x50>)
 8000894:	f002 fcb2 	bl	80031fc <HAL_FLASHEx_Erase>
			{
			}
			HAL_Delay(100);
 8000898:	2064      	movs	r0, #100	; 0x64
 800089a:	f001 fc7d 	bl	8002198 <HAL_Delay>
			HAL_FLASH_Lock();
 800089e:	f002 fc0f 	bl	80030c0 <HAL_FLASH_Lock>
		bootloaderInit();
 80008a2:	f000 f841 	bl	8000928 <bootloaderInit>
	}
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	0800a002 	.word	0x0800a002
 80008b0:	20000464 	.word	0x20000464
 80008b4:	20000468 	.word	0x20000468
 80008b8:	0800a000 	.word	0x0800a000
 80008bc:	20000388 	.word	0x20000388

080008c0 <bootloaderCommand>:

void bootloaderCommand(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80008c6:	f002 fbd5 	bl	8003074 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInitStruct_BOOT;
	EraseInitStruct_BOOT.TypeErase   = FLASH_TYPEERASE_PAGES;
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
	EraseInitStruct_BOOT.PageAddress = CONFIG_BOOTMODE_BASE_ADDR; // düzenlenecek !!!!!!!!!!!!!!!!!!!!*/
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <bootloaderCommand+0x58>)
 80008d0:	60bb      	str	r3, [r7, #8]
	EraseInitStruct_BOOT.NbPages     = 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct_BOOT, &PAGEError) != HAL_OK)
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4910      	ldr	r1, [pc, #64]	; (800091c <bootloaderCommand+0x5c>)
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fc8e 	bl	80031fc <HAL_FLASHEx_Erase>
	{
	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_BOOTMODE_INIT_OFFSET, 0x00CD);
 80008e0:	f04f 02cd 	mov.w	r2, #205	; 0xcd
 80008e4:	f04f 0300 	mov.w	r3, #0
 80008e8:	490d      	ldr	r1, [pc, #52]	; (8000920 <bootloaderCommand+0x60>)
 80008ea:	2001      	movs	r0, #1
 80008ec:	f002 fb52 	bl	8002f94 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80008f0:	f002 fbe6 	bl	80030c0 <HAL_FLASH_Lock>
	bootValue = *(uint32_t*)CONFIG_BOOTMODE_INIT_OFFSET;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <bootloaderCommand+0x60>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <bootloaderCommand+0x64>)
 80008fc:	801a      	strh	r2, [r3, #0]
	if(bootValue == 0x00CD)
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <bootloaderCommand+0x64>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	2bcd      	cmp	r3, #205	; 0xcd
 8000904:	d103      	bne.n	800090e <bootloaderCommand+0x4e>
	{
		sendAckUart();
 8000906:	f000 fd1f 	bl	8001348 <sendAckUart>
		HAL_NVIC_SystemReset();
 800090a:	f002 f980 	bl	8002c0e <HAL_NVIC_SystemReset>
	}
}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	0800a000 	.word	0x0800a000
 800091c:	20000388 	.word	0x20000388
 8000920:	0800a002 	.word	0x0800a002
 8000924:	20000464 	.word	0x20000464

08000928 <bootloaderInit>:

void bootloaderInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
	SysMemBootJump = (void(*)(void)) (*((uint32_t*) (0x1FFFD800 + 4)));
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <bootloaderInit+0x48>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	461a      	mov	r2, r3
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <bootloaderInit+0x4c>)
 8000936:	601a      	str	r2, [r3, #0]

	HAL_RCC_DeInit();
 8000938:	f002 fe9e 	bl	8003678 <HAL_RCC_DeInit>
	SysTick -> CTRL = 0;
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <bootloaderInit+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
	SysTick -> LOAD = 0;
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <bootloaderInit+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
	SysTick -> VAL  = 0;
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <bootloaderInit+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	2301      	movs	r3, #1
 8000950:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	f383 8810 	msr	PRIMASK, r3
}
 8000958:	bf00      	nop
	__set_PRIMASK(1);

	__set_MSP(DEFAULT_MSP_VALUE);
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <bootloaderInit+0x54>)
 800095c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f383 8808 	msr	MSP, r3
}
 8000964:	bf00      	nop
	SysMemBootJump();
 8000966:	4b03      	ldr	r3, [pc, #12]	; (8000974 <bootloaderInit+0x4c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4798      	blx	r3
	while(1);
 800096c:	e7fe      	b.n	800096c <bootloaderInit+0x44>
 800096e:	bf00      	nop
 8000970:	1fffd804 	.word	0x1fffd804
 8000974:	20000460 	.word	0x20000460
 8000978:	e000e010 	.word	0xe000e010
 800097c:	20001258 	.word	0x20001258

08000980 <calculateAxisData>:
}
void calculateAxisData(joystickBorder* tempJoystickBorder, uint32_t* tempAnADC_Value, int32_t* fittedAnAdc_Values, bool axisData)
{
 8000980:	b480      	push	{r7}
 8000982:	b087      	sub	sp, #28
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
 800098c:	70fb      	strb	r3, [r7, #3]
	joystickBorder* joystickBorderPtr;
	joystickBorderPtr = tempJoystickBorder;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	617b      	str	r3, [r7, #20]
	errX = GPIO_PIN_RESET;
 8000992:	4b65      	ldr	r3, [pc, #404]	; (8000b28 <calculateAxisData+0x1a8>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
	errY = GPIO_PIN_RESET;
 8000998:	4b64      	ldr	r3, [pc, #400]	; (8000b2c <calculateAxisData+0x1ac>)
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
	//calculate x-Axis
	if(axisData == 1)
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d05e      	beq.n	8000a62 <calculateAxisData+0xe2>
	{
		if(*tempAnADC_Value <= joystickBorderPtr->xLeftLow)
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d806      	bhi.n	80009be <calculateAxisData+0x3e>
		{
			//*fittedAnAdc_Values = -32766;
			*fittedAnAdc_Values = -2048;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a5f      	ldr	r2, [pc, #380]	; (8000b30 <calculateAxisData+0x1b0>)
 80009b4:	601a      	str	r2, [r3, #0]
			errX = GPIO_PIN_SET;
 80009b6:	4b5c      	ldr	r3, [pc, #368]	; (8000b28 <calculateAxisData+0x1a8>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
				*fittedAnAdc_Values = -2048;
			}
		}

	}
}
 80009bc:	e0ae      	b.n	8000b1c <calculateAxisData+0x19c>
		else if(*tempAnADC_Value >= joystickBorderPtr->xRightHigh)
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	691b      	ldr	r3, [r3, #16]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d307      	bcc.n	80009da <calculateAxisData+0x5a>
			errX = GPIO_PIN_SET;
 80009ca:	4b57      	ldr	r3, [pc, #348]	; (8000b28 <calculateAxisData+0x1a8>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	701a      	strb	r2, [r3, #0]
			*fittedAnAdc_Values = 2047;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80009d6:	601a      	str	r2, [r3, #0]
}
 80009d8:	e0a0      	b.n	8000b1c <calculateAxisData+0x19c>
		else if(*tempAnADC_Value >= joystickBorderPtr -> xRightLow)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d31c      	bcc.n	8000a20 <calculateAxisData+0xa0>
			*fittedAnAdc_Values = (((int)((*tempAnADC_Value) - (joystickBorderPtr->xRightLow))) * 2047) / (joystickBorderPtr -> xRightRange);
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	461a      	mov	r2, r3
 80009f2:	4613      	mov	r3, r2
 80009f4:	02db      	lsls	r3, r3, #11
 80009f6:	1a9b      	subs	r3, r3, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a02:	461a      	mov	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values >= 2047)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8000a10:	4293      	cmp	r3, r2
 8000a12:	f340 8083 	ble.w	8000b1c <calculateAxisData+0x19c>
				*fittedAnAdc_Values = 2047;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a1c:	601a      	str	r2, [r3, #0]
}
 8000a1e:	e07d      	b.n	8000b1c <calculateAxisData+0x19c>
		else if(*tempAnADC_Value < (joystickBorderPtr -> xLeftHigh))
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d277      	bcs.n	8000b1c <calculateAxisData+0x19c>
			*fittedAnAdc_Values = -((((int)((int)(joystickBorderPtr->xLeftHigh) - (int)(*tempAnADC_Value))) * (int)2047) / (joystickBorderPtr -> xLeftRange));
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	461a      	mov	r2, r3
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	1ad2      	subs	r2, r2, r3
 8000a38:	4613      	mov	r3, r2
 8000a3a:	02db      	lsls	r3, r3, #11
 8000a3c:	1a9b      	subs	r3, r3, r2
 8000a3e:	461a      	mov	r2, r3
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a48:	425b      	negs	r3, r3
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values <= -2048)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8000a58:	dc60      	bgt.n	8000b1c <calculateAxisData+0x19c>
				*fittedAnAdc_Values = -2048;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a34      	ldr	r2, [pc, #208]	; (8000b30 <calculateAxisData+0x1b0>)
 8000a5e:	601a      	str	r2, [r3, #0]
}
 8000a60:	e05c      	b.n	8000b1c <calculateAxisData+0x19c>
		if(*tempAnADC_Value <= joystickBorderPtr->yDownLow)
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d806      	bhi.n	8000a7c <calculateAxisData+0xfc>
			errY = GPIO_PIN_SET;
 8000a6e:	4b2f      	ldr	r3, [pc, #188]	; (8000b2c <calculateAxisData+0x1ac>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	701a      	strb	r2, [r3, #0]
			*fittedAnAdc_Values = -2048;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a2e      	ldr	r2, [pc, #184]	; (8000b30 <calculateAxisData+0x1b0>)
 8000a78:	601a      	str	r2, [r3, #0]
}
 8000a7a:	e04f      	b.n	8000b1c <calculateAxisData+0x19c>
		else if(*tempAnADC_Value >= joystickBorderPtr->yUpHigh)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d307      	bcc.n	8000a98 <calculateAxisData+0x118>
			*fittedAnAdc_Values = 2047;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a8e:	601a      	str	r2, [r3, #0]
			errY = GPIO_PIN_SET;
 8000a90:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <calculateAxisData+0x1ac>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
}
 8000a96:	e041      	b.n	8000b1c <calculateAxisData+0x19c>
		else if(*tempAnADC_Value >= joystickBorderPtr -> yUpLow)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d31b      	bcc.n	8000adc <calculateAxisData+0x15c>
			*fittedAnAdc_Values = (((int)((*tempAnADC_Value) - (joystickBorderPtr->yUpLow))) * 2047) / (joystickBorderPtr -> yUpRange);
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	02db      	lsls	r3, r3, #11
 8000ab4:	1a9b      	subs	r3, r3, r2
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values >= 2047)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	dd24      	ble.n	8000b1c <calculateAxisData+0x19c>
				*fittedAnAdc_Values = 2047;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000ad8:	601a      	str	r2, [r3, #0]
}
 8000ada:	e01f      	b.n	8000b1c <calculateAxisData+0x19c>
		else if(*tempAnADC_Value < (joystickBorderPtr -> yDownHigh))
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	69db      	ldr	r3, [r3, #28]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d219      	bcs.n	8000b1c <calculateAxisData+0x19c>
			*fittedAnAdc_Values = -((((int)((int)(joystickBorderPtr->yDownHigh) - (int)(*tempAnADC_Value))) * (int)2047) / (joystickBorderPtr -> yDownRange));
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	69db      	ldr	r3, [r3, #28]
 8000aec:	461a      	mov	r2, r3
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	1ad2      	subs	r2, r2, r3
 8000af4:	4613      	mov	r3, r2
 8000af6:	02db      	lsls	r3, r3, #11
 8000af8:	1a9b      	subs	r3, r3, r2
 8000afa:	461a      	mov	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	6a1b      	ldr	r3, [r3, #32]
 8000b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b04:	425b      	negs	r3, r3
 8000b06:	461a      	mov	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values <= -2048)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8000b14:	dc02      	bgt.n	8000b1c <calculateAxisData+0x19c>
				*fittedAnAdc_Values = -2048;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <calculateAxisData+0x1b0>)
 8000b1a:	601a      	str	r2, [r3, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	371c      	adds	r7, #28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	200000c9 	.word	0x200000c9
 8000b2c:	200000ca 	.word	0x200000ca
 8000b30:	fffff800 	.word	0xfffff800

08000b34 <calculateJostickBorders>:
/* calculating joystick borders*/
void calculateJostickBorders(ConfigData* tempConfigData, joystickBorder* tempJoystickBorder)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
	ConfigData* configDataPtr;
	configDataPtr = tempConfigData;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	60fb      	str	r3, [r7, #12]

	joystickBorder* joystickBorderPtr;
	joystickBorderPtr = tempJoystickBorder;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	60bb      	str	r3, [r7, #8]

	joystickBorderPtr -> xLeftHigh 		= (configDataPtr -> xMid) - 1;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	88db      	ldrh	r3, [r3, #6]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	605a      	str	r2, [r3, #4]
	joystickBorderPtr -> xLeftLow  		= configDataPtr -> xMin;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	885b      	ldrh	r3, [r3, #2]
 8000b56:	461a      	mov	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	601a      	str	r2, [r3, #0]
	joystickBorderPtr -> xLeftRange 	= (joystickBorderPtr -> xLeftHigh) - (joystickBorderPtr -> xLeftLow);
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	1ad2      	subs	r2, r2, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	609a      	str	r2, [r3, #8]

	joystickBorderPtr -> xRightLow 		= (configDataPtr -> xMid) + 1;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	88db      	ldrh	r3, [r3, #6]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	461a      	mov	r2, r3
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	60da      	str	r2, [r3, #12]
	joystickBorderPtr -> xRightHigh  	= configDataPtr -> xMax;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	889b      	ldrh	r3, [r3, #4]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	611a      	str	r2, [r3, #16]
	joystickBorderPtr -> xRightRange 	= (joystickBorderPtr -> xRightHigh) - (joystickBorderPtr -> xRightLow);
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	691a      	ldr	r2, [r3, #16]
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	1ad2      	subs	r2, r2, r3
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	615a      	str	r2, [r3, #20]

	joystickBorderPtr -> yUpHigh 		= configDataPtr -> yMax;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	895b      	ldrh	r3, [r3, #10]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
	joystickBorderPtr -> yUpLow  		= (configDataPtr -> yMid) + 1;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	899b      	ldrh	r3, [r3, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	625a      	str	r2, [r3, #36]	; 0x24
	joystickBorderPtr -> yUpRange 	= (joystickBorderPtr -> yUpHigh) - (joystickBorderPtr -> yUpLow);
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bac:	1ad2      	subs	r2, r2, r3
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c

	joystickBorderPtr -> yDownLow 		= configDataPtr -> yMin;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	891b      	ldrh	r3, [r3, #8]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	619a      	str	r2, [r3, #24]
	joystickBorderPtr -> yDownHigh  	= (configDataPtr -> yMid) - 1;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	899b      	ldrh	r3, [r3, #12]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	61da      	str	r2, [r3, #28]
	joystickBorderPtr -> yDownRange 	= (joystickBorderPtr -> yDownHigh) - (joystickBorderPtr -> yDownLow);
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	69da      	ldr	r2, [r3, #28]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	1ad2      	subs	r2, r2, r3
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	621a      	str	r2, [r3, #32]

}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <averageAnalogInputs>:
		@Param 				: none
		@description	:

*/
void averageAnalogInputs(uint32_t* ADC_BUFFERPtr, uint32_t* ADC_READPtr, uint32_t COUNT, uint32_t AVERAGE_WINDOW)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b089      	sub	sp, #36	; 0x24
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	603b      	str	r3, [r7, #0]

	uint32_t i = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
	uint32_t* tempADC_BUFFERPtr = ADC_BUFFERPtr;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	61bb      	str	r3, [r7, #24]
	uint32_t* tempADC_READPtr = ADC_READPtr;
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	617b      	str	r3, [r7, #20]

	for(i = 0; i < COUNT; i++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	e016      	b.n	8000c30 <averageAnalogInputs+0x4e>
	{
		*tempADC_BUFFERPtr = ((*tempADC_BUFFERPtr)*(AVERAGE_WINDOW - 1) + (*tempADC_READPtr))/AVERAGE_WINDOW;
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	fb03 f202 	mul.w	r2, r3, r2
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	441a      	add	r2, r3
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	601a      	str	r2, [r3, #0]
		tempADC_BUFFERPtr++;
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	3304      	adds	r3, #4
 8000c22:	61bb      	str	r3, [r7, #24]
		tempADC_READPtr++;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	3304      	adds	r3, #4
 8000c28:	617b      	str	r3, [r7, #20]
	for(i = 0; i < COUNT; i++)
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	61fb      	str	r3, [r7, #28]
 8000c30:	69fa      	ldr	r2, [r7, #28]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d3e4      	bcc.n	8000c02 <averageAnalogInputs+0x20>
		}
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <SDADC_ScanConversion>:
		@Param 				: none
		@description	:

*/
void SDADC_ScanConversion(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0


		if(HAL_SDADC_ConfigChannel(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4927      	ldr	r1, [pc, #156]	; (8000cec <SDADC_ScanConversion+0xa4>)
 8000c50:	4827      	ldr	r0, [pc, #156]	; (8000cf0 <SDADC_ScanConversion+0xa8>)
 8000c52:	f004 faa5 	bl	80051a0 <HAL_SDADC_ConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SDADC_ScanConversion+0x18>
		{
			Error_Handler();
 8000c5c:	f000 fee6 	bl	8001a2c <Error_Handler>
		}

		HAL_SDADC_Start(&hsdadc1);
 8000c60:	4823      	ldr	r0, [pc, #140]	; (8000cf0 <SDADC_ScanConversion+0xa8>)
 8000c62:	f004 fbfa 	bl	800545a <HAL_SDADC_Start>
		if(HAL_SDADC_PollForConversion(&hsdadc1, 1000) != HAL_OK)
 8000c66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c6a:	4821      	ldr	r0, [pc, #132]	; (8000cf0 <SDADC_ScanConversion+0xa8>)
 8000c6c:	f004 fc10 	bl	8005490 <HAL_SDADC_PollForConversion>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d005      	beq.n	8000c82 <SDADC_ScanConversion+0x3a>
		{
			 SDADCErrorCounter++;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <SDADC_ScanConversion+0xac>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	4a1d      	ldr	r2, [pc, #116]	; (8000cf4 <SDADC_ScanConversion+0xac>)
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	e008      	b.n	8000c94 <SDADC_ScanConversion+0x4c>
		}
		else
		{
			AnADC_Read[0] = (HAL_SDADC_GetValue(&hsdadc1) + 0x8000) & 0xFFFF;
 8000c82:	481b      	ldr	r0, [pc, #108]	; (8000cf0 <SDADC_ScanConversion+0xa8>)
 8000c84:	f004 fc79 	bl	800557a <HAL_SDADC_GetValue>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4a19      	ldr	r2, [pc, #100]	; (8000cf8 <SDADC_ScanConversion+0xb0>)
 8000c92:	6013      	str	r3, [r2, #0]

		}
		HAL_SDADC_Stop(&hsdadc1);
 8000c94:	4816      	ldr	r0, [pc, #88]	; (8000cf0 <SDADC_ScanConversion+0xa8>)
 8000c96:	f004 fc55 	bl	8005544 <HAL_SDADC_Stop>

		if(HAL_SDADC_ConfigChannel(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4917      	ldr	r1, [pc, #92]	; (8000cfc <SDADC_ScanConversion+0xb4>)
 8000c9e:	4814      	ldr	r0, [pc, #80]	; (8000cf0 <SDADC_ScanConversion+0xa8>)
 8000ca0:	f004 fa7e 	bl	80051a0 <HAL_SDADC_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SDADC_ScanConversion+0x66>
		{
			Error_Handler();
 8000caa:	f000 febf 	bl	8001a2c <Error_Handler>
		}

		HAL_SDADC_Start(&hsdadc1);
 8000cae:	4810      	ldr	r0, [pc, #64]	; (8000cf0 <SDADC_ScanConversion+0xa8>)
 8000cb0:	f004 fbd3 	bl	800545a <HAL_SDADC_Start>
		if(HAL_SDADC_PollForConversion(&hsdadc1, 1000) != HAL_OK)
 8000cb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <SDADC_ScanConversion+0xa8>)
 8000cba:	f004 fbe9 	bl	8005490 <HAL_SDADC_PollForConversion>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d005      	beq.n	8000cd0 <SDADC_ScanConversion+0x88>
		{
			 SDADCErrorCounter++;
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <SDADC_ScanConversion+0xac>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <SDADC_ScanConversion+0xac>)
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e008      	b.n	8000ce2 <SDADC_ScanConversion+0x9a>
		}
		else
		{
			AnADC_Read[1] = (HAL_SDADC_GetValue(&hsdadc1) + 0x8000) & 0xFFFF;
 8000cd0:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <SDADC_ScanConversion+0xa8>)
 8000cd2:	f004 fc52 	bl	800557a <HAL_SDADC_GetValue>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <SDADC_ScanConversion+0xb0>)
 8000ce0:	6053      	str	r3, [r2, #4]
		}
		HAL_SDADC_Stop(&hsdadc1);
 8000ce2:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <SDADC_ScanConversion+0xa8>)
 8000ce4:	f004 fc2e 	bl	8005544 <HAL_SDADC_Stop>

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	00040010 	.word	0x00040010
 8000cf0:	20000480 	.word	0x20000480
 8000cf4:	200000e4 	.word	0x200000e4
 8000cf8:	200000cc 	.word	0x200000cc
 8000cfc:	00050020 	.word	0x00050020

08000d00 <initDigitalInputs>:
				readFlag = false;
				readState = GPIO_PIN_RESET;
*/

void initDigitalInputs(digitalInput *digitalInputPtr)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	/****************************************************
	***	CUSTOM VALUES SHOULD BE INITIALIZED MANUALLY	***
	****************************************************/
	tutamakDigitalInputs[0].inputPin 		= BTN_01_Pin;
 8000d08:	4b96      	ldr	r3, [pc, #600]	; (8000f64 <initDigitalInputs+0x264>)
 8000d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d0e:	805a      	strh	r2, [r3, #2]
	tutamakDigitalInputs[0].inputPort		= BTN_01_GPIO_Port;
 8000d10:	4b94      	ldr	r3, [pc, #592]	; (8000f64 <initDigitalInputs+0x264>)
 8000d12:	4a95      	ldr	r2, [pc, #596]	; (8000f68 <initDigitalInputs+0x268>)
 8000d14:	605a      	str	r2, [r3, #4]

	tutamakDigitalInputs[1].inputPin 		= BTN_02_Pin;
 8000d16:	4b93      	ldr	r3, [pc, #588]	; (8000f64 <initDigitalInputs+0x264>)
 8000d18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d1c:	82da      	strh	r2, [r3, #22]
	tutamakDigitalInputs[1].inputPort		= BTN_02_GPIO_Port;
 8000d1e:	4b91      	ldr	r3, [pc, #580]	; (8000f64 <initDigitalInputs+0x264>)
 8000d20:	4a91      	ldr	r2, [pc, #580]	; (8000f68 <initDigitalInputs+0x268>)
 8000d22:	619a      	str	r2, [r3, #24]
	tutamakDigitalInputs[2].inputPin 		= BTN_03_Pin;
 8000d24:	4b8f      	ldr	r3, [pc, #572]	; (8000f64 <initDigitalInputs+0x264>)
 8000d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
	tutamakDigitalInputs[2].inputPort		= BTN_03_GPIO_Port;
 8000d2c:	4b8d      	ldr	r3, [pc, #564]	; (8000f64 <initDigitalInputs+0x264>)
 8000d2e:	4a8f      	ldr	r2, [pc, #572]	; (8000f6c <initDigitalInputs+0x26c>)
 8000d30:	62da      	str	r2, [r3, #44]	; 0x2c
	tutamakDigitalInputs[3].inputPin 		= BTN_04_Pin;
 8000d32:	4b8c      	ldr	r3, [pc, #560]	; (8000f64 <initDigitalInputs+0x264>)
 8000d34:	2240      	movs	r2, #64	; 0x40
 8000d36:	87da      	strh	r2, [r3, #62]	; 0x3e
	tutamakDigitalInputs[3].inputPort		= BTN_04_GPIO_Port;
 8000d38:	4b8a      	ldr	r3, [pc, #552]	; (8000f64 <initDigitalInputs+0x264>)
 8000d3a:	4a8d      	ldr	r2, [pc, #564]	; (8000f70 <initDigitalInputs+0x270>)
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40
	tutamakDigitalInputs[4].inputPin 		= BTN_05_Pin;
 8000d3e:	4b89      	ldr	r3, [pc, #548]	; (8000f64 <initDigitalInputs+0x264>)
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	tutamakDigitalInputs[4].inputPort		= BTN_05_GPIO_Port;
 8000d46:	4b87      	ldr	r3, [pc, #540]	; (8000f64 <initDigitalInputs+0x264>)
 8000d48:	4a89      	ldr	r2, [pc, #548]	; (8000f70 <initDigitalInputs+0x270>)
 8000d4a:	655a      	str	r2, [r3, #84]	; 0x54
	tutamakDigitalInputs[5].inputPin 		= BTN_06_Pin;
 8000d4c:	4b85      	ldr	r3, [pc, #532]	; (8000f64 <initDigitalInputs+0x264>)
 8000d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d52:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	tutamakDigitalInputs[5].inputPort		= BTN_06_GPIO_Port;
 8000d56:	4b83      	ldr	r3, [pc, #524]	; (8000f64 <initDigitalInputs+0x264>)
 8000d58:	4a85      	ldr	r2, [pc, #532]	; (8000f70 <initDigitalInputs+0x270>)
 8000d5a:	669a      	str	r2, [r3, #104]	; 0x68
	tutamakDigitalInputs[6].inputPin 		= BTN_07_Pin;
 8000d5c:	4b81      	ldr	r3, [pc, #516]	; (8000f64 <initDigitalInputs+0x264>)
 8000d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d62:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	tutamakDigitalInputs[6].inputPort		= BTN_07_GPIO_Port;
 8000d66:	4b7f      	ldr	r3, [pc, #508]	; (8000f64 <initDigitalInputs+0x264>)
 8000d68:	4a81      	ldr	r2, [pc, #516]	; (8000f70 <initDigitalInputs+0x270>)
 8000d6a:	67da      	str	r2, [r3, #124]	; 0x7c
	tutamakDigitalInputs[7].inputPin 		= BTN_08_Pin;
 8000d6c:	4b7d      	ldr	r3, [pc, #500]	; (8000f64 <initDigitalInputs+0x264>)
 8000d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d72:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	tutamakDigitalInputs[7].inputPort		= BTN_08_GPIO_Port;
 8000d76:	4b7b      	ldr	r3, [pc, #492]	; (8000f64 <initDigitalInputs+0x264>)
 8000d78:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	tutamakDigitalInputs[8].inputPin 		= BTN_09_Pin;
 8000d80:	4b78      	ldr	r3, [pc, #480]	; (8000f64 <initDigitalInputs+0x264>)
 8000d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d86:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	tutamakDigitalInputs[8].inputPort		= BTN_09_GPIO_Port;
 8000d8a:	4b76      	ldr	r3, [pc, #472]	; (8000f64 <initDigitalInputs+0x264>)
 8000d8c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d90:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	tutamakDigitalInputs[9].inputPin 		= BTN_10_Pin;
 8000d94:	4b73      	ldr	r3, [pc, #460]	; (8000f64 <initDigitalInputs+0x264>)
 8000d96:	2240      	movs	r2, #64	; 0x40
 8000d98:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	tutamakDigitalInputs[9].inputPort		= BTN_10_GPIO_Port;
 8000d9c:	4b71      	ldr	r3, [pc, #452]	; (8000f64 <initDigitalInputs+0x264>)
 8000d9e:	4a75      	ldr	r2, [pc, #468]	; (8000f74 <initDigitalInputs+0x274>)
 8000da0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	tutamakDigitalInputs[10].inputPin 	= BTN_11_Pin;
 8000da4:	4b6f      	ldr	r3, [pc, #444]	; (8000f64 <initDigitalInputs+0x264>)
 8000da6:	2280      	movs	r2, #128	; 0x80
 8000da8:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	tutamakDigitalInputs[10].inputPort	= BTN_11_GPIO_Port;
 8000dac:	4b6d      	ldr	r3, [pc, #436]	; (8000f64 <initDigitalInputs+0x264>)
 8000dae:	4a71      	ldr	r2, [pc, #452]	; (8000f74 <initDigitalInputs+0x274>)
 8000db0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	tutamakDigitalInputs[11].inputPin 	= BTN_12_Pin;
 8000db4:	4b6b      	ldr	r3, [pc, #428]	; (8000f64 <initDigitalInputs+0x264>)
 8000db6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dba:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
	tutamakDigitalInputs[11].inputPort	= BTN_12_GPIO_Port;
 8000dbe:	4b69      	ldr	r3, [pc, #420]	; (8000f64 <initDigitalInputs+0x264>)
 8000dc0:	4a6b      	ldr	r2, [pc, #428]	; (8000f70 <initDigitalInputs+0x270>)
 8000dc2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	tutamakDigitalInputs[12].inputPin 	= BTN_13_Pin;
 8000dc6:	4b67      	ldr	r3, [pc, #412]	; (8000f64 <initDigitalInputs+0x264>)
 8000dc8:	2204      	movs	r2, #4
 8000dca:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
	tutamakDigitalInputs[12].inputPort	= BTN_13_GPIO_Port;
 8000dce:	4b65      	ldr	r3, [pc, #404]	; (8000f64 <initDigitalInputs+0x264>)
 8000dd0:	4a66      	ldr	r2, [pc, #408]	; (8000f6c <initDigitalInputs+0x26c>)
 8000dd2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	tutamakDigitalInputs[13].inputPin 	= BTN_14_Pin;
 8000dd6:	4b63      	ldr	r3, [pc, #396]	; (8000f64 <initDigitalInputs+0x264>)
 8000dd8:	2208      	movs	r2, #8
 8000dda:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	tutamakDigitalInputs[13].inputPort	= BTN_14_GPIO_Port;
 8000dde:	4b61      	ldr	r3, [pc, #388]	; (8000f64 <initDigitalInputs+0x264>)
 8000de0:	4a61      	ldr	r2, [pc, #388]	; (8000f68 <initDigitalInputs+0x268>)
 8000de2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	tutamakDigitalInputs[14].inputPin 	= BTN_15_Pin;
 8000de6:	4b5f      	ldr	r3, [pc, #380]	; (8000f64 <initDigitalInputs+0x264>)
 8000de8:	2210      	movs	r2, #16
 8000dea:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	tutamakDigitalInputs[14].inputPort	= BTN_15_GPIO_Port;
 8000dee:	4b5d      	ldr	r3, [pc, #372]	; (8000f64 <initDigitalInputs+0x264>)
 8000df0:	4a5d      	ldr	r2, [pc, #372]	; (8000f68 <initDigitalInputs+0x268>)
 8000df2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	tutamakDigitalInputs[15].inputPin 	= BTN_16_Pin;
 8000df6:	4b5b      	ldr	r3, [pc, #364]	; (8000f64 <initDigitalInputs+0x264>)
 8000df8:	2220      	movs	r2, #32
 8000dfa:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
	tutamakDigitalInputs[15].inputPort	= BTN_16_GPIO_Port;
 8000dfe:	4b59      	ldr	r3, [pc, #356]	; (8000f64 <initDigitalInputs+0x264>)
 8000e00:	4a59      	ldr	r2, [pc, #356]	; (8000f68 <initDigitalInputs+0x268>)
 8000e02:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	tutamakDigitalInputs[16].inputPin 	= BTN_17_Pin;
 8000e06:	4b57      	ldr	r3, [pc, #348]	; (8000f64 <initDigitalInputs+0x264>)
 8000e08:	2240      	movs	r2, #64	; 0x40
 8000e0a:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
	tutamakDigitalInputs[16].inputPort	= BTN_17_GPIO_Port;
 8000e0e:	4b55      	ldr	r3, [pc, #340]	; (8000f64 <initDigitalInputs+0x264>)
 8000e10:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e14:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	tutamakDigitalInputs[17].inputPin 	= BTN_18_Pin;
 8000e18:	4b52      	ldr	r3, [pc, #328]	; (8000f64 <initDigitalInputs+0x264>)
 8000e1a:	2220      	movs	r2, #32
 8000e1c:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
	tutamakDigitalInputs[17].inputPort	= BTN_18_GPIO_Port;
 8000e20:	4b50      	ldr	r3, [pc, #320]	; (8000f64 <initDigitalInputs+0x264>)
 8000e22:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e26:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	tutamakDigitalInputs[18].inputPin 	= BTN_19_Pin;
 8000e2a:	4b4e      	ldr	r3, [pc, #312]	; (8000f64 <initDigitalInputs+0x264>)
 8000e2c:	2210      	movs	r2, #16
 8000e2e:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
	tutamakDigitalInputs[18].inputPort	= BTN_19_GPIO_Port;
 8000e32:	4b4c      	ldr	r3, [pc, #304]	; (8000f64 <initDigitalInputs+0x264>)
 8000e34:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e38:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	tutamakDigitalInputs[19].inputPin 	= BTN_20_Pin;
 8000e3c:	4b49      	ldr	r3, [pc, #292]	; (8000f64 <initDigitalInputs+0x264>)
 8000e3e:	2208      	movs	r2, #8
 8000e40:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e
	tutamakDigitalInputs[19].inputPort	= BTN_20_GPIO_Port;
 8000e44:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <initDigitalInputs+0x264>)
 8000e46:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e4a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	tutamakDigitalInputs[20].inputPin 	= BTN_21_Pin;
 8000e4e:	4b45      	ldr	r3, [pc, #276]	; (8000f64 <initDigitalInputs+0x264>)
 8000e50:	2204      	movs	r2, #4
 8000e52:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
	tutamakDigitalInputs[20].inputPort	= BTN_21_GPIO_Port;
 8000e56:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <initDigitalInputs+0x264>)
 8000e58:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e5c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	tutamakDigitalInputs[21].inputPin 	= BTN_22_Pin;
 8000e60:	4b40      	ldr	r3, [pc, #256]	; (8000f64 <initDigitalInputs+0x264>)
 8000e62:	2202      	movs	r2, #2
 8000e64:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
	tutamakDigitalInputs[21].inputPort	= BTN_22_GPIO_Port;
 8000e68:	4b3e      	ldr	r3, [pc, #248]	; (8000f64 <initDigitalInputs+0x264>)
 8000e6a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e6e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	tutamakDigitalInputs[22].inputPin 	= BTN_23_Pin;
 8000e72:	4b3c      	ldr	r3, [pc, #240]	; (8000f64 <initDigitalInputs+0x264>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
	tutamakDigitalInputs[22].inputPort	= BTN_23_GPIO_Port;
 8000e7a:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <initDigitalInputs+0x264>)
 8000e7c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e80:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	tutamakDigitalInputs[23].inputPin 	= BTN_24_Pin;
 8000e84:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <initDigitalInputs+0x264>)
 8000e86:	2208      	movs	r2, #8
 8000e88:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
	tutamakDigitalInputs[23].inputPort	= BTN_24_GPIO_Port;
 8000e8c:	4b35      	ldr	r3, [pc, #212]	; (8000f64 <initDigitalInputs+0x264>)
 8000e8e:	4a38      	ldr	r2, [pc, #224]	; (8000f70 <initDigitalInputs+0x270>)
 8000e90:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	tutamakDigitalInputs[24].inputPin 	= BTN_25_Pin;
 8000e94:	4b33      	ldr	r3, [pc, #204]	; (8000f64 <initDigitalInputs+0x264>)
 8000e96:	2204      	movs	r2, #4
 8000e98:	f8a3 21e2 	strh.w	r2, [r3, #482]	; 0x1e2
	tutamakDigitalInputs[24].inputPort	= BTN_25_GPIO_Port;
 8000e9c:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <initDigitalInputs+0x264>)
 8000e9e:	4a34      	ldr	r2, [pc, #208]	; (8000f70 <initDigitalInputs+0x270>)
 8000ea0:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	tutamakDigitalInputs[25].inputPin 	= BTN_26_Pin;
 8000ea4:	4b2f      	ldr	r3, [pc, #188]	; (8000f64 <initDigitalInputs+0x264>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
	tutamakDigitalInputs[25].inputPort	= BTN_26_GPIO_Port;
 8000eac:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <initDigitalInputs+0x264>)
 8000eae:	4a30      	ldr	r2, [pc, #192]	; (8000f70 <initDigitalInputs+0x270>)
 8000eb0:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	tutamakDigitalInputs[26].inputPin 	= BTN_27_Pin;
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <initDigitalInputs+0x264>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
	tutamakDigitalInputs[26].inputPort	= BTN_27_GPIO_Port;
 8000ebc:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <initDigitalInputs+0x264>)
 8000ebe:	4a2c      	ldr	r2, [pc, #176]	; (8000f70 <initDigitalInputs+0x270>)
 8000ec0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tutamakDigitalInputs[27].inputPin 	= BTN_28_Pin;
 8000ec4:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <initDigitalInputs+0x264>)
 8000ec6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000eca:	f8a3 221e 	strh.w	r2, [r3, #542]	; 0x21e
	tutamakDigitalInputs[27].inputPort	= BTN_28_GPIO_Port;
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <initDigitalInputs+0x264>)
 8000ed0:	4a27      	ldr	r2, [pc, #156]	; (8000f70 <initDigitalInputs+0x270>)
 8000ed2:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	tutamakDigitalInputs[28].inputPin 	= BTN_29_Pin;
 8000ed6:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <initDigitalInputs+0x264>)
 8000ed8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000edc:	f8a3 2232 	strh.w	r2, [r3, #562]	; 0x232
	tutamakDigitalInputs[28].inputPort	= BTN_29_GPIO_Port;
 8000ee0:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <initDigitalInputs+0x264>)
 8000ee2:	4a23      	ldr	r2, [pc, #140]	; (8000f70 <initDigitalInputs+0x270>)
 8000ee4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	tutamakDigitalInputs[29].inputPin 	= BTN_30_Pin;
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <initDigitalInputs+0x264>)
 8000eea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eee:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
	tutamakDigitalInputs[29].inputPort	= BTN_30_GPIO_Port;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <initDigitalInputs+0x264>)
 8000ef4:	4a1e      	ldr	r2, [pc, #120]	; (8000f70 <initDigitalInputs+0x270>)
 8000ef6:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	tutamakDigitalInputs[30].inputPin 	= BTN_31_Pin;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <initDigitalInputs+0x264>)
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
	tutamakDigitalInputs[30].inputPort	= BTN_31_GPIO_Port;
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <initDigitalInputs+0x264>)
 8000f04:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <initDigitalInputs+0x268>)
 8000f06:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	tutamakDigitalInputs[31].inputPin 	= BTN_32_Pin;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <initDigitalInputs+0x264>)
 8000f0c:	2240      	movs	r2, #64	; 0x40
 8000f0e:	f8a3 226e 	strh.w	r2, [r3, #622]	; 0x26e
	tutamakDigitalInputs[31].inputPort	= BTN_32_GPIO_Port;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <initDigitalInputs+0x264>)
 8000f14:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <initDigitalInputs+0x268>)
 8000f16:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	/***************************************************/

		uint32_t i;
		digitalInput* tempDigitalInputPtr = digitalInputPtr;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < BUTTON_COUNT; i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	e014      	b.n	8000f4e <initDigitalInputs+0x24e>
		{
			tempDigitalInputPtr	->	inputVal = GPIO_PIN_RESET;
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
			tempDigitalInputPtr	->	readFlag = false;
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	705a      	strb	r2, [r3, #1]
			tempDigitalInputPtr ->  readState= GPIO_PIN_RESET;
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	2200      	movs	r2, #0
 8000f34:	721a      	strb	r2, [r3, #8]
			tempDigitalInputPtr ->  debounceTimer = 0;
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
			//for prototype debounce factor
			tempDigitalInputPtr ->  debounceFactor = 20; /*!!!!!!!!!!!!! config structtan cekilecek !!!!!!!!!!!!!!!!!*/
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	2214      	movs	r2, #20
 8000f40:	611a      	str	r2, [r3, #16]
			tempDigitalInputPtr++;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	3314      	adds	r3, #20
 8000f46:	60bb      	str	r3, [r7, #8]
		for(i = 0; i < BUTTON_COUNT; i++)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b1f      	cmp	r3, #31
 8000f52:	d9e7      	bls.n	8000f24 <initDigitalInputs+0x224>
		}

}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200000e8 	.word	0x200000e8
 8000f68:	48000400 	.word	0x48000400
 8000f6c:	48000c00 	.word	0x48000c00
 8000f70:	48000800 	.word	0x48000800
 8000f74:	48001400 	.word	0x48001400

08000f78 <sampleDigitalInputs>:
		@description	:

*/

void sampleDigitalInputs(digitalInput *digitalInputPtr)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	digitalInput* tempDigitalInputPtr = digitalInputPtr;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < BUTTON_COUNT; i++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	e053      	b.n	8001032 <sampleDigitalInputs+0xba>
	{
		if(tempDigitalInputPtr -> readFlag == true)
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	785b      	ldrb	r3, [r3, #1]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d04c      	beq.n	800102c <sampleDigitalInputs+0xb4>
		{
			if(tempDigitalInputPtr -> readState == GPIO_PIN_RESET)
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	7a1b      	ldrb	r3, [r3, #8]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d11f      	bne.n	8000fda <sampleDigitalInputs+0x62>
			{
				if(tempDigitalInputPtr -> inputVal == GPIO_PIN_RESET)
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d117      	bne.n	8000fd2 <sampleDigitalInputs+0x5a>
				{
					if(tempDigitalInputPtr -> debounceTimer < tempDigitalInputPtr -> debounceFactor)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d204      	bcs.n	8000fb8 <sampleDigitalInputs+0x40>
					{
						tempDigitalInputPtr -> debounceTimer++;
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
					}
					if(tempDigitalInputPtr ->debounceTimer >= tempDigitalInputPtr ->debounceFactor)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d32d      	bcc.n	8001020 <sampleDigitalInputs+0xa8>
					{
						tempDigitalInputPtr -> debounceTimer = 0;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
						tempDigitalInputPtr -> readState = GPIO_PIN_SET;
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	721a      	strb	r2, [r3, #8]
 8000fd0:	e026      	b.n	8001020 <sampleDigitalInputs+0xa8>
					}
				}
				else
				{
					tempDigitalInputPtr -> debounceTimer = 0;
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	e022      	b.n	8001020 <sampleDigitalInputs+0xa8>
				}
			}

			else if(tempDigitalInputPtr -> readState == GPIO_PIN_SET)
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	7a1b      	ldrb	r3, [r3, #8]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d11e      	bne.n	8001020 <sampleDigitalInputs+0xa8>
			{
				if(tempDigitalInputPtr -> inputVal == GPIO_PIN_SET)
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d117      	bne.n	800101a <sampleDigitalInputs+0xa2>
				{
					if(tempDigitalInputPtr -> debounceTimer < tempDigitalInputPtr -> debounceFactor)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d204      	bcs.n	8001000 <sampleDigitalInputs+0x88>
					{
						tempDigitalInputPtr -> debounceTimer++;
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
					}
					if(tempDigitalInputPtr ->debounceTimer >= tempDigitalInputPtr ->debounceFactor)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	429a      	cmp	r2, r3
 800100a:	d309      	bcc.n	8001020 <sampleDigitalInputs+0xa8>
					{
						tempDigitalInputPtr -> debounceTimer = 0;
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
						tempDigitalInputPtr -> readState = GPIO_PIN_RESET;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2200      	movs	r2, #0
 8001016:	721a      	strb	r2, [r3, #8]
 8001018:	e002      	b.n	8001020 <sampleDigitalInputs+0xa8>
					}
				}
				else
				{
					tempDigitalInputPtr -> debounceTimer = 0;
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
				}
			}

			tempDigitalInputPtr   ->  readFlag = false;
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	2200      	movs	r2, #0
 8001024:	705a      	strb	r2, [r3, #1]
			tempDigitalInputPtr++;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	3314      	adds	r3, #20
 800102a:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < BUTTON_COUNT; i++)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3301      	adds	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2b1f      	cmp	r3, #31
 8001036:	d9a8      	bls.n	8000f8a <sampleDigitalInputs+0x12>
		}
	}
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <getDigitalInputs>:
		@description	:

*/

digitalInput* getDigitalInputs(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
		return &tutamakDigitalInputs[0];
 800104c:	4b02      	ldr	r3, [pc, #8]	; (8001058 <getDigitalInputs+0x10>)
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	200000e8 	.word	0x200000e8

0800105c <eraseFlashUserConf>:
		@Param 				: none
		@description	:

*/
void eraseFlashUserConf(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001060:	f002 f808 	bl	8003074 <HAL_FLASH_Unlock>
	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <eraseFlashUserConf+0x34>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
  EraseInitStruct.PageAddress = CONFIG_DATA_BASE_ADDR; // düzenlenecek !!!!!!!!!!!!!!!!!!!!*/
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <eraseFlashUserConf+0x34>)
 800106c:	4a09      	ldr	r2, [pc, #36]	; (8001094 <eraseFlashUserConf+0x38>)
 800106e:	605a      	str	r2, [r3, #4]
  EraseInitStruct.NbPages     = 1;
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <eraseFlashUserConf+0x34>)
 8001072:	2201      	movs	r2, #1
 8001074:	609a      	str	r2, [r3, #8]

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001076:	4908      	ldr	r1, [pc, #32]	; (8001098 <eraseFlashUserConf+0x3c>)
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <eraseFlashUserConf+0x34>)
 800107a:	f002 f8bf 	bl	80031fc <HAL_FLASHEx_Erase>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d000      	beq.n	8001086 <eraseFlashUserConf+0x2a>
  {
    while (1)
 8001084:	e7fe      	b.n	8001084 <eraseFlashUserConf+0x28>
    {
    }
  }
	HAL_FLASH_Lock();
 8001086:	f002 f81b 	bl	80030c0 <HAL_FLASH_Lock>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000474 	.word	0x20000474
 8001094:	0800e000 	.word	0x0800e000
 8001098:	20000388 	.word	0x20000388

0800109c <refreshFlashUserConf>:
		@Param 				: none
		@description	: Page Erase procedure is used before write function

*/
void refreshFlashUserConf(ConfigData *configDataPtr)
{
 800109c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010a0:	b08e      	sub	sp, #56	; 0x38
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	62f8      	str	r0, [r7, #44]	; 0x2c
	volatile uint32_t i = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
	ConfigData* tempConfigDataPtr = configDataPtr;
 80010aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
  eraseFlashUserConf();
 80010ae:	f7ff ffd5 	bl	800105c <eraseFlashUserConf>
	HAL_FLASH_Unlock();
 80010b2:	f001 ffdf 	bl	8003074 <HAL_FLASH_Unlock>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_DEFAULT_SELECT, 0x00 );
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	493f      	ldr	r1, [pc, #252]	; (80011bc <refreshFlashUserConf+0x120>)
 80010c0:	2001      	movs	r0, #1
 80010c2:	f001 ff67 	bl	8002f94 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_INTERFACE_OFFSET, tempConfigDataPtr -> tkkModSelection );
 80010c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	2200      	movs	r2, #0
 80010ce:	461c      	mov	r4, r3
 80010d0:	4615      	mov	r5, r2
 80010d2:	4622      	mov	r2, r4
 80010d4:	462b      	mov	r3, r5
 80010d6:	493a      	ldr	r1, [pc, #232]	; (80011c0 <refreshFlashUserConf+0x124>)
 80010d8:	2001      	movs	r0, #1
 80010da:	f001 ff5b 	bl	8002f94 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_X_MIDDLEPOINT_OFFSET, tempConfigDataPtr ->xMid);
 80010de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e0:	88db      	ldrh	r3, [r3, #6]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	2200      	movs	r2, #0
 80010e6:	4698      	mov	r8, r3
 80010e8:	4691      	mov	r9, r2
 80010ea:	4642      	mov	r2, r8
 80010ec:	464b      	mov	r3, r9
 80010ee:	4935      	ldr	r1, [pc, #212]	; (80011c4 <refreshFlashUserConf+0x128>)
 80010f0:	2001      	movs	r0, #1
 80010f2:	f001 ff4f 	bl	8002f94 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_X_MINPOINT_OFFSET, tempConfigDataPtr -> xMin);
 80010f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f8:	885b      	ldrh	r3, [r3, #2]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	2200      	movs	r2, #0
 80010fe:	469a      	mov	sl, r3
 8001100:	4693      	mov	fp, r2
 8001102:	4652      	mov	r2, sl
 8001104:	465b      	mov	r3, fp
 8001106:	4930      	ldr	r1, [pc, #192]	; (80011c8 <refreshFlashUserConf+0x12c>)
 8001108:	2001      	movs	r0, #1
 800110a:	f001 ff43 	bl	8002f94 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_X_MAXPOINT_OFFSET, tempConfigDataPtr -> xMax);
 800110e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001110:	889b      	ldrh	r3, [r3, #4]
 8001112:	b29b      	uxth	r3, r3
 8001114:	2200      	movs	r2, #0
 8001116:	623b      	str	r3, [r7, #32]
 8001118:	627a      	str	r2, [r7, #36]	; 0x24
 800111a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800111e:	492b      	ldr	r1, [pc, #172]	; (80011cc <refreshFlashUserConf+0x130>)
 8001120:	2001      	movs	r0, #1
 8001122:	f001 ff37 	bl	8002f94 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_Y_MIDDLEPOINT_OFFSET, tempConfigDataPtr -> yMid);
 8001126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001128:	899b      	ldrh	r3, [r3, #12]
 800112a:	b29b      	uxth	r3, r3
 800112c:	2200      	movs	r2, #0
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	61fa      	str	r2, [r7, #28]
 8001132:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001136:	4926      	ldr	r1, [pc, #152]	; (80011d0 <refreshFlashUserConf+0x134>)
 8001138:	2001      	movs	r0, #1
 800113a:	f001 ff2b 	bl	8002f94 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_Y_MINPOINT_OFFSET, tempConfigDataPtr -> yMin);
 800113e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001140:	891b      	ldrh	r3, [r3, #8]
 8001142:	b29b      	uxth	r3, r3
 8001144:	2200      	movs	r2, #0
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	617a      	str	r2, [r7, #20]
 800114a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800114e:	4921      	ldr	r1, [pc, #132]	; (80011d4 <refreshFlashUserConf+0x138>)
 8001150:	2001      	movs	r0, #1
 8001152:	f001 ff1f 	bl	8002f94 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_Y_MAXPOINT_OFFSET, tempConfigDataPtr -> yMax);
 8001156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001158:	895b      	ldrh	r3, [r3, #10]
 800115a:	b29b      	uxth	r3, r3
 800115c:	2200      	movs	r2, #0
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	60fa      	str	r2, [r7, #12]
 8001162:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001166:	491c      	ldr	r1, [pc, #112]	; (80011d8 <refreshFlashUserConf+0x13c>)
 8001168:	2001      	movs	r0, #1
 800116a:	f001 ff13 	bl	8002f94 <HAL_FLASH_Program>
	for(i = 0; i < 32; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	633b      	str	r3, [r7, #48]	; 0x30
 8001172:	e015      	b.n	80011a0 <refreshFlashUserConf+0x104>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT, tempTkkConfig.debounceFactor[i]);
 8001174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <refreshFlashUserConf+0x140>)
 8001178:	4413      	add	r3, r2
 800117a:	0099      	lsls	r1, r3, #2
 800117c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117e:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <refreshFlashUserConf+0x144>)
 8001180:	3304      	adds	r3, #4
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	88db      	ldrh	r3, [r3, #6]
 8001188:	b29b      	uxth	r3, r3
 800118a:	2200      	movs	r2, #0
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001194:	2001      	movs	r0, #1
 8001196:	f001 fefd 	bl	8002f94 <HAL_FLASH_Program>
	for(i = 0; i < 32; i++)
 800119a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800119c:	3301      	adds	r3, #1
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
 80011a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a2:	2b1f      	cmp	r3, #31
 80011a4:	d9e6      	bls.n	8001174 <refreshFlashUserConf+0xd8>
	}

	HAL_FLASH_Lock();
 80011a6:	f001 ff8b 	bl	80030c0 <HAL_FLASH_Lock>
	readFlashUserConf(&userTkkConfig);
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <refreshFlashUserConf+0x148>)
 80011ac:	f000 f81c 	bl	80011e8 <readFlashUserConf>

}
 80011b0:	bf00      	nop
 80011b2:	3738      	adds	r7, #56	; 0x38
 80011b4:	46bd      	mov	sp, r7
 80011b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011ba:	bf00      	nop
 80011bc:	0800e000 	.word	0x0800e000
 80011c0:	0800e002 	.word	0x0800e002
 80011c4:	0800e004 	.word	0x0800e004
 80011c8:	0800e006 	.word	0x0800e006
 80011cc:	0800e008 	.word	0x0800e008
 80011d0:	0800e00a 	.word	0x0800e00a
 80011d4:	0800e00c 	.word	0x0800e00c
 80011d8:	0800e00e 	.word	0x0800e00e
 80011dc:	02003814 	.word	0x02003814
 80011e0:	2000038c 	.word	0x2000038c
 80011e4:	200003dc 	.word	0x200003dc

080011e8 <readFlashUserConf>:
		@Param 				: none
		@description	:

*/
void readFlashUserConf(ConfigData *configDataPtr)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
	ConfigData* tempConfigDataPtr = configDataPtr;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	60fb      	str	r3, [r7, #12]

	tempConfigDataPtr -> tkkModSelection = (*(uint32_t*)CONFIG_DATA_INTERFACE_OFFSET);
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <readFlashUserConf+0x90>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	801a      	strh	r2, [r3, #0]

	tempConfigDataPtr -> xMid = (*(uint32_t*)CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 8001202:	4b1e      	ldr	r3, [pc, #120]	; (800127c <readFlashUserConf+0x94>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	b29a      	uxth	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	80da      	strh	r2, [r3, #6]
	tempConfigDataPtr -> xMin = (*(uint32_t*)CONFIG_DATA_X_MINPOINT_OFFSET);
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <readFlashUserConf+0x98>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	b29a      	uxth	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	805a      	strh	r2, [r3, #2]
	tempConfigDataPtr -> xMax = (*(uint32_t*)CONFIG_DATA_X_MAXPOINT_OFFSET);
 8001216:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <readFlashUserConf+0x9c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	b29a      	uxth	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	809a      	strh	r2, [r3, #4]

	tempConfigDataPtr -> yMid = (*(uint32_t*)CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <readFlashUserConf+0xa0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b29a      	uxth	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	819a      	strh	r2, [r3, #12]
	tempConfigDataPtr -> yMin = (*(uint32_t*)CONFIG_DATA_Y_MINPOINT_OFFSET);
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <readFlashUserConf+0xa4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	b29a      	uxth	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	811a      	strh	r2, [r3, #8]
	tempConfigDataPtr -> yMax = (*(uint32_t*)CONFIG_DATA_Y_MAXPOINT_OFFSET);
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <readFlashUserConf+0xa8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	b29a      	uxth	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	815a      	strh	r2, [r3, #10]

	for(i = 0; i < 32; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	e00f      	b.n	8001264 <readFlashUserConf+0x7c>
	{
		tempConfigDataPtr -> debounceFactor [i] = (*(uint32_t*)(CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT));
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	4b13      	ldr	r3, [pc, #76]	; (8001294 <readFlashUserConf+0xac>)
 8001248:	4413      	add	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	b291      	uxth	r1, r2
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	3304      	adds	r3, #4
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	460a      	mov	r2, r1
 800125c:	80da      	strh	r2, [r3, #6]
	for(i = 0; i < 32; i++)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	3301      	adds	r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	2b1f      	cmp	r3, #31
 8001268:	d9ec      	bls.n	8001244 <readFlashUserConf+0x5c>
	}

}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	0800e002 	.word	0x0800e002
 800127c:	0800e004 	.word	0x0800e004
 8001280:	0800e006 	.word	0x0800e006
 8001284:	0800e008 	.word	0x0800e008
 8001288:	0800e00a 	.word	0x0800e00a
 800128c:	0800e00c 	.word	0x0800e00c
 8001290:	0800e00e 	.word	0x0800e00e
 8001294:	02003814 	.word	0x02003814

08001298 <loadDefaultValues>:
void loadDefaultValues(ConfigData *configDataPtr)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60bb      	str	r3, [r7, #8]
	ConfigData* tempConfigDataPtr = configDataPtr;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	60fb      	str	r3, [r7, #12]

	tempConfigDataPtr -> tkkModSelection = (*(uint32_t*)DEFAULT_CONFIG_DATA_INTERFACE_OFFSET);
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <loadDefaultValues+0x90>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	801a      	strh	r2, [r3, #0]

	tempConfigDataPtr -> xMid = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 80012b2:	4b1e      	ldr	r3, [pc, #120]	; (800132c <loadDefaultValues+0x94>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	80da      	strh	r2, [r3, #6]
	tempConfigDataPtr -> xMin = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET);
 80012bc:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <loadDefaultValues+0x98>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	805a      	strh	r2, [r3, #2]
	tempConfigDataPtr -> xMax = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET);
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <loadDefaultValues+0x9c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	809a      	strh	r2, [r3, #4]

	tempConfigDataPtr -> yMid = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <loadDefaultValues+0xa0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	819a      	strh	r2, [r3, #12]
	tempConfigDataPtr -> yMin = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET);
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <loadDefaultValues+0xa4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	b29a      	uxth	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	811a      	strh	r2, [r3, #8]
	tempConfigDataPtr -> yMax = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET);
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <loadDefaultValues+0xa8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	815a      	strh	r2, [r3, #10]

	for(i = 0; i < 32; i++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	e00f      	b.n	8001314 <loadDefaultValues+0x7c>
	{
		tempConfigDataPtr ->debounceFactor [i] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT));
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	009a      	lsls	r2, r3, #2
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <loadDefaultValues+0xac>)
 80012fa:	4413      	add	r3, r2
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	b291      	uxth	r1, r2
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	3304      	adds	r3, #4
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	460a      	mov	r2, r1
 800130c:	80da      	strh	r2, [r3, #6]
	for(i = 0; i < 32; i++)
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3301      	adds	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b1f      	cmp	r3, #31
 8001318:	d9ec      	bls.n	80012f4 <loadDefaultValues+0x5c>
	}


}
 800131a:	bf00      	nop
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	0800f000 	.word	0x0800f000
 800132c:	0800f002 	.word	0x0800f002
 8001330:	0800f004 	.word	0x0800f004
 8001334:	0800f006 	.word	0x0800f006
 8001338:	0800f008 	.word	0x0800f008
 800133c:	0800f00a 	.word	0x0800f00a
 8001340:	0800f00c 	.word	0x0800f00c
 8001344:	0800f00e 	.word	0x0800f00e

08001348 <sendAckUart>:

void sendAckUart(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
	volatile uint8_t txBufferACK[9];

	txBufferACK[0] = COMMAND_HEADER;
 800134e:	23a5      	movs	r3, #165	; 0xa5
 8001350:	713b      	strb	r3, [r7, #4]
	txBufferACK[1] = COMMAND_ACK;
 8001352:	23ff      	movs	r3, #255	; 0xff
 8001354:	717b      	strb	r3, [r7, #5]
	txBufferACK[2] = 0x00;
 8001356:	2300      	movs	r3, #0
 8001358:	71bb      	strb	r3, [r7, #6]
	txBufferACK[3] = 0x00;
 800135a:	2300      	movs	r3, #0
 800135c:	71fb      	strb	r3, [r7, #7]
	txBufferACK[4] = 0x00;
 800135e:	2300      	movs	r3, #0
 8001360:	723b      	strb	r3, [r7, #8]
	txBufferACK[5] = 0x00;
 8001362:	2300      	movs	r3, #0
 8001364:	727b      	strb	r3, [r7, #9]
	txBufferACK[6] = 0x00;
 8001366:	2300      	movs	r3, #0
 8001368:	72bb      	strb	r3, [r7, #10]
	txBufferACK[7] = 0x00;
 800136a:	2300      	movs	r3, #0
 800136c:	72fb      	strb	r3, [r7, #11]
	txBufferACK[8] = CHECKSUM_ACK;
 800136e:	2301      	movs	r3, #1
 8001370:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, (uint8_t*)txBufferACK, 9, 5000);
 8001372:	1d39      	adds	r1, r7, #4
 8001374:	f241 3388 	movw	r3, #5000	; 0x1388
 8001378:	2209      	movs	r2, #9
 800137a:	4803      	ldr	r0, [pc, #12]	; (8001388 <sendAckUart+0x40>)
 800137c:	f004 fe6a 	bl	8006054 <HAL_UART_Transmit>
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200005a0 	.word	0x200005a0

0800138c <checkCommand>:

void checkCommand(uint8_t* rxBuffer)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]

	switch (rxBuffer[1])
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3301      	adds	r3, #1
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2bdd      	cmp	r3, #221	; 0xdd
 80013a0:	f300 829d 	bgt.w	80018de <checkCommand+0x552>
 80013a4:	2bbb      	cmp	r3, #187	; 0xbb
 80013a6:	da05      	bge.n	80013b4 <checkCommand+0x28>
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	f300 808f 	bgt.w	80014cc <checkCommand+0x140>
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	dc7c      	bgt.n	80014ac <checkCommand+0x120>

		case COMMAND_SET_DEFAULT_CONFIG_DATA:

		break;
	}
}
 80013b2:	e294      	b.n	80018de <checkCommand+0x552>
	switch (rxBuffer[1])
 80013b4:	3bbb      	subs	r3, #187	; 0xbb
 80013b6:	2b22      	cmp	r3, #34	; 0x22
 80013b8:	f200 8291 	bhi.w	80018de <checkCommand+0x552>
 80013bc:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <checkCommand+0x38>)
 80013be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c2:	bf00      	nop
 80013c4:	080018bf 	.word	0x080018bf
 80013c8:	080018df 	.word	0x080018df
 80013cc:	080018df 	.word	0x080018df
 80013d0:	080018df 	.word	0x080018df
 80013d4:	080018df 	.word	0x080018df
 80013d8:	080018df 	.word	0x080018df
 80013dc:	080018df 	.word	0x080018df
 80013e0:	080018df 	.word	0x080018df
 80013e4:	080018df 	.word	0x080018df
 80013e8:	080018df 	.word	0x080018df
 80013ec:	080018a3 	.word	0x080018a3
 80013f0:	080018df 	.word	0x080018df
 80013f4:	080018df 	.word	0x080018df
 80013f8:	080018df 	.word	0x080018df
 80013fc:	080018df 	.word	0x080018df
 8001400:	080018df 	.word	0x080018df
 8001404:	080018df 	.word	0x080018df
 8001408:	080018d9 	.word	0x080018d9
 800140c:	080018df 	.word	0x080018df
 8001410:	080018df 	.word	0x080018df
 8001414:	080018df 	.word	0x080018df
 8001418:	080018df 	.word	0x080018df
 800141c:	080018df 	.word	0x080018df
 8001420:	080018df 	.word	0x080018df
 8001424:	080018df 	.word	0x080018df
 8001428:	080018df 	.word	0x080018df
 800142c:	080018a9 	.word	0x080018a9
 8001430:	080018df 	.word	0x080018df
 8001434:	080018df 	.word	0x080018df
 8001438:	080018df 	.word	0x080018df
 800143c:	080018df 	.word	0x080018df
 8001440:	080018df 	.word	0x080018df
 8001444:	080018df 	.word	0x080018df
 8001448:	080018df 	.word	0x080018df
 800144c:	080018b3 	.word	0x080018b3
 8001450:	3b71      	subs	r3, #113	; 0x71
 8001452:	2b12      	cmp	r3, #18
 8001454:	f200 8243 	bhi.w	80018de <checkCommand+0x552>
 8001458:	a201      	add	r2, pc, #4	; (adr r2, 8001460 <checkCommand+0xd4>)
 800145a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145e:	bf00      	nop
 8001460:	080016ff 	.word	0x080016ff
 8001464:	080017ab 	.word	0x080017ab
 8001468:	08001827 	.word	0x08001827
 800146c:	080018df 	.word	0x080018df
 8001470:	080018df 	.word	0x080018df
 8001474:	080018df 	.word	0x080018df
 8001478:	080018df 	.word	0x080018df
 800147c:	080018df 	.word	0x080018df
 8001480:	080018df 	.word	0x080018df
 8001484:	080018df 	.word	0x080018df
 8001488:	080018df 	.word	0x080018df
 800148c:	080018df 	.word	0x080018df
 8001490:	080018df 	.word	0x080018df
 8001494:	080018df 	.word	0x080018df
 8001498:	080018df 	.word	0x080018df
 800149c:	080018df 	.word	0x080018df
 80014a0:	0800159f 	.word	0x0800159f
 80014a4:	08001607 	.word	0x08001607
 80014a8:	08001683 	.word	0x08001683
 80014ac:	3b01      	subs	r3, #1
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	f200 8215 	bhi.w	80018de <checkCommand+0x552>
 80014b4:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <checkCommand+0x130>)
 80014b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ba:	bf00      	nop
 80014bc:	080014d9 	.word	0x080014d9
 80014c0:	080014eb 	.word	0x080014eb
 80014c4:	08001545 	.word	0x08001545
 80014c8:	080018dd 	.word	0x080018dd
 80014cc:	2b83      	cmp	r3, #131	; 0x83
 80014ce:	f300 8206 	bgt.w	80018de <checkCommand+0x552>
 80014d2:	2b71      	cmp	r3, #113	; 0x71
 80014d4:	dabc      	bge.n	8001450 <checkCommand+0xc4>
}
 80014d6:	e202      	b.n	80018de <checkCommand+0x552>
		tempTkkConfig.tkkModSelection = rxBuffer[2];
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3302      	adds	r3, #2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b29a      	uxth	r2, r3
 80014e0:	4b95      	ldr	r3, [pc, #596]	; (8001738 <checkCommand+0x3ac>)
 80014e2:	801a      	strh	r2, [r3, #0]
		sendAckUart();
 80014e4:	f7ff ff30 	bl	8001348 <sendAckUart>
		break;
 80014e8:	e1f9      	b.n	80018de <checkCommand+0x552>
			tempTkkConfig.xMax = rxBuffer[2]<<8 | rxBuffer[3];
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3302      	adds	r3, #2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3303      	adds	r3, #3
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b21b      	sxth	r3, r3
 8001500:	b29a      	uxth	r2, r3
 8001502:	4b8d      	ldr	r3, [pc, #564]	; (8001738 <checkCommand+0x3ac>)
 8001504:	809a      	strh	r2, [r3, #4]
			tempTkkConfig.xMin = rxBuffer[4]<<8 | rxBuffer[5];
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3304      	adds	r3, #4
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3305      	adds	r3, #5
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b21b      	sxth	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b21b      	sxth	r3, r3
 800151c:	b29a      	uxth	r2, r3
 800151e:	4b86      	ldr	r3, [pc, #536]	; (8001738 <checkCommand+0x3ac>)
 8001520:	805a      	strh	r2, [r3, #2]
			tempTkkConfig.xMid = rxBuffer[6]<<8 | rxBuffer[7];
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3306      	adds	r3, #6
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3307      	adds	r3, #7
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b21b      	sxth	r3, r3
 8001534:	4313      	orrs	r3, r2
 8001536:	b21b      	sxth	r3, r3
 8001538:	b29a      	uxth	r2, r3
 800153a:	4b7f      	ldr	r3, [pc, #508]	; (8001738 <checkCommand+0x3ac>)
 800153c:	80da      	strh	r2, [r3, #6]
			sendAckUart();
 800153e:	f7ff ff03 	bl	8001348 <sendAckUart>
		break;
 8001542:	e1cc      	b.n	80018de <checkCommand+0x552>
			tempTkkConfig.yMax = rxBuffer[2]<<8 | rxBuffer[3];
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3302      	adds	r3, #2
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b21a      	sxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3303      	adds	r3, #3
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b21b      	sxth	r3, r3
 8001556:	4313      	orrs	r3, r2
 8001558:	b21b      	sxth	r3, r3
 800155a:	b29a      	uxth	r2, r3
 800155c:	4b76      	ldr	r3, [pc, #472]	; (8001738 <checkCommand+0x3ac>)
 800155e:	815a      	strh	r2, [r3, #10]
			tempTkkConfig.yMin = rxBuffer[4]<<8 | rxBuffer[5];
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3304      	adds	r3, #4
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3305      	adds	r3, #5
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b21b      	sxth	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b21b      	sxth	r3, r3
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b6f      	ldr	r3, [pc, #444]	; (8001738 <checkCommand+0x3ac>)
 800157a:	811a      	strh	r2, [r3, #8]
			tempTkkConfig.yMid = rxBuffer[6]<<8 | rxBuffer[7];
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3306      	adds	r3, #6
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b21a      	sxth	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3307      	adds	r3, #7
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b21b      	sxth	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	b21b      	sxth	r3, r3
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b68      	ldr	r3, [pc, #416]	; (8001738 <checkCommand+0x3ac>)
 8001596:	819a      	strh	r2, [r3, #12]
			sendAckUart();
 8001598:	f7ff fed6 	bl	8001348 <sendAckUart>
		break;
 800159c:	e19f      	b.n	80018de <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 800159e:	4b67      	ldr	r3, [pc, #412]	; (800173c <checkCommand+0x3b0>)
 80015a0:	22a5      	movs	r2, #165	; 0xa5
 80015a2:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_MODSEL_READ;
 80015a4:	4b65      	ldr	r3, [pc, #404]	; (800173c <checkCommand+0x3b0>)
 80015a6:	2281      	movs	r2, #129	; 0x81
 80015a8:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] =	(*(uint32_t*)CONFIG_DATA_INTERFACE_OFFSET);;
 80015aa:	4b65      	ldr	r3, [pc, #404]	; (8001740 <checkCommand+0x3b4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	4b62      	ldr	r3, [pc, #392]	; (800173c <checkCommand+0x3b0>)
 80015b2:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] =	0x00;
 80015b4:	4b61      	ldr	r3, [pc, #388]	; (800173c <checkCommand+0x3b0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = 0x00;
 80015ba:	4b60      	ldr	r3, [pc, #384]	; (800173c <checkCommand+0x3b0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = 0x00;
 80015c0:	4b5e      	ldr	r3, [pc, #376]	; (800173c <checkCommand+0x3b0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = 0x00;
 80015c6:	4b5d      	ldr	r3, [pc, #372]	; (800173c <checkCommand+0x3b0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = 0x00;
 80015cc:	4b5b      	ldr	r3, [pc, #364]	; (800173c <checkCommand+0x3b0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 80015d2:	2301      	movs	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	e00b      	b.n	80015f0 <checkCommand+0x264>
				rsSendFormat[8] += rsSendFormat[i];
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4a58      	ldr	r2, [pc, #352]	; (800173c <checkCommand+0x3b0>)
 80015dc:	5cd2      	ldrb	r2, [r2, r3]
 80015de:	4b57      	ldr	r3, [pc, #348]	; (800173c <checkCommand+0x3b0>)
 80015e0:	7a1b      	ldrb	r3, [r3, #8]
 80015e2:	4413      	add	r3, r2
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b55      	ldr	r3, [pc, #340]	; (800173c <checkCommand+0x3b0>)
 80015e8:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3301      	adds	r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b07      	cmp	r3, #7
 80015f4:	d9f0      	bls.n	80015d8 <checkCommand+0x24c>
			HAL_UART_Transmit(&huart3, (uint8_t*)rsSendFormat, 9, 5000);
 80015f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80015fa:	2209      	movs	r2, #9
 80015fc:	494f      	ldr	r1, [pc, #316]	; (800173c <checkCommand+0x3b0>)
 80015fe:	4851      	ldr	r0, [pc, #324]	; (8001744 <checkCommand+0x3b8>)
 8001600:	f004 fd28 	bl	8006054 <HAL_UART_Transmit>
		break;
 8001604:	e16b      	b.n	80018de <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 8001606:	4b4d      	ldr	r3, [pc, #308]	; (800173c <checkCommand+0x3b0>)
 8001608:	22a5      	movs	r2, #165	; 0xa5
 800160a:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_XCALIB_READ;
 800160c:	4b4b      	ldr	r3, [pc, #300]	; (800173c <checkCommand+0x3b0>)
 800160e:	2282      	movs	r2, #130	; 0x82
 8001610:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] =	(*(uint32_t*)(CONFIG_DATA_X_MAXPOINT_OFFSET + 1));
 8001612:	4b4d      	ldr	r3, [pc, #308]	; (8001748 <checkCommand+0x3bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	4b48      	ldr	r3, [pc, #288]	; (800173c <checkCommand+0x3b0>)
 800161a:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] =	(*(uint32_t*)CONFIG_DATA_X_MAXPOINT_OFFSET);
 800161c:	4b4b      	ldr	r3, [pc, #300]	; (800174c <checkCommand+0x3c0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b46      	ldr	r3, [pc, #280]	; (800173c <checkCommand+0x3b0>)
 8001624:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = (*(uint32_t*)(CONFIG_DATA_X_MINPOINT_OFFSET + 1));
 8001626:	4b4a      	ldr	r3, [pc, #296]	; (8001750 <checkCommand+0x3c4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b43      	ldr	r3, [pc, #268]	; (800173c <checkCommand+0x3b0>)
 800162e:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = (*(uint32_t*)CONFIG_DATA_X_MINPOINT_OFFSET);
 8001630:	4b48      	ldr	r3, [pc, #288]	; (8001754 <checkCommand+0x3c8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b41      	ldr	r3, [pc, #260]	; (800173c <checkCommand+0x3b0>)
 8001638:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = (*(uint32_t*)(CONFIG_DATA_X_MIDDLEPOINT_OFFSET + 1));
 800163a:	4b47      	ldr	r3, [pc, #284]	; (8001758 <checkCommand+0x3cc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	4b3e      	ldr	r3, [pc, #248]	; (800173c <checkCommand+0x3b0>)
 8001642:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = (*(uint32_t*)CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 8001644:	4b45      	ldr	r3, [pc, #276]	; (800175c <checkCommand+0x3d0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4b3c      	ldr	r3, [pc, #240]	; (800173c <checkCommand+0x3b0>)
 800164c:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 800164e:	2301      	movs	r3, #1
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	e00b      	b.n	800166c <checkCommand+0x2e0>
				rsSendFormat[8] += rsSendFormat[i];
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4a39      	ldr	r2, [pc, #228]	; (800173c <checkCommand+0x3b0>)
 8001658:	5cd2      	ldrb	r2, [r2, r3]
 800165a:	4b38      	ldr	r3, [pc, #224]	; (800173c <checkCommand+0x3b0>)
 800165c:	7a1b      	ldrb	r3, [r3, #8]
 800165e:	4413      	add	r3, r2
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b36      	ldr	r3, [pc, #216]	; (800173c <checkCommand+0x3b0>)
 8001664:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3301      	adds	r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b07      	cmp	r3, #7
 8001670:	d9f0      	bls.n	8001654 <checkCommand+0x2c8>
			HAL_UART_Transmit(&huart3, (uint8_t*)rsSendFormat, 9, 5000);
 8001672:	f241 3388 	movw	r3, #5000	; 0x1388
 8001676:	2209      	movs	r2, #9
 8001678:	4930      	ldr	r1, [pc, #192]	; (800173c <checkCommand+0x3b0>)
 800167a:	4832      	ldr	r0, [pc, #200]	; (8001744 <checkCommand+0x3b8>)
 800167c:	f004 fcea 	bl	8006054 <HAL_UART_Transmit>
		break;
 8001680:	e12d      	b.n	80018de <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <checkCommand+0x3b0>)
 8001684:	22a5      	movs	r2, #165	; 0xa5
 8001686:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_YCALIB_READ;
 8001688:	4b2c      	ldr	r3, [pc, #176]	; (800173c <checkCommand+0x3b0>)
 800168a:	2283      	movs	r2, #131	; 0x83
 800168c:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] =	(*(uint32_t*)(CONFIG_DATA_Y_MAXPOINT_OFFSET + 1));
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <checkCommand+0x3d4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b29      	ldr	r3, [pc, #164]	; (800173c <checkCommand+0x3b0>)
 8001696:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] =	(*(uint32_t*)CONFIG_DATA_Y_MAXPOINT_OFFSET);
 8001698:	4b32      	ldr	r3, [pc, #200]	; (8001764 <checkCommand+0x3d8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4b27      	ldr	r3, [pc, #156]	; (800173c <checkCommand+0x3b0>)
 80016a0:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = (*(uint32_t*)(CONFIG_DATA_Y_MINPOINT_OFFSET + 1));
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <checkCommand+0x3dc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <checkCommand+0x3b0>)
 80016aa:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = (*(uint32_t*)CONFIG_DATA_Y_MINPOINT_OFFSET);
 80016ac:	4b2f      	ldr	r3, [pc, #188]	; (800176c <checkCommand+0x3e0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <checkCommand+0x3b0>)
 80016b4:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = (*(uint32_t*)(CONFIG_DATA_Y_MIDDLEPOINT_OFFSET + 1));
 80016b6:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <checkCommand+0x3e4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <checkCommand+0x3b0>)
 80016be:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = (*(uint32_t*)CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 80016c0:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <checkCommand+0x3e8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <checkCommand+0x3b0>)
 80016c8:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 80016ca:	2301      	movs	r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	e00b      	b.n	80016e8 <checkCommand+0x35c>
				rsSendFormat[8] += rsSendFormat[i];
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4a1a      	ldr	r2, [pc, #104]	; (800173c <checkCommand+0x3b0>)
 80016d4:	5cd2      	ldrb	r2, [r2, r3]
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <checkCommand+0x3b0>)
 80016d8:	7a1b      	ldrb	r3, [r3, #8]
 80016da:	4413      	add	r3, r2
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <checkCommand+0x3b0>)
 80016e0:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3301      	adds	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b07      	cmp	r3, #7
 80016ec:	d9f0      	bls.n	80016d0 <checkCommand+0x344>
			HAL_UART_Transmit(&huart3, (uint8_t*)rsSendFormat, 9, 5000);
 80016ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80016f2:	2209      	movs	r2, #9
 80016f4:	4911      	ldr	r1, [pc, #68]	; (800173c <checkCommand+0x3b0>)
 80016f6:	4813      	ldr	r0, [pc, #76]	; (8001744 <checkCommand+0x3b8>)
 80016f8:	f004 fcac 	bl	8006054 <HAL_UART_Transmit>
		break;
 80016fc:	e0ef      	b.n	80018de <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <checkCommand+0x3b0>)
 8001700:	22a5      	movs	r2, #165	; 0xa5
 8001702:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_DEFAULT_MODSEL_READ;
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <checkCommand+0x3b0>)
 8001706:	2271      	movs	r2, #113	; 0x71
 8001708:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] =	(*(uint32_t*)DEFAULT_CONFIG_DATA_INTERFACE_OFFSET);;
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <checkCommand+0x3ec>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <checkCommand+0x3b0>)
 8001712:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] =	0x00;
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <checkCommand+0x3b0>)
 8001716:	2200      	movs	r2, #0
 8001718:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = 0x00;
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <checkCommand+0x3b0>)
 800171c:	2200      	movs	r2, #0
 800171e:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = 0x00;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <checkCommand+0x3b0>)
 8001722:	2200      	movs	r2, #0
 8001724:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = 0x00;
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <checkCommand+0x3b0>)
 8001728:	2200      	movs	r2, #0
 800172a:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = 0x00;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <checkCommand+0x3b0>)
 800172e:	2200      	movs	r2, #0
 8001730:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 8001732:	2301      	movs	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	e02d      	b.n	8001794 <checkCommand+0x408>
 8001738:	2000038c 	.word	0x2000038c
 800173c:	20000368 	.word	0x20000368
 8001740:	0800e002 	.word	0x0800e002
 8001744:	200005a0 	.word	0x200005a0
 8001748:	0800e009 	.word	0x0800e009
 800174c:	0800e008 	.word	0x0800e008
 8001750:	0800e007 	.word	0x0800e007
 8001754:	0800e006 	.word	0x0800e006
 8001758:	0800e005 	.word	0x0800e005
 800175c:	0800e004 	.word	0x0800e004
 8001760:	0800e00f 	.word	0x0800e00f
 8001764:	0800e00e 	.word	0x0800e00e
 8001768:	0800e00d 	.word	0x0800e00d
 800176c:	0800e00c 	.word	0x0800e00c
 8001770:	0800e00b 	.word	0x0800e00b
 8001774:	0800e00a 	.word	0x0800e00a
 8001778:	0800f000 	.word	0x0800f000
				rsSendFormat[8] += rsSendFormat[i];
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4a5a      	ldr	r2, [pc, #360]	; (80018e8 <checkCommand+0x55c>)
 8001780:	5cd2      	ldrb	r2, [r2, r3]
 8001782:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <checkCommand+0x55c>)
 8001784:	7a1b      	ldrb	r3, [r3, #8]
 8001786:	4413      	add	r3, r2
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b57      	ldr	r3, [pc, #348]	; (80018e8 <checkCommand+0x55c>)
 800178c:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3301      	adds	r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b07      	cmp	r3, #7
 8001798:	d9f0      	bls.n	800177c <checkCommand+0x3f0>
			HAL_UART_Transmit(&huart3, (uint8_t*)rsSendFormat, 9, 5000);
 800179a:	f241 3388 	movw	r3, #5000	; 0x1388
 800179e:	2209      	movs	r2, #9
 80017a0:	4951      	ldr	r1, [pc, #324]	; (80018e8 <checkCommand+0x55c>)
 80017a2:	4852      	ldr	r0, [pc, #328]	; (80018ec <checkCommand+0x560>)
 80017a4:	f004 fc56 	bl	8006054 <HAL_UART_Transmit>
		break;
 80017a8:	e099      	b.n	80018de <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 80017aa:	4b4f      	ldr	r3, [pc, #316]	; (80018e8 <checkCommand+0x55c>)
 80017ac:	22a5      	movs	r2, #165	; 0xa5
 80017ae:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_DEFAULT_XCALIB_READ;
 80017b0:	4b4d      	ldr	r3, [pc, #308]	; (80018e8 <checkCommand+0x55c>)
 80017b2:	2272      	movs	r2, #114	; 0x72
 80017b4:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] =	(*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET + 1)); //MSB
 80017b6:	4b4e      	ldr	r3, [pc, #312]	; (80018f0 <checkCommand+0x564>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <checkCommand+0x55c>)
 80017be:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] =	(*(uint32_t*)DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET);			 //LSB
 80017c0:	4b4c      	ldr	r3, [pc, #304]	; (80018f4 <checkCommand+0x568>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b48      	ldr	r3, [pc, #288]	; (80018e8 <checkCommand+0x55c>)
 80017c8:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET + 1));
 80017ca:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <checkCommand+0x56c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b45      	ldr	r3, [pc, #276]	; (80018e8 <checkCommand+0x55c>)
 80017d2:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET);
 80017d4:	4b49      	ldr	r3, [pc, #292]	; (80018fc <checkCommand+0x570>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b43      	ldr	r3, [pc, #268]	; (80018e8 <checkCommand+0x55c>)
 80017dc:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET + 1));
 80017de:	4b48      	ldr	r3, [pc, #288]	; (8001900 <checkCommand+0x574>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b40      	ldr	r3, [pc, #256]	; (80018e8 <checkCommand+0x55c>)
 80017e6:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 80017e8:	4b46      	ldr	r3, [pc, #280]	; (8001904 <checkCommand+0x578>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <checkCommand+0x55c>)
 80017f0:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 80017f2:	2301      	movs	r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	e00b      	b.n	8001810 <checkCommand+0x484>
				rsSendFormat[8] += rsSendFormat[i];
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4a3b      	ldr	r2, [pc, #236]	; (80018e8 <checkCommand+0x55c>)
 80017fc:	5cd2      	ldrb	r2, [r2, r3]
 80017fe:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <checkCommand+0x55c>)
 8001800:	7a1b      	ldrb	r3, [r3, #8]
 8001802:	4413      	add	r3, r2
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <checkCommand+0x55c>)
 8001808:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3301      	adds	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b07      	cmp	r3, #7
 8001814:	d9f0      	bls.n	80017f8 <checkCommand+0x46c>
			HAL_UART_Transmit(&huart3, (uint8_t*)rsSendFormat, 9, 5000);
 8001816:	f241 3388 	movw	r3, #5000	; 0x1388
 800181a:	2209      	movs	r2, #9
 800181c:	4932      	ldr	r1, [pc, #200]	; (80018e8 <checkCommand+0x55c>)
 800181e:	4833      	ldr	r0, [pc, #204]	; (80018ec <checkCommand+0x560>)
 8001820:	f004 fc18 	bl	8006054 <HAL_UART_Transmit>
		break;
 8001824:	e05b      	b.n	80018de <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 8001826:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <checkCommand+0x55c>)
 8001828:	22a5      	movs	r2, #165	; 0xa5
 800182a:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_DEFAULT_YCALIB_READ;
 800182c:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <checkCommand+0x55c>)
 800182e:	2273      	movs	r2, #115	; 0x73
 8001830:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] =	(*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET + 1));
 8001832:	4b35      	ldr	r3, [pc, #212]	; (8001908 <checkCommand+0x57c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <checkCommand+0x55c>)
 800183a:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] =	(*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET);
 800183c:	4b33      	ldr	r3, [pc, #204]	; (800190c <checkCommand+0x580>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <checkCommand+0x55c>)
 8001844:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET + 1));
 8001846:	4b32      	ldr	r3, [pc, #200]	; (8001910 <checkCommand+0x584>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <checkCommand+0x55c>)
 800184e:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET);
 8001850:	4b30      	ldr	r3, [pc, #192]	; (8001914 <checkCommand+0x588>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <checkCommand+0x55c>)
 8001858:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET + 1));
 800185a:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <checkCommand+0x58c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <checkCommand+0x55c>)
 8001862:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <checkCommand+0x590>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <checkCommand+0x55c>)
 800186c:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 800186e:	2301      	movs	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	e00b      	b.n	800188c <checkCommand+0x500>
				rsSendFormat[8] += rsSendFormat[i];
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4a1c      	ldr	r2, [pc, #112]	; (80018e8 <checkCommand+0x55c>)
 8001878:	5cd2      	ldrb	r2, [r2, r3]
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <checkCommand+0x55c>)
 800187c:	7a1b      	ldrb	r3, [r3, #8]
 800187e:	4413      	add	r3, r2
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <checkCommand+0x55c>)
 8001884:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3301      	adds	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b07      	cmp	r3, #7
 8001890:	d9f0      	bls.n	8001874 <checkCommand+0x4e8>
			HAL_UART_Transmit(&huart3, (uint8_t*)rsSendFormat, 9, 5000);
 8001892:	f241 3388 	movw	r3, #5000	; 0x1388
 8001896:	2209      	movs	r2, #9
 8001898:	4913      	ldr	r1, [pc, #76]	; (80018e8 <checkCommand+0x55c>)
 800189a:	4814      	ldr	r0, [pc, #80]	; (80018ec <checkCommand+0x560>)
 800189c:	f004 fbda 	bl	8006054 <HAL_UART_Transmit>
		break;
 80018a0:	e01d      	b.n	80018de <checkCommand+0x552>
			bootloaderCommand();
 80018a2:	f7ff f80d 	bl	80008c0 <bootloaderCommand>
		break;
 80018a6:	e01a      	b.n	80018de <checkCommand+0x552>
			sendAckUart();
 80018a8:	f7ff fd4e 	bl	8001348 <sendAckUart>
			HAL_NVIC_SystemReset();
 80018ac:	f001 f9af 	bl	8002c0e <HAL_NVIC_SystemReset>
		break;
 80018b0:	e015      	b.n	80018de <checkCommand+0x552>
			remoteMode = 0;
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <checkCommand+0x594>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
			sendAckUart();
 80018b8:	f7ff fd46 	bl	8001348 <sendAckUart>
		break;
 80018bc:	e00f      	b.n	80018de <checkCommand+0x552>
			refreshFlashUserConf(&tempTkkConfig);
 80018be:	4819      	ldr	r0, [pc, #100]	; (8001924 <checkCommand+0x598>)
 80018c0:	f7ff fbec 	bl	800109c <refreshFlashUserConf>
			calculateJostickBorders(&userTkkConfig, &tkkJoystickBorder);
 80018c4:	4918      	ldr	r1, [pc, #96]	; (8001928 <checkCommand+0x59c>)
 80018c6:	4819      	ldr	r0, [pc, #100]	; (800192c <checkCommand+0x5a0>)
 80018c8:	f7ff f934 	bl	8000b34 <calculateJostickBorders>
			remoteMode = 1;
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <checkCommand+0x594>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
			sendAckUart();
 80018d2:	f7ff fd39 	bl	8001348 <sendAckUart>
		break;
 80018d6:	e002      	b.n	80018de <checkCommand+0x552>
		break;
 80018d8:	bf00      	nop
 80018da:	e000      	b.n	80018de <checkCommand+0x552>
		break;
 80018dc:	bf00      	nop
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000368 	.word	0x20000368
 80018ec:	200005a0 	.word	0x200005a0
 80018f0:	0800f007 	.word	0x0800f007
 80018f4:	0800f006 	.word	0x0800f006
 80018f8:	0800f005 	.word	0x0800f005
 80018fc:	0800f004 	.word	0x0800f004
 8001900:	0800f003 	.word	0x0800f003
 8001904:	0800f002 	.word	0x0800f002
 8001908:	0800f00d 	.word	0x0800f00d
 800190c:	0800f00c 	.word	0x0800f00c
 8001910:	0800f00b 	.word	0x0800f00b
 8001914:	0800f00a 	.word	0x0800f00a
 8001918:	0800f009 	.word	0x0800f009
 800191c:	0800f008 	.word	0x0800f008
 8001920:	20000000 	.word	0x20000000
 8001924:	2000038c 	.word	0x2000038c
 8001928:	2000042c 	.word	0x2000042c
 800192c:	200003dc 	.word	0x200003dc

08001930 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	counter1++;
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HAL_UART_RxCpltCallback+0xe0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	4a34      	ldr	r2, [pc, #208]	; (8001a10 <HAL_UART_RxCpltCallback+0xe0>)
 8001940:	6013      	str	r3, [r2, #0]
	unsigned int i;
	tempRxDataIn = rxDataIn;
 8001942:	4b34      	ldr	r3, [pc, #208]	; (8001a14 <HAL_UART_RxCpltCallback+0xe4>)
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <HAL_UART_RxCpltCallback+0xe8>)
 8001948:	701a      	strb	r2, [r3, #0]

	if(rxBufferDataCounter==0 && rxDataIn==0xA5)
 800194a:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <HAL_UART_RxCpltCallback+0xec>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10d      	bne.n	800196e <HAL_UART_RxCpltCallback+0x3e>
 8001952:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <HAL_UART_RxCpltCallback+0xe4>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2ba5      	cmp	r3, #165	; 0xa5
 8001958:	d109      	bne.n	800196e <HAL_UART_RxCpltCallback+0x3e>
	{
		rxBuffer[0] = rxDataIn;
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <HAL_UART_RxCpltCallback+0xe4>)
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <HAL_UART_RxCpltCallback+0xf0>)
 8001960:	701a      	strb	r2, [r3, #0]
		rxBufferDataCounter++;
 8001962:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <HAL_UART_RxCpltCallback+0xec>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	4a2c      	ldr	r2, [pc, #176]	; (8001a1c <HAL_UART_RxCpltCallback+0xec>)
 800196a:	6013      	str	r3, [r2, #0]
 800196c:	e04b      	b.n	8001a06 <HAL_UART_RxCpltCallback+0xd6>
	}
	else if(rxBufferDataCounter>0 && rxBufferDataCounter<8)
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_UART_RxCpltCallback+0xec>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00f      	beq.n	8001996 <HAL_UART_RxCpltCallback+0x66>
 8001976:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <HAL_UART_RxCpltCallback+0xec>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b07      	cmp	r3, #7
 800197c:	d80b      	bhi.n	8001996 <HAL_UART_RxCpltCallback+0x66>
	{
		rxBuffer[rxBufferDataCounter] = rxDataIn;
 800197e:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_UART_RxCpltCallback+0xec>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a24      	ldr	r2, [pc, #144]	; (8001a14 <HAL_UART_RxCpltCallback+0xe4>)
 8001984:	7811      	ldrb	r1, [r2, #0]
 8001986:	4a26      	ldr	r2, [pc, #152]	; (8001a20 <HAL_UART_RxCpltCallback+0xf0>)
 8001988:	54d1      	strb	r1, [r2, r3]
		rxBufferDataCounter++;
 800198a:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_UART_RxCpltCallback+0xec>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	4a22      	ldr	r2, [pc, #136]	; (8001a1c <HAL_UART_RxCpltCallback+0xec>)
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	e037      	b.n	8001a06 <HAL_UART_RxCpltCallback+0xd6>
	}
	else if(rxBufferDataCounter==8)
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_UART_RxCpltCallback+0xec>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b08      	cmp	r3, #8
 800199c:	d12f      	bne.n	80019fe <HAL_UART_RxCpltCallback+0xce>
	{
		/* checksum control */
		rxDataCheksum = 0;
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_UART_RxCpltCallback+0xf4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
		rxBuffer[rxBufferDataCounter] = rxDataIn;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_UART_RxCpltCallback+0xec>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a1a      	ldr	r2, [pc, #104]	; (8001a14 <HAL_UART_RxCpltCallback+0xe4>)
 80019aa:	7811      	ldrb	r1, [r2, #0]
 80019ac:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <HAL_UART_RxCpltCallback+0xf0>)
 80019ae:	54d1      	strb	r1, [r2, r3]
		for(i=1;i<9;i++)
 80019b0:	2301      	movs	r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e00c      	b.n	80019d0 <HAL_UART_RxCpltCallback+0xa0>
		{
			rxDataCheksum += rxBuffer[i];
 80019b6:	4a1a      	ldr	r2, [pc, #104]	; (8001a20 <HAL_UART_RxCpltCallback+0xf0>)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	781a      	ldrb	r2, [r3, #0]
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_UART_RxCpltCallback+0xf4>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_UART_RxCpltCallback+0xf4>)
 80019c8:	701a      	strb	r2, [r3, #0]
		for(i=1;i<9;i++)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	3301      	adds	r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d9ef      	bls.n	80019b6 <HAL_UART_RxCpltCallback+0x86>
		}
		if(rxDataCheksum==0)
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_UART_RxCpltCallback+0xf4>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <HAL_UART_RxCpltCallback+0xbc>
		{
			/* checkSum OK, process the command */
			checkCommand(rxBuffer);
 80019de:	4810      	ldr	r0, [pc, #64]	; (8001a20 <HAL_UART_RxCpltCallback+0xf0>)
 80019e0:	f7ff fcd4 	bl	800138c <checkCommand>
			rxBufferDataCounter = 0; /* test breakpoint icin */
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_UART_RxCpltCallback+0xec>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e004      	b.n	80019f6 <HAL_UART_RxCpltCallback+0xc6>
		}
		else
		{
			/* error, do nothing*/
			errorCounter++;
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_UART_RxCpltCallback+0xf8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3301      	adds	r3, #1
 80019f2:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <HAL_UART_RxCpltCallback+0xf8>)
 80019f4:	6013      	str	r3, [r2, #0]
		}
		rxBufferDataCounter = 0;
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_UART_RxCpltCallback+0xec>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		rxBufferDataCounter = 0;
	}
}
 80019fc:	e003      	b.n	8001a06 <HAL_UART_RxCpltCallback+0xd6>
		rxBufferDataCounter = 0;
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_UART_RxCpltCallback+0xec>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
}
 8001a04:	e7ff      	b.n	8001a06 <HAL_UART_RxCpltCallback+0xd6>
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000045c 	.word	0x2000045c
 8001a14:	20000372 	.word	0x20000372
 8001a18:	20000371 	.word	0x20000371
 8001a1c:	20000374 	.word	0x20000374
 8001a20:	20000378 	.word	0x20000378
 8001a24:	20000381 	.word	0x20000381
 8001a28:	20000384 	.word	0x20000384

08001a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a30:	b672      	cpsid	i
}
 8001a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <Error_Handler+0x8>
	...

08001a38 <MX_SDADC1_Init>:
SDADC_HandleTypeDef hsdadc1;
DMA_HandleTypeDef hdma_sdadc1;

/* SDADC1 init function */
void MX_SDADC1_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8001a3e:	463b      	mov	r3, r7
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
  /* USER CODE END SDADC1_Init 1 */

  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	; (8001b38 <MX_SDADC1_Init+0x100>)
 8001a4c:	4a3b      	ldr	r2, [pc, #236]	; (8001b3c <MX_SDADC1_Init+0x104>)
 8001a4e:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001a50:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <MX_SDADC1_Init+0x100>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8001a56:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <MX_SDADC1_Init+0x100>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8001a5c:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <MX_SDADC1_Init+0x100>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8001a62:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <MX_SDADC1_Init+0x100>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  hsdadc1.InjectedTrigger = SDADC_SOFTWARE_TRIGGER;
 8001a68:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <MX_SDADC1_Init+0x100>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8001a6e:	4832      	ldr	r0, [pc, #200]	; (8001b38 <MX_SDADC1_Init+0x100>)
 8001a70:	f003 fa7a 	bl	8004f68 <HAL_SDADC_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_SDADC1_Init+0x46>
  {
    Error_Handler();
 8001a7a:	f7ff ffd7 	bl	8001a2c <Error_Handler>
  }

  /** Configure the Injected Mode
  */
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc1, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 8001a7e:	2100      	movs	r1, #0
 8001a80:	482d      	ldr	r0, [pc, #180]	; (8001b38 <MX_SDADC1_Init+0x100>)
 8001a82:	f003 fc3d 	bl	8005300 <HAL_SDADC_SelectInjectedDelay>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_SDADC1_Init+0x58>
  {
    Error_Handler();
 8001a8c:	f7ff ffce 	bl	8001a2c <Error_Handler>
  }
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 8001a90:	2100      	movs	r1, #0
 8001a92:	4829      	ldr	r0, [pc, #164]	; (8001b38 <MX_SDADC1_Init+0x100>)
 8001a94:	f003 fc04 	bl	80052a0 <HAL_SDADC_SelectInjectedTrigger>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_SDADC1_Init+0x6a>
  {
    Error_Handler();
 8001a9e:	f7ff ffc5 	bl	8001a2c <Error_Handler>
  }
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc1, SDADC_CHANNEL_7|SDADC_CHANNEL_8
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	4926      	ldr	r1, [pc, #152]	; (8001b40 <MX_SDADC1_Init+0x108>)
 8001aa6:	4824      	ldr	r0, [pc, #144]	; (8001b38 <MX_SDADC1_Init+0x100>)
 8001aa8:	f003 fbbe 	bl	8005228 <HAL_SDADC_InjectedConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_SDADC1_Init+0x7e>
                              |SDADC_CHANNEL_4|SDADC_CHANNEL_5, SDADC_CONTINUOUS_CONV_OFF) != HAL_OK)
  {
    Error_Handler();
 8001ab2:	f7ff ffbb 	bl	8001a2c <Error_Handler>
  }

  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_OFFSET;
 8001ab6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001aba:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8001ac8:	463b      	mov	r3, r7
 8001aca:	461a      	mov	r2, r3
 8001acc:	2100      	movs	r1, #0
 8001ace:	481a      	ldr	r0, [pc, #104]	; (8001b38 <MX_SDADC1_Init+0x100>)
 8001ad0:	f003 fada 	bl	8005088 <HAL_SDADC_PrepareChannelConfig>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_SDADC1_Init+0xa6>
  {
    Error_Handler();
 8001ada:	f7ff ffa7 	bl	8001a2c <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_7, SDADC_CONF_INDEX_0) != HAL_OK)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4918      	ldr	r1, [pc, #96]	; (8001b44 <MX_SDADC1_Init+0x10c>)
 8001ae2:	4815      	ldr	r0, [pc, #84]	; (8001b38 <MX_SDADC1_Init+0x100>)
 8001ae4:	f003 fb0c 	bl	8005100 <HAL_SDADC_AssociateChannelConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_SDADC1_Init+0xba>
  {
    Error_Handler();
 8001aee:	f7ff ff9d 	bl	8001a2c <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_8, SDADC_CONF_INDEX_0) != HAL_OK)
 8001af2:	2200      	movs	r2, #0
 8001af4:	4914      	ldr	r1, [pc, #80]	; (8001b48 <MX_SDADC1_Init+0x110>)
 8001af6:	4810      	ldr	r0, [pc, #64]	; (8001b38 <MX_SDADC1_Init+0x100>)
 8001af8:	f003 fb02 	bl	8005100 <HAL_SDADC_AssociateChannelConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_SDADC1_Init+0xce>
  {
    Error_Handler();
 8001b02:	f7ff ff93 	bl	8001a2c <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONF_INDEX_0) != HAL_OK)
 8001b06:	2200      	movs	r2, #0
 8001b08:	4910      	ldr	r1, [pc, #64]	; (8001b4c <MX_SDADC1_Init+0x114>)
 8001b0a:	480b      	ldr	r0, [pc, #44]	; (8001b38 <MX_SDADC1_Init+0x100>)
 8001b0c:	f003 faf8 	bl	8005100 <HAL_SDADC_AssociateChannelConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_SDADC1_Init+0xe2>
  {
    Error_Handler();
 8001b16:	f7ff ff89 	bl	8001a2c <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONF_INDEX_0) != HAL_OK)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <MX_SDADC1_Init+0x118>)
 8001b1e:	4806      	ldr	r0, [pc, #24]	; (8001b38 <MX_SDADC1_Init+0x100>)
 8001b20:	f003 faee 	bl	8005100 <HAL_SDADC_AssociateChannelConfig>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_SDADC1_Init+0xf6>
  {
    Error_Handler();
 8001b2a:	f7ff ff7f 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000480 	.word	0x20000480
 8001b3c:	40016000 	.word	0x40016000
 8001b40:	000f01b0 	.word	0x000f01b0
 8001b44:	00070080 	.word	0x00070080
 8001b48:	00080100 	.word	0x00080100
 8001b4c:	00040010 	.word	0x00040010
 8001b50:	00050020 	.word	0x00050020

08001b54 <HAL_SDADC_MspInit>:

void HAL_SDADC_MspInit(SDADC_HandleTypeDef* sdadcHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(sdadcHandle->Instance==SDADC1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a36      	ldr	r2, [pc, #216]	; (8001c4c <HAL_SDADC_MspInit+0xf8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d165      	bne.n	8001c42 <HAL_SDADC_MspInit+0xee>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* SDADC1 clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8001b76:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_SDADC_MspInit+0xfc>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	4a35      	ldr	r2, [pc, #212]	; (8001c50 <HAL_SDADC_MspInit+0xfc>)
 8001b7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b80:	6193      	str	r3, [r2, #24]
 8001b82:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <HAL_SDADC_MspInit+0xfc>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <HAL_SDADC_MspInit+0xfc>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	4a2f      	ldr	r2, [pc, #188]	; (8001c50 <HAL_SDADC_MspInit+0xfc>)
 8001b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b98:	6153      	str	r3, [r2, #20]
 8001b9a:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_SDADC_MspInit+0xfc>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_SDADC_MspInit+0xfc>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4a29      	ldr	r2, [pc, #164]	; (8001c50 <HAL_SDADC_MspInit+0xfc>)
 8001bac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bb0:	6153      	str	r3, [r2, #20]
 8001bb2:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_SDADC_MspInit+0xfc>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> SDADC1_AIN5P
    PB2     ------> SDADC1_AIN4P
    PE8     ------> SDADC1_AIN8P
    PE9     ------> SDADC1_AIN7P
    */
    GPIO_InitStruct.Pin = AN_ADC4_Pin|AN_ADC3_Pin;
 8001bbe:	2306      	movs	r3, #6
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4820      	ldr	r0, [pc, #128]	; (8001c54 <HAL_SDADC_MspInit+0x100>)
 8001bd2:	f001 fbb7 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AN_ADC2_Pin|AN_ADC1_Pin;
 8001bd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	481b      	ldr	r0, [pc, #108]	; (8001c58 <HAL_SDADC_MspInit+0x104>)
 8001bec:	f001 fbaa 	bl	8003344 <HAL_GPIO_Init>

    /* SDADC1 DMA Init */
    /* SDADC1 Init */
    hdma_sdadc1.Instance = DMA2_Channel3;
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_SDADC_MspInit+0x108>)
 8001bf2:	4a1b      	ldr	r2, [pc, #108]	; (8001c60 <HAL_SDADC_MspInit+0x10c>)
 8001bf4:	601a      	str	r2, [r3, #0]
    hdma_sdadc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_SDADC_MspInit+0x108>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]
    hdma_sdadc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_SDADC_MspInit+0x108>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
    hdma_sdadc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c02:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_SDADC_MspInit+0x108>)
 8001c04:	2280      	movs	r2, #128	; 0x80
 8001c06:	60da      	str	r2, [r3, #12]
    hdma_sdadc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_SDADC_MspInit+0x108>)
 8001c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c0e:	611a      	str	r2, [r3, #16]
    hdma_sdadc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_SDADC_MspInit+0x108>)
 8001c12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c16:	615a      	str	r2, [r3, #20]
    hdma_sdadc1.Init.Mode = DMA_CIRCULAR;
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_SDADC_MspInit+0x108>)
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	619a      	str	r2, [r3, #24]
    hdma_sdadc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_SDADC_MspInit+0x108>)
 8001c20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c24:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_sdadc1) != HAL_OK)
 8001c26:	480d      	ldr	r0, [pc, #52]	; (8001c5c <HAL_SDADC_MspInit+0x108>)
 8001c28:	f001 f801 	bl	8002c2e <HAL_DMA_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_SDADC_MspInit+0xe2>
    {
      Error_Handler();
 8001c32:	f7ff fefb 	bl	8001a2c <Error_Handler>
    }

    __HAL_LINKDMA(sdadcHandle,hdma,hdma_sdadc1);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <HAL_SDADC_MspInit+0x108>)
 8001c3a:	615a      	str	r2, [r3, #20]
 8001c3c:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <HAL_SDADC_MspInit+0x108>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SDADC1_MspInit 1 */

  /* USER CODE END SDADC1_MspInit 1 */
  }
}
 8001c42:	bf00      	nop
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40016000 	.word	0x40016000
 8001c50:	40021000 	.word	0x40021000
 8001c54:	48000400 	.word	0x48000400
 8001c58:	48001000 	.word	0x48001000
 8001c5c:	200004c4 	.word	0x200004c4
 8001c60:	40020430 	.word	0x40020430

08001c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6193      	str	r3, [r2, #24]
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	61d3      	str	r3, [r2, #28]
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000

08001cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <NMI_Handler+0x4>

08001cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <HardFault_Handler+0x4>

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <MemManage_Handler+0x4>

08001cbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <BusFault_Handler+0x4>

08001cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <UsageFault_Handler+0x4>

08001cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf8:	f000 fa2e 	bl	8002158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <DMA1_Channel1_IRQHandler+0x10>)
 8001d06:	f001 f838 	bl	8002d7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000005c 	.word	0x2000005c

08001d14 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <DMA1_Channel3_IRQHandler+0x10>)
 8001d1a:	f001 f82e 	bl	8002d7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000628 	.word	0x20000628

08001d28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <TIM2_IRQHandler+0x10>)
 8001d2e:	f003 fd92 	bl	8005856 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000508 	.word	0x20000508

08001d3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <TIM3_IRQHandler+0x10>)
 8001d42:	f003 fd88 	bl	8005856 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000554 	.word	0x20000554

08001d50 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc1);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <DMA2_Channel3_IRQHandler+0x10>)
 8001d56:	f001 f810 	bl	8002d7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200004c4 	.word	0x200004c4

08001d64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <SystemInit+0x20>)
 8001d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6e:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <SystemInit+0x20>)
 8001d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8e:	f107 0308 	add.w	r3, r7, #8
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001da4:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <MX_TIM2_Init+0x94>)
 8001da6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001daa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <MX_TIM2_Init+0x94>)
 8001dae:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001db2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <MX_TIM2_Init+0x94>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 8001dba:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <MX_TIM2_Init+0x94>)
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc0:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <MX_TIM2_Init+0x94>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <MX_TIM2_Init+0x94>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dcc:	4813      	ldr	r0, [pc, #76]	; (8001e1c <MX_TIM2_Init+0x94>)
 8001dce:	f003 fcf3 	bl	80057b8 <HAL_TIM_Base_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001dd8:	f7ff fe28 	bl	8001a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	4619      	mov	r1, r3
 8001de8:	480c      	ldr	r0, [pc, #48]	; (8001e1c <MX_TIM2_Init+0x94>)
 8001dea:	f003 fe24 	bl	8005a36 <HAL_TIM_ConfigClockSource>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001df4:	f7ff fe1a 	bl	8001a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e00:	463b      	mov	r3, r7
 8001e02:	4619      	mov	r1, r3
 8001e04:	4805      	ldr	r0, [pc, #20]	; (8001e1c <MX_TIM2_Init+0x94>)
 8001e06:	f004 f84f 	bl	8005ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e10:	f7ff fe0c 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000508 	.word	0x20000508

08001e20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e34:	463b      	mov	r3, r7
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <MX_TIM3_Init+0x94>)
 8001e3e:	4a1e      	ldr	r2, [pc, #120]	; (8001eb8 <MX_TIM3_Init+0x98>)
 8001e40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4800;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <MX_TIM3_Init+0x94>)
 8001e44:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8001e48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <MX_TIM3_Init+0x94>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4;
 8001e50:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <MX_TIM3_Init+0x94>)
 8001e52:	2204      	movs	r2, #4
 8001e54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <MX_TIM3_Init+0x94>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5c:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <MX_TIM3_Init+0x94>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e62:	4814      	ldr	r0, [pc, #80]	; (8001eb4 <MX_TIM3_Init+0x94>)
 8001e64:	f003 fca8 	bl	80057b8 <HAL_TIM_Base_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001e6e:	f7ff fddd 	bl	8001a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e78:	f107 0308 	add.w	r3, r7, #8
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <MX_TIM3_Init+0x94>)
 8001e80:	f003 fdd9 	bl	8005a36 <HAL_TIM_ConfigClockSource>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001e8a:	f7ff fdcf 	bl	8001a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e96:	463b      	mov	r3, r7
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4806      	ldr	r0, [pc, #24]	; (8001eb4 <MX_TIM3_Init+0x94>)
 8001e9c:	f004 f804 	bl	8005ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001ea6:	f7ff fdc1 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000554 	.word	0x20000554
 8001eb8:	40000400 	.word	0x40000400

08001ebc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ecc:	d114      	bne.n	8001ef8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_TIM_Base_MspInit+0x78>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <HAL_TIM_Base_MspInit+0x78>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	61d3      	str	r3, [r2, #28]
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <HAL_TIM_Base_MspInit+0x78>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	201c      	movs	r0, #28
 8001eec:	f000 fe65 	bl	8002bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ef0:	201c      	movs	r0, #28
 8001ef2:	f000 fe7e 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ef6:	e018      	b.n	8001f2a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <HAL_TIM_Base_MspInit+0x7c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d113      	bne.n	8001f2a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_TIM_Base_MspInit+0x78>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <HAL_TIM_Base_MspInit+0x78>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	61d3      	str	r3, [r2, #28]
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_TIM_Base_MspInit+0x78>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	201d      	movs	r0, #29
 8001f20:	f000 fe4b 	bl	8002bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f24:	201d      	movs	r0, #29
 8001f26:	f000 fe64 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40000400 	.word	0x40000400

08001f3c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f40:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <MX_USART3_UART_Init+0x58>)
 8001f42:	4a15      	ldr	r2, [pc, #84]	; (8001f98 <MX_USART3_UART_Init+0x5c>)
 8001f44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f46:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <MX_USART3_UART_Init+0x58>)
 8001f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <MX_USART3_UART_Init+0x58>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <MX_USART3_UART_Init+0x58>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <MX_USART3_UART_Init+0x58>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <MX_USART3_UART_Init+0x58>)
 8001f62:	220c      	movs	r2, #12
 8001f64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <MX_USART3_UART_Init+0x58>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <MX_USART3_UART_Init+0x58>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <MX_USART3_UART_Init+0x58>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <MX_USART3_UART_Init+0x58>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <MX_USART3_UART_Init+0x58>)
 8001f80:	f004 f81a 	bl	8005fb8 <HAL_UART_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f8a:	f7ff fd4f 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200005a0 	.word	0x200005a0
 8001f98:	40004800 	.word	0x40004800

08001f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a2a      	ldr	r2, [pc, #168]	; (8002064 <HAL_UART_MspInit+0xc8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d14e      	bne.n	800205c <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_UART_MspInit+0xcc>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4a29      	ldr	r2, [pc, #164]	; (8002068 <HAL_UART_MspInit+0xcc>)
 8001fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc8:	61d3      	str	r3, [r2, #28]
 8001fca:	4b27      	ldr	r3, [pc, #156]	; (8002068 <HAL_UART_MspInit+0xcc>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd6:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_UART_MspInit+0xcc>)
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	4a23      	ldr	r2, [pc, #140]	; (8002068 <HAL_UART_MspInit+0xcc>)
 8001fdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001fe0:	6153      	str	r3, [r2, #20]
 8001fe2:	4b21      	ldr	r3, [pc, #132]	; (8002068 <HAL_UART_MspInit+0xcc>)
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002000:	2307      	movs	r3, #7
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4619      	mov	r1, r3
 800200a:	4818      	ldr	r0, [pc, #96]	; (800206c <HAL_UART_MspInit+0xd0>)
 800200c:	f001 f99a 	bl	8003344 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <HAL_UART_MspInit+0xd4>)
 8002012:	4a18      	ldr	r2, [pc, #96]	; (8002074 <HAL_UART_MspInit+0xd8>)
 8002014:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002016:	4b16      	ldr	r3, [pc, #88]	; (8002070 <HAL_UART_MspInit+0xd4>)
 8002018:	2200      	movs	r2, #0
 800201a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800201c:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_UART_MspInit+0xd4>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_UART_MspInit+0xd4>)
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_UART_MspInit+0xd4>)
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_UART_MspInit+0xd4>)
 8002030:	2200      	movs	r2, #0
 8002032:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_UART_MspInit+0xd4>)
 8002036:	2220      	movs	r2, #32
 8002038:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_UART_MspInit+0xd4>)
 800203c:	2200      	movs	r2, #0
 800203e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002040:	480b      	ldr	r0, [pc, #44]	; (8002070 <HAL_UART_MspInit+0xd4>)
 8002042:	f000 fdf4 	bl	8002c2e <HAL_DMA_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 800204c:	f7ff fcee 	bl	8001a2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a07      	ldr	r2, [pc, #28]	; (8002070 <HAL_UART_MspInit+0xd4>)
 8002054:	675a      	str	r2, [r3, #116]	; 0x74
 8002056:	4a06      	ldr	r2, [pc, #24]	; (8002070 <HAL_UART_MspInit+0xd4>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800205c:	bf00      	nop
 800205e:	3728      	adds	r7, #40	; 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40004800 	.word	0x40004800
 8002068:	40021000 	.word	0x40021000
 800206c:	48000800 	.word	0x48000800
 8002070:	20000628 	.word	0x20000628
 8002074:	40020030 	.word	0x40020030

08002078 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800207c:	f7ff fe72 	bl	8001d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002080:	480c      	ldr	r0, [pc, #48]	; (80020b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002082:	490d      	ldr	r1, [pc, #52]	; (80020b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002084:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <LoopForever+0xe>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002088:	e002      	b.n	8002090 <LoopCopyDataInit>

0800208a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800208c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208e:	3304      	adds	r3, #4

08002090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002094:	d3f9      	bcc.n	800208a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002098:	4c0a      	ldr	r4, [pc, #40]	; (80020c4 <LoopForever+0x16>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800209c:	e001      	b.n	80020a2 <LoopFillZerobss>

0800209e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a0:	3204      	adds	r2, #4

080020a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a4:	d3fb      	bcc.n	800209e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020a6:	f004 fe19 	bl	8006cdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020aa:	f7fe faeb 	bl	8000684 <main>

080020ae <LoopForever>:

LoopForever:
    b LoopForever
 80020ae:	e7fe      	b.n	80020ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020b0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80020b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80020bc:	08006d7c 	.word	0x08006d7c
  ldr r2, =_sbss
 80020c0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80020c4:	20000690 	.word	0x20000690

080020c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020c8:	e7fe      	b.n	80020c8 <ADC1_IRQHandler>
	...

080020cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_Init+0x28>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <HAL_Init+0x28>)
 80020d6:	f043 0310 	orr.w	r3, r3, #16
 80020da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020dc:	2003      	movs	r0, #3
 80020de:	f000 fd61 	bl	8002ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f000 f808 	bl	80020f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e8:	f7ff fdbc 	bl	8001c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40022000 	.word	0x40022000

080020f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_InitTick+0x54>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_InitTick+0x58>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fd7d 	bl	8002c16 <HAL_SYSTICK_Config>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e00e      	b.n	8002144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b0f      	cmp	r3, #15
 800212a:	d80a      	bhi.n	8002142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800212c:	2200      	movs	r2, #0
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	f000 fd41 	bl	8002bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002138:	4a06      	ldr	r2, [pc, #24]	; (8002154 <HAL_InitTick+0x5c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000004 	.word	0x20000004
 8002150:	2000000c 	.word	0x2000000c
 8002154:	20000008 	.word	0x20000008

08002158 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_IncTick+0x20>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_IncTick+0x24>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4413      	add	r3, r2
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <HAL_IncTick+0x24>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	2000000c 	.word	0x2000000c
 800217c:	2000066c 	.word	0x2000066c

08002180 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return uwTick;  
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_GetTick+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	2000066c 	.word	0x2000066c

08002198 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a0:	f7ff ffee 	bl	8002180 <HAL_GetTick>
 80021a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d005      	beq.n	80021be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_Delay+0x44>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4413      	add	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021be:	bf00      	nop
 80021c0:	f7ff ffde 	bl	8002180 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d8f7      	bhi.n	80021c0 <HAL_Delay+0x28>
  {
  }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	2000000c 	.word	0x2000000c

080021e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e0be      	b.n	8002380 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	2b00      	cmp	r3, #0
 800220e:	d109      	bne.n	8002224 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe f83c 	bl	800029c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fa9b 	bl	8002760 <ADC_ConversionStop_Disable>
 800222a:	4603      	mov	r3, r0
 800222c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 8099 	bne.w	800236e <HAL_ADC_Init+0x18e>
 800223c:	7dfb      	ldrb	r3, [r7, #23]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f040 8095 	bne.w	800236e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800224c:	f023 0302 	bic.w	r3, r3, #2
 8002250:	f043 0202 	orr.w	r2, r3, #2
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8002260:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7b1b      	ldrb	r3, [r3, #12]
 8002266:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 8002268:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	4313      	orrs	r3, r2
 800226e:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002278:	d003      	beq.n	8002282 <HAL_ADC_Init+0xa2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d102      	bne.n	8002288 <HAL_ADC_Init+0xa8>
 8002282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002286:	e000      	b.n	800228a <HAL_ADC_Init+0xaa>
 8002288:	2300      	movs	r3, #0
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7d1b      	ldrb	r3, [r3, #20]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d119      	bne.n	80022cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	7b1b      	ldrb	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d109      	bne.n	80022b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	e00b      	b.n	80022cc <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	f043 0220 	orr.w	r2, r3, #32
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	f043 0201 	orr.w	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	430a      	orrs	r2, r1
 80022de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	4b28      	ldr	r3, [pc, #160]	; (8002388 <HAL_ADC_Init+0x1a8>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6812      	ldr	r2, [r2, #0]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	430b      	orrs	r3, r1
 80022f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022fc:	d003      	beq.n	8002306 <HAL_ADC_Init+0x126>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d104      	bne.n	8002310 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	3b01      	subs	r3, #1
 800230c:	051b      	lsls	r3, r3, #20
 800230e:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	430a      	orrs	r2, r1
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_ADC_Init+0x1ac>)
 800232c:	4013      	ands	r3, r2
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	429a      	cmp	r2, r3
 8002332:	d10b      	bne.n	800234c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	f023 0303 	bic.w	r3, r3, #3
 8002342:	f043 0201 	orr.w	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800234a:	e018      	b.n	800237e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	f023 0312 	bic.w	r3, r3, #18
 8002354:	f043 0210 	orr.w	r2, r3, #16
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800236c:	e007      	b.n	800237e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	f043 0210 	orr.w	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800237e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	ffe1f7fd 	.word	0xffe1f7fd
 800238c:	ff1f0efe 	.word	0xff1f0efe

08002390 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_ADCEx_Calibration_Start+0x1e>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e08a      	b.n	80024c4 <HAL_ADCEx_Calibration_Start+0x134>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f9d2 	bl	8002760 <ADC_ConversionStop_Disable>
 80023bc:	4603      	mov	r3, r0
 80023be:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d179      	bne.n	80024ba <HAL_ADCEx_Calibration_Start+0x12a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023ce:	f023 0302 	bic.w	r3, r3, #2
 80023d2:	f043 0202 	orr.w	r2, r3, #2
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Wait two ADC clock cycles */
    while(wait_loop_index < ADC_CYCLE_WORST_CASE_CPU_CYCLES *2U)
 80023da:	e002      	b.n	80023e2 <HAL_ADCEx_Calibration_Start+0x52>
    {
      wait_loop_index++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	3301      	adds	r3, #1
 80023e0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index < ADC_CYCLE_WORST_CASE_CPU_CYCLES *2U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2bff      	cmp	r3, #255	; 0xff
 80023e6:	d9f9      	bls.n	80023dc <HAL_ADCEx_Calibration_Start+0x4c>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f95f 	bl	80026ac <ADC_Enable>
    

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0208 	orr.w	r2, r2, #8
 80023fc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80023fe:	f7ff febf 	bl	8002180 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002404:	e01b      	b.n	800243e <HAL_ADCEx_Calibration_Start+0xae>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002406:	f7ff febb 	bl	8002180 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b0a      	cmp	r3, #10
 8002412:	d914      	bls.n	800243e <HAL_ADCEx_Calibration_Start+0xae>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b08      	cmp	r3, #8
 8002420:	d10d      	bne.n	800243e <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	f023 0312 	bic.w	r3, r3, #18
 800242a:	f043 0210 	orr.w	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e042      	b.n	80024c4 <HAL_ADCEx_Calibration_Start+0x134>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b08      	cmp	r3, #8
 800244a:	d0dc      	beq.n	8002406 <HAL_ADCEx_Calibration_Start+0x76>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 0204 	orr.w	r2, r2, #4
 800245a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800245c:	f7ff fe90 	bl	8002180 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002462:	e01b      	b.n	800249c <HAL_ADCEx_Calibration_Start+0x10c>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002464:	f7ff fe8c 	bl	8002180 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b0a      	cmp	r3, #10
 8002470:	d914      	bls.n	800249c <HAL_ADCEx_Calibration_Start+0x10c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b04      	cmp	r3, #4
 800247e:	d10d      	bne.n	800249c <HAL_ADCEx_Calibration_Start+0x10c>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	f023 0312 	bic.w	r3, r3, #18
 8002488:	f043 0210 	orr.w	r2, r3, #16
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;            
 8002498:	2301      	movs	r3, #1
 800249a:	e013      	b.n	80024c4 <HAL_ADCEx_Calibration_Start+0x134>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d0dc      	beq.n	8002464 <HAL_ADCEx_Calibration_Start+0xd4>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	f023 0303 	bic.w	r3, r3, #3
 80024b2:	f043 0201 	orr.w	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x20>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e0d2      	b.n	8002692 <HAL_ADC_ConfigChannel+0x1c6>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b06      	cmp	r3, #6
 80024fa:	d81c      	bhi.n	8002536 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	3b05      	subs	r3, #5
 800250e:	221f      	movs	r2, #31
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	4019      	ands	r1, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	3b05      	subs	r3, #5
 8002528:	fa00 f203 	lsl.w	r2, r0, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	635a      	str	r2, [r3, #52]	; 0x34
 8002534:	e03c      	b.n	80025b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d81c      	bhi.n	8002578 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	3b23      	subs	r3, #35	; 0x23
 8002550:	221f      	movs	r2, #31
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	4019      	ands	r1, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	3b23      	subs	r3, #35	; 0x23
 800256a:	fa00 f203 	lsl.w	r2, r0, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	631a      	str	r2, [r3, #48]	; 0x30
 8002576:	e01b      	b.n	80025b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	3b41      	subs	r3, #65	; 0x41
 800258a:	221f      	movs	r2, #31
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	4019      	ands	r1, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	3b41      	subs	r3, #65	; 0x41
 80025a4:	fa00 f203 	lsl.w	r2, r0, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b0a      	cmp	r3, #10
 80025b6:	d91c      	bls.n	80025f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68d9      	ldr	r1, [r3, #12]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4613      	mov	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	3b1e      	subs	r3, #30
 80025ca:	2207      	movs	r2, #7
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	4019      	ands	r1, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	6898      	ldr	r0, [r3, #8]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4613      	mov	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	3b1e      	subs	r3, #30
 80025e4:	fa00 f203 	lsl.w	r2, r0, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	60da      	str	r2, [r3, #12]
 80025f0:	e019      	b.n	8002626 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6919      	ldr	r1, [r3, #16]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	2207      	movs	r2, #7
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	4019      	ands	r1, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6898      	ldr	r0, [r3, #8]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	fa00 f203 	lsl.w	r2, r0, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b10      	cmp	r3, #16
 800262c:	d003      	beq.n	8002636 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002632:	2b11      	cmp	r3, #17
 8002634:	d11e      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002644:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b10      	cmp	r3, #16
 800264c:	d11c      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <HAL_ADC_ConfigChannel+0x1d4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <HAL_ADC_ConfigChannel+0x1d8>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	0c9a      	lsrs	r2, r3, #18
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8002664:	e002      	b.n	800266c <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	3b01      	subs	r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f9      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002672:	e009      	b.n	8002688 <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b12      	cmp	r3, #18
 800267a:	d105      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <HAL_ADC_ConfigChannel+0x1dc>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <HAL_ADC_ConfigChannel+0x1dc>)
 8002682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002686:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002690:	7bfb      	ldrb	r3, [r7, #15]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000004 	.word	0x20000004
 80026a4:	431bde83 	.word	0x431bde83
 80026a8:	40010000 	.word	0x40010000

080026ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d040      	beq.n	800274c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026da:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <ADC_Enable+0xac>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a1f      	ldr	r2, [pc, #124]	; (800275c <ADC_Enable+0xb0>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	0c9b      	lsrs	r3, r3, #18
 80026e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026e8:	e002      	b.n	80026f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f9      	bne.n	80026ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026f6:	f7ff fd43 	bl	8002180 <HAL_GetTick>
 80026fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026fc:	e01f      	b.n	800273e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026fe:	f7ff fd3f 	bl	8002180 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d918      	bls.n	800273e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d011      	beq.n	800273e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	f043 0210 	orr.w	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	f043 0201 	orr.w	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e007      	b.n	800274e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d1d8      	bne.n	80026fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000004 	.word	0x20000004
 800275c:	431bde83 	.word	0x431bde83

08002760 <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b01      	cmp	r3, #1
 8002778:	d12e      	bne.n	80027d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0201 	bic.w	r2, r2, #1
 8002788:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800278a:	f7ff fcf9 	bl	8002180 <HAL_GetTick>
 800278e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002790:	e01b      	b.n	80027ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002792:	f7ff fcf5 	bl	8002180 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d914      	bls.n	80027ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d10d      	bne.n	80027ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b2:	f043 0210 	orr.w	r2, r3, #16
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	f043 0201 	orr.w	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e007      	b.n	80027da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d0dc      	beq.n	8002792 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0ed      	b.n	80029d0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7fd fe1f 	bl	8000444 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002816:	f7ff fcb3 	bl	8002180 <HAL_GetTick>
 800281a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800281c:	e012      	b.n	8002844 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800281e:	f7ff fcaf 	bl	8002180 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b0a      	cmp	r3, #10
 800282a:	d90b      	bls.n	8002844 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2205      	movs	r2, #5
 800283c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0c5      	b.n	80029d0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0e5      	beq.n	800281e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0202 	bic.w	r2, r2, #2
 8002860:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002862:	f7ff fc8d 	bl	8002180 <HAL_GetTick>
 8002866:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002868:	e012      	b.n	8002890 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800286a:	f7ff fc89 	bl	8002180 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b0a      	cmp	r3, #10
 8002876:	d90b      	bls.n	8002890 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2205      	movs	r2, #5
 8002888:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e09f      	b.n	80029d0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1e5      	bne.n	800286a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	7e1b      	ldrb	r3, [r3, #24]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d108      	bne.n	80028b8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	e007      	b.n	80028c8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	7e5b      	ldrb	r3, [r3, #25]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d108      	bne.n	80028e2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e007      	b.n	80028f2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	7e9b      	ldrb	r3, [r3, #26]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d108      	bne.n	800290c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0220 	orr.w	r2, r2, #32
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	e007      	b.n	800291c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0220 	bic.w	r2, r2, #32
 800291a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7edb      	ldrb	r3, [r3, #27]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d108      	bne.n	8002936 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0210 	bic.w	r2, r2, #16
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e007      	b.n	8002946 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0210 	orr.w	r2, r2, #16
 8002944:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	7f1b      	ldrb	r3, [r3, #28]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d108      	bne.n	8002960 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 0208 	orr.w	r2, r2, #8
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	e007      	b.n	8002970 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0208 	bic.w	r2, r2, #8
 800296e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	7f5b      	ldrb	r3, [r3, #29]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d108      	bne.n	800298a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0204 	orr.w	r2, r2, #4
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	e007      	b.n	800299a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0204 	bic.w	r2, r2, #4
 8002998:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	ea42 0103 	orr.w	r1, r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	1e5a      	subs	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <__NVIC_SetPriorityGrouping+0x44>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029f4:	4013      	ands	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0a:	4a04      	ldr	r2, [pc, #16]	; (8002a1c <__NVIC_SetPriorityGrouping+0x44>)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	60d3      	str	r3, [r2, #12]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a24:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <__NVIC_GetPriorityGrouping+0x18>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	f003 0307 	and.w	r3, r3, #7
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	db0b      	blt.n	8002a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	f003 021f 	and.w	r2, r3, #31
 8002a54:	4907      	ldr	r1, [pc, #28]	; (8002a74 <__NVIC_EnableIRQ+0x38>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000e100 	.word	0xe000e100

08002a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	6039      	str	r1, [r7, #0]
 8002a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	db0a      	blt.n	8002aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	490c      	ldr	r1, [pc, #48]	; (8002ac4 <__NVIC_SetPriority+0x4c>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	0112      	lsls	r2, r2, #4
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa0:	e00a      	b.n	8002ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4908      	ldr	r1, [pc, #32]	; (8002ac8 <__NVIC_SetPriority+0x50>)
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	3b04      	subs	r3, #4
 8002ab0:	0112      	lsls	r2, r2, #4
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	761a      	strb	r2, [r3, #24]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000e100 	.word	0xe000e100
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f1c3 0307 	rsb	r3, r3, #7
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	bf28      	it	cs
 8002aea:	2304      	movcs	r3, #4
 8002aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3304      	adds	r3, #4
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d902      	bls.n	8002afc <NVIC_EncodePriority+0x30>
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3b03      	subs	r3, #3
 8002afa:	e000      	b.n	8002afe <NVIC_EncodePriority+0x32>
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	f04f 32ff 	mov.w	r2, #4294967295
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	401a      	ands	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b14:	f04f 31ff 	mov.w	r1, #4294967295
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	43d9      	mvns	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b24:	4313      	orrs	r3, r2
         );
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3724      	adds	r7, #36	; 0x24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b38:	f3bf 8f4f 	dsb	sy
}
 8002b3c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <__NVIC_SystemReset+0x24>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b46:	4904      	ldr	r1, [pc, #16]	; (8002b58 <__NVIC_SystemReset+0x24>)
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <__NVIC_SystemReset+0x28>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b4e:	f3bf 8f4f 	dsb	sy
}
 8002b52:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002b54:	bf00      	nop
 8002b56:	e7fd      	b.n	8002b54 <__NVIC_SystemReset+0x20>
 8002b58:	e000ed00 	.word	0xe000ed00
 8002b5c:	05fa0004 	.word	0x05fa0004

08002b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b70:	d301      	bcc.n	8002b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b72:	2301      	movs	r3, #1
 8002b74:	e00f      	b.n	8002b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b76:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <SysTick_Config+0x40>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b7e:	210f      	movs	r1, #15
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	f7ff ff78 	bl	8002a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <SysTick_Config+0x40>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8e:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <SysTick_Config+0x40>)
 8002b90:	2207      	movs	r2, #7
 8002b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	e000e010 	.word	0xe000e010

08002ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ff13 	bl	80029d8 <__NVIC_SetPriorityGrouping>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bcc:	f7ff ff28 	bl	8002a20 <__NVIC_GetPriorityGrouping>
 8002bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	6978      	ldr	r0, [r7, #20]
 8002bd8:	f7ff ff78 	bl	8002acc <NVIC_EncodePriority>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff47 	bl	8002a78 <__NVIC_SetPriority>
}
 8002bea:	bf00      	nop
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff1b 	bl	8002a3c <__NVIC_EnableIRQ>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002c12:	f7ff ff8f 	bl	8002b34 <__NVIC_SystemReset>

08002c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ff9e 	bl	8002b60 <SysTick_Config>
 8002c24:	4603      	mov	r3, r0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e037      	b.n	8002cb4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f940 	bl	8002f1c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_DMA_Start_IT+0x20>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e04a      	b.n	8002d72 <HAL_DMA_Start_IT+0xb6>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d13a      	bne.n	8002d64 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f8d4 	bl	8002ec0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 020e 	orr.w	r2, r2, #14
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	e00f      	b.n	8002d52 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 020a 	orr.w	r2, r2, #10
 8002d40:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0204 	bic.w	r2, r2, #4
 8002d50:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e005      	b.n	8002d70 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2204      	movs	r2, #4
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d024      	beq.n	8002dec <HAL_DMA_IRQHandler+0x72>
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01f      	beq.n	8002dec <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d107      	bne.n	8002dca <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0204 	bic.w	r2, r2, #4
 8002dc8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	2104      	movs	r1, #4
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d06a      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002dea:	e065      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	2202      	movs	r2, #2
 8002df2:	409a      	lsls	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d02c      	beq.n	8002e56 <HAL_DMA_IRQHandler+0xdc>
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d027      	beq.n	8002e56 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10b      	bne.n	8002e2c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 020a 	bic.w	r2, r2, #10
 8002e22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e34:	2102      	movs	r1, #2
 8002e36:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d035      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e54:	e030      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d028      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x13e>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d023      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 020e 	bic.w	r2, r2, #14
 8002e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	2101      	movs	r1, #1
 8002e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
    }
  }
}
 8002eb6:	e7ff      	b.n	8002eb8 <HAL_DMA_IRQHandler+0x13e>
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8002edc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b10      	cmp	r3, #16
 8002eec:	d108      	bne.n	8002f00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002efe:	e007      	b.n	8002f10 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	60da      	str	r2, [r3, #12]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <DMA_CalcBaseAndBitshift+0x60>)
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d80f      	bhi.n	8002f50 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	461a      	mov	r2, r3
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <DMA_CalcBaseAndBitshift+0x64>)
 8002f38:	4413      	add	r3, r2
 8002f3a:	4a12      	ldr	r2, [pc, #72]	; (8002f84 <DMA_CalcBaseAndBitshift+0x68>)
 8002f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	009a      	lsls	r2, r3, #2
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a0f      	ldr	r2, [pc, #60]	; (8002f88 <DMA_CalcBaseAndBitshift+0x6c>)
 8002f4c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002f4e:	e00e      	b.n	8002f6e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <DMA_CalcBaseAndBitshift+0x70>)
 8002f58:	4413      	add	r3, r2
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <DMA_CalcBaseAndBitshift+0x68>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	009a      	lsls	r2, r3, #2
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <DMA_CalcBaseAndBitshift+0x74>)
 8002f6c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40020407 	.word	0x40020407
 8002f80:	bffdfff8 	.word	0xbffdfff8
 8002f84:	cccccccd 	.word	0xcccccccd
 8002f88:	40020000 	.word	0x40020000
 8002f8c:	bffdfbf8 	.word	0xbffdfbf8
 8002f90:	40020400 	.word	0x40020400

08002f94 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002fae:	4b2f      	ldr	r3, [pc, #188]	; (800306c <HAL_FLASH_Program+0xd8>)
 8002fb0:	7e1b      	ldrb	r3, [r3, #24]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_FLASH_Program+0x26>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e054      	b.n	8003064 <HAL_FLASH_Program+0xd0>
 8002fba:	4b2c      	ldr	r3, [pc, #176]	; (800306c <HAL_FLASH_Program+0xd8>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002fc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fc4:	f000 f8a8 	bl	8003118 <FLASH_WaitForLastOperation>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002fcc:	7dfb      	ldrb	r3, [r7, #23]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d144      	bne.n	800305c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d102      	bne.n	8002fde <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	757b      	strb	r3, [r7, #21]
 8002fdc:	e007      	b.n	8002fee <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d102      	bne.n	8002fea <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	757b      	strb	r3, [r7, #21]
 8002fe8:	e001      	b.n	8002fee <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002fea:	2304      	movs	r3, #4
 8002fec:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75bb      	strb	r3, [r7, #22]
 8002ff2:	e02d      	b.n	8003050 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002ff4:	7dbb      	ldrb	r3, [r7, #22]
 8002ff6:	005a      	lsls	r2, r3, #1
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	eb02 0c03 	add.w	ip, r2, r3
 8002ffe:	7dbb      	ldrb	r3, [r7, #22]
 8003000:	0119      	lsls	r1, r3, #4
 8003002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003006:	f1c1 0620 	rsb	r6, r1, #32
 800300a:	f1a1 0020 	sub.w	r0, r1, #32
 800300e:	fa22 f401 	lsr.w	r4, r2, r1
 8003012:	fa03 f606 	lsl.w	r6, r3, r6
 8003016:	4334      	orrs	r4, r6
 8003018:	fa23 f000 	lsr.w	r0, r3, r0
 800301c:	4304      	orrs	r4, r0
 800301e:	fa23 f501 	lsr.w	r5, r3, r1
 8003022:	b2a3      	uxth	r3, r4
 8003024:	4619      	mov	r1, r3
 8003026:	4660      	mov	r0, ip
 8003028:	f000 f85a 	bl	80030e0 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800302c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003030:	f000 f872 	bl	8003118 <FLASH_WaitForLastOperation>
 8003034:	4603      	mov	r3, r0
 8003036:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <HAL_FLASH_Program+0xdc>)
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <HAL_FLASH_Program+0xdc>)
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d107      	bne.n	800305a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800304a:	7dbb      	ldrb	r3, [r7, #22]
 800304c:	3301      	adds	r3, #1
 800304e:	75bb      	strb	r3, [r7, #22]
 8003050:	7dba      	ldrb	r2, [r7, #22]
 8003052:	7d7b      	ldrb	r3, [r7, #21]
 8003054:	429a      	cmp	r2, r3
 8003056:	d3cd      	bcc.n	8002ff4 <HAL_FLASH_Program+0x60>
 8003058:	e000      	b.n	800305c <HAL_FLASH_Program+0xc8>
      {
        break;
 800305a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800305c:	4b03      	ldr	r3, [pc, #12]	; (800306c <HAL_FLASH_Program+0xd8>)
 800305e:	2200      	movs	r2, #0
 8003060:	761a      	strb	r2, [r3, #24]

  return status;
 8003062:	7dfb      	ldrb	r3, [r7, #23]
}
 8003064:	4618      	mov	r0, r3
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800306c:	20000670 	.word	0x20000670
 8003070:	40022000 	.word	0x40022000

08003074 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800307e:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <HAL_FLASH_Unlock+0x40>)
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800308a:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <HAL_FLASH_Unlock+0x40>)
 800308c:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <HAL_FLASH_Unlock+0x44>)
 800308e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003090:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_FLASH_Unlock+0x40>)
 8003092:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <HAL_FLASH_Unlock+0x48>)
 8003094:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <HAL_FLASH_Unlock+0x40>)
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80030a6:	79fb      	ldrb	r3, [r7, #7]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	40022000 	.word	0x40022000
 80030b8:	45670123 	.word	0x45670123
 80030bc:	cdef89ab 	.word	0xcdef89ab

080030c0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <HAL_FLASH_Lock+0x1c>)
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	4a04      	ldr	r2, [pc, #16]	; (80030dc <HAL_FLASH_Lock+0x1c>)
 80030ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ce:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	40022000 	.word	0x40022000

080030e0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <FLASH_Program_HalfWord+0x30>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80030f2:	4b08      	ldr	r3, [pc, #32]	; (8003114 <FLASH_Program_HalfWord+0x34>)
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	4a07      	ldr	r2, [pc, #28]	; (8003114 <FLASH_Program_HalfWord+0x34>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	887a      	ldrh	r2, [r7, #2]
 8003102:	801a      	strh	r2, [r3, #0]
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	20000670 	.word	0x20000670
 8003114:	40022000 	.word	0x40022000

08003118 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003120:	f7ff f82e 	bl	8002180 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003126:	e010      	b.n	800314a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312e:	d00c      	beq.n	800314a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <FLASH_WaitForLastOperation+0x2e>
 8003136:	f7ff f823 	bl	8002180 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	429a      	cmp	r2, r3
 8003144:	d201      	bcs.n	800314a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e01f      	b.n	800318a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <FLASH_WaitForLastOperation+0x7c>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b01      	cmp	r3, #1
 8003154:	d0e8      	beq.n	8003128 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003156:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <FLASH_WaitForLastOperation+0x7c>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b20      	cmp	r3, #32
 8003160:	d102      	bne.n	8003168 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <FLASH_WaitForLastOperation+0x7c>)
 8003164:	2220      	movs	r2, #32
 8003166:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <FLASH_WaitForLastOperation+0x7c>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2b10      	cmp	r3, #16
 8003172:	d005      	beq.n	8003180 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003174:	4b07      	ldr	r3, [pc, #28]	; (8003194 <FLASH_WaitForLastOperation+0x7c>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800317c:	2b04      	cmp	r3, #4
 800317e:	d103      	bne.n	8003188 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003180:	f000 f80a 	bl	8003198 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40022000 	.word	0x40022000

08003198 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80031a2:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <FLASH_SetErrorCode+0x5c>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b10      	cmp	r3, #16
 80031ac:	d109      	bne.n	80031c2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <FLASH_SetErrorCode+0x60>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f043 0302 	orr.w	r3, r3, #2
 80031b6:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <FLASH_SetErrorCode+0x60>)
 80031b8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f043 0310 	orr.w	r3, r3, #16
 80031c0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80031c2:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <FLASH_SetErrorCode+0x5c>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d109      	bne.n	80031e2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <FLASH_SetErrorCode+0x60>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	4a08      	ldr	r2, [pc, #32]	; (80031f8 <FLASH_SetErrorCode+0x60>)
 80031d8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f043 0304 	orr.w	r3, r3, #4
 80031e0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80031e2:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <FLASH_SetErrorCode+0x5c>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	60d3      	str	r3, [r2, #12]
}  
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	40022000 	.word	0x40022000
 80031f8:	20000670 	.word	0x20000670

080031fc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800320e:	4b2e      	ldr	r3, [pc, #184]	; (80032c8 <HAL_FLASHEx_Erase+0xcc>)
 8003210:	7e1b      	ldrb	r3, [r3, #24]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_FLASHEx_Erase+0x1e>
 8003216:	2302      	movs	r3, #2
 8003218:	e052      	b.n	80032c0 <HAL_FLASHEx_Erase+0xc4>
 800321a:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <HAL_FLASHEx_Erase+0xcc>)
 800321c:	2201      	movs	r2, #1
 800321e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d115      	bne.n	8003254 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003228:	f24c 3050 	movw	r0, #50000	; 0xc350
 800322c:	f7ff ff74 	bl	8003118 <FLASH_WaitForLastOperation>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d140      	bne.n	80032b8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8003236:	f000 f84b 	bl	80032d0 <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800323a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800323e:	f7ff ff6b 	bl	8003118 <FLASH_WaitForLastOperation>
 8003242:	4603      	mov	r3, r0
 8003244:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003246:	4b21      	ldr	r3, [pc, #132]	; (80032cc <HAL_FLASHEx_Erase+0xd0>)
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	4a20      	ldr	r2, [pc, #128]	; (80032cc <HAL_FLASHEx_Erase+0xd0>)
 800324c:	f023 0304 	bic.w	r3, r3, #4
 8003250:	6113      	str	r3, [r2, #16]
 8003252:	e031      	b.n	80032b8 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003254:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003258:	f7ff ff5e 	bl	8003118 <FLASH_WaitForLastOperation>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d12a      	bne.n	80032b8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	f04f 32ff 	mov.w	r2, #4294967295
 8003268:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	e019      	b.n	80032a6 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003272:	68b8      	ldr	r0, [r7, #8]
 8003274:	f000 f846 	bl	8003304 <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003278:	f24c 3050 	movw	r0, #50000	; 0xc350
 800327c:	f7ff ff4c 	bl	8003118 <FLASH_WaitForLastOperation>
 8003280:	4603      	mov	r3, r0
 8003282:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_FLASHEx_Erase+0xd0>)
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	4a10      	ldr	r2, [pc, #64]	; (80032cc <HAL_FLASHEx_Erase+0xd0>)
 800328a:	f023 0302 	bic.w	r3, r3, #2
 800328e:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	601a      	str	r2, [r3, #0]
            break;
 800329c:	e00c      	b.n	80032b8 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	02da      	lsls	r2, r3, #11
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d3dc      	bcc.n	8003272 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <HAL_FLASHEx_Erase+0xcc>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	761a      	strb	r2, [r3, #24]

  return status;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000670 	.word	0x20000670
 80032cc:	40022000 	.word	0x40022000

080032d0 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <FLASH_MassErase+0x2c>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <FLASH_MassErase+0x30>)
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	4a08      	ldr	r2, [pc, #32]	; (8003300 <FLASH_MassErase+0x30>)
 80032e0:	f043 0304 	orr.w	r3, r3, #4
 80032e4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <FLASH_MassErase+0x30>)
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	4a05      	ldr	r2, [pc, #20]	; (8003300 <FLASH_MassErase+0x30>)
 80032ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032f0:	6113      	str	r3, [r2, #16]
}
 80032f2:	bf00      	nop
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	20000670 	.word	0x20000670
 8003300:	40022000 	.word	0x40022000

08003304 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <FLASH_PageErase+0x38>)
 800330e:	2200      	movs	r2, #0
 8003310:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <FLASH_PageErase+0x3c>)
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <FLASH_PageErase+0x3c>)
 8003318:	f043 0302 	orr.w	r3, r3, #2
 800331c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800331e:	4a08      	ldr	r2, [pc, #32]	; (8003340 <FLASH_PageErase+0x3c>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003324:	4b06      	ldr	r3, [pc, #24]	; (8003340 <FLASH_PageErase+0x3c>)
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	4a05      	ldr	r2, [pc, #20]	; (8003340 <FLASH_PageErase+0x3c>)
 800332a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800332e:	6113      	str	r3, [r2, #16]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	20000670 	.word	0x20000670
 8003340:	40022000 	.word	0x40022000

08003344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003352:	e154      	b.n	80035fe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2101      	movs	r1, #1
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	4013      	ands	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8146 	beq.w	80035f8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d005      	beq.n	8003384 <HAL_GPIO_Init+0x40>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d130      	bne.n	80033e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2203      	movs	r2, #3
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033ba:	2201      	movs	r2, #1
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4013      	ands	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	f003 0201 	and.w	r2, r3, #1
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d017      	beq.n	8003422 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	2203      	movs	r2, #3
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d123      	bne.n	8003476 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	08da      	lsrs	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3208      	adds	r2, #8
 8003436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	220f      	movs	r2, #15
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4013      	ands	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	08da      	lsrs	r2, r3, #3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3208      	adds	r2, #8
 8003470:	6939      	ldr	r1, [r7, #16]
 8003472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	2203      	movs	r2, #3
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4013      	ands	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 0203 	and.w	r2, r3, #3
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80a0 	beq.w	80035f8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b8:	4b58      	ldr	r3, [pc, #352]	; (800361c <HAL_GPIO_Init+0x2d8>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	4a57      	ldr	r2, [pc, #348]	; (800361c <HAL_GPIO_Init+0x2d8>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6193      	str	r3, [r2, #24]
 80034c4:	4b55      	ldr	r3, [pc, #340]	; (800361c <HAL_GPIO_Init+0x2d8>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034d0:	4a53      	ldr	r2, [pc, #332]	; (8003620 <HAL_GPIO_Init+0x2dc>)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	089b      	lsrs	r3, r3, #2
 80034d6:	3302      	adds	r3, #2
 80034d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	220f      	movs	r2, #15
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034fa:	d019      	beq.n	8003530 <HAL_GPIO_Init+0x1ec>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a49      	ldr	r2, [pc, #292]	; (8003624 <HAL_GPIO_Init+0x2e0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d013      	beq.n	800352c <HAL_GPIO_Init+0x1e8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a48      	ldr	r2, [pc, #288]	; (8003628 <HAL_GPIO_Init+0x2e4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00d      	beq.n	8003528 <HAL_GPIO_Init+0x1e4>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a47      	ldr	r2, [pc, #284]	; (800362c <HAL_GPIO_Init+0x2e8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d007      	beq.n	8003524 <HAL_GPIO_Init+0x1e0>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a46      	ldr	r2, [pc, #280]	; (8003630 <HAL_GPIO_Init+0x2ec>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d101      	bne.n	8003520 <HAL_GPIO_Init+0x1dc>
 800351c:	2304      	movs	r3, #4
 800351e:	e008      	b.n	8003532 <HAL_GPIO_Init+0x1ee>
 8003520:	2305      	movs	r3, #5
 8003522:	e006      	b.n	8003532 <HAL_GPIO_Init+0x1ee>
 8003524:	2303      	movs	r3, #3
 8003526:	e004      	b.n	8003532 <HAL_GPIO_Init+0x1ee>
 8003528:	2302      	movs	r3, #2
 800352a:	e002      	b.n	8003532 <HAL_GPIO_Init+0x1ee>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_GPIO_Init+0x1ee>
 8003530:	2300      	movs	r3, #0
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	f002 0203 	and.w	r2, r2, #3
 8003538:	0092      	lsls	r2, r2, #2
 800353a:	4093      	lsls	r3, r2
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003542:	4937      	ldr	r1, [pc, #220]	; (8003620 <HAL_GPIO_Init+0x2dc>)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	3302      	adds	r3, #2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003550:	4b38      	ldr	r3, [pc, #224]	; (8003634 <HAL_GPIO_Init+0x2f0>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003574:	4a2f      	ldr	r2, [pc, #188]	; (8003634 <HAL_GPIO_Init+0x2f0>)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800357a:	4b2e      	ldr	r3, [pc, #184]	; (8003634 <HAL_GPIO_Init+0x2f0>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800359e:	4a25      	ldr	r2, [pc, #148]	; (8003634 <HAL_GPIO_Init+0x2f0>)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035a4:	4b23      	ldr	r3, [pc, #140]	; (8003634 <HAL_GPIO_Init+0x2f0>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4013      	ands	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80035c8:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <HAL_GPIO_Init+0x2f0>)
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ce:	4b19      	ldr	r3, [pc, #100]	; (8003634 <HAL_GPIO_Init+0x2f0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4013      	ands	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80035f2:	4a10      	ldr	r2, [pc, #64]	; (8003634 <HAL_GPIO_Init+0x2f0>)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	3301      	adds	r3, #1
 80035fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	f47f aea3 	bne.w	8003354 <HAL_GPIO_Init+0x10>
  }
}
 800360e:	bf00      	nop
 8003610:	bf00      	nop
 8003612:	371c      	adds	r7, #28
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40021000 	.word	0x40021000
 8003620:	40010000 	.word	0x40010000
 8003624:	48000400 	.word	0x48000400
 8003628:	48000800 	.word	0x48000800
 800362c:	48000c00 	.word	0x48000c00
 8003630:	48001000 	.word	0x48001000
 8003634:	40010400 	.word	0x40010400

08003638 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_PWREx_EnableSDADC+0x38>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <HAL_PWREx_EnableSDADC+0x38>)
 8003646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364a:	61d3      	str	r3, [r2, #28]
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <HAL_PWREx_EnableSDADC+0x38>)
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_PWREx_EnableSDADC+0x3c>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	4905      	ldr	r1, [pc, #20]	; (8003674 <HAL_PWREx_EnableSDADC+0x3c>)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4313      	orrs	r3, r2
 8003662:	600b      	str	r3, [r1, #0]
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40021000 	.word	0x40021000
 8003674:	40007000 	.word	0x40007000

08003678 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003682:	4b49      	ldr	r3, [pc, #292]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a48      	ldr	r2, [pc, #288]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6013      	str	r3, [r2, #0]

  /* Insure HSIRDY bit is set before writing default HSITRIM value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800368e:	f7fe fd77 	bl	8002180 <HAL_GetTick>
 8003692:	60f8      	str	r0, [r7, #12]

  /* Wait till HSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_DeInit+0x30>
  {
    if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003696:	f7fe fd73 	bl	8002180 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e07b      	b.n	80037a0 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80036a8:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM default value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, RCC_CR_HSITRIM_4);
 80036b4:	4b3c      	ldr	r3, [pc, #240]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80036bc:	4a3a      	ldr	r2, [pc, #232]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 80036be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c2:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2 | RCC_CFGR_MCO);
 80036c4:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	4937      	ldr	r1, [pc, #220]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 80036ca:	4b38      	ldr	r3, [pc, #224]	; (80037ac <HAL_RCC_DeInit+0x134>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]

  /* Insure HSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80036d0:	f7fe fd56 	bl	8002180 <HAL_GetTick>
 80036d4:	60f8      	str	r0, [r7, #12]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80036d6:	e00a      	b.n	80036ee <HAL_RCC_DeInit+0x76>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d8:	f7fe fd52 	bl	8002180 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_DeInit+0x76>
    {
      return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e058      	b.n	80037a0 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80036ee:	4b2e      	ldr	r3, [pc, #184]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1ee      	bne.n	80036d8 <HAL_RCC_DeInit+0x60>
    }
  }

  /* Update the SystemCoreClock global variable for HSI as system clock source */
  SystemCoreClock = HSI_VALUE;
 80036fa:	4b2d      	ldr	r3, [pc, #180]	; (80037b0 <HAL_RCC_DeInit+0x138>)
 80036fc:	4a2d      	ldr	r2, [pc, #180]	; (80037b4 <HAL_RCC_DeInit+0x13c>)
 80036fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003700:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <HAL_RCC_DeInit+0x140>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fe fcf7 	bl	80020f8 <HAL_InitTick>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_RCC_DeInit+0x9c>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e045      	b.n	80037a0 <HAL_RCC_DeInit+0x128>
  }

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 8003714:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a23      	ldr	r2, [pc, #140]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 800371a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800371e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003722:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003724:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 800372a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800372e:	6013      	str	r3, [r2, #0]

  /* Insure PLLRDY is reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8003730:	f7fe fd26 	bl	8002180 <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003736:	e008      	b.n	800374a <HAL_RCC_DeInit+0xd2>
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003738:	f7fe fd22 	bl	8002180 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_DeInit+0xd2>
    {
      return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e02a      	b.n	80037a0 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800374a:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_DeInit+0xc0>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003756:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 8003758:	2200      	movs	r2, #0
 800375a:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 800375e:	2200      	movs	r2, #0
 8003760:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 8003764:	2200      	movs	r2, #0
 8003766:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 800376e:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003772:	6093      	str	r3, [r2, #8]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <HAL_RCC_DeInit+0x130>)
 8003776:	2200      	movs	r2, #0
 8003778:	609a      	str	r2, [r3, #8]
 800377a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800377e:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003788:	687b      	ldr	r3, [r7, #4]

  /* Reset all CSR flags */
  __HAL_RCC_CLEAR_RESET_FLAGS();
 800378a:	fab3 f383 	clz	r3, r3
 800378e:	b2db      	uxtb	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <HAL_RCC_DeInit+0x144>)
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	461a      	mov	r2, r3
 800379a:	2301      	movs	r3, #1
 800379c:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000
 80037ac:	f8ffc00c 	.word	0xf8ffc00c
 80037b0:	20000004 	.word	0x20000004
 80037b4:	007a1200 	.word	0x007a1200
 80037b8:	20000008 	.word	0x20000008
 80037bc:	10908120 	.word	0x10908120

080037c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037d0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d102      	bne.n	80037e6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f001 b823 	b.w	800482c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 817d 	beq.w	8003af6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80037fc:	4bbc      	ldr	r3, [pc, #752]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 030c 	and.w	r3, r3, #12
 8003804:	2b04      	cmp	r3, #4
 8003806:	d00c      	beq.n	8003822 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003808:	4bb9      	ldr	r3, [pc, #740]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 030c 	and.w	r3, r3, #12
 8003810:	2b08      	cmp	r3, #8
 8003812:	d15c      	bne.n	80038ce <HAL_RCC_OscConfig+0x10e>
 8003814:	4bb6      	ldr	r3, [pc, #728]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003820:	d155      	bne.n	80038ce <HAL_RCC_OscConfig+0x10e>
 8003822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003826:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800382e:	fa93 f3a3 	rbit	r3, r3
 8003832:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8003836:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383a:	fab3 f383 	clz	r3, r3
 800383e:	b2db      	uxtb	r3, r3
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	b2db      	uxtb	r3, r3
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d102      	bne.n	8003854 <HAL_RCC_OscConfig+0x94>
 800384e:	4ba8      	ldr	r3, [pc, #672]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	e015      	b.n	8003880 <HAL_RCC_OscConfig+0xc0>
 8003854:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003858:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003860:	fa93 f3a3 	rbit	r3, r3
 8003864:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800386c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003870:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003874:	fa93 f3a3 	rbit	r3, r3
 8003878:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800387c:	4b9c      	ldr	r3, [pc, #624]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003884:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003888:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800388c:	fa92 f2a2 	rbit	r2, r2
 8003890:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003894:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003898:	fab2 f282 	clz	r2, r2
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	f042 0220 	orr.w	r2, r2, #32
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	f002 021f 	and.w	r2, r2, #31
 80038a8:	2101      	movs	r1, #1
 80038aa:	fa01 f202 	lsl.w	r2, r1, r2
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 811f 	beq.w	8003af4 <HAL_RCC_OscConfig+0x334>
 80038b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f040 8116 	bne.w	8003af4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	f000 bfaf 	b.w	800482c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038de:	d106      	bne.n	80038ee <HAL_RCC_OscConfig+0x12e>
 80038e0:	4b83      	ldr	r3, [pc, #524]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a82      	ldr	r2, [pc, #520]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 80038e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	e036      	b.n	800395c <HAL_RCC_OscConfig+0x19c>
 80038ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10c      	bne.n	8003918 <HAL_RCC_OscConfig+0x158>
 80038fe:	4b7c      	ldr	r3, [pc, #496]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a7b      	ldr	r2, [pc, #492]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 8003904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	4b79      	ldr	r3, [pc, #484]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a78      	ldr	r2, [pc, #480]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 8003910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e021      	b.n	800395c <HAL_RCC_OscConfig+0x19c>
 8003918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0x184>
 800392a:	4b71      	ldr	r3, [pc, #452]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a70      	ldr	r2, [pc, #448]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 8003930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b6e      	ldr	r3, [pc, #440]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a6d      	ldr	r2, [pc, #436]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e00b      	b.n	800395c <HAL_RCC_OscConfig+0x19c>
 8003944:	4b6a      	ldr	r3, [pc, #424]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a69      	ldr	r2, [pc, #420]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 800394a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b67      	ldr	r3, [pc, #412]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a66      	ldr	r2, [pc, #408]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 8003956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800395c:	4b64      	ldr	r3, [pc, #400]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	f023 020f 	bic.w	r2, r3, #15
 8003964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003968:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	495f      	ldr	r1, [pc, #380]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 8003972:	4313      	orrs	r3, r2
 8003974:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d059      	beq.n	8003a3a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003986:	f7fe fbfb 	bl	8002180 <HAL_GetTick>
 800398a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003990:	f7fe fbf6 	bl	8002180 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b64      	cmp	r3, #100	; 0x64
 800399e:	d902      	bls.n	80039a6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	f000 bf43 	b.w	800482c <HAL_RCC_OscConfig+0x106c>
 80039a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039aa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80039b2:	fa93 f3a3 	rbit	r3, r3
 80039b6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80039ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d102      	bne.n	80039d8 <HAL_RCC_OscConfig+0x218>
 80039d2:	4b47      	ldr	r3, [pc, #284]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	e015      	b.n	8003a04 <HAL_RCC_OscConfig+0x244>
 80039d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039dc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80039e4:	fa93 f3a3 	rbit	r3, r3
 80039e8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80039ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039f0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80039f4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80039f8:	fa93 f3a3 	rbit	r3, r3
 80039fc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003a00:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a08:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003a0c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003a10:	fa92 f2a2 	rbit	r2, r2
 8003a14:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003a18:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003a1c:	fab2 f282 	clz	r2, r2
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	f042 0220 	orr.w	r2, r2, #32
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	f002 021f 	and.w	r2, r2, #31
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0ab      	beq.n	8003990 <HAL_RCC_OscConfig+0x1d0>
 8003a38:	e05d      	b.n	8003af6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3a:	f7fe fba1 	bl	8002180 <HAL_GetTick>
 8003a3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a42:	e00a      	b.n	8003a5a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a44:	f7fe fb9c 	bl	8002180 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b64      	cmp	r3, #100	; 0x64
 8003a52:	d902      	bls.n	8003a5a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	f000 bee9 	b.w	800482c <HAL_RCC_OscConfig+0x106c>
 8003a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a5e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a62:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003a66:	fa93 f3a3 	rbit	r3, r3
 8003a6a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003a6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d102      	bne.n	8003a8c <HAL_RCC_OscConfig+0x2cc>
 8003a86:	4b1a      	ldr	r3, [pc, #104]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	e015      	b.n	8003ab8 <HAL_RCC_OscConfig+0x2f8>
 8003a8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a90:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003a98:	fa93 f3a3 	rbit	r3, r3
 8003a9c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003aa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aa4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003aa8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003aac:	fa93 f3a3 	rbit	r3, r3
 8003ab0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <HAL_RCC_OscConfig+0x330>)
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003abc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003ac0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003ac4:	fa92 f2a2 	rbit	r2, r2
 8003ac8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003acc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003ad0:	fab2 f282 	clz	r2, r2
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	f042 0220 	orr.w	r2, r2, #32
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	f002 021f 	and.w	r2, r2, #31
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1ab      	bne.n	8003a44 <HAL_RCC_OscConfig+0x284>
 8003aec:	e003      	b.n	8003af6 <HAL_RCC_OscConfig+0x336>
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 817d 	beq.w	8003e06 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b0c:	4ba6      	ldr	r3, [pc, #664]	; (8003da8 <HAL_RCC_OscConfig+0x5e8>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00b      	beq.n	8003b30 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b18:	4ba3      	ldr	r3, [pc, #652]	; (8003da8 <HAL_RCC_OscConfig+0x5e8>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d172      	bne.n	8003c0a <HAL_RCC_OscConfig+0x44a>
 8003b24:	4ba0      	ldr	r3, [pc, #640]	; (8003da8 <HAL_RCC_OscConfig+0x5e8>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d16c      	bne.n	8003c0a <HAL_RCC_OscConfig+0x44a>
 8003b30:	2302      	movs	r3, #2
 8003b32:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003b3a:	fa93 f3a3 	rbit	r3, r3
 8003b3e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003b42:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	095b      	lsrs	r3, r3, #5
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d102      	bne.n	8003b60 <HAL_RCC_OscConfig+0x3a0>
 8003b5a:	4b93      	ldr	r3, [pc, #588]	; (8003da8 <HAL_RCC_OscConfig+0x5e8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	e013      	b.n	8003b88 <HAL_RCC_OscConfig+0x3c8>
 8003b60:	2302      	movs	r3, #2
 8003b62:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003b72:	2302      	movs	r3, #2
 8003b74:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003b78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b7c:	fa93 f3a3 	rbit	r3, r3
 8003b80:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003b84:	4b88      	ldr	r3, [pc, #544]	; (8003da8 <HAL_RCC_OscConfig+0x5e8>)
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	2202      	movs	r2, #2
 8003b8a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003b8e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003b92:	fa92 f2a2 	rbit	r2, r2
 8003b96:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003b9a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003b9e:	fab2 f282 	clz	r2, r2
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	f042 0220 	orr.w	r2, r2, #32
 8003ba8:	b2d2      	uxtb	r2, r2
 8003baa:	f002 021f 	and.w	r2, r2, #31
 8003bae:	2101      	movs	r1, #1
 8003bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x410>
 8003bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d002      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f000 be2e 	b.w	800482c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd0:	4b75      	ldr	r3, [pc, #468]	; (8003da8 <HAL_RCC_OscConfig+0x5e8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	21f8      	movs	r1, #248	; 0xf8
 8003be6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003bee:	fa91 f1a1 	rbit	r1, r1
 8003bf2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003bf6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003bfa:	fab1 f181 	clz	r1, r1
 8003bfe:	b2c9      	uxtb	r1, r1
 8003c00:	408b      	lsls	r3, r1
 8003c02:	4969      	ldr	r1, [pc, #420]	; (8003da8 <HAL_RCC_OscConfig+0x5e8>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c08:	e0fd      	b.n	8003e06 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 8088 	beq.w	8003d2c <HAL_RCC_OscConfig+0x56c>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003c2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c32:	fab3 f383 	clz	r3, r3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	461a      	mov	r2, r3
 8003c44:	2301      	movs	r3, #1
 8003c46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fe fa9a 	bl	8002180 <HAL_GetTick>
 8003c4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c52:	f7fe fa95 	bl	8002180 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d902      	bls.n	8003c68 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	f000 bde2 	b.w	800482c <HAL_RCC_OscConfig+0x106c>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003c7a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7e:	fab3 f383 	clz	r3, r3
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d102      	bne.n	8003c98 <HAL_RCC_OscConfig+0x4d8>
 8003c92:	4b45      	ldr	r3, [pc, #276]	; (8003da8 <HAL_RCC_OscConfig+0x5e8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	e013      	b.n	8003cc0 <HAL_RCC_OscConfig+0x500>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003ca2:	fa93 f3a3 	rbit	r3, r3
 8003ca6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003caa:	2302      	movs	r3, #2
 8003cac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003cb0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003cb4:	fa93 f3a3 	rbit	r3, r3
 8003cb8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003cbc:	4b3a      	ldr	r3, [pc, #232]	; (8003da8 <HAL_RCC_OscConfig+0x5e8>)
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003cc6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003cca:	fa92 f2a2 	rbit	r2, r2
 8003cce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003cd2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003cd6:	fab2 f282 	clz	r2, r2
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	f042 0220 	orr.w	r2, r2, #32
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	f002 021f 	and.w	r2, r2, #31
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0af      	beq.n	8003c52 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf2:	4b2d      	ldr	r3, [pc, #180]	; (8003da8 <HAL_RCC_OscConfig+0x5e8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	21f8      	movs	r1, #248	; 0xf8
 8003d08:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003d10:	fa91 f1a1 	rbit	r1, r1
 8003d14:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003d18:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003d1c:	fab1 f181 	clz	r1, r1
 8003d20:	b2c9      	uxtb	r1, r1
 8003d22:	408b      	lsls	r3, r1
 8003d24:	4920      	ldr	r1, [pc, #128]	; (8003da8 <HAL_RCC_OscConfig+0x5e8>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
 8003d2a:	e06c      	b.n	8003e06 <HAL_RCC_OscConfig+0x646>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d32:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003d36:	fa93 f3a3 	rbit	r3, r3
 8003d3a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003d3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	461a      	mov	r2, r3
 8003d54:	2300      	movs	r3, #0
 8003d56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fe fa12 	bl	8002180 <HAL_GetTick>
 8003d5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d60:	e00a      	b.n	8003d78 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d62:	f7fe fa0d 	bl	8002180 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d902      	bls.n	8003d78 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	f000 bd5a 	b.w	800482c <HAL_RCC_OscConfig+0x106c>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d104      	bne.n	8003dac <HAL_RCC_OscConfig+0x5ec>
 8003da2:	4b01      	ldr	r3, [pc, #4]	; (8003da8 <HAL_RCC_OscConfig+0x5e8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	e015      	b.n	8003dd4 <HAL_RCC_OscConfig+0x614>
 8003da8:	40021000 	.word	0x40021000
 8003dac:	2302      	movs	r3, #2
 8003dae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003db6:	fa93 f3a3 	rbit	r3, r3
 8003dba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003dc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003dc8:	fa93 f3a3 	rbit	r3, r3
 8003dcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003dd0:	4bc8      	ldr	r3, [pc, #800]	; (80040f4 <HAL_RCC_OscConfig+0x934>)
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003dda:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003dde:	fa92 f2a2 	rbit	r2, r2
 8003de2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003de6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003dea:	fab2 f282 	clz	r2, r2
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	f042 0220 	orr.w	r2, r2, #32
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	f002 021f 	and.w	r2, r2, #31
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8003e00:	4013      	ands	r3, r2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1ad      	bne.n	8003d62 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8110 	beq.w	800403c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d079      	beq.n	8003f20 <HAL_RCC_OscConfig+0x760>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e36:	fa93 f3a3 	rbit	r3, r3
 8003e3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e42:	fab3 f383 	clz	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4bab      	ldr	r3, [pc, #684]	; (80040f8 <HAL_RCC_OscConfig+0x938>)
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	461a      	mov	r2, r3
 8003e52:	2301      	movs	r3, #1
 8003e54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e56:	f7fe f993 	bl	8002180 <HAL_GetTick>
 8003e5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e60:	f7fe f98e 	bl	8002180 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d902      	bls.n	8003e76 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	f000 bcdb 	b.w	800482c <HAL_RCC_OscConfig+0x106c>
 8003e76:	2302      	movs	r3, #2
 8003e78:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003e80:	fa93 f3a3 	rbit	r3, r3
 8003e84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003e90:	2202      	movs	r2, #2
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e98:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	fa93 f2a3 	rbit	r2, r3
 8003ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	fa93 f2a3 	rbit	r2, r3
 8003ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ece:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed0:	4b88      	ldr	r3, [pc, #544]	; (80040f4 <HAL_RCC_OscConfig+0x934>)
 8003ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003edc:	2102      	movs	r1, #2
 8003ede:	6019      	str	r1, [r3, #0]
 8003ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	fa93 f1a3 	rbit	r1, r3
 8003eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ef6:	6019      	str	r1, [r3, #0]
  return result;
 8003ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	fab3 f383 	clz	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	f003 031f 	and.w	r3, r3, #31
 8003f12:	2101      	movs	r1, #1
 8003f14:	fa01 f303 	lsl.w	r3, r1, r3
 8003f18:	4013      	ands	r3, r2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0a0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x6a0>
 8003f1e:	e08d      	b.n	800403c <HAL_RCC_OscConfig+0x87c>
 8003f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f24:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003f28:	2201      	movs	r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f30:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	fa93 f2a3 	rbit	r2, r3
 8003f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f3e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003f42:	601a      	str	r2, [r3, #0]
  return result;
 8003f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003f4c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f4e:	fab3 f383 	clz	r3, r3
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	4b68      	ldr	r3, [pc, #416]	; (80040f8 <HAL_RCC_OscConfig+0x938>)
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	2300      	movs	r3, #0
 8003f60:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f62:	f7fe f90d 	bl	8002180 <HAL_GetTick>
 8003f66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6a:	e00a      	b.n	8003f82 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f6c:	f7fe f908 	bl	8002180 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d902      	bls.n	8003f82 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	f000 bc55 	b.w	800482c <HAL_RCC_OscConfig+0x106c>
 8003f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f92:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	fa93 f2a3 	rbit	r2, r3
 8003f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003faa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003fae:	2202      	movs	r2, #2
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	fa93 f2a3 	rbit	r2, r3
 8003fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	fa93 f2a3 	rbit	r2, r3
 8003fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003fec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fee:	4b41      	ldr	r3, [pc, #260]	; (80040f4 <HAL_RCC_OscConfig+0x934>)
 8003ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003ffa:	2102      	movs	r1, #2
 8003ffc:	6019      	str	r1, [r3, #0]
 8003ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004002:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	fa93 f1a3 	rbit	r1, r3
 800400c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004010:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004014:	6019      	str	r1, [r3, #0]
  return result;
 8004016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	fab3 f383 	clz	r3, r3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	2101      	movs	r1, #1
 8004032:	fa01 f303 	lsl.w	r3, r1, r3
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d197      	bne.n	8003f6c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800403c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004040:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 81a1 	beq.w	8004394 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004052:	2300      	movs	r3, #0
 8004054:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004058:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <HAL_RCC_OscConfig+0x934>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d116      	bne.n	8004092 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004064:	4b23      	ldr	r3, [pc, #140]	; (80040f4 <HAL_RCC_OscConfig+0x934>)
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <HAL_RCC_OscConfig+0x934>)
 800406a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406e:	61d3      	str	r3, [r2, #28]
 8004070:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <HAL_RCC_OscConfig+0x934>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800407c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004086:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800408a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004092:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <HAL_RCC_OscConfig+0x93c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409a:	2b00      	cmp	r3, #0
 800409c:	d11a      	bne.n	80040d4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800409e:	4b17      	ldr	r3, [pc, #92]	; (80040fc <HAL_RCC_OscConfig+0x93c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a16      	ldr	r2, [pc, #88]	; (80040fc <HAL_RCC_OscConfig+0x93c>)
 80040a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040aa:	f7fe f869 	bl	8002180 <HAL_GetTick>
 80040ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b2:	e009      	b.n	80040c8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b4:	f7fe f864 	bl	8002180 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b64      	cmp	r3, #100	; 0x64
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e3b1      	b.n	800482c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c8:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <HAL_RCC_OscConfig+0x93c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0ef      	beq.n	80040b4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d10d      	bne.n	8004100 <HAL_RCC_OscConfig+0x940>
 80040e4:	4b03      	ldr	r3, [pc, #12]	; (80040f4 <HAL_RCC_OscConfig+0x934>)
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	4a02      	ldr	r2, [pc, #8]	; (80040f4 <HAL_RCC_OscConfig+0x934>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6213      	str	r3, [r2, #32]
 80040f0:	e03c      	b.n	800416c <HAL_RCC_OscConfig+0x9ac>
 80040f2:	bf00      	nop
 80040f4:	40021000 	.word	0x40021000
 80040f8:	10908120 	.word	0x10908120
 80040fc:	40007000 	.word	0x40007000
 8004100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004104:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10c      	bne.n	800412a <HAL_RCC_OscConfig+0x96a>
 8004110:	4bc1      	ldr	r3, [pc, #772]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	4ac0      	ldr	r2, [pc, #768]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 8004116:	f023 0301 	bic.w	r3, r3, #1
 800411a:	6213      	str	r3, [r2, #32]
 800411c:	4bbe      	ldr	r3, [pc, #760]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	4abd      	ldr	r2, [pc, #756]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 8004122:	f023 0304 	bic.w	r3, r3, #4
 8004126:	6213      	str	r3, [r2, #32]
 8004128:	e020      	b.n	800416c <HAL_RCC_OscConfig+0x9ac>
 800412a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	2b05      	cmp	r3, #5
 8004138:	d10c      	bne.n	8004154 <HAL_RCC_OscConfig+0x994>
 800413a:	4bb7      	ldr	r3, [pc, #732]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	4ab6      	ldr	r2, [pc, #728]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 8004140:	f043 0304 	orr.w	r3, r3, #4
 8004144:	6213      	str	r3, [r2, #32]
 8004146:	4bb4      	ldr	r3, [pc, #720]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	4ab3      	ldr	r2, [pc, #716]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	6213      	str	r3, [r2, #32]
 8004152:	e00b      	b.n	800416c <HAL_RCC_OscConfig+0x9ac>
 8004154:	4bb0      	ldr	r3, [pc, #704]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	4aaf      	ldr	r2, [pc, #700]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 800415a:	f023 0301 	bic.w	r3, r3, #1
 800415e:	6213      	str	r3, [r2, #32]
 8004160:	4bad      	ldr	r3, [pc, #692]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	4aac      	ldr	r2, [pc, #688]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 8004166:	f023 0304 	bic.w	r3, r3, #4
 800416a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800416c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004170:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 8081 	beq.w	8004280 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417e:	f7fd ffff 	bl	8002180 <HAL_GetTick>
 8004182:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004186:	e00b      	b.n	80041a0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004188:	f7fd fffa 	bl	8002180 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	f241 3288 	movw	r2, #5000	; 0x1388
 8004198:	4293      	cmp	r3, r2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e345      	b.n	800482c <HAL_RCC_OscConfig+0x106c>
 80041a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80041a8:	2202      	movs	r2, #2
 80041aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	fa93 f2a3 	rbit	r2, r3
 80041ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80041cc:	2202      	movs	r2, #2
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	fa93 f2a3 	rbit	r2, r3
 80041de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80041e6:	601a      	str	r2, [r3, #0]
  return result;
 80041e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80041f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f2:	fab3 f383 	clz	r3, r3
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	f043 0302 	orr.w	r3, r3, #2
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d102      	bne.n	800420c <HAL_RCC_OscConfig+0xa4c>
 8004206:	4b84      	ldr	r3, [pc, #528]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	e013      	b.n	8004234 <HAL_RCC_OscConfig+0xa74>
 800420c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004210:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004214:	2202      	movs	r2, #2
 8004216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	fa93 f2a3 	rbit	r2, r3
 8004226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	4b79      	ldr	r3, [pc, #484]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004238:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800423c:	2102      	movs	r1, #2
 800423e:	6011      	str	r1, [r2, #0]
 8004240:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004244:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	fa92 f1a2 	rbit	r1, r2
 800424e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004252:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004256:	6011      	str	r1, [r2, #0]
  return result;
 8004258:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800425c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	fab2 f282 	clz	r2, r2
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	f002 021f 	and.w	r2, r2, #31
 8004272:	2101      	movs	r1, #1
 8004274:	fa01 f202 	lsl.w	r2, r1, r2
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d084      	beq.n	8004188 <HAL_RCC_OscConfig+0x9c8>
 800427e:	e07f      	b.n	8004380 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004280:	f7fd ff7e 	bl	8002180 <HAL_GetTick>
 8004284:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004288:	e00b      	b.n	80042a2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428a:	f7fd ff79 	bl	8002180 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e2c4      	b.n	800482c <HAL_RCC_OscConfig+0x106c>
 80042a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80042aa:	2202      	movs	r2, #2
 80042ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	fa93 f2a3 	rbit	r2, r3
 80042bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80042ce:	2202      	movs	r2, #2
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	fa93 f2a3 	rbit	r2, r3
 80042e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80042e8:	601a      	str	r2, [r3, #0]
  return result;
 80042ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80042f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f4:	fab3 f383 	clz	r3, r3
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f043 0302 	orr.w	r3, r3, #2
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d102      	bne.n	800430e <HAL_RCC_OscConfig+0xb4e>
 8004308:	4b43      	ldr	r3, [pc, #268]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	e013      	b.n	8004336 <HAL_RCC_OscConfig+0xb76>
 800430e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004312:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004316:	2202      	movs	r2, #2
 8004318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800431e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	fa93 f2a3 	rbit	r2, r3
 8004328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800432c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	4b39      	ldr	r3, [pc, #228]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800433a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800433e:	2102      	movs	r1, #2
 8004340:	6011      	str	r1, [r2, #0]
 8004342:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004346:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	fa92 f1a2 	rbit	r1, r2
 8004350:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004354:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004358:	6011      	str	r1, [r2, #0]
  return result;
 800435a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800435e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	fab2 f282 	clz	r2, r2
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	f002 021f 	and.w	r2, r2, #31
 8004374:	2101      	movs	r1, #1
 8004376:	fa01 f202 	lsl.w	r2, r1, r2
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d184      	bne.n	800428a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004380:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004384:	2b01      	cmp	r3, #1
 8004386:	d105      	bne.n	8004394 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004388:	4b23      	ldr	r3, [pc, #140]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	4a22      	ldr	r2, [pc, #136]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 800438e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004392:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004398:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8242 	beq.w	800482a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043a6:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <HAL_RCC_OscConfig+0xc58>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	f000 8213 	beq.w	80047da <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	f040 8162 	bne.w	800468a <HAL_RCC_OscConfig+0xeca>
 80043c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80043ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	fa93 f2a3 	rbit	r2, r3
 80043e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80043ea:	601a      	str	r2, [r3, #0]
  return result;
 80043ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80043f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f6:	fab3 f383 	clz	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004400:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	461a      	mov	r2, r3
 8004408:	2300      	movs	r3, #0
 800440a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fd feb8 	bl	8002180 <HAL_GetTick>
 8004410:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004414:	e00c      	b.n	8004430 <HAL_RCC_OscConfig+0xc70>
 8004416:	bf00      	nop
 8004418:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800441c:	f7fd feb0 	bl	8002180 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e1fd      	b.n	800482c <HAL_RCC_OscConfig+0x106c>
 8004430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004434:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800443c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004442:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	fa93 f2a3 	rbit	r2, r3
 800444c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004450:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004454:	601a      	str	r2, [r3, #0]
  return result;
 8004456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800445a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800445e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004460:	fab3 f383 	clz	r3, r3
 8004464:	b2db      	uxtb	r3, r3
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	b2db      	uxtb	r3, r3
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d102      	bne.n	800447a <HAL_RCC_OscConfig+0xcba>
 8004474:	4bb0      	ldr	r3, [pc, #704]	; (8004738 <HAL_RCC_OscConfig+0xf78>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	e027      	b.n	80044ca <HAL_RCC_OscConfig+0xd0a>
 800447a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004482:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800448c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	fa93 f2a3 	rbit	r2, r3
 8004496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044a4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80044a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	fa93 f2a3 	rbit	r2, r3
 80044bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	4b9c      	ldr	r3, [pc, #624]	; (8004738 <HAL_RCC_OscConfig+0xf78>)
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044ce:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80044d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044d6:	6011      	str	r1, [r2, #0]
 80044d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044dc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80044e0:	6812      	ldr	r2, [r2, #0]
 80044e2:	fa92 f1a2 	rbit	r1, r2
 80044e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044ea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80044ee:	6011      	str	r1, [r2, #0]
  return result;
 80044f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044f4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	fab2 f282 	clz	r2, r2
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	f042 0220 	orr.w	r2, r2, #32
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	f002 021f 	and.w	r2, r2, #31
 800450a:	2101      	movs	r1, #1
 800450c:	fa01 f202 	lsl.w	r2, r1, r2
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d182      	bne.n	800441c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004516:	4b88      	ldr	r3, [pc, #544]	; (8004738 <HAL_RCC_OscConfig+0xf78>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800451e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004522:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800452a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	430b      	orrs	r3, r1
 8004538:	497f      	ldr	r1, [pc, #508]	; (8004738 <HAL_RCC_OscConfig+0xf78>)
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]
 800453e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004542:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004546:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800454a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004550:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	fa93 f2a3 	rbit	r2, r3
 800455a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800455e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004562:	601a      	str	r2, [r3, #0]
  return result;
 8004564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004568:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800456c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800456e:	fab3 f383 	clz	r3, r3
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004578:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	461a      	mov	r2, r3
 8004580:	2301      	movs	r3, #1
 8004582:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004584:	f7fd fdfc 	bl	8002180 <HAL_GetTick>
 8004588:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800458c:	e009      	b.n	80045a2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458e:	f7fd fdf7 	bl	8002180 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e144      	b.n	800482c <HAL_RCC_OscConfig+0x106c>
 80045a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80045aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045b4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	fa93 f2a3 	rbit	r2, r3
 80045be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80045c6:	601a      	str	r2, [r3, #0]
  return result;
 80045c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045cc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80045d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d102      	bne.n	80045ec <HAL_RCC_OscConfig+0xe2c>
 80045e6:	4b54      	ldr	r3, [pc, #336]	; (8004738 <HAL_RCC_OscConfig+0xf78>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	e027      	b.n	800463c <HAL_RCC_OscConfig+0xe7c>
 80045ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80045f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	fa93 f2a3 	rbit	r2, r3
 8004608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800460c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004616:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800461a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004624:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	fa93 f2a3 	rbit	r2, r3
 800462e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004632:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	4b3f      	ldr	r3, [pc, #252]	; (8004738 <HAL_RCC_OscConfig+0xf78>)
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004640:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004644:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004648:	6011      	str	r1, [r2, #0]
 800464a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800464e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	fa92 f1a2 	rbit	r1, r2
 8004658:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800465c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004660:	6011      	str	r1, [r2, #0]
  return result;
 8004662:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004666:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	fab2 f282 	clz	r2, r2
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	f042 0220 	orr.w	r2, r2, #32
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	f002 021f 	and.w	r2, r2, #31
 800467c:	2101      	movs	r1, #1
 800467e:	fa01 f202 	lsl.w	r2, r1, r2
 8004682:	4013      	ands	r3, r2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d082      	beq.n	800458e <HAL_RCC_OscConfig+0xdce>
 8004688:	e0cf      	b.n	800482a <HAL_RCC_OscConfig+0x106a>
 800468a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004692:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	fa93 f2a3 	rbit	r2, r3
 80046a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046aa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80046ae:	601a      	str	r2, [r3, #0]
  return result;
 80046b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80046b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	fab3 f383 	clz	r3, r3
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	461a      	mov	r2, r3
 80046cc:	2300      	movs	r3, #0
 80046ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d0:	f7fd fd56 	bl	8002180 <HAL_GetTick>
 80046d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d8:	e009      	b.n	80046ee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046da:	f7fd fd51 	bl	8002180 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e09e      	b.n	800482c <HAL_RCC_OscConfig+0x106c>
 80046ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80046f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004700:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	fa93 f2a3 	rbit	r2, r3
 800470a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004712:	601a      	str	r2, [r3, #0]
  return result;
 8004714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004718:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800471c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800471e:	fab3 f383 	clz	r3, r3
 8004722:	b2db      	uxtb	r3, r3
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b01      	cmp	r3, #1
 8004730:	d104      	bne.n	800473c <HAL_RCC_OscConfig+0xf7c>
 8004732:	4b01      	ldr	r3, [pc, #4]	; (8004738 <HAL_RCC_OscConfig+0xf78>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	e029      	b.n	800478c <HAL_RCC_OscConfig+0xfcc>
 8004738:	40021000 	.word	0x40021000
 800473c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004740:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004744:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800474e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	fa93 f2a3 	rbit	r2, r3
 8004758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800475c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004766:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800476a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004774:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	fa93 f2a3 	rbit	r2, r3
 800477e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004782:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <HAL_RCC_OscConfig+0x1078>)
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004790:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004794:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004798:	6011      	str	r1, [r2, #0]
 800479a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800479e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	fa92 f1a2 	rbit	r1, r2
 80047a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047ac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80047b0:	6011      	str	r1, [r2, #0]
  return result;
 80047b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80047b6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	fab2 f282 	clz	r2, r2
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	f042 0220 	orr.w	r2, r2, #32
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	f002 021f 	and.w	r2, r2, #31
 80047cc:	2101      	movs	r1, #1
 80047ce:	fa01 f202 	lsl.w	r2, r1, r2
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d180      	bne.n	80046da <HAL_RCC_OscConfig+0xf1a>
 80047d8:	e027      	b.n	800482a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e01e      	b.n	800482c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <HAL_RCC_OscConfig+0x1078>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80047fa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004802:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	429a      	cmp	r2, r3
 800480c:	d10b      	bne.n	8004826 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800480e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004812:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004822:	429a      	cmp	r2, r3
 8004824:	d001      	beq.n	800482a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000

0800483c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b09e      	sub	sp, #120	; 0x78
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e162      	b.n	8004b1a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004854:	4b90      	ldr	r3, [pc, #576]	; (8004a98 <HAL_RCC_ClockConfig+0x25c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d910      	bls.n	8004884 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004862:	4b8d      	ldr	r3, [pc, #564]	; (8004a98 <HAL_RCC_ClockConfig+0x25c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f023 0207 	bic.w	r2, r3, #7
 800486a:	498b      	ldr	r1, [pc, #556]	; (8004a98 <HAL_RCC_ClockConfig+0x25c>)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	4313      	orrs	r3, r2
 8004870:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004872:	4b89      	ldr	r3, [pc, #548]	; (8004a98 <HAL_RCC_ClockConfig+0x25c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e14a      	b.n	8004b1a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004890:	4b82      	ldr	r3, [pc, #520]	; (8004a9c <HAL_RCC_ClockConfig+0x260>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	497f      	ldr	r1, [pc, #508]	; (8004a9c <HAL_RCC_ClockConfig+0x260>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 80dc 	beq.w	8004a68 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d13c      	bne.n	8004932 <HAL_RCC_ClockConfig+0xf6>
 80048b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048c0:	fa93 f3a3 	rbit	r3, r3
 80048c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80048c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c8:	fab3 f383 	clz	r3, r3
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d102      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xa6>
 80048dc:	4b6f      	ldr	r3, [pc, #444]	; (8004a9c <HAL_RCC_ClockConfig+0x260>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	e00f      	b.n	8004902 <HAL_RCC_ClockConfig+0xc6>
 80048e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ea:	fa93 f3a3 	rbit	r3, r3
 80048ee:	667b      	str	r3, [r7, #100]	; 0x64
 80048f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048f4:	663b      	str	r3, [r7, #96]	; 0x60
 80048f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048f8:	fa93 f3a3 	rbit	r3, r3
 80048fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048fe:	4b67      	ldr	r3, [pc, #412]	; (8004a9c <HAL_RCC_ClockConfig+0x260>)
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004906:	65ba      	str	r2, [r7, #88]	; 0x58
 8004908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800490a:	fa92 f2a2 	rbit	r2, r2
 800490e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004910:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004912:	fab2 f282 	clz	r2, r2
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	f042 0220 	orr.w	r2, r2, #32
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	f002 021f 	and.w	r2, r2, #31
 8004922:	2101      	movs	r1, #1
 8004924:	fa01 f202 	lsl.w	r2, r1, r2
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d17b      	bne.n	8004a26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e0f3      	b.n	8004b1a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d13c      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x178>
 800493a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800493e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004942:	fa93 f3a3 	rbit	r3, r3
 8004946:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494a:	fab3 f383 	clz	r3, r3
 800494e:	b2db      	uxtb	r3, r3
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d102      	bne.n	8004964 <HAL_RCC_ClockConfig+0x128>
 800495e:	4b4f      	ldr	r3, [pc, #316]	; (8004a9c <HAL_RCC_ClockConfig+0x260>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	e00f      	b.n	8004984 <HAL_RCC_ClockConfig+0x148>
 8004964:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004968:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800496c:	fa93 f3a3 	rbit	r3, r3
 8004970:	647b      	str	r3, [r7, #68]	; 0x44
 8004972:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004976:	643b      	str	r3, [r7, #64]	; 0x40
 8004978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800497a:	fa93 f3a3 	rbit	r3, r3
 800497e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004980:	4b46      	ldr	r3, [pc, #280]	; (8004a9c <HAL_RCC_ClockConfig+0x260>)
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004988:	63ba      	str	r2, [r7, #56]	; 0x38
 800498a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800498c:	fa92 f2a2 	rbit	r2, r2
 8004990:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004994:	fab2 f282 	clz	r2, r2
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	f042 0220 	orr.w	r2, r2, #32
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	f002 021f 	and.w	r2, r2, #31
 80049a4:	2101      	movs	r1, #1
 80049a6:	fa01 f202 	lsl.w	r2, r1, r2
 80049aa:	4013      	ands	r3, r2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d13a      	bne.n	8004a26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0b2      	b.n	8004b1a <HAL_RCC_ClockConfig+0x2de>
 80049b4:	2302      	movs	r3, #2
 80049b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	fa93 f3a3 	rbit	r3, r3
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c2:	fab3 f383 	clz	r3, r3
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	f043 0301 	orr.w	r3, r3, #1
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d102      	bne.n	80049dc <HAL_RCC_ClockConfig+0x1a0>
 80049d6:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <HAL_RCC_ClockConfig+0x260>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	e00d      	b.n	80049f8 <HAL_RCC_ClockConfig+0x1bc>
 80049dc:	2302      	movs	r3, #2
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	fa93 f3a3 	rbit	r3, r3
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
 80049e8:	2302      	movs	r3, #2
 80049ea:	623b      	str	r3, [r7, #32]
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	fa93 f3a3 	rbit	r3, r3
 80049f2:	61fb      	str	r3, [r7, #28]
 80049f4:	4b29      	ldr	r3, [pc, #164]	; (8004a9c <HAL_RCC_ClockConfig+0x260>)
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	2202      	movs	r2, #2
 80049fa:	61ba      	str	r2, [r7, #24]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	fa92 f2a2 	rbit	r2, r2
 8004a02:	617a      	str	r2, [r7, #20]
  return result;
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	fab2 f282 	clz	r2, r2
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	f042 0220 	orr.w	r2, r2, #32
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	f002 021f 	and.w	r2, r2, #31
 8004a16:	2101      	movs	r1, #1
 8004a18:	fa01 f202 	lsl.w	r2, r1, r2
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e079      	b.n	8004b1a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a26:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <HAL_RCC_ClockConfig+0x260>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f023 0203 	bic.w	r2, r3, #3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	491a      	ldr	r1, [pc, #104]	; (8004a9c <HAL_RCC_ClockConfig+0x260>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a38:	f7fd fba2 	bl	8002180 <HAL_GetTick>
 8004a3c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3e:	e00a      	b.n	8004a56 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a40:	f7fd fb9e 	bl	8002180 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e061      	b.n	8004b1a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a56:	4b11      	ldr	r3, [pc, #68]	; (8004a9c <HAL_RCC_ClockConfig+0x260>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f003 020c 	and.w	r2, r3, #12
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d1eb      	bne.n	8004a40 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_RCC_ClockConfig+0x25c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d214      	bcs.n	8004aa0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b08      	ldr	r3, [pc, #32]	; (8004a98 <HAL_RCC_ClockConfig+0x25c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 0207 	bic.w	r2, r3, #7
 8004a7e:	4906      	ldr	r1, [pc, #24]	; (8004a98 <HAL_RCC_ClockConfig+0x25c>)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <HAL_RCC_ClockConfig+0x25c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e040      	b.n	8004b1a <HAL_RCC_ClockConfig+0x2de>
 8004a98:	40022000 	.word	0x40022000
 8004a9c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aac:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <HAL_RCC_ClockConfig+0x2e8>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	491a      	ldr	r1, [pc, #104]	; (8004b24 <HAL_RCC_ClockConfig+0x2e8>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aca:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <HAL_RCC_ClockConfig+0x2e8>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4912      	ldr	r1, [pc, #72]	; (8004b24 <HAL_RCC_ClockConfig+0x2e8>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ade:	f000 f829 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 8004ae2:	4601      	mov	r1, r0
 8004ae4:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <HAL_RCC_ClockConfig+0x2e8>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aec:	22f0      	movs	r2, #240	; 0xf0
 8004aee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	fa92 f2a2 	rbit	r2, r2
 8004af6:	60fa      	str	r2, [r7, #12]
  return result;
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	fab2 f282 	clz	r2, r2
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	40d3      	lsrs	r3, r2
 8004b02:	4a09      	ldr	r2, [pc, #36]	; (8004b28 <HAL_RCC_ClockConfig+0x2ec>)
 8004b04:	5cd3      	ldrb	r3, [r2, r3]
 8004b06:	fa21 f303 	lsr.w	r3, r1, r3
 8004b0a:	4a08      	ldr	r2, [pc, #32]	; (8004b2c <HAL_RCC_ClockConfig+0x2f0>)
 8004b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004b0e:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <HAL_RCC_ClockConfig+0x2f4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fd faf0 	bl	80020f8 <HAL_InitTick>
  
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3778      	adds	r7, #120	; 0x78
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40021000 	.word	0x40021000
 8004b28:	08006d3c 	.word	0x08006d3c
 8004b2c:	20000004 	.word	0x20000004
 8004b30:	20000008 	.word	0x20000008

08004b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	2300      	movs	r3, #0
 8004b48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004b4e:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 030c 	and.w	r3, r3, #12
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d002      	beq.n	8004b64 <HAL_RCC_GetSysClockFreq+0x30>
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d003      	beq.n	8004b6a <HAL_RCC_GetSysClockFreq+0x36>
 8004b62:	e026      	b.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b64:	4b19      	ldr	r3, [pc, #100]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x98>)
 8004b66:	613b      	str	r3, [r7, #16]
      break;
 8004b68:	e026      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	0c9b      	lsrs	r3, r3, #18
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	4a17      	ldr	r2, [pc, #92]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b74:	5cd3      	ldrb	r3, [r2, r3]
 8004b76:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004b78:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	f003 030f 	and.w	r3, r3, #15
 8004b80:	4a14      	ldr	r2, [pc, #80]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b82:	5cd3      	ldrb	r3, [r2, r3]
 8004b84:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b90:	4a0e      	ldr	r2, [pc, #56]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x98>)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	fb02 f303 	mul.w	r3, r2, r3
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	e004      	b.n	8004bac <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a0c      	ldr	r2, [pc, #48]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ba6:	fb02 f303 	mul.w	r3, r2, r3
 8004baa:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	613b      	str	r3, [r7, #16]
      break;
 8004bb0:	e002      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <HAL_RCC_GetSysClockFreq+0xa8>)
 8004bb4:	613b      	str	r3, [r7, #16]
      break;
 8004bb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bb8:	693b      	ldr	r3, [r7, #16]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	01e84800 	.word	0x01e84800
 8004bd0:	08006d54 	.word	0x08006d54
 8004bd4:	08006d64 	.word	0x08006d64
 8004bd8:	003d0900 	.word	0x003d0900
 8004bdc:	007a1200 	.word	0x007a1200

08004be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be4:	4b03      	ldr	r3, [pc, #12]	; (8004bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004be6:	681b      	ldr	r3, [r3, #0]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20000004 	.word	0x20000004

08004bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004bfe:	f7ff ffef 	bl	8004be0 <HAL_RCC_GetHCLKFreq>
 8004c02:	4601      	mov	r1, r0
 8004c04:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c0c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004c10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	fa92 f2a2 	rbit	r2, r2
 8004c18:	603a      	str	r2, [r7, #0]
  return result;
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	fab2 f282 	clz	r2, r2
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	40d3      	lsrs	r3, r2
 8004c24:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004c26:	5cd3      	ldrb	r3, [r2, r3]
 8004c28:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000
 8004c38:	08006d4c 	.word	0x08006d4c

08004c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004c42:	f7ff ffcd 	bl	8004be0 <HAL_RCC_GetHCLKFreq>
 8004c46:	4601      	mov	r1, r0
 8004c48:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004c50:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004c54:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	fa92 f2a2 	rbit	r2, r2
 8004c5c:	603a      	str	r2, [r7, #0]
  return result;
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	fab2 f282 	clz	r2, r2
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	40d3      	lsrs	r3, r2
 8004c68:	4a04      	ldr	r2, [pc, #16]	; (8004c7c <HAL_RCC_GetPCLK2Freq+0x40>)
 8004c6a:	5cd3      	ldrb	r3, [r2, r3]
 8004c6c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	08006d4c 	.word	0x08006d4c

08004c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b092      	sub	sp, #72	; 0x48
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004c90:	2300      	movs	r3, #0
 8004c92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 80d4 	beq.w	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ca4:	4b4e      	ldr	r3, [pc, #312]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10e      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb0:	4b4b      	ldr	r3, [pc, #300]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	4a4a      	ldr	r2, [pc, #296]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cba:	61d3      	str	r3, [r2, #28]
 8004cbc:	4b48      	ldr	r3, [pc, #288]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cce:	4b45      	ldr	r3, [pc, #276]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d118      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cda:	4b42      	ldr	r3, [pc, #264]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a41      	ldr	r2, [pc, #260]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce6:	f7fd fa4b 	bl	8002180 <HAL_GetTick>
 8004cea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cec:	e008      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cee:	f7fd fa47 	bl	8002180 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b64      	cmp	r3, #100	; 0x64
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e12d      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d00:	4b38      	ldr	r3, [pc, #224]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0f0      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d0c:	4b34      	ldr	r3, [pc, #208]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d14:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 8084 	beq.w	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d07c      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d2c:	4b2c      	ldr	r3, [pc, #176]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	fa93 f3a3 	rbit	r3, r3
 8004d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d46:	fab3 f383 	clz	r3, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	4b26      	ldr	r3, [pc, #152]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	461a      	mov	r2, r3
 8004d56:	2301      	movs	r3, #1
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	fa93 f3a3 	rbit	r3, r3
 8004d66:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d6a:	fab3 f383 	clz	r3, r3
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	461a      	mov	r2, r3
 8004d72:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	461a      	mov	r2, r3
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d7e:	4a18      	ldr	r2, [pc, #96]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d82:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d04b      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d8e:	f7fd f9f7 	bl	8002180 <HAL_GetTick>
 8004d92:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d94:	e00a      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d96:	f7fd f9f3 	bl	8002180 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d901      	bls.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e0d7      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8004dac:	2302      	movs	r3, #2
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
 8004db8:	2302      	movs	r3, #2
 8004dba:	623b      	str	r3, [r7, #32]
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	fa93 f3a3 	rbit	r3, r3
 8004dc2:	61fb      	str	r3, [r7, #28]
  return result;
 8004dc4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc6:	fab3 f383 	clz	r3, r3
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	095b      	lsrs	r3, r3, #5
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	f043 0302 	orr.w	r3, r3, #2
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d108      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004dda:	4b01      	ldr	r3, [pc, #4]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	e00d      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004de0:	40021000 	.word	0x40021000
 8004de4:	40007000 	.word	0x40007000
 8004de8:	10908100 	.word	0x10908100
 8004dec:	2302      	movs	r3, #2
 8004dee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	fa93 f3a3 	rbit	r3, r3
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	4b5a      	ldr	r3, [pc, #360]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	613a      	str	r2, [r7, #16]
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	fa92 f2a2 	rbit	r2, r2
 8004e06:	60fa      	str	r2, [r7, #12]
  return result;
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	fab2 f282 	clz	r2, r2
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	f002 021f 	and.w	r2, r2, #31
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0b7      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004e26:	4b4f      	ldr	r3, [pc, #316]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	494c      	ldr	r1, [pc, #304]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d105      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e40:	4b48      	ldr	r3, [pc, #288]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	4a47      	ldr	r2, [pc, #284]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d008      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e58:	4b42      	ldr	r3, [pc, #264]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	f023 0203 	bic.w	r2, r3, #3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	493f      	ldr	r1, [pc, #252]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d008      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e76:	4b3b      	ldr	r3, [pc, #236]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	4938      	ldr	r1, [pc, #224]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d008      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e94:	4b33      	ldr	r3, [pc, #204]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	4930      	ldr	r1, [pc, #192]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d008      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eb2:	4b2c      	ldr	r3, [pc, #176]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	f023 0210 	bic.w	r2, r3, #16
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	4929      	ldr	r1, [pc, #164]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004ed0:	4b24      	ldr	r3, [pc, #144]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004edc:	4921      	ldr	r1, [pc, #132]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d008      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eee:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	f023 0220 	bic.w	r2, r3, #32
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	491a      	ldr	r1, [pc, #104]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004f0c:	4b15      	ldr	r3, [pc, #84]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	4912      	ldr	r1, [pc, #72]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8004f2a:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	490b      	ldr	r1, [pc, #44]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d008      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f48:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	4903      	ldr	r1, [pc, #12]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3748      	adds	r7, #72	; 0x48
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40021000 	.word	0x40021000

08004f68 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check SDADC handle */
  if(hsdadc == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e07f      	b.n	800507a <HAL_SDADC_Init+0x112>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));

  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	625a      	str	r2, [r3, #36]	; 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	629a      	str	r2, [r3, #40]	; 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	635a      	str	r2, [r3, #52]	; 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	639a      	str	r2, [r3, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7fc fdcb 	bl	8001b54 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004fcc:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6819      	ldr	r1, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004ff4:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6859      	ldr	r1, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8005008:	4b1e      	ldr	r3, [pc, #120]	; (8005084 <HAL_SDADC_Init+0x11c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	429a      	cmp	r2, r3
 8005016:	d00f      	beq.n	8005038 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8005018:	4b1a      	ldr	r3, [pc, #104]	; (8005084 <HAL_SDADC_Init+0x11c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a19      	ldr	r2, [pc, #100]	; (8005084 <HAL_SDADC_Init+0x11c>)
 800501e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005022:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8005024:	4b17      	ldr	r3, [pc, #92]	; (8005084 <HAL_SDADC_Init+0x11c>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	4915      	ldr	r1, [pc, #84]	; (8005084 <HAL_SDADC_Init+0x11c>)
 800502e:	4313      	orrs	r3, r2
 8005030:	600b      	str	r3, [r1, #0]

    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 8005032:	2002      	movs	r0, #2
 8005034:	f7fd f8b0 	bl	8002198 <HAL_Delay>
  }

  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  tickstart = HAL_GetTick();
 8005048:	f7fd f89a 	bl	8002180 <HAL_GetTick>
 800504c:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 800504e:	e008      	b.n	8005062 <HAL_SDADC_Init+0xfa>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8005050:	f7fd f896 	bl	8002180 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2bc8      	cmp	r3, #200	; 0xc8
 800505c:	d901      	bls.n	8005062 <HAL_SDADC_Init+0xfa>
    {
      return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e00b      	b.n	800507a <HAL_SDADC_Init+0x112>
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1ef      	bne.n	8005050 <HAL_SDADC_Init+0xe8>
    }
  }

  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return HAL status */
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40016000 	.word	0x40016000

08005088 <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d002      	beq.n	80050a8 <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	75fb      	strb	r3, [r7, #23]
 80050a6:	e025      	b.n	80050f4 <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 fa7d 	bl	80055a8 <SDADC_EnterInitMode>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d006      	beq.n	80050c2 <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	22ff      	movs	r2, #255	; 0xff
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	75fb      	strb	r3, [r7, #23]
 80050c0:	e018      	b.n	80050f4 <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80050cc:	4413      	add	r3, r2
 80050ce:	3320      	adds	r3, #32
 80050d0:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80050da:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 80050e0:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80050e8:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 80050ea:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80050ec:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fa7d 	bl	80055ee <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005116:	2b01      	cmp	r3, #1
 8005118:	d002      	beq.n	8005120 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	75fb      	strb	r3, [r7, #23]
 800511e:	e037      	b.n	8005190 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 fa41 	bl	80055a8 <SDADC_EnterInitMode>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d006      	beq.n	800513a <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	22ff      	movs	r2, #255	; 0xff
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	75fb      	strb	r3, [r7, #23]
 8005138:	e02a      	b.n	8005190 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4a17      	ldr	r2, [pc, #92]	; (800519c <HAL_SDADC_AssociateChannelConfig+0x9c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d01f      	beq.n	8005182 <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	0c1b      	lsrs	r3, r3, #16
 8005146:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	2203      	movs	r2, #3
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43da      	mvns	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	400a      	ands	r2, r1
 8005164:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	f003 031f 	and.w	r3, r3, #31
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	409a      	lsls	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	641a      	str	r2, [r3, #64]	; 0x40
 8005180:	e003      	b.n	800518a <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	645a      	str	r2, [r3, #68]	; 0x44
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 fa2f 	bl	80055ee <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	00080100 	.word	0x00080100

080051a0 <HAL_SDADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_ConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                          uint32_t Channel,
                                          uint32_t ContinuousMode)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d02a      	beq.n	8005210 <HAL_SDADC_ConfigChannel+0x70>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c0:	2bff      	cmp	r3, #255	; 0xff
 80051c2:	d025      	beq.n	8005210 <HAL_SDADC_ConfigChannel+0x70>
  {
    /* Set RCH[3:0] and RCONT bits in SDADC_CR2 */
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 029e 	bic.w	r2, r2, #5177344	; 0x4f0000
 80051d2:	605a      	str	r2, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d10c      	bne.n	80051f4 <HAL_SDADC_ConfigChannel+0x54>
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK) | SDADC_CR2_RCONT);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	4b10      	ldr	r3, [pc, #64]	; (8005224 <HAL_SDADC_ConfigChannel+0x84>)
 80051e4:	400b      	ands	r3, r1
 80051e6:	431a      	orrs	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80051f0:	605a      	str	r2, [r3, #4]
 80051f2:	e009      	b.n	8005208 <HAL_SDADC_ConfigChannel+0x68>
    }
    else
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK));
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6859      	ldr	r1, [r3, #4]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	430b      	orrs	r3, r1
 8005206:	6053      	str	r3, [r2, #4]
    }
    /* Store continuous mode information */
    hsdadc->RegularContMode = ContinuousMode;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	619a      	str	r2, [r3, #24]
 800520e:	e001      	b.n	8005214 <HAL_SDADC_ConfigChannel+0x74>
  }
  else
  {
    status = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8005214:	7dfb      	ldrb	r3, [r7, #23]
}
 8005216:	4618      	mov	r0, r3
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	ffbf0000 	.word	0xffbf0000

08005228 <HAL_SDADC_InjectedConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                                  uint32_t Channel,
                                                  uint32_t ContinuousMode)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d027      	beq.n	8005292 <HAL_SDADC_InjectedConfigChannel+0x6a>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005248:	2bff      	cmp	r3, #255	; 0xff
 800524a:	d022      	beq.n	8005292 <HAL_SDADC_InjectedConfigChannel+0x6a>
  {
    /* Set JCHG[8:0] bits in SDADC_JCHG */
    hsdadc->Instance->JCHGR = (uint32_t) (Channel & SDADC_LSB_MASK);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	b292      	uxth	r2, r2
 8005254:	615a      	str	r2, [r3, #20]
    /* Set or clear JCONT bit in SDADC_CR2 */
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d108      	bne.n	800526e <HAL_SDADC_InjectedConfigChannel+0x46>
    {
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0220 	orr.w	r2, r2, #32
 800526a:	605a      	str	r2, [r3, #4]
 800526c:	e007      	b.n	800527e <HAL_SDADC_InjectedConfigChannel+0x56>
    }
    else
    {
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0220 	bic.w	r2, r2, #32
 800527c:	605a      	str	r2, [r3, #4]
    }
    /* Store continuous mode information */
    hsdadc->InjectedContMode = ContinuousMode;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	61da      	str	r2, [r3, #28]
    /* Store number of injected channels */
    hsdadc->InjectedChannelsNbr = SDADC_GetInjChannelsNbr(Channel);
 8005284:	68b8      	ldr	r0, [r7, #8]
 8005286:	f000 f9c4 	bl	8005612 <SDADC_GetInjChannelsNbr>
 800528a:	4602      	mov	r2, r0
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	621a      	str	r2, [r3, #32]
 8005290:	e001      	b.n	8005296 <HAL_SDADC_InjectedConfigChannel+0x6e>
  }
  else
  {
    status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8005296:	7dfb      	ldrb	r3, [r7, #23]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_SDADC_SelectInjectedTrigger>:
  *            @arg SDADC_SYNCHRONOUS_TRIGGER : Synchronous with SDADC1 (only for SDADC2 and SDADC3).
  *            @arg SDADC_EXTERNAL_TRIGGER : External trigger.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedTrigger(SDADC_HandleTypeDef *hsdadc, uint32_t Trigger)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_TRIGGER(Trigger));

  /* Check parameters compatibility */
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a12      	ldr	r2, [pc, #72]	; (80052fc <HAL_SDADC_SelectInjectedTrigger+0x5c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d105      	bne.n	80052c4 <HAL_SDADC_SelectInjectedTrigger+0x24>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d102      	bne.n	80052c4 <HAL_SDADC_SelectInjectedTrigger+0x24>
  {
    status = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	73fb      	strb	r3, [r7, #15]
 80052c2:	e014      	b.n	80052ee <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d009      	beq.n	80052e2 <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d004      	beq.n	80052e2 <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_REG))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d103      	bne.n	80052ea <HAL_SDADC_SelectInjectedTrigger+0x4a>
  {
    /* Store regular trigger information */
    hsdadc->InjectedTrigger = Trigger;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80052e8:	e001      	b.n	80052ee <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  else
  {
    status = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	40016000 	.word	0x40016000

08005300 <HAL_SDADC_SelectInjectedDelay>:
  *         This parameter can be a value of @ref SDADC_InjectedDelay.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedDelay(SDADC_HandleTypeDef *hsdadc,
                                                uint32_t InjectedDelay)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_DELAY(InjectedDelay));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005314:	2b01      	cmp	r3, #1
 8005316:	d120      	bne.n	800535a <HAL_SDADC_SelectInjectedDelay+0x5a>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f945 	bl	80055a8 <SDADC_EnterInitMode>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d006      	beq.n	8005332 <HAL_SDADC_SelectInjectedDelay+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	22ff      	movs	r2, #255	; 0xff
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	73fb      	strb	r3, [r7, #15]
 8005330:	e015      	b.n	800535e <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
    else
    {
      /* Set JDS bit in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JDS);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005340:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= InjectedDelay;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6859      	ldr	r1, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f94b 	bl	80055ee <SDADC_ExitInitMode>
 8005358:	e001      	b.n	800535e <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_SDADC_CalibrationStart>:
  *         This parameter can be a value of @ref SDADC_CalibrationSequence.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_CalibrationStart(SDADC_HandleTypeDef *hsdadc,
                                             uint32_t CalibrationSequence)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_CALIB_SEQUENCE(CalibrationSequence));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d12c      	bne.n	80053da <HAL_SDADC_CalibrationStart+0x72>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f911 	bl	80055a8 <SDADC_EnterInitMode>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d006      	beq.n	800539a <HAL_SDADC_CalibrationStart+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	22ff      	movs	r2, #255	; 0xff
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	73fb      	strb	r3, [r7, #15]
 8005398:	e021      	b.n	80053de <HAL_SDADC_CalibrationStart+0x76>
    }
    else
    {
      /* Set CALIBCNT[1:0] bits in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0206 	bic.w	r2, r2, #6
 80053a8:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6859      	ldr	r1, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f917 	bl	80055ee <SDADC_ExitInitMode>

      /* Set STARTCALIB in SDADC_CR2 */
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0210 	orr.w	r2, r2, #16
 80053ce:	605a      	str	r2, [r3, #4]

      /* Set SDADC in calibration state */
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053d8:	e001      	b.n	80053de <HAL_SDADC_CalibrationStart+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80053de:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_SDADC_PollForCalibEvent>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForCalibEvent(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d001      	beq.n	8005400 <HAL_SDADC_PollForCalibEvent+0x18>
  {
    /* Return error status */
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e028      	b.n	8005452 <HAL_SDADC_PollForCalibEvent+0x6a>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005400:	f7fc febe 	bl	8002180 <HAL_GetTick>
 8005404:	60f8      	str	r0, [r7, #12]

    /* Wait EOCALF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8005406:	e010      	b.n	800542a <HAL_SDADC_PollForCalibEvent+0x42>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540e:	d00c      	beq.n	800542a <HAL_SDADC_PollForCalibEvent+0x42>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8005410:	f7fc feb6 	bl	8002180 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d302      	bcc.n	8005426 <HAL_SDADC_PollForCalibEvent+0x3e>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_SDADC_PollForCalibEvent+0x42>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e013      	b.n	8005452 <HAL_SDADC_PollForCalibEvent+0x6a>
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b01      	cmp	r3, #1
 8005436:	d1e7      	bne.n	8005408 <HAL_SDADC_PollForCalibEvent+0x20>
        }
      }
    }
    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	60da      	str	r2, [r3, #12]

    /* Set SDADC in ready state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_OK;
 8005450:	2300      	movs	r3, #0
  }
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_SDADC_Start>:
  *         or if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Start(SDADC_HandleTypeDef *hsdadc)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d004      	beq.n	8005476 <HAL_SDADC_Start+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_INJ))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8005472:	2b04      	cmp	r3, #4
 8005474:	d105      	bne.n	8005482 <HAL_SDADC_Start+0x28>
  {
    /* Start regular conversion */
    status = SDADC_RegConvStart(hsdadc);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f8ef 	bl	800565a <SDADC_RegConvStart>
 800547c:	4603      	mov	r3, r0
 800547e:	73fb      	strb	r3, [r7, #15]
 8005480:	e001      	b.n	8005486 <HAL_SDADC_Start+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8005486:	7bfb      	ldrb	r3, [r7, #15]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_SDADC_PollForConversion>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForConversion(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d006      	beq.n	80054b2 <HAL_SDADC_PollForConversion+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 80054aa:	2b05      	cmp	r3, #5
 80054ac:	d001      	beq.n	80054b2 <HAL_SDADC_PollForConversion+0x22>
  {
    /* Return error status */
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e044      	b.n	800553c <HAL_SDADC_PollForConversion+0xac>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80054b2:	f7fc fe65 	bl	8002180 <HAL_GetTick>
 80054b6:	60f8      	str	r0, [r7, #12]

    /* Wait REOCF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 80054b8:	e010      	b.n	80054dc <HAL_SDADC_PollForConversion+0x4c>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d00c      	beq.n	80054dc <HAL_SDADC_PollForConversion+0x4c>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 80054c2:	f7fc fe5d 	bl	8002180 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d302      	bcc.n	80054d8 <HAL_SDADC_PollForConversion+0x48>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_SDADC_PollForConversion+0x4c>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e02f      	b.n	800553c <HAL_SDADC_PollForConversion+0xac>
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d1e7      	bne.n	80054ba <HAL_SDADC_PollForConversion+0x2a>
        }
      }
    }
    /* Check if overrun occurs */
    if((hsdadc->Instance->ISR & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 0310 	and.w	r3, r3, #16
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d10d      	bne.n	8005514 <HAL_SDADC_PollForConversion+0x84>
    {
      /* Update error code and call error callback */
      hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
      hsdadc->ErrorCallback(hsdadc);
#else
      HAL_SDADC_ErrorCallback(hsdadc);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f848 	bl	8005594 <HAL_SDADC_ErrorCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

      /* Set CLRROVRF bit in SDADC_CLRISR register */
      hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0210 	orr.w	r2, r2, #16
 8005512:	60da      	str	r2, [r3, #12]
    }
    /* Update SDADC state only if not continuous conversion and SW trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10e      	bne.n	800553a <HAL_SDADC_PollForConversion+0xaa>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10a      	bne.n	800553a <HAL_SDADC_PollForConversion+0xaa>
    {
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 800552a:	2b03      	cmp	r3, #3
 800552c:	d101      	bne.n	8005532 <HAL_SDADC_PollForConversion+0xa2>
 800552e:	2201      	movs	r2, #1
 8005530:	e000      	b.n	8005534 <HAL_SDADC_PollForConversion+0xa4>
 8005532:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Return function status */
    return HAL_OK;
 800553a:	2300      	movs	r3, #0
  }
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_SDADC_Stop>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Stop(SDADC_HandleTypeDef *hsdadc)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005552:	2b03      	cmp	r3, #3
 8005554:	d007      	beq.n	8005566 <HAL_SDADC_Stop+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 800555c:	2b05      	cmp	r3, #5
 800555e:	d002      	beq.n	8005566 <HAL_SDADC_Stop+0x22>
  {
    /* Return error status */
    status = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
 8005564:	e004      	b.n	8005570 <HAL_SDADC_Stop+0x2c>
  }
  else
  {
    /* Stop regular conversion */
    status = SDADC_RegConvStop(hsdadc);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f8b5 	bl	80056d6 <SDADC_RegConvStop>
 800556c:	4603      	mov	r3, r0
 800556e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_SDADC_GetValue>:
  * @brief  This function allows to get regular conversion value.
  * @param  hsdadc SDADC handle.
  * @retval Regular conversion value
  */
uint32_t HAL_SDADC_GetValue(SDADC_HandleTypeDef *hsdadc)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Return regular conversion value */
  return hsdadc->Instance->RDATAR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80055be:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 80055c0:	f7fc fdde 	bl	8002180 <HAL_GetTick>
 80055c4:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 80055c6:	e008      	b.n	80055da <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 80055c8:	f7fc fdda 	bl	8002180 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2bc8      	cmp	r3, #200	; 0xc8
 80055d4:	d901      	bls.n	80055da <SDADC_EnterInitMode+0x32>
    {
      return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e005      	b.n	80055e6 <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	daf1      	bge.n	80055c8 <SDADC_EnterInitMode+0x20>
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005604:	601a      	str	r2, [r3, #0]
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <SDADC_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t SDADC_GetInjChannelsNbr(uint32_t Channels)
{
 8005612:	b480      	push	{r7}
 8005614:	b087      	sub	sp, #28
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0UL;
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]
  uint32_t tmp,i;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & SDADC_LSB_MASK);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	b29b      	uxth	r3, r3
 8005622:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	e00d      	b.n	8005646 <SDADC_GetInjChannelsNbr+0x34>
  {
    if((tmp & 0x00000001UL) != 0UL)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <SDADC_GetInjChannelsNbr+0x28>
    {
      nbChannels++;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	3301      	adds	r3, #1
 8005638:	617b      	str	r3, [r7, #20]
    }
    tmp = (uint32_t) (tmp >> 1UL);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b08      	cmp	r3, #8
 800564a:	d9ee      	bls.n	800562a <SDADC_GetInjChannelsNbr+0x18>
  }
  return nbChannels;
 800564c:	697b      	ldr	r3, [r7, #20]
}
 800564e:	4618      	mov	r0, r3
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <SDADC_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b084      	sub	sp, #16
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	73fb      	strb	r3, [r7, #15]

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	2b00      	cmp	r3, #0
 800566c:	d108      	bne.n	8005680 <SDADC_RegConvStart+0x26>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800567c:	605a      	str	r2, [r3, #4]
 800567e:	e017      	b.n	80056b0 <SDADC_RegConvStart+0x56>
  }
  else /* synchronous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff ff91 	bl	80055a8 <SDADC_EnterInitMode>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d006      	beq.n	800569a <SDADC_RegConvStart+0x40>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	22ff      	movs	r2, #255	; 0xff
 8005690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	73fb      	strb	r3, [r7, #15]
 8005698:	e00a      	b.n	80056b0 <SDADC_RegConvStart+0x56>
    }
    else
    {
      /* Set RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056a8:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff ff9f 	bl	80055ee <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10a      	bne.n	80056cc <SDADC_RegConvStart+0x72>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <SDADC_RegConvStart+0x6a>
 80056c0:	2203      	movs	r2, #3
 80056c2:	e000      	b.n	80056c6 <SDADC_RegConvStart+0x6c>
 80056c4:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <SDADC_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStop(SDADC_HandleTypeDef* hsdadc)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b084      	sub	sp, #16
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t dummy_read_for_register_reset;

  /* Check continuous mode */
  if(hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_ON)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d10c      	bne.n	8005700 <SDADC_RegConvStop+0x2a>
  {
    /* Clear REOCF by reading SDADC_RDATAR register */
    dummy_read_for_register_reset = hsdadc->Instance->RDATAR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ec:	60bb      	str	r3, [r7, #8]
    UNUSED(dummy_read_for_register_reset);
 80056ee:	68bb      	ldr	r3, [r7, #8]

    /* Clear RCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 &= ~(SDADC_CR2_RCONT);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80056fe:	605a      	str	r2, [r3, #4]
  }
  /* Wait for the end of regular conversion */
  tickstart = HAL_GetTick();
 8005700:	f7fc fd3e 	bl	8002180 <HAL_GetTick>
 8005704:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_RCIP) != 0UL)
 8005706:	e00c      	b.n	8005722 <SDADC_RegConvStop+0x4c>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8005708:	f7fc fd3a 	bl	8002180 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2bc8      	cmp	r3, #200	; 0xc8
 8005714:	d905      	bls.n	8005722 <SDADC_RegConvStop+0x4c>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	22ff      	movs	r2, #255	; 0xff
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e046      	b.n	80057b0 <SDADC_RegConvStop+0xda>
  while((hsdadc->Instance->ISR & SDADC_ISR_RCIP) != 0UL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1eb      	bne.n	8005708 <SDADC_RegConvStop+0x32>
    }
  }
  /* Check if trigger is synchronous */
  if(hsdadc->RegularTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005734:	2b01      	cmp	r3, #1
 8005736:	d116      	bne.n	8005766 <SDADC_RegConvStop+0x90>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7ff ff35 	bl	80055a8 <SDADC_EnterInitMode>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <SDADC_RegConvStop+0x7a>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	22ff      	movs	r2, #255	; 0xff
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e02f      	b.n	80057b0 <SDADC_RegConvStop+0xda>
    }
    else
    {
      /* Clear RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_RSYNC);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800575e:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff ff44 	bl	80055ee <SDADC_ExitInitMode>
    }
  }
  /* Check if continuous mode */
  if(hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_ON)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d107      	bne.n	800577e <SDADC_RegConvStop+0xa8>
  {
    /* Restore RCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RCONT;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800577c:	605a      	str	r2, [r3, #4]
  }
  /* Clear REOCF by reading SDADC_RDATAR register */
  dummy_read_for_register_reset = hsdadc->Instance->RDATAR;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005784:	60bb      	str	r3, [r7, #8]
  UNUSED(dummy_read_for_register_reset);
 8005786:	68bb      	ldr	r3, [r7, #8]

  /* Set CLRROVRF bit in SDADC_CLRISR register */
  hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0210 	orr.w	r2, r2, #16
 8005796:	60da      	str	r2, [r3, #12]

  /* Update SDADC state */
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                  HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d101      	bne.n	80057a6 <SDADC_RegConvStop+0xd0>
 80057a2:	2201      	movs	r2, #1
 80057a4:	e000      	b.n	80057a8 <SDADC_RegConvStop+0xd2>
 80057a6:	2204      	movs	r2, #4
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e041      	b.n	800584e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fc fb6c 	bl	8001ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f000 fa16 	bl	8005c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d020      	beq.n	80058ba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01b      	beq.n	80058ba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f06f 0202 	mvn.w	r2, #2
 800588a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f9a3 	bl	8005bec <HAL_TIM_IC_CaptureCallback>
 80058a6:	e005      	b.n	80058b4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f995 	bl	8005bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f9a6 	bl	8005c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d020      	beq.n	8005906 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d01b      	beq.n	8005906 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f06f 0204 	mvn.w	r2, #4
 80058d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f97d 	bl	8005bec <HAL_TIM_IC_CaptureCallback>
 80058f2:	e005      	b.n	8005900 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f96f 	bl	8005bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f980 	bl	8005c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b00      	cmp	r3, #0
 800590e:	d020      	beq.n	8005952 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01b      	beq.n	8005952 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f06f 0208 	mvn.w	r2, #8
 8005922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2204      	movs	r2, #4
 8005928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	f003 0303 	and.w	r3, r3, #3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f957 	bl	8005bec <HAL_TIM_IC_CaptureCallback>
 800593e:	e005      	b.n	800594c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f949 	bl	8005bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f95a 	bl	8005c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	d020      	beq.n	800599e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01b      	beq.n	800599e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f06f 0210 	mvn.w	r2, #16
 800596e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2208      	movs	r2, #8
 8005974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f931 	bl	8005bec <HAL_TIM_IC_CaptureCallback>
 800598a:	e005      	b.n	8005998 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f923 	bl	8005bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f934 	bl	8005c00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00c      	beq.n	80059c2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d007      	beq.n	80059c2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f06f 0201 	mvn.w	r2, #1
 80059ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f901 	bl	8005bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00c      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d007      	beq.n	80059e6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fadf 	bl	8005fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00c      	beq.n	8005a0a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f905 	bl	8005c14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00c      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f06f 0220 	mvn.w	r2, #32
 8005a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fab1 	bl	8005f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a2e:	bf00      	nop
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d101      	bne.n	8005a52 <HAL_TIM_ConfigClockSource+0x1c>
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e0b4      	b.n	8005bbc <HAL_TIM_ConfigClockSource+0x186>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a78:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a8a:	d03e      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0xd4>
 8005a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a90:	f200 8087 	bhi.w	8005ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8005a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a98:	f000 8086 	beq.w	8005ba8 <HAL_TIM_ConfigClockSource+0x172>
 8005a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa0:	d87f      	bhi.n	8005ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa2:	2b70      	cmp	r3, #112	; 0x70
 8005aa4:	d01a      	beq.n	8005adc <HAL_TIM_ConfigClockSource+0xa6>
 8005aa6:	2b70      	cmp	r3, #112	; 0x70
 8005aa8:	d87b      	bhi.n	8005ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8005aaa:	2b60      	cmp	r3, #96	; 0x60
 8005aac:	d050      	beq.n	8005b50 <HAL_TIM_ConfigClockSource+0x11a>
 8005aae:	2b60      	cmp	r3, #96	; 0x60
 8005ab0:	d877      	bhi.n	8005ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab2:	2b50      	cmp	r3, #80	; 0x50
 8005ab4:	d03c      	beq.n	8005b30 <HAL_TIM_ConfigClockSource+0xfa>
 8005ab6:	2b50      	cmp	r3, #80	; 0x50
 8005ab8:	d873      	bhi.n	8005ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8005aba:	2b40      	cmp	r3, #64	; 0x40
 8005abc:	d058      	beq.n	8005b70 <HAL_TIM_ConfigClockSource+0x13a>
 8005abe:	2b40      	cmp	r3, #64	; 0x40
 8005ac0:	d86f      	bhi.n	8005ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8005ac2:	2b30      	cmp	r3, #48	; 0x30
 8005ac4:	d064      	beq.n	8005b90 <HAL_TIM_ConfigClockSource+0x15a>
 8005ac6:	2b30      	cmp	r3, #48	; 0x30
 8005ac8:	d86b      	bhi.n	8005ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d060      	beq.n	8005b90 <HAL_TIM_ConfigClockSource+0x15a>
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d867      	bhi.n	8005ba2 <HAL_TIM_ConfigClockSource+0x16c>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d05c      	beq.n	8005b90 <HAL_TIM_ConfigClockSource+0x15a>
 8005ad6:	2b10      	cmp	r3, #16
 8005ad8:	d05a      	beq.n	8005b90 <HAL_TIM_ConfigClockSource+0x15a>
 8005ada:	e062      	b.n	8005ba2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005aec:	f000 f9bc 	bl	8005e68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005afe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	609a      	str	r2, [r3, #8]
      break;
 8005b08:	e04f      	b.n	8005baa <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b1a:	f000 f9a5 	bl	8005e68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b2c:	609a      	str	r2, [r3, #8]
      break;
 8005b2e:	e03c      	b.n	8005baa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	f000 f919 	bl	8005d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2150      	movs	r1, #80	; 0x50
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 f972 	bl	8005e32 <TIM_ITRx_SetConfig>
      break;
 8005b4e:	e02c      	b.n	8005baa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	f000 f938 	bl	8005dd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2160      	movs	r1, #96	; 0x60
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 f962 	bl	8005e32 <TIM_ITRx_SetConfig>
      break;
 8005b6e:	e01c      	b.n	8005baa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	f000 f8f9 	bl	8005d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2140      	movs	r1, #64	; 0x40
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 f952 	bl	8005e32 <TIM_ITRx_SetConfig>
      break;
 8005b8e:	e00c      	b.n	8005baa <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	f000 f949 	bl	8005e32 <TIM_ITRx_SetConfig>
      break;
 8005ba0:	e003      	b.n	8005baa <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba6:	e000      	b.n	8005baa <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ba8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3e:	d00f      	beq.n	8005c60 <TIM_Base_SetConfig+0x38>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a42      	ldr	r2, [pc, #264]	; (8005d4c <TIM_Base_SetConfig+0x124>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00b      	beq.n	8005c60 <TIM_Base_SetConfig+0x38>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a41      	ldr	r2, [pc, #260]	; (8005d50 <TIM_Base_SetConfig+0x128>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d007      	beq.n	8005c60 <TIM_Base_SetConfig+0x38>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a40      	ldr	r2, [pc, #256]	; (8005d54 <TIM_Base_SetConfig+0x12c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_Base_SetConfig+0x38>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a3f      	ldr	r2, [pc, #252]	; (8005d58 <TIM_Base_SetConfig+0x130>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d108      	bne.n	8005c72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c78:	d027      	beq.n	8005cca <TIM_Base_SetConfig+0xa2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a33      	ldr	r2, [pc, #204]	; (8005d4c <TIM_Base_SetConfig+0x124>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d023      	beq.n	8005cca <TIM_Base_SetConfig+0xa2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a32      	ldr	r2, [pc, #200]	; (8005d50 <TIM_Base_SetConfig+0x128>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d01f      	beq.n	8005cca <TIM_Base_SetConfig+0xa2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a31      	ldr	r2, [pc, #196]	; (8005d54 <TIM_Base_SetConfig+0x12c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d01b      	beq.n	8005cca <TIM_Base_SetConfig+0xa2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a31      	ldr	r2, [pc, #196]	; (8005d5c <TIM_Base_SetConfig+0x134>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d017      	beq.n	8005cca <TIM_Base_SetConfig+0xa2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a30      	ldr	r2, [pc, #192]	; (8005d60 <TIM_Base_SetConfig+0x138>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d013      	beq.n	8005cca <TIM_Base_SetConfig+0xa2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2f      	ldr	r2, [pc, #188]	; (8005d64 <TIM_Base_SetConfig+0x13c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00f      	beq.n	8005cca <TIM_Base_SetConfig+0xa2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a2e      	ldr	r2, [pc, #184]	; (8005d68 <TIM_Base_SetConfig+0x140>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00b      	beq.n	8005cca <TIM_Base_SetConfig+0xa2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2d      	ldr	r2, [pc, #180]	; (8005d6c <TIM_Base_SetConfig+0x144>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d007      	beq.n	8005cca <TIM_Base_SetConfig+0xa2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a2c      	ldr	r2, [pc, #176]	; (8005d70 <TIM_Base_SetConfig+0x148>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d003      	beq.n	8005cca <TIM_Base_SetConfig+0xa2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a24      	ldr	r2, [pc, #144]	; (8005d58 <TIM_Base_SetConfig+0x130>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d108      	bne.n	8005cdc <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a19      	ldr	r2, [pc, #100]	; (8005d68 <TIM_Base_SetConfig+0x140>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d007      	beq.n	8005d18 <TIM_Base_SetConfig+0xf0>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a18      	ldr	r2, [pc, #96]	; (8005d6c <TIM_Base_SetConfig+0x144>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_Base_SetConfig+0xf0>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a17      	ldr	r2, [pc, #92]	; (8005d70 <TIM_Base_SetConfig+0x148>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d103      	bne.n	8005d20 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d105      	bne.n	8005d3e <TIM_Base_SetConfig+0x116>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f023 0201 	bic.w	r2, r3, #1
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	611a      	str	r2, [r3, #16]
  }
}
 8005d3e:	bf00      	nop
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40000400 	.word	0x40000400
 8005d50:	40000800 	.word	0x40000800
 8005d54:	40000c00 	.word	0x40000c00
 8005d58:	40015c00 	.word	0x40015c00
 8005d5c:	40001800 	.word	0x40001800
 8005d60:	40001c00 	.word	0x40001c00
 8005d64:	40002000 	.word	0x40002000
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40014400 	.word	0x40014400
 8005d70:	40014800 	.word	0x40014800

08005d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f023 0201 	bic.w	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f023 030a 	bic.w	r3, r3, #10
 8005db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	621a      	str	r2, [r3, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b087      	sub	sp, #28
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	f023 0210 	bic.w	r2, r3, #16
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	031b      	lsls	r3, r3, #12
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	621a      	str	r2, [r3, #32]
}
 8005e26:	bf00      	nop
 8005e28:	371c      	adds	r7, #28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b085      	sub	sp, #20
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f043 0307 	orr.w	r3, r3, #7
 8005e54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	609a      	str	r2, [r3, #8]
}
 8005e5c:	bf00      	nop
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	021a      	lsls	r2, r3, #8
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	609a      	str	r2, [r3, #8]
}
 8005e9c:	bf00      	nop
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e055      	b.n	8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f02:	d01d      	beq.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1b      	ldr	r2, [pc, #108]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d018      	beq.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1a      	ldr	r2, [pc, #104]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d013      	beq.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a18      	ldr	r2, [pc, #96]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00e      	beq.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a17      	ldr	r2, [pc, #92]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d009      	beq.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a15      	ldr	r2, [pc, #84]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d004      	beq.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a14      	ldr	r2, [pc, #80]	; (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d10c      	bne.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	40000400 	.word	0x40000400
 8005f7c:	40000800 	.word	0x40000800
 8005f80:	40000c00 	.word	0x40000c00
 8005f84:	40001800 	.word	0x40001800
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	40015c00 	.word	0x40015c00

08005f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e040      	b.n	800604c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d106      	bne.n	8005fe0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fb ffde 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2224      	movs	r2, #36	; 0x24
 8005fe4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0201 	bic.w	r2, r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fa90 	bl	8006524 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f913 	bl	8006230 <UART_SetConfig>
 800600a:	4603      	mov	r3, r0
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e01b      	b.n	800604c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689a      	ldr	r2, [r3, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fb0f 	bl	8006668 <UART_CheckIdleState>
 800604a:	4603      	mov	r3, r0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	; 0x28
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	4613      	mov	r3, r2
 8006062:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006068:	2b20      	cmp	r3, #32
 800606a:	d178      	bne.n	800615e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <HAL_UART_Transmit+0x24>
 8006072:	88fb      	ldrh	r3, [r7, #6]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e071      	b.n	8006160 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2221      	movs	r2, #33	; 0x21
 8006088:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800608a:	f7fc f879 	bl	8002180 <HAL_GetTick>
 800608e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	88fa      	ldrh	r2, [r7, #6]
 8006094:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	88fa      	ldrh	r2, [r7, #6]
 800609c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a8:	d108      	bne.n	80060bc <HAL_UART_Transmit+0x68>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d104      	bne.n	80060bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	61bb      	str	r3, [r7, #24]
 80060ba:	e003      	b.n	80060c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060c0:	2300      	movs	r3, #0
 80060c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060c4:	e030      	b.n	8006128 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2200      	movs	r2, #0
 80060ce:	2180      	movs	r1, #128	; 0x80
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 fb71 	bl	80067b8 <UART_WaitOnFlagUntilTimeout>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d004      	beq.n	80060e6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2220      	movs	r2, #32
 80060e0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e03c      	b.n	8006160 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	881a      	ldrh	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060f8:	b292      	uxth	r2, r2
 80060fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	3302      	adds	r3, #2
 8006100:	61bb      	str	r3, [r7, #24]
 8006102:	e008      	b.n	8006116 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	781a      	ldrb	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	b292      	uxth	r2, r2
 800610e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	3301      	adds	r3, #1
 8006114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1c8      	bne.n	80060c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2200      	movs	r2, #0
 800613c:	2140      	movs	r1, #64	; 0x40
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 fb3a 	bl	80067b8 <UART_WaitOnFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d004      	beq.n	8006154 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2220      	movs	r2, #32
 800614e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e005      	b.n	8006160 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2220      	movs	r2, #32
 8006158:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	e000      	b.n	8006160 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800615e:	2302      	movs	r3, #2
  }
}
 8006160:	4618      	mov	r0, r3
 8006162:	3720      	adds	r7, #32
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	; 0x28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	4613      	mov	r3, r2
 8006174:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800617c:	2b20      	cmp	r3, #32
 800617e:	d132      	bne.n	80061e6 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <HAL_UART_Receive_DMA+0x24>
 8006186:	88fb      	ldrh	r3, [r7, #6]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e02b      	b.n	80061e8 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d018      	beq.n	80061d6 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	613b      	str	r3, [r7, #16]
   return(result);
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	623b      	str	r3, [r7, #32]
 80061c4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	69f9      	ldr	r1, [r7, #28]
 80061c8:	6a3a      	ldr	r2, [r7, #32]
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e6      	bne.n	80061a4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	461a      	mov	r2, r3
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fb59 	bl	8006894 <UART_Start_Receive_DMA>
 80061e2:	4603      	mov	r3, r0
 80061e4:	e000      	b.n	80061e8 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80061e6:	2302      	movs	r3, #2
  }
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3728      	adds	r7, #40	; 0x28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	431a      	orrs	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800625e:	f023 030c 	bic.w	r3, r3, #12
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	6979      	ldr	r1, [r7, #20]
 8006268:	430b      	orrs	r3, r1
 800626a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a99      	ldr	r2, [pc, #612]	; (8006510 <UART_SetConfig+0x2e0>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d120      	bne.n	80062f2 <UART_SetConfig+0xc2>
 80062b0:	4b98      	ldr	r3, [pc, #608]	; (8006514 <UART_SetConfig+0x2e4>)
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	f003 0303 	and.w	r3, r3, #3
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d817      	bhi.n	80062ec <UART_SetConfig+0xbc>
 80062bc:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <UART_SetConfig+0x94>)
 80062be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c2:	bf00      	nop
 80062c4:	080062d5 	.word	0x080062d5
 80062c8:	080062e1 	.word	0x080062e1
 80062cc:	080062e7 	.word	0x080062e7
 80062d0:	080062db 	.word	0x080062db
 80062d4:	2301      	movs	r3, #1
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e061      	b.n	800639e <UART_SetConfig+0x16e>
 80062da:	2302      	movs	r3, #2
 80062dc:	77fb      	strb	r3, [r7, #31]
 80062de:	e05e      	b.n	800639e <UART_SetConfig+0x16e>
 80062e0:	2304      	movs	r3, #4
 80062e2:	77fb      	strb	r3, [r7, #31]
 80062e4:	e05b      	b.n	800639e <UART_SetConfig+0x16e>
 80062e6:	2308      	movs	r3, #8
 80062e8:	77fb      	strb	r3, [r7, #31]
 80062ea:	e058      	b.n	800639e <UART_SetConfig+0x16e>
 80062ec:	2310      	movs	r3, #16
 80062ee:	77fb      	strb	r3, [r7, #31]
 80062f0:	e055      	b.n	800639e <UART_SetConfig+0x16e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a88      	ldr	r2, [pc, #544]	; (8006518 <UART_SetConfig+0x2e8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d124      	bne.n	8006346 <UART_SetConfig+0x116>
 80062fc:	4b85      	ldr	r3, [pc, #532]	; (8006514 <UART_SetConfig+0x2e4>)
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006304:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006308:	d011      	beq.n	800632e <UART_SetConfig+0xfe>
 800630a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800630e:	d817      	bhi.n	8006340 <UART_SetConfig+0x110>
 8006310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006314:	d011      	beq.n	800633a <UART_SetConfig+0x10a>
 8006316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800631a:	d811      	bhi.n	8006340 <UART_SetConfig+0x110>
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <UART_SetConfig+0xf8>
 8006320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006324:	d006      	beq.n	8006334 <UART_SetConfig+0x104>
 8006326:	e00b      	b.n	8006340 <UART_SetConfig+0x110>
 8006328:	2300      	movs	r3, #0
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e037      	b.n	800639e <UART_SetConfig+0x16e>
 800632e:	2302      	movs	r3, #2
 8006330:	77fb      	strb	r3, [r7, #31]
 8006332:	e034      	b.n	800639e <UART_SetConfig+0x16e>
 8006334:	2304      	movs	r3, #4
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e031      	b.n	800639e <UART_SetConfig+0x16e>
 800633a:	2308      	movs	r3, #8
 800633c:	77fb      	strb	r3, [r7, #31]
 800633e:	e02e      	b.n	800639e <UART_SetConfig+0x16e>
 8006340:	2310      	movs	r3, #16
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e02b      	b.n	800639e <UART_SetConfig+0x16e>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a74      	ldr	r2, [pc, #464]	; (800651c <UART_SetConfig+0x2ec>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d124      	bne.n	800639a <UART_SetConfig+0x16a>
 8006350:	4b70      	ldr	r3, [pc, #448]	; (8006514 <UART_SetConfig+0x2e4>)
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006358:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800635c:	d011      	beq.n	8006382 <UART_SetConfig+0x152>
 800635e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006362:	d817      	bhi.n	8006394 <UART_SetConfig+0x164>
 8006364:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006368:	d011      	beq.n	800638e <UART_SetConfig+0x15e>
 800636a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800636e:	d811      	bhi.n	8006394 <UART_SetConfig+0x164>
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <UART_SetConfig+0x14c>
 8006374:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006378:	d006      	beq.n	8006388 <UART_SetConfig+0x158>
 800637a:	e00b      	b.n	8006394 <UART_SetConfig+0x164>
 800637c:	2300      	movs	r3, #0
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e00d      	b.n	800639e <UART_SetConfig+0x16e>
 8006382:	2302      	movs	r3, #2
 8006384:	77fb      	strb	r3, [r7, #31]
 8006386:	e00a      	b.n	800639e <UART_SetConfig+0x16e>
 8006388:	2304      	movs	r3, #4
 800638a:	77fb      	strb	r3, [r7, #31]
 800638c:	e007      	b.n	800639e <UART_SetConfig+0x16e>
 800638e:	2308      	movs	r3, #8
 8006390:	77fb      	strb	r3, [r7, #31]
 8006392:	e004      	b.n	800639e <UART_SetConfig+0x16e>
 8006394:	2310      	movs	r3, #16
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	e001      	b.n	800639e <UART_SetConfig+0x16e>
 800639a:	2310      	movs	r3, #16
 800639c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a6:	d15a      	bne.n	800645e <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 80063a8:	7ffb      	ldrb	r3, [r7, #31]
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d827      	bhi.n	80063fe <UART_SetConfig+0x1ce>
 80063ae:	a201      	add	r2, pc, #4	; (adr r2, 80063b4 <UART_SetConfig+0x184>)
 80063b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b4:	080063d9 	.word	0x080063d9
 80063b8:	080063e1 	.word	0x080063e1
 80063bc:	080063e9 	.word	0x080063e9
 80063c0:	080063ff 	.word	0x080063ff
 80063c4:	080063ef 	.word	0x080063ef
 80063c8:	080063ff 	.word	0x080063ff
 80063cc:	080063ff 	.word	0x080063ff
 80063d0:	080063ff 	.word	0x080063ff
 80063d4:	080063f7 	.word	0x080063f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d8:	f7fe fc0e 	bl	8004bf8 <HAL_RCC_GetPCLK1Freq>
 80063dc:	61b8      	str	r0, [r7, #24]
        break;
 80063de:	e013      	b.n	8006408 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063e0:	f7fe fc2c 	bl	8004c3c <HAL_RCC_GetPCLK2Freq>
 80063e4:	61b8      	str	r0, [r7, #24]
        break;
 80063e6:	e00f      	b.n	8006408 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063e8:	4b4d      	ldr	r3, [pc, #308]	; (8006520 <UART_SetConfig+0x2f0>)
 80063ea:	61bb      	str	r3, [r7, #24]
        break;
 80063ec:	e00c      	b.n	8006408 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ee:	f7fe fba1 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 80063f2:	61b8      	str	r0, [r7, #24]
        break;
 80063f4:	e008      	b.n	8006408 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063fa:	61bb      	str	r3, [r7, #24]
        break;
 80063fc:	e004      	b.n	8006408 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	77bb      	strb	r3, [r7, #30]
        break;
 8006406:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d074      	beq.n	80064f8 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	005a      	lsls	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	085b      	lsrs	r3, r3, #1
 8006418:	441a      	add	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006422:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b0f      	cmp	r3, #15
 8006428:	d916      	bls.n	8006458 <UART_SetConfig+0x228>
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006430:	d212      	bcs.n	8006458 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f023 030f 	bic.w	r3, r3, #15
 800643a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	085b      	lsrs	r3, r3, #1
 8006440:	b29b      	uxth	r3, r3
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	b29a      	uxth	r2, r3
 8006448:	89fb      	ldrh	r3, [r7, #14]
 800644a:	4313      	orrs	r3, r2
 800644c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	89fa      	ldrh	r2, [r7, #14]
 8006454:	60da      	str	r2, [r3, #12]
 8006456:	e04f      	b.n	80064f8 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	77bb      	strb	r3, [r7, #30]
 800645c:	e04c      	b.n	80064f8 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800645e:	7ffb      	ldrb	r3, [r7, #31]
 8006460:	2b08      	cmp	r3, #8
 8006462:	d828      	bhi.n	80064b6 <UART_SetConfig+0x286>
 8006464:	a201      	add	r2, pc, #4	; (adr r2, 800646c <UART_SetConfig+0x23c>)
 8006466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646a:	bf00      	nop
 800646c:	08006491 	.word	0x08006491
 8006470:	08006499 	.word	0x08006499
 8006474:	080064a1 	.word	0x080064a1
 8006478:	080064b7 	.word	0x080064b7
 800647c:	080064a7 	.word	0x080064a7
 8006480:	080064b7 	.word	0x080064b7
 8006484:	080064b7 	.word	0x080064b7
 8006488:	080064b7 	.word	0x080064b7
 800648c:	080064af 	.word	0x080064af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006490:	f7fe fbb2 	bl	8004bf8 <HAL_RCC_GetPCLK1Freq>
 8006494:	61b8      	str	r0, [r7, #24]
        break;
 8006496:	e013      	b.n	80064c0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006498:	f7fe fbd0 	bl	8004c3c <HAL_RCC_GetPCLK2Freq>
 800649c:	61b8      	str	r0, [r7, #24]
        break;
 800649e:	e00f      	b.n	80064c0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a0:	4b1f      	ldr	r3, [pc, #124]	; (8006520 <UART_SetConfig+0x2f0>)
 80064a2:	61bb      	str	r3, [r7, #24]
        break;
 80064a4:	e00c      	b.n	80064c0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064a6:	f7fe fb45 	bl	8004b34 <HAL_RCC_GetSysClockFreq>
 80064aa:	61b8      	str	r0, [r7, #24]
        break;
 80064ac:	e008      	b.n	80064c0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064b2:	61bb      	str	r3, [r7, #24]
        break;
 80064b4:	e004      	b.n	80064c0 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	77bb      	strb	r3, [r7, #30]
        break;
 80064be:	bf00      	nop
    }

    if (pclk != 0U)
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d018      	beq.n	80064f8 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	085a      	lsrs	r2, r3, #1
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	441a      	add	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	2b0f      	cmp	r3, #15
 80064de:	d909      	bls.n	80064f4 <UART_SetConfig+0x2c4>
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e6:	d205      	bcs.n	80064f4 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60da      	str	r2, [r3, #12]
 80064f2:	e001      	b.n	80064f8 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006504:	7fbb      	ldrb	r3, [r7, #30]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3720      	adds	r7, #32
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	40013800 	.word	0x40013800
 8006514:	40021000 	.word	0x40021000
 8006518:	40004400 	.word	0x40004400
 800651c:	40004800 	.word	0x40004800
 8006520:	007a1200 	.word	0x007a1200

08006524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	f003 0308 	and.w	r3, r3, #8
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00a      	beq.n	8006592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	f003 0304 	and.w	r3, r3, #4
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	f003 0310 	and.w	r3, r3, #16
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00a      	beq.n	80065d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006600:	2b00      	cmp	r3, #0
 8006602:	d01a      	beq.n	800663a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006622:	d10a      	bne.n	800663a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	605a      	str	r2, [r3, #4]
  }
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b098      	sub	sp, #96	; 0x60
 800666c:	af02      	add	r7, sp, #8
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006678:	f7fb fd82 	bl	8002180 <HAL_GetTick>
 800667c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0308 	and.w	r3, r3, #8
 8006688:	2b08      	cmp	r3, #8
 800668a:	d12e      	bne.n	80066ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800668c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006694:	2200      	movs	r2, #0
 8006696:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f88c 	bl	80067b8 <UART_WaitOnFlagUntilTimeout>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d021      	beq.n	80066ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ba:	653b      	str	r3, [r7, #80]	; 0x50
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c4:	647b      	str	r3, [r7, #68]	; 0x44
 80066c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e6      	bne.n	80066a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e062      	b.n	80067b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d149      	bne.n	800678c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006700:	2200      	movs	r2, #0
 8006702:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f856 	bl	80067b8 <UART_WaitOnFlagUntilTimeout>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d03c      	beq.n	800678c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	623b      	str	r3, [r7, #32]
   return(result);
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006730:	633b      	str	r3, [r7, #48]	; 0x30
 8006732:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e6      	bne.n	8006712 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3308      	adds	r3, #8
 800674a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	e853 3f00 	ldrex	r3, [r3]
 8006752:	60fb      	str	r3, [r7, #12]
   return(result);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0301 	bic.w	r3, r3, #1
 800675a:	64bb      	str	r3, [r7, #72]	; 0x48
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3308      	adds	r3, #8
 8006762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006764:	61fa      	str	r2, [r7, #28]
 8006766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006768:	69b9      	ldr	r1, [r7, #24]
 800676a:	69fa      	ldr	r2, [r7, #28]
 800676c:	e841 2300 	strex	r3, r2, [r1]
 8006770:	617b      	str	r3, [r7, #20]
   return(result);
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1e5      	bne.n	8006744 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2220      	movs	r2, #32
 800677c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e011      	b.n	80067b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2220      	movs	r2, #32
 8006790:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2220      	movs	r2, #32
 8006796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3758      	adds	r7, #88	; 0x58
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	603b      	str	r3, [r7, #0]
 80067c4:	4613      	mov	r3, r2
 80067c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c8:	e04f      	b.n	800686a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d0:	d04b      	beq.n	800686a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d2:	f7fb fcd5 	bl	8002180 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d302      	bcc.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e04e      	b.n	800688a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d037      	beq.n	800686a <UART_WaitOnFlagUntilTimeout+0xb2>
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2b80      	cmp	r3, #128	; 0x80
 80067fe:	d034      	beq.n	800686a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b40      	cmp	r3, #64	; 0x40
 8006804:	d031      	beq.n	800686a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b08      	cmp	r3, #8
 8006812:	d110      	bne.n	8006836 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2208      	movs	r2, #8
 800681a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f8ff 	bl	8006a20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2208      	movs	r2, #8
 8006826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e029      	b.n	800688a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006844:	d111      	bne.n	800686a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800684e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 f8e5 	bl	8006a20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2220      	movs	r2, #32
 800685a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e00f      	b.n	800688a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69da      	ldr	r2, [r3, #28]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	4013      	ands	r3, r2
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	429a      	cmp	r2, r3
 8006878:	bf0c      	ite	eq
 800687a:	2301      	moveq	r3, #1
 800687c:	2300      	movne	r3, #0
 800687e:	b2db      	uxtb	r3, r3
 8006880:	461a      	mov	r2, r3
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	429a      	cmp	r2, r3
 8006886:	d0a0      	beq.n	80067ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b096      	sub	sp, #88	; 0x58
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	4613      	mov	r3, r2
 80068a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	88fa      	ldrh	r2, [r7, #6]
 80068ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2222      	movs	r2, #34	; 0x22
 80068bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d028      	beq.n	800691a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068cc:	4a3e      	ldr	r2, [pc, #248]	; (80069c8 <UART_Start_Receive_DMA+0x134>)
 80068ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d4:	4a3d      	ldr	r2, [pc, #244]	; (80069cc <UART_Start_Receive_DMA+0x138>)
 80068d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068dc:	4a3c      	ldr	r2, [pc, #240]	; (80069d0 <UART_Start_Receive_DMA+0x13c>)
 80068de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068e4:	2200      	movs	r2, #0
 80068e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3324      	adds	r3, #36	; 0x24
 80068f2:	4619      	mov	r1, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f8:	461a      	mov	r2, r3
 80068fa:	88fb      	ldrh	r3, [r7, #6]
 80068fc:	f7fc f9de 	bl	8002cbc <HAL_DMA_Start_IT>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d009      	beq.n	800691a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2210      	movs	r2, #16
 800690a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2220      	movs	r2, #32
 8006912:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e051      	b.n	80069be <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d018      	beq.n	8006954 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006936:	657b      	str	r3, [r7, #84]	; 0x54
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	461a      	mov	r2, r3
 800693e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006940:	64bb      	str	r3, [r7, #72]	; 0x48
 8006942:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800694e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e6      	bne.n	8006922 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3308      	adds	r3, #8
 800695a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	f043 0301 	orr.w	r3, r3, #1
 800696a:	653b      	str	r3, [r7, #80]	; 0x50
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3308      	adds	r3, #8
 8006972:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006974:	637a      	str	r2, [r7, #52]	; 0x34
 8006976:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800697a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e5      	bne.n	8006954 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3308      	adds	r3, #8
 800698e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	e853 3f00 	ldrex	r3, [r3]
 8006996:	613b      	str	r3, [r7, #16]
   return(result);
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800699e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3308      	adds	r3, #8
 80069a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069a8:	623a      	str	r2, [r7, #32]
 80069aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	69f9      	ldr	r1, [r7, #28]
 80069ae:	6a3a      	ldr	r2, [r7, #32]
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e5      	bne.n	8006988 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3758      	adds	r7, #88	; 0x58
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	08006ae9 	.word	0x08006ae9
 80069cc:	08006c0f 	.word	0x08006c0f
 80069d0:	08006c4d 	.word	0x08006c4d

080069d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b089      	sub	sp, #36	; 0x24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069f0:	61fb      	str	r3, [r7, #28]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	61bb      	str	r3, [r7, #24]
 80069fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6979      	ldr	r1, [r7, #20]
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	613b      	str	r3, [r7, #16]
   return(result);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e6      	bne.n	80069dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2220      	movs	r2, #32
 8006a12:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006a14:	bf00      	nop
 8006a16:	3724      	adds	r7, #36	; 0x24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b095      	sub	sp, #84	; 0x54
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a46:	643b      	str	r3, [r7, #64]	; 0x40
 8006a48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a4e:	e841 2300 	strex	r3, r2, [r1]
 8006a52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1e6      	bne.n	8006a28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3308      	adds	r3, #8
 8006a60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	f023 0301 	bic.w	r3, r3, #1
 8006a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3308      	adds	r3, #8
 8006a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e5      	bne.n	8006a5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d118      	bne.n	8006ac8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f023 0310 	bic.w	r3, r3, #16
 8006aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ab4:	61bb      	str	r3, [r7, #24]
 8006ab6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	6979      	ldr	r1, [r7, #20]
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e6      	bne.n	8006a96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006adc:	bf00      	nop
 8006ade:	3754      	adds	r7, #84	; 0x54
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b09c      	sub	sp, #112	; 0x70
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	d071      	beq.n	8006be2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8006afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0e:	e853 3f00 	ldrex	r3, [r3]
 8006b12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	461a      	mov	r2, r3
 8006b22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b24:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b26:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b2c:	e841 2300 	strex	r3, r2, [r1]
 8006b30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e6      	bne.n	8006b06 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4a:	f023 0301 	bic.w	r3, r3, #1
 8006b4e:	667b      	str	r3, [r7, #100]	; 0x64
 8006b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3308      	adds	r3, #8
 8006b56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b58:	647a      	str	r2, [r7, #68]	; 0x44
 8006b5a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e5      	bne.n	8006b38 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3308      	adds	r3, #8
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b82:	663b      	str	r3, [r7, #96]	; 0x60
 8006b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3308      	adds	r3, #8
 8006b8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b8c:	633a      	str	r2, [r7, #48]	; 0x30
 8006b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e5      	bne.n	8006b6c <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d118      	bne.n	8006be2 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f023 0310 	bic.w	r3, r3, #16
 8006bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd2:	69b9      	ldr	r1, [r7, #24]
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	617b      	str	r3, [r7, #20]
   return(result);
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e6      	bne.n	8006bb0 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be4:	2200      	movs	r2, #0
 8006be6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d107      	bne.n	8006c00 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006bfa:	f7ff fb0d 	bl	8006218 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bfe:	e002      	b.n	8006c06 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006c00:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006c02:	f7fa fe95 	bl	8001930 <HAL_UART_RxCpltCallback>
}
 8006c06:	bf00      	nop
 8006c08:	3770      	adds	r7, #112	; 0x70
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d109      	bne.n	8006c3e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c30:	085b      	lsrs	r3, r3, #1
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	4619      	mov	r1, r3
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f7ff faee 	bl	8006218 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c3c:	e002      	b.n	8006c44 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f7ff fad6 	bl	80061f0 <HAL_UART_RxHalfCpltCallback>
}
 8006c44:	bf00      	nop
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c5e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c72:	2b80      	cmp	r3, #128	; 0x80
 8006c74:	d109      	bne.n	8006c8a <UART_DMAError+0x3e>
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b21      	cmp	r3, #33	; 0x21
 8006c7a:	d106      	bne.n	8006c8a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006c84:	6978      	ldr	r0, [r7, #20]
 8006c86:	f7ff fea5 	bl	80069d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c94:	2b40      	cmp	r3, #64	; 0x40
 8006c96:	d109      	bne.n	8006cac <UART_DMAError+0x60>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b22      	cmp	r3, #34	; 0x22
 8006c9c:	d106      	bne.n	8006cac <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006ca6:	6978      	ldr	r0, [r7, #20]
 8006ca8:	f7ff feba 	bl	8006a20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb2:	f043 0210 	orr.w	r2, r3, #16
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cbc:	6978      	ldr	r0, [r7, #20]
 8006cbe:	f7ff faa1 	bl	8006204 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cc2:	bf00      	nop
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <memset>:
 8006cca:	4402      	add	r2, r0
 8006ccc:	4603      	mov	r3, r0
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d100      	bne.n	8006cd4 <memset+0xa>
 8006cd2:	4770      	bx	lr
 8006cd4:	f803 1b01 	strb.w	r1, [r3], #1
 8006cd8:	e7f9      	b.n	8006cce <memset+0x4>
	...

08006cdc <__libc_init_array>:
 8006cdc:	b570      	push	{r4, r5, r6, lr}
 8006cde:	4d0d      	ldr	r5, [pc, #52]	; (8006d14 <__libc_init_array+0x38>)
 8006ce0:	4c0d      	ldr	r4, [pc, #52]	; (8006d18 <__libc_init_array+0x3c>)
 8006ce2:	1b64      	subs	r4, r4, r5
 8006ce4:	10a4      	asrs	r4, r4, #2
 8006ce6:	2600      	movs	r6, #0
 8006ce8:	42a6      	cmp	r6, r4
 8006cea:	d109      	bne.n	8006d00 <__libc_init_array+0x24>
 8006cec:	4d0b      	ldr	r5, [pc, #44]	; (8006d1c <__libc_init_array+0x40>)
 8006cee:	4c0c      	ldr	r4, [pc, #48]	; (8006d20 <__libc_init_array+0x44>)
 8006cf0:	f000 f818 	bl	8006d24 <_init>
 8006cf4:	1b64      	subs	r4, r4, r5
 8006cf6:	10a4      	asrs	r4, r4, #2
 8006cf8:	2600      	movs	r6, #0
 8006cfa:	42a6      	cmp	r6, r4
 8006cfc:	d105      	bne.n	8006d0a <__libc_init_array+0x2e>
 8006cfe:	bd70      	pop	{r4, r5, r6, pc}
 8006d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d04:	4798      	blx	r3
 8006d06:	3601      	adds	r6, #1
 8006d08:	e7ee      	b.n	8006ce8 <__libc_init_array+0xc>
 8006d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d0e:	4798      	blx	r3
 8006d10:	3601      	adds	r6, #1
 8006d12:	e7f2      	b.n	8006cfa <__libc_init_array+0x1e>
 8006d14:	08006d74 	.word	0x08006d74
 8006d18:	08006d74 	.word	0x08006d74
 8006d1c:	08006d74 	.word	0x08006d74
 8006d20:	08006d78 	.word	0x08006d78

08006d24 <_init>:
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	bf00      	nop
 8006d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2a:	bc08      	pop	{r3}
 8006d2c:	469e      	mov	lr, r3
 8006d2e:	4770      	bx	lr

08006d30 <_fini>:
 8006d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d32:	bf00      	nop
 8006d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d36:	bc08      	pop	{r3}
 8006d38:	469e      	mov	lr, r3
 8006d3a:	4770      	bx	lr
