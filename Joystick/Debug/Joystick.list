
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008ea4  08008ea4  00018ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008edc  08008edc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08008edc  08008edc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008edc  08008edc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008edc  08008edc  00018edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ee0  08008ee0  00018ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f0  20000010  08008ef4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  08008ef4  00020700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a57  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a1d  00000000  00000000  00037ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  0003b4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fdb  00000000  00000000  0003c958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ddfe  00000000  00000000  0003d933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b5fd  00000000  00000000  0005b731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adbdf  00000000  00000000  00076d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053d0  00000000  00000000  00124910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00129ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e8c 	.word	0x08008e8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08008e8c 	.word	0x08008e8c

080001c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001d8:	4b2e      	ldr	r3, [pc, #184]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001da:	4a2f      	ldr	r2, [pc, #188]	; (8000298 <MX_ADC1_Init+0xd0>)
 80001dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001de:	4b2d      	ldr	r3, [pc, #180]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80001e6:	4b2b      	ldr	r3, [pc, #172]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001ec:	4b29      	ldr	r3, [pc, #164]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f2:	4b28      	ldr	r3, [pc, #160]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001f4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80001f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001fa:	4b26      	ldr	r3, [pc, #152]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000200:	4b24      	ldr	r3, [pc, #144]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000202:	2204      	movs	r2, #4
 8000204:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000206:	4823      	ldr	r0, [pc, #140]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000208:	f002 ff10 	bl	800302c <HAL_ADC_Init>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000212:	f002 faf7 	bl	8002804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000216:	2307      	movs	r3, #7
 8000218:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800021a:	2301      	movs	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800021e:	2307      	movs	r3, #7
 8000220:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4619      	mov	r1, r3
 8000226:	481b      	ldr	r0, [pc, #108]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000228:	f003 f876 	bl	8003318 <HAL_ADC_ConfigChannel>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000232:	f002 fae7 	bl	8002804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000236:	230e      	movs	r3, #14
 8000238:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800023a:	2302      	movs	r3, #2
 800023c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4619      	mov	r1, r3
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000244:	f003 f868 	bl	8003318 <HAL_ADC_ConfigChannel>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800024e:	f002 fad9 	bl	8002804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000252:	230f      	movs	r3, #15
 8000254:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000256:	2303      	movs	r3, #3
 8000258:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4619      	mov	r1, r3
 800025e:	480d      	ldr	r0, [pc, #52]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000260:	f003 f85a 	bl	8003318 <HAL_ADC_ConfigChannel>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800026a:	f002 facb 	bl	8002804 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800026e:	2308      	movs	r3, #8
 8000270:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000272:	2304      	movs	r3, #4
 8000274:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4619      	mov	r1, r3
 800027a:	4806      	ldr	r0, [pc, #24]	; (8000294 <MX_ADC1_Init+0xcc>)
 800027c:	f003 f84c 	bl	8003318 <HAL_ADC_ConfigChannel>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000286:	f002 fabd 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800028a:	bf00      	nop
 800028c:	3710      	adds	r7, #16
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	2000002c 	.word	0x2000002c
 8000298:	40012400 	.word	0x40012400

0800029c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08c      	sub	sp, #48	; 0x30
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a4:	f107 031c 	add.w	r3, r7, #28
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a42      	ldr	r2, [pc, #264]	; (80003c4 <HAL_ADC_MspInit+0x128>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d17d      	bne.n	80003ba <HAL_ADC_MspInit+0x11e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002be:	4b42      	ldr	r3, [pc, #264]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a41      	ldr	r2, [pc, #260]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6193      	str	r3, [r2, #24]
 80002ca:	4b3f      	ldr	r3, [pc, #252]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002d2:	61bb      	str	r3, [r7, #24]
 80002d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	4b3c      	ldr	r3, [pc, #240]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a3b      	ldr	r2, [pc, #236]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b39      	ldr	r3, [pc, #228]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ea:	617b      	str	r3, [r7, #20]
 80002ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ee:	4b36      	ldr	r3, [pc, #216]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a35      	ldr	r2, [pc, #212]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b33      	ldr	r3, [pc, #204]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000302:	613b      	str	r3, [r7, #16]
 8000304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000306:	4b30      	ldr	r3, [pc, #192]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a2f      	ldr	r2, [pc, #188]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 800030c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	4b2d      	ldr	r3, [pc, #180]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = FIN_ADC4_Pin;
 800031e:	2380      	movs	r3, #128	; 0x80
 8000320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000322:	2303      	movs	r3, #3
 8000324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FIN_ADC4_GPIO_Port, &GPIO_InitStruct);
 800032a:	f107 031c 	add.w	r3, r7, #28
 800032e:	4619      	mov	r1, r3
 8000330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000334:	f004 fcfe 	bl	8004d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FIN_ADC3_Pin|FIN_ADC2_Pin;
 8000338:	2330      	movs	r3, #48	; 0x30
 800033a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800033c:	2303      	movs	r3, #3
 800033e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000344:	f107 031c 	add.w	r3, r7, #28
 8000348:	4619      	mov	r1, r3
 800034a:	4820      	ldr	r0, [pc, #128]	; (80003cc <HAL_ADC_MspInit+0x130>)
 800034c:	f004 fcf2 	bl	8004d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FIN_ADC4B0_Pin;
 8000350:	2301      	movs	r3, #1
 8000352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000354:	2303      	movs	r3, #3
 8000356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FIN_ADC4B0_GPIO_Port, &GPIO_InitStruct);
 800035c:	f107 031c 	add.w	r3, r7, #28
 8000360:	4619      	mov	r1, r3
 8000362:	481b      	ldr	r0, [pc, #108]	; (80003d0 <HAL_ADC_MspInit+0x134>)
 8000364:	f004 fce6 	bl	8004d34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <HAL_ADC_MspInit+0x13c>)
 800036c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800036e:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 800037c:	2280      	movs	r2, #128	; 0x80
 800037e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000386:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 800038a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800038e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000392:	2220      	movs	r2, #32
 8000394:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000398:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800039c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800039e:	480d      	ldr	r0, [pc, #52]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 80003a0:	f004 f8c1 	bl	8004526 <HAL_DMA_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 80003aa:	f002 fa2b 	bl	8002804 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a08      	ldr	r2, [pc, #32]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 80003b2:	621a      	str	r2, [r3, #32]
 80003b4:	4a07      	ldr	r2, [pc, #28]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003ba:	bf00      	nop
 80003bc:	3730      	adds	r7, #48	; 0x30
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40012400 	.word	0x40012400
 80003c8:	40021000 	.word	0x40021000
 80003cc:	48000800 	.word	0x48000800
 80003d0:	48000400 	.word	0x48000400
 80003d4:	2000005c 	.word	0x2000005c
 80003d8:	40020008 	.word	0x40020008

080003dc <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003e0:	4b17      	ldr	r3, [pc, #92]	; (8000440 <MX_CAN_Init+0x64>)
 80003e2:	4a18      	ldr	r2, [pc, #96]	; (8000444 <MX_CAN_Init+0x68>)
 80003e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80003e6:	4b16      	ldr	r3, [pc, #88]	; (8000440 <MX_CAN_Init+0x64>)
 80003e8:	2202      	movs	r2, #2
 80003ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003ec:	4b14      	ldr	r3, [pc, #80]	; (8000440 <MX_CAN_Init+0x64>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003f2:	4b13      	ldr	r3, [pc, #76]	; (8000440 <MX_CAN_Init+0x64>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_CAN_Init+0x64>)
 80003fa:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80003fe:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_CAN_Init+0x64>)
 8000402:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000406:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000408:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <MX_CAN_Init+0x64>)
 800040a:	2200      	movs	r2, #0
 800040c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_CAN_Init+0x64>)
 8000410:	2200      	movs	r2, #0
 8000412:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000414:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <MX_CAN_Init+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_CAN_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <MX_CAN_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_CAN_Init+0x64>)
 8000428:	2200      	movs	r2, #0
 800042a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800042c:	4804      	ldr	r0, [pc, #16]	; (8000440 <MX_CAN_Init+0x64>)
 800042e:	f003 f8fe 	bl	800362e <HAL_CAN_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000438:	f002 f9e4 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	200000a0 	.word	0x200000a0
 8000444:	40006400 	.word	0x40006400

08000448 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08a      	sub	sp, #40	; 0x28
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a1b      	ldr	r2, [pc, #108]	; (80004d4 <HAL_CAN_MspInit+0x8c>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d130      	bne.n	80004cc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800046a:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a1a      	ldr	r2, [pc, #104]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 8000470:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800047e:	613b      	str	r3, [r7, #16]
 8000480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 8000488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <HAL_CAN_MspInit+0x90>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800049a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800049e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a0:	2302      	movs	r3, #2
 80004a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a8:	2303      	movs	r3, #3
 80004aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80004ac:	2309      	movs	r3, #9
 80004ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	4619      	mov	r1, r3
 80004b6:	4809      	ldr	r0, [pc, #36]	; (80004dc <HAL_CAN_MspInit+0x94>)
 80004b8:	f004 fc3c 	bl	8004d34 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	2014      	movs	r0, #20
 80004c2:	f003 fff6 	bl	80044b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80004c6:	2014      	movs	r0, #20
 80004c8:	f004 f80f 	bl	80044ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80004cc:	bf00      	nop
 80004ce:	3728      	adds	r7, #40	; 0x28
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40006400 	.word	0x40006400
 80004d8:	40021000 	.word	0x40021000
 80004dc:	48000400 	.word	0x48000400

080004e0 <CAN_ConfigFilter>:
//  HAL_CAN_ConfigFilter(&hcan, &f);
//}

/* Tüm standart ID'leri kabul eden basit mask filtre (FIFO0) */
void CAN_ConfigFilter(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilter = {0};
 80004e6:	463b      	mov	r3, r7
 80004e8:	2228      	movs	r2, #40	; 0x28
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f008 fca0 	bl	8008e32 <memset>

  sFilter.FilterBank = 0;                          // 0..27 arası
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
  sFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
  sFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80004fa:	2301      	movs	r3, #1
 80004fc:	61fb      	str	r3, [r7, #28]
  sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]

  /* Accept-all: ID=0, MASK=0 */
  sFilter.FilterIdHigh      = 0x0000;
 8000502:	2300      	movs	r3, #0
 8000504:	603b      	str	r3, [r7, #0]
  sFilter.FilterIdLow       = 0x0000;
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
  sFilter.FilterMaskIdHigh  = 0x0000;
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
  sFilter.FilterMaskIdLow   = 0x0000;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]

  sFilter.FilterActivation = ENABLE;
 8000512:	2301      	movs	r3, #1
 8000514:	623b      	str	r3, [r7, #32]

  if (HAL_CAN_ConfigFilter(&hcan, &sFilter) != HAL_OK) {
 8000516:	463b      	mov	r3, r7
 8000518:	4619      	mov	r1, r3
 800051a:	4806      	ldr	r0, [pc, #24]	; (8000534 <CAN_ConfigFilter+0x54>)
 800051c:	f003 f982 	bl	8003824 <HAL_CAN_ConfigFilter>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <CAN_ConfigFilter+0x4a>
    Error_Handler();
 8000526:	f002 f96d 	bl	8002804 <Error_Handler>
  }
}
 800052a:	bf00      	nop
 800052c:	3728      	adds	r7, #40	; 0x28
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200000a0 	.word	0x200000a0

08000538 <CAN_StartIT>:

/* CAN'i başlat + RX interrupt'larını aktive et */
void CAN_StartIT(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800053c:	4809      	ldr	r0, [pc, #36]	; (8000564 <CAN_StartIT+0x2c>)
 800053e:	f003 fa3b 	bl	80039b8 <HAL_CAN_Start>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <CAN_StartIT+0x14>
    Error_Handler();
 8000548:	f002 f95c 	bl	8002804 <Error_Handler>
  }

  /* FIFO0'da mesaj gelince kesme, ayrıca TX mailbox boşalması vs. */
  if (HAL_CAN_ActivateNotification(&hcan,
 800054c:	f240 5103 	movw	r1, #1283	; 0x503
 8000550:	4804      	ldr	r0, [pc, #16]	; (8000564 <CAN_StartIT+0x2c>)
 8000552:	f003 fc67 	bl	8003e24 <HAL_CAN_ActivateNotification>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <CAN_StartIT+0x28>
      CAN_IT_RX_FIFO0_MSG_PENDING |
      CAN_IT_TX_MAILBOX_EMPTY |
      CAN_IT_ERROR_WARNING |
      CAN_IT_BUSOFF) != HAL_OK)
  {
    Error_Handler();
 800055c:	f002 f952 	bl	8002804 <Error_Handler>
  }
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200000a0 	.word	0x200000a0

08000568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056e:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <MX_DMA_Init+0x70>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <MX_DMA_Init+0x70>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <MX_DMA_Init+0x70>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <MX_DMA_Init+0x70>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a13      	ldr	r2, [pc, #76]	; (80005d8 <MX_DMA_Init+0x70>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <MX_DMA_Init+0x70>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	200b      	movs	r0, #11
 80005a4:	f003 ff85 	bl	80044b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005a8:	200b      	movs	r0, #11
 80005aa:	f003 ff9e 	bl	80044ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2100      	movs	r1, #0
 80005b2:	200f      	movs	r0, #15
 80005b4:	f003 ff7d 	bl	80044b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80005b8:	200f      	movs	r0, #15
 80005ba:	f003 ff96 	bl	80044ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	203a      	movs	r0, #58	; 0x3a
 80005c4:	f003 ff75 	bl	80044b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80005c8:	203a      	movs	r0, #58	; 0x3a
 80005ca:	f003 ff8e 	bl	80044ea <HAL_NVIC_EnableIRQ>

}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08c      	sub	sp, #48	; 0x30
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b46      	ldr	r3, [pc, #280]	; (800070c <MX_GPIO_Init+0x130>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a45      	ldr	r2, [pc, #276]	; (800070c <MX_GPIO_Init+0x130>)
 80005f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b43      	ldr	r3, [pc, #268]	; (800070c <MX_GPIO_Init+0x130>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000606:	61bb      	str	r3, [r7, #24]
 8000608:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060a:	4b40      	ldr	r3, [pc, #256]	; (800070c <MX_GPIO_Init+0x130>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a3f      	ldr	r2, [pc, #252]	; (800070c <MX_GPIO_Init+0x130>)
 8000610:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b3d      	ldr	r3, [pc, #244]	; (800070c <MX_GPIO_Init+0x130>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b3a      	ldr	r3, [pc, #232]	; (800070c <MX_GPIO_Init+0x130>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a39      	ldr	r2, [pc, #228]	; (800070c <MX_GPIO_Init+0x130>)
 8000628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b37      	ldr	r3, [pc, #220]	; (800070c <MX_GPIO_Init+0x130>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b34      	ldr	r3, [pc, #208]	; (800070c <MX_GPIO_Init+0x130>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a33      	ldr	r2, [pc, #204]	; (800070c <MX_GPIO_Init+0x130>)
 8000640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b31      	ldr	r3, [pc, #196]	; (800070c <MX_GPIO_Init+0x130>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	4b2e      	ldr	r3, [pc, #184]	; (800070c <MX_GPIO_Init+0x130>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a2d      	ldr	r2, [pc, #180]	; (800070c <MX_GPIO_Init+0x130>)
 8000658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b2b      	ldr	r3, [pc, #172]	; (800070c <MX_GPIO_Init+0x130>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066a:	4b28      	ldr	r3, [pc, #160]	; (800070c <MX_GPIO_Init+0x130>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a27      	ldr	r2, [pc, #156]	; (800070c <MX_GPIO_Init+0x130>)
 8000670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b25      	ldr	r3, [pc, #148]	; (800070c <MX_GPIO_Init+0x130>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = BTN_18_Pin|BTN_17_Pin|BTN_23_Pin|BTN_24_Pin
 8000682:	f64f 73cf 	movw	r3, #65487	; 0xffcf
 8000686:	61fb      	str	r3, [r7, #28]
                          |BTN_21_Pin|BTN_22_Pin|BTN_07_Pin|BTN_15_Pin
                          |BTN_16_Pin|BTN_13_Pin|BTN_12_Pin|BTN_27_Pin
                          |BTN_28_Pin|BTN_25_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	481e      	ldr	r0, [pc, #120]	; (8000710 <MX_GPIO_Init+0x134>)
 8000698:	f004 fb4c 	bl	8004d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = BTN_08_Pin|BTN_05_Pin|BTN_06_Pin|BTN_03_Pin
 800069c:	f248 137f 	movw	r3, #33151	; 0x817f
 80006a0:	61fb      	str	r3, [r7, #28]
                          |BTN_19_Pin|BTN_01_Pin|BTN_02_Pin|BTN_29_Pin
                          |BTN_09_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f004 fb3e 	bl	8004d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_04_Pin|BTN_20_Pin|BTN_26_Pin|BTN_32_Pin
 80006b8:	f24c 0378 	movw	r3, #49272	; 0xc078
 80006bc:	61fb      	str	r3, [r7, #28]
                          |BTN_31_Pin|BTN_30_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	4619      	mov	r1, r3
 80006cc:	4811      	ldr	r0, [pc, #68]	; (8000714 <MX_GPIO_Init+0x138>)
 80006ce:	f004 fb31 	bl	8004d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_14_Pin;
 80006d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_14_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_GPIO_Init+0x13c>)
 80006e8:	f004 fb24 	bl	8004d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = BTN_11_Pin|BTN_10_Pin;
 80006ec:	23c0      	movs	r3, #192	; 0xc0
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4807      	ldr	r0, [pc, #28]	; (800071c <MX_GPIO_Init+0x140>)
 8000700:	f004 fb18 	bl	8004d34 <HAL_GPIO_Init>

}
 8000704:	bf00      	nop
 8000706:	3730      	adds	r7, #48	; 0x30
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000
 8000710:	48000800 	.word	0x48000800
 8000714:	48000400 	.word	0x48000400
 8000718:	48000c00 	.word	0x48000c00
 800071c:	48001400 	.word	0x48001400

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000724:	f002 fbf8 	bl	8002f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f84a 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f7ff ff56 	bl	80005dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000730:	f7ff ff1a 	bl	8000568 <MX_DMA_Init>
  MX_ADC1_Init();
 8000734:	f7ff fd48 	bl	80001c8 <MX_ADC1_Init>
  MX_CAN_Init();
 8000738:	f7ff fe50 	bl	80003dc <MX_CAN_Init>
  MX_SDADC1_Init();
 800073c:	f002 f868 	bl	8002810 <MX_SDADC1_Init>
  MX_TIM2_Init();
 8000740:	f002 fa40 	bl	8002bc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000744:	f002 fa8a 	bl	8002c5c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000748:	f002 fb16 	bl	8002d78 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(1000);
 800074c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000750:	f002 fc48 	bl	8002fe4 <HAL_Delay>
	checkBootloader();
 8000754:	f000 f8f0 	bl	8000938 <checkBootloader>

/*Baslangic için default config data atamasi*/
	writeDefaultConfigPage();
 8000758:	f001 ff78 	bl	800264c <writeDefaultConfigPage>
	HAL_TIM_Base_Start_IT(&htim2);
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <main+0x88>)
 800075e:	f006 fd8b 	bl	8007278 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000762:	4812      	ldr	r0, [pc, #72]	; (80007ac <main+0x8c>)
 8000764:	f006 fd88 	bl	8007278 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_DMA(&huart1, &rxDataIn, 1);
 8000768:	2201      	movs	r2, #1
 800076a:	4911      	ldr	r1, [pc, #68]	; (80007b0 <main+0x90>)
 800076c:	4811      	ldr	r0, [pc, #68]	; (80007b4 <main+0x94>)
 800076e:	f007 fa75 	bl	8007c5c <HAL_UART_Receive_DMA>

	CAN_ConfigFilter();       // Tüm ID'leri kabul et (mask filtre)
 8000772:	f7ff feb5 	bl	80004e0 <CAN_ConfigFilter>
	CAN_StartIT();            // CAN'i başlat + RX interrupt aç
 8000776:	f7ff fedf 	bl	8000538 <CAN_StartIT>
//	  HAL_CAN_Start(&hcan);                              // CAN’ı başlat
//	  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // FIFO0 RX kesmesi


	//fingerAnalogread start
	HAL_ADCEx_Calibration_Start(&hadc1);
 800077a:	480f      	ldr	r0, [pc, #60]	; (80007b8 <main+0x98>)
 800077c:	f002 fd2e 	bl	80031dc <HAL_ADCEx_Calibration_Start>
	HAL_SDADC_CalibrationStart(&hsdadc1, SDADC_CALIBRATION_SEQ_1);
 8000780:	2100      	movs	r1, #0
 8000782:	480e      	ldr	r0, [pc, #56]	; (80007bc <main+0x9c>)
 8000784:	f006 fb00 	bl	8006d88 <HAL_SDADC_CalibrationStart>
	HAL_SDADC_PollForCalibEvent(&hsdadc1, 1000);
 8000788:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800078c:	480b      	ldr	r0, [pc, #44]	; (80007bc <main+0x9c>)
 800078e:	f006 fb3b 	bl	8006e08 <HAL_SDADC_PollForCalibEvent>
	configurationSettings();
 8000792:	f000 f879 	bl	8000888 <configurationSettings>
	initDigitalInputs(getDigitalInputs());
 8000796:	f000 fcf1 	bl	800117c <getDigitalInputs>
 800079a:	4603      	mov	r3, r0
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fb21 	bl	8000de4 <initDigitalInputs>
//	    {
//	      can_rx_flag = 0;
//	      //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);    // bir şey alındı -> LED değiştir
//	      // rxh.StdId, rxh.DLC, rxdata[] burada kullanılabilir
//	    }
	  mainLoop();
 80007a2:	f000 f895 	bl	80008d0 <mainLoop>
 80007a6:	e7fc      	b.n	80007a2 <main+0x82>
 80007a8:	20000578 	.word	0x20000578
 80007ac:	200005c4 	.word	0x200005c4
 80007b0:	2000038a 	.word	0x2000038a
 80007b4:	20000610 	.word	0x20000610
 80007b8:	2000002c 	.word	0x2000002c
 80007bc:	200004f0 	.word	0x200004f0

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b09a      	sub	sp, #104	; 0x68
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007ca:	2228      	movs	r2, #40	; 0x28
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f008 fb2f 	bl	8008e32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e4:	463b      	mov	r3, r7
 80007e6:	222c      	movs	r2, #44	; 0x2c
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f008 fb21 	bl	8008e32 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f0:	2301      	movs	r3, #1
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV3;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fe:	2301      	movs	r3, #1
 8000800:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000802:	2302      	movs	r3, #2
 8000804:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800080c:	2300      	movs	r3, #0
 800080e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000814:	4618      	mov	r0, r3
 8000816:	f004 fce3 	bl	80051e0 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000820:	f001 fff0 	bl	8002804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2302      	movs	r3, #2
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000834:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800083a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f005 fd0b 	bl	800625c <HAL_RCC_ClockConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800084c:	f001 ffda 	bl	8002804 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1
 8000850:	f640 0381 	movw	r3, #2177	; 0x881
 8000854:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SDADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000856:	2301      	movs	r3, #1
 8000858:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV4;
 800085a:	f04f 4308 	mov.w	r3, #2281701376	; 0x88000000
 800085e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	4618      	mov	r0, r3
 8000868:	f005 ff1a 	bl	80066a0 <HAL_RCCEx_PeriphCLKConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000872:	f001 ffc7 	bl	8002804 <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8000876:	f44f 7000 	mov.w	r0, #512	; 0x200
 800087a:	f004 fbed 	bl	8005058 <HAL_PWREx_EnableSDADC>
}
 800087e:	bf00      	nop
 8000880:	3768      	adds	r7, #104	; 0x68
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <configurationSettings>:

/* USER CODE BEGIN 4 */
void configurationSettings(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	//check for DEFAULT/USER Configuration
	flashReadValue = (*(uint32_t*)CONFIG_DATA_DEFAULT_SELECT);
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <configurationSettings+0x38>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <configurationSettings+0x3c>)
 8000894:	701a      	strb	r2, [r3, #0]
	flashReadValue = 0xff;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <configurationSettings+0x3c>)
 8000898:	22ff      	movs	r2, #255	; 0xff
 800089a:	701a      	strb	r2, [r3, #0]
	if(flashReadValue == 0xFF)
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <configurationSettings+0x3c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2bff      	cmp	r3, #255	; 0xff
 80008a2:	d103      	bne.n	80008ac <configurationSettings+0x24>
	{
		loadDefaultValues(&userTkkConfig);
 80008a4:	4808      	ldr	r0, [pc, #32]	; (80008c8 <configurationSettings+0x40>)
 80008a6:	f001 f81f 	bl	80018e8 <loadDefaultValues>
 80008aa:	e002      	b.n	80008b2 <configurationSettings+0x2a>
	}
	else
	{
		readFlashUserConf(&userTkkConfig);
 80008ac:	4806      	ldr	r0, [pc, #24]	; (80008c8 <configurationSettings+0x40>)
 80008ae:	f000 ffc3 	bl	8001838 <readFlashUserConf>
	}

	calculateJostickBorders(&userTkkConfig, &tkkJoystickBorder);
 80008b2:	4906      	ldr	r1, [pc, #24]	; (80008cc <configurationSettings+0x44>)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <configurationSettings+0x40>)
 80008b6:	f000 f9af 	bl	8000c18 <calculateJostickBorders>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	0800e000 	.word	0x0800e000
 80008c4:	200004ca 	.word	0x200004ca
 80008c8:	200003f4 	.word	0x200003f4
 80008cc:	20000494 	.word	0x20000494

080008d0 <mainLoop>:
void mainLoop(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	if(sampleAnalogInputs == true)
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <mainLoop+0x4c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d014      	beq.n	8000906 <mainLoop+0x36>
		{

			//averageAnalogInputs(&AnADC_Values[0], &AnADC_Read[0], ANALOG_COUNT, AVERAGE_WINDOW);
			averageAnalogInputs(AnADC_Values, AnADC_Read, ANALOG_COUNT, AVERAGE_WINDOW);
 80008dc:	2302      	movs	r3, #2
 80008de:	2202      	movs	r2, #2
 80008e0:	490f      	ldr	r1, [pc, #60]	; (8000920 <mainLoop+0x50>)
 80008e2:	4810      	ldr	r0, [pc, #64]	; (8000924 <mainLoop+0x54>)
 80008e4:	f000 f9ef 	bl	8000cc6 <averageAnalogInputs>
			calculateAxisData(&tkkJoystickBorder, &AnADC_Values[0], &fittedAnAdc_Values[0], XAXIS);
 80008e8:	2301      	movs	r3, #1
 80008ea:	4a0f      	ldr	r2, [pc, #60]	; (8000928 <mainLoop+0x58>)
 80008ec:	490d      	ldr	r1, [pc, #52]	; (8000924 <mainLoop+0x54>)
 80008ee:	480f      	ldr	r0, [pc, #60]	; (800092c <mainLoop+0x5c>)
 80008f0:	f000 f8bc 	bl	8000a6c <calculateAxisData>
			calculateAxisData(&tkkJoystickBorder, &AnADC_Values[1], &fittedAnAdc_Values[1], YAXIS);
 80008f4:	2300      	movs	r3, #0
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <mainLoop+0x60>)
 80008f8:	490e      	ldr	r1, [pc, #56]	; (8000934 <mainLoop+0x64>)
 80008fa:	480c      	ldr	r0, [pc, #48]	; (800092c <mainLoop+0x5c>)
 80008fc:	f000 f8b6 	bl	8000a6c <calculateAxisData>
			sampleAnalogInputs = false;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <mainLoop+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
		}

		sampleDigitalInputs(getDigitalInputs());
 8000906:	f000 fc39 	bl	800117c <getDigitalInputs>
 800090a:	4603      	mov	r3, r0
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fba7 	bl	8001060 <sampleDigitalInputs>
		SDADC_ScanConversion();
 8000912:	f000 fa0b 	bl	8000d2c <SDADC_ScanConversion>
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000c8 	.word	0x200000c8
 8000920:	200000cc 	.word	0x200000cc
 8000924:	200000d4 	.word	0x200000d4
 8000928:	200000dc 	.word	0x200000dc
 800092c:	20000494 	.word	0x20000494
 8000930:	200000e0 	.word	0x200000e0
 8000934:	200000d8 	.word	0x200000d8

08000938 <checkBootloader>:

void checkBootloader(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	bootValue = *(uint32_t*)CONFIG_BOOTMODE_INIT_OFFSET;
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <checkBootloader+0x48>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	b29a      	uxth	r2, r3
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <checkBootloader+0x4c>)
 8000944:	801a      	strh	r2, [r3, #0]
	if(bootValue == 0x00CD)
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <checkBootloader+0x4c>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	2bcd      	cmp	r3, #205	; 0xcd
 800094c:	d115      	bne.n	800097a <checkBootloader+0x42>
	{
			HAL_FLASH_Unlock();
 800094e:	f004 f889 	bl	8004a64 <HAL_FLASH_Unlock>
			static FLASH_EraseInitTypeDef eraseInit;
			eraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <checkBootloader+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
			eraseInit.PageAddress = CONFIG_BOOTMODE_BASE_ADDR; // düzenlenecek !!!!!!!!!!!!!!!!!!!!*/
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <checkBootloader+0x50>)
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <checkBootloader+0x54>)
 800095c:	605a      	str	r2, [r3, #4]
			eraseInit.NbPages     = 1;
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <checkBootloader+0x50>)
 8000960:	2201      	movs	r2, #1
 8000962:	609a      	str	r2, [r3, #8]

			if (HAL_FLASHEx_Erase(&eraseInit, &PAGEError) != HAL_OK)
 8000964:	490a      	ldr	r1, [pc, #40]	; (8000990 <checkBootloader+0x58>)
 8000966:	4808      	ldr	r0, [pc, #32]	; (8000988 <checkBootloader+0x50>)
 8000968:	f004 f940 	bl	8004bec <HAL_FLASHEx_Erase>
			{
			}
			HAL_Delay(100);
 800096c:	2064      	movs	r0, #100	; 0x64
 800096e:	f002 fb39 	bl	8002fe4 <HAL_Delay>
			HAL_FLASH_Lock();
 8000972:	f004 f89d 	bl	8004ab0 <HAL_FLASH_Lock>
		bootloaderInit();
 8000976:	f000 f84d 	bl	8000a14 <bootloaderInit>
	}
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	0800a002 	.word	0x0800a002
 8000984:	200004c8 	.word	0x200004c8
 8000988:	200004cc 	.word	0x200004cc
 800098c:	0800a000 	.word	0x0800a000
 8000990:	200003a0 	.word	0x200003a0

08000994 <bootloaderCommand>:

void bootloaderCommand(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800099a:	f004 f863 	bl	8004a64 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInitStruct_BOOT;
	EraseInitStruct_BOOT.TypeErase   = FLASH_TYPEERASE_PAGES;
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
	EraseInitStruct_BOOT.PageAddress = CONFIG_BOOTMODE_BASE_ADDR; // düzenlenecek !!!!!!!!!!!!!!!!!!!!*/
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <bootloaderCommand+0x6c>)
 80009a4:	60bb      	str	r3, [r7, #8]
	EraseInitStruct_BOOT.NbPages     = 1;
 80009a6:	2301      	movs	r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct_BOOT, &PAGEError) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4915      	ldr	r1, [pc, #84]	; (8000a04 <bootloaderCommand+0x70>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	f004 f91c 	bl	8004bec <HAL_FLASHEx_Erase>
	{

	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_BOOTMODE_INIT_OFFSET, 0x00CD);
 80009b4:	f04f 02cd 	mov.w	r2, #205	; 0xcd
 80009b8:	f04f 0300 	mov.w	r3, #0
 80009bc:	4912      	ldr	r1, [pc, #72]	; (8000a08 <bootloaderCommand+0x74>)
 80009be:	2001      	movs	r0, #1
 80009c0:	f003 ffe0 	bl	8004984 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80009c4:	f004 f874 	bl	8004ab0 <HAL_FLASH_Lock>
	bootValue = *(uint32_t*)CONFIG_BOOTMODE_INIT_OFFSET;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <bootloaderCommand+0x74>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <bootloaderCommand+0x78>)
 80009d0:	801a      	strh	r2, [r3, #0]

	if(bootValue == 0x00CD)
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <bootloaderCommand+0x78>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	2bcd      	cmp	r3, #205	; 0xcd
 80009d8:	d10e      	bne.n	80009f8 <bootloaderCommand+0x64>
	{
		if(userTkkConfig.tkkModSelection == TKK_MOD_RS422)
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <bootloaderCommand+0x7c>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <bootloaderCommand+0x54>
		{
			sendAckUart();
 80009e2:	f000 ffd9 	bl	8001998 <sendAckUart>
 80009e6:	e005      	b.n	80009f4 <bootloaderCommand+0x60>
		}

		else if(userTkkConfig.tkkModSelection == TKK_MOD_CAN)
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <bootloaderCommand+0x7c>)
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d101      	bne.n	80009f4 <bootloaderCommand+0x60>
		{
			sendAckCan();
 80009f0:	f000 fff4 	bl	80019dc <sendAckCan>
		}
		HAL_NVIC_SystemReset();
 80009f4:	f003 fd87 	bl	8004506 <HAL_NVIC_SystemReset>
	}
}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	0800a000 	.word	0x0800a000
 8000a04:	200003a0 	.word	0x200003a0
 8000a08:	0800a002 	.word	0x0800a002
 8000a0c:	200004c8 	.word	0x200004c8
 8000a10:	200003f4 	.word	0x200003f4

08000a14 <bootloaderInit>:

void bootloaderInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
	SysMemBootJump = (void(*)(void)) (*((uint32_t*) (0x1FFFD800 + 4)));
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <bootloaderInit+0x48>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <bootloaderInit+0x4c>)
 8000a22:	601a      	str	r2, [r3, #0]

	HAL_RCC_DeInit();
 8000a24:	f004 fb38 	bl	8005098 <HAL_RCC_DeInit>
	SysTick -> CTRL = 0;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <bootloaderInit+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
	SysTick -> LOAD = 0;
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <bootloaderInit+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
	SysTick -> VAL  = 0;
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <bootloaderInit+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	f383 8810 	msr	PRIMASK, r3
}
 8000a44:	bf00      	nop
	__set_PRIMASK(1);

	__set_MSP(DEFAULT_MSP_VALUE);
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <bootloaderInit+0x54>)
 8000a48:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f383 8808 	msr	MSP, r3
}
 8000a50:	bf00      	nop
	SysMemBootJump();
 8000a52:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <bootloaderInit+0x4c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4798      	blx	r3
	while(1);
 8000a58:	e7fe      	b.n	8000a58 <bootloaderInit+0x44>
 8000a5a:	bf00      	nop
 8000a5c:	1fffd804 	.word	0x1fffd804
 8000a60:	200004c4 	.word	0x200004c4
 8000a64:	e000e010 	.word	0xe000e010
 8000a68:	20001258 	.word	0x20001258

08000a6c <calculateAxisData>:
}
void calculateAxisData(joystickBorder* tempJoystickBorder, uint32_t* tempAnADC_Value, int32_t* fittedAnAdc_Values, bool axisData)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b087      	sub	sp, #28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
 8000a78:	70fb      	strb	r3, [r7, #3]
	joystickBorder* joystickBorderPtr;
	joystickBorderPtr = tempJoystickBorder;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	617b      	str	r3, [r7, #20]
	errX = GPIO_PIN_RESET;
 8000a7e:	4b64      	ldr	r3, [pc, #400]	; (8000c10 <calculateAxisData+0x1a4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
	errY = GPIO_PIN_RESET;
 8000a84:	4b63      	ldr	r3, [pc, #396]	; (8000c14 <calculateAxisData+0x1a8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
	//calculate x-Axis
	if(axisData == XAXIS)
 8000a8a:	78fb      	ldrb	r3, [r7, #3]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d05d      	beq.n	8000b4c <calculateAxisData+0xe0>
	{
		if(*tempAnADC_Value <= joystickBorderPtr->xLeftLow)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d806      	bhi.n	8000aaa <calculateAxisData+0x3e>
		{
			//*fittedAnAdc_Values = -32766;
			//*fittedAnAdc_Values = -2048;  #huzeyfe
			*fittedAnAdc_Values = 0;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
			errX = GPIO_PIN_SET;
 8000aa2:	4b5b      	ldr	r3, [pc, #364]	; (8000c10 <calculateAxisData+0x1a4>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
				*fittedAnAdc_Values = 0;
			}
		}

	}
}
 8000aa8:	e0ac      	b.n	8000c04 <calculateAxisData+0x198>
		else if(*tempAnADC_Value >= joystickBorderPtr->xRightHigh)
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	691b      	ldr	r3, [r3, #16]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d307      	bcc.n	8000ac6 <calculateAxisData+0x5a>
			errX = GPIO_PIN_SET;
 8000ab6:	4b56      	ldr	r3, [pc, #344]	; (8000c10 <calculateAxisData+0x1a4>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
			*fittedAnAdc_Values = 65535;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ac2:	601a      	str	r2, [r3, #0]
}
 8000ac4:	e09e      	b.n	8000c04 <calculateAxisData+0x198>
		else if(*tempAnADC_Value >= joystickBorderPtr -> xRightLow)
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d31c      	bcc.n	8000b0c <calculateAxisData+0xa0>
			*fittedAnAdc_Values = (((int)((*tempAnADC_Value) - (joystickBorderPtr->xRightLow))) * 65535) / (joystickBorderPtr -> xRightRange);
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	461a      	mov	r2, r3
 8000ade:	4613      	mov	r3, r2
 8000ae0:	041b      	lsls	r3, r3, #16
 8000ae2:	1a9b      	subs	r3, r3, r2
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aee:	461a      	mov	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values >= 65535)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000afc:	4293      	cmp	r3, r2
 8000afe:	f340 8081 	ble.w	8000c04 <calculateAxisData+0x198>
				*fittedAnAdc_Values = 65535;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b08:	601a      	str	r2, [r3, #0]
}
 8000b0a:	e07b      	b.n	8000c04 <calculateAxisData+0x198>
		else if(*tempAnADC_Value < (joystickBorderPtr -> xLeftHigh))
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d275      	bcs.n	8000c04 <calculateAxisData+0x198>
			*fittedAnAdc_Values = -((((int)((int)(joystickBorderPtr->xLeftHigh) - (int)(*tempAnADC_Value))) * (int)65535) / (joystickBorderPtr -> xLeftRange));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	1ad2      	subs	r2, r2, r3
 8000b24:	4613      	mov	r3, r2
 8000b26:	041b      	lsls	r3, r3, #16
 8000b28:	1a9b      	subs	r3, r3, r2
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b34:	425b      	negs	r3, r3
 8000b36:	461a      	mov	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values <= 0)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	dc5f      	bgt.n	8000c04 <calculateAxisData+0x198>
				*fittedAnAdc_Values = 0;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	e05b      	b.n	8000c04 <calculateAxisData+0x198>
		if(*tempAnADC_Value <= joystickBorderPtr->yDownLow)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d806      	bhi.n	8000b66 <calculateAxisData+0xfa>
			errY = GPIO_PIN_SET;
 8000b58:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <calculateAxisData+0x1a8>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
			*fittedAnAdc_Values = 0;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	e04e      	b.n	8000c04 <calculateAxisData+0x198>
		else if(*tempAnADC_Value >= joystickBorderPtr->yUpHigh)
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d307      	bcc.n	8000b82 <calculateAxisData+0x116>
			*fittedAnAdc_Values = 65535;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b78:	601a      	str	r2, [r3, #0]
			errY = GPIO_PIN_SET;
 8000b7a:	4b26      	ldr	r3, [pc, #152]	; (8000c14 <calculateAxisData+0x1a8>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
}
 8000b80:	e040      	b.n	8000c04 <calculateAxisData+0x198>
		else if(*tempAnADC_Value >= joystickBorderPtr -> yUpLow)
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d31b      	bcc.n	8000bc6 <calculateAxisData+0x15a>
			*fittedAnAdc_Values = (((int)((*tempAnADC_Value) - (joystickBorderPtr->yUpLow))) * 65535) / (joystickBorderPtr -> yUpRange);
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	041b      	lsls	r3, r3, #16
 8000b9e:	1a9b      	subs	r3, r3, r2
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	461a      	mov	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values >= 65535)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	dd23      	ble.n	8000c04 <calculateAxisData+0x198>
				*fittedAnAdc_Values = 65535;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc2:	601a      	str	r2, [r3, #0]
}
 8000bc4:	e01e      	b.n	8000c04 <calculateAxisData+0x198>
		else if(*tempAnADC_Value < (joystickBorderPtr -> yDownHigh))
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d218      	bcs.n	8000c04 <calculateAxisData+0x198>
			*fittedAnAdc_Values = -((((int)((int)(joystickBorderPtr->yDownHigh) - (int)(*tempAnADC_Value))) * (int)65535) / (joystickBorderPtr -> yDownRange));
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1ad2      	subs	r2, r2, r3
 8000bde:	4613      	mov	r3, r2
 8000be0:	041b      	lsls	r3, r3, #16
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	461a      	mov	r2, r3
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	6a1b      	ldr	r3, [r3, #32]
 8000bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bee:	425b      	negs	r3, r3
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values <= 0)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	dc02      	bgt.n	8000c04 <calculateAxisData+0x198>
				*fittedAnAdc_Values = 0;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
}
 8000c04:	bf00      	nop
 8000c06:	371c      	adds	r7, #28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	200000c9 	.word	0x200000c9
 8000c14:	200000ca 	.word	0x200000ca

08000c18 <calculateJostickBorders>:
/* calculating joystick borders*/
void calculateJostickBorders(ConfigData* tempConfigData, joystickBorder* tempJoystickBorder)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
	ConfigData* configDataPtr;
	configDataPtr = tempConfigData;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

	joystickBorder* joystickBorderPtr;
	joystickBorderPtr = tempJoystickBorder;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	60bb      	str	r3, [r7, #8]

	joystickBorderPtr -> xLeftHigh 		= (configDataPtr -> xMid) - 1;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	88db      	ldrh	r3, [r3, #6]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	461a      	mov	r2, r3
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	605a      	str	r2, [r3, #4]
	joystickBorderPtr -> xLeftLow  		= configDataPtr -> xMin;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	885b      	ldrh	r3, [r3, #2]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	601a      	str	r2, [r3, #0]
	joystickBorderPtr -> xLeftRange 	= (joystickBorderPtr -> xLeftHigh) - (joystickBorderPtr -> xLeftLow);
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	1ad2      	subs	r2, r2, r3
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	609a      	str	r2, [r3, #8]

	joystickBorderPtr -> xRightLow 		= (configDataPtr -> xMid) + 1;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	88db      	ldrh	r3, [r3, #6]
 8000c52:	3301      	adds	r3, #1
 8000c54:	461a      	mov	r2, r3
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	60da      	str	r2, [r3, #12]
	joystickBorderPtr -> xRightHigh  	= configDataPtr -> xMax;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	889b      	ldrh	r3, [r3, #4]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	611a      	str	r2, [r3, #16]
	joystickBorderPtr -> xRightRange 	= (joystickBorderPtr -> xRightHigh) - (joystickBorderPtr -> xRightLow);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	691a      	ldr	r2, [r3, #16]
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	1ad2      	subs	r2, r2, r3
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	615a      	str	r2, [r3, #20]

	joystickBorderPtr -> yUpHigh 		= configDataPtr -> yMax;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	895b      	ldrh	r3, [r3, #10]
 8000c76:	461a      	mov	r2, r3
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
	joystickBorderPtr -> yUpLow  		= (configDataPtr -> yMid) + 1;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	899b      	ldrh	r3, [r3, #12]
 8000c80:	3301      	adds	r3, #1
 8000c82:	461a      	mov	r2, r3
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	625a      	str	r2, [r3, #36]	; 0x24
	joystickBorderPtr -> yUpRange 		= (joystickBorderPtr -> yUpHigh) - (joystickBorderPtr -> yUpLow);
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c90:	1ad2      	subs	r2, r2, r3
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	62da      	str	r2, [r3, #44]	; 0x2c

	joystickBorderPtr -> yDownLow 		= configDataPtr -> yMin;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	891b      	ldrh	r3, [r3, #8]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	619a      	str	r2, [r3, #24]
	joystickBorderPtr -> yDownHigh  	= (configDataPtr -> yMid) - 1;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	899b      	ldrh	r3, [r3, #12]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	61da      	str	r2, [r3, #28]
	joystickBorderPtr -> yDownRange 	= (joystickBorderPtr -> yDownHigh) - (joystickBorderPtr -> yDownLow);
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	69da      	ldr	r2, [r3, #28]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	1ad2      	subs	r2, r2, r3
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	621a      	str	r2, [r3, #32]

}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <averageAnalogInputs>:
		@Param 				: none
		@description	:

*/
void averageAnalogInputs(uint32_t* ADC_BUFFERPtr, uint32_t* ADC_READPtr, uint32_t COUNT, uint32_t AVERAGE_WINDOW)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b089      	sub	sp, #36	; 0x24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	603b      	str	r3, [r7, #0]
	uint32_t i = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
	uint32_t* tempADC_BUFFERPtr = ADC_BUFFERPtr;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	61bb      	str	r3, [r7, #24]
	uint32_t* tempADC_READPtr = ADC_READPtr;
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	617b      	str	r3, [r7, #20]

	for(i = 0; i < COUNT; i++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
 8000ce4:	e016      	b.n	8000d14 <averageAnalogInputs+0x4e>
	{
		*tempADC_BUFFERPtr = ((*tempADC_BUFFERPtr)*(AVERAGE_WINDOW - 1) + (*tempADC_READPtr))/AVERAGE_WINDOW;
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	3a01      	subs	r2, #1
 8000cee:	fb03 f202 	mul.w	r2, r3, r2
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	441a      	add	r2, r3
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	601a      	str	r2, [r3, #0]
		tempADC_BUFFERPtr++;
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	3304      	adds	r3, #4
 8000d06:	61bb      	str	r3, [r7, #24]
		tempADC_READPtr++;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3304      	adds	r3, #4
 8000d0c:	617b      	str	r3, [r7, #20]
	for(i = 0; i < COUNT; i++)
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3301      	adds	r3, #1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	69fa      	ldr	r2, [r7, #28]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d3e4      	bcc.n	8000ce6 <averageAnalogInputs+0x20>
	}
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SDADC_ScanConversion>:
		@Param 				: none
		@description	:

*/
void SDADC_ScanConversion(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0


		if(HAL_SDADC_ConfigChannel(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
 8000d30:	2201      	movs	r2, #1
 8000d32:	4927      	ldr	r1, [pc, #156]	; (8000dd0 <SDADC_ScanConversion+0xa4>)
 8000d34:	4827      	ldr	r0, [pc, #156]	; (8000dd4 <SDADC_ScanConversion+0xa8>)
 8000d36:	f005 ff43 	bl	8006bc0 <HAL_SDADC_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SDADC_ScanConversion+0x18>
		{
			Error_Handler();
 8000d40:	f001 fd60 	bl	8002804 <Error_Handler>
		}

		HAL_SDADC_Start(&hsdadc1);
 8000d44:	4823      	ldr	r0, [pc, #140]	; (8000dd4 <SDADC_ScanConversion+0xa8>)
 8000d46:	f006 f898 	bl	8006e7a <HAL_SDADC_Start>
		if(HAL_SDADC_PollForConversion(&hsdadc1, 1000) != HAL_OK)
 8000d4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d4e:	4821      	ldr	r0, [pc, #132]	; (8000dd4 <SDADC_ScanConversion+0xa8>)
 8000d50:	f006 f8ae 	bl	8006eb0 <HAL_SDADC_PollForConversion>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d005      	beq.n	8000d66 <SDADC_ScanConversion+0x3a>
		{
			 SDADCErrorCounter++;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <SDADC_ScanConversion+0xac>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <SDADC_ScanConversion+0xac>)
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	e008      	b.n	8000d78 <SDADC_ScanConversion+0x4c>
		}
		else
		{
			AnADC_Read[0] = (HAL_SDADC_GetValue(&hsdadc1) + 0x8000) & 0xFFFF;
 8000d66:	481b      	ldr	r0, [pc, #108]	; (8000dd4 <SDADC_ScanConversion+0xa8>)
 8000d68:	f006 f917 	bl	8006f9a <HAL_SDADC_GetValue>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <SDADC_ScanConversion+0xb0>)
 8000d76:	6013      	str	r3, [r2, #0]

		}
		HAL_SDADC_Stop(&hsdadc1);
 8000d78:	4816      	ldr	r0, [pc, #88]	; (8000dd4 <SDADC_ScanConversion+0xa8>)
 8000d7a:	f006 f8f3 	bl	8006f64 <HAL_SDADC_Stop>

		if(HAL_SDADC_ConfigChannel(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	4917      	ldr	r1, [pc, #92]	; (8000de0 <SDADC_ScanConversion+0xb4>)
 8000d82:	4814      	ldr	r0, [pc, #80]	; (8000dd4 <SDADC_ScanConversion+0xa8>)
 8000d84:	f005 ff1c 	bl	8006bc0 <HAL_SDADC_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SDADC_ScanConversion+0x66>
		{
			Error_Handler();
 8000d8e:	f001 fd39 	bl	8002804 <Error_Handler>
		}

		HAL_SDADC_Start(&hsdadc1);
 8000d92:	4810      	ldr	r0, [pc, #64]	; (8000dd4 <SDADC_ScanConversion+0xa8>)
 8000d94:	f006 f871 	bl	8006e7a <HAL_SDADC_Start>
		if(HAL_SDADC_PollForConversion(&hsdadc1, 1000) != HAL_OK)
 8000d98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <SDADC_ScanConversion+0xa8>)
 8000d9e:	f006 f887 	bl	8006eb0 <HAL_SDADC_PollForConversion>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d005      	beq.n	8000db4 <SDADC_ScanConversion+0x88>
		{
			 SDADCErrorCounter++;
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <SDADC_ScanConversion+0xac>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <SDADC_ScanConversion+0xac>)
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e008      	b.n	8000dc6 <SDADC_ScanConversion+0x9a>
		}
		else
		{
			AnADC_Read[1] = (HAL_SDADC_GetValue(&hsdadc1) + 0x8000) & 0xFFFF;
 8000db4:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <SDADC_ScanConversion+0xa8>)
 8000db6:	f006 f8f0 	bl	8006f9a <HAL_SDADC_GetValue>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <SDADC_ScanConversion+0xb0>)
 8000dc4:	6053      	str	r3, [r2, #4]
		}
		HAL_SDADC_Stop(&hsdadc1);
 8000dc6:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <SDADC_ScanConversion+0xa8>)
 8000dc8:	f006 f8cc 	bl	8006f64 <HAL_SDADC_Stop>

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	00040010 	.word	0x00040010
 8000dd4:	200004f0 	.word	0x200004f0
 8000dd8:	200000e4 	.word	0x200000e4
 8000ddc:	200000cc 	.word	0x200000cc
 8000de0:	00050020 	.word	0x00050020

08000de4 <initDigitalInputs>:
				readFlag = false;
				readState = GPIO_PIN_RESET;
*/

void initDigitalInputs(digitalInput *digitalInputPtr)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	/****************************************************
	***	CUSTOM VALUES SHOULD BE INITIALIZED MANUALLY	***
	****************************************************/
	tutamakDigitalInputs[0].inputPin 	= BTN_01_Pin;
 8000dec:	4b97      	ldr	r3, [pc, #604]	; (800104c <initDigitalInputs+0x268>)
 8000dee:	2220      	movs	r2, #32
 8000df0:	805a      	strh	r2, [r3, #2]
	tutamakDigitalInputs[0].inputPort	= BTN_01_GPIO_Port;
 8000df2:	4b96      	ldr	r3, [pc, #600]	; (800104c <initDigitalInputs+0x268>)
 8000df4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000df8:	605a      	str	r2, [r3, #4]
	tutamakDigitalInputs[1].inputPin 	= BTN_02_Pin;
 8000dfa:	4b94      	ldr	r3, [pc, #592]	; (800104c <initDigitalInputs+0x268>)
 8000dfc:	2240      	movs	r2, #64	; 0x40
 8000dfe:	82da      	strh	r2, [r3, #22]
	tutamakDigitalInputs[1].inputPort	= BTN_02_GPIO_Port;
 8000e00:	4b92      	ldr	r3, [pc, #584]	; (800104c <initDigitalInputs+0x268>)
 8000e02:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e06:	619a      	str	r2, [r3, #24]
	tutamakDigitalInputs[2].inputPin 	= BTN_03_Pin;
 8000e08:	4b90      	ldr	r3, [pc, #576]	; (800104c <initDigitalInputs+0x268>)
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
	tutamakDigitalInputs[2].inputPort	= BTN_03_GPIO_Port;
 8000e0e:	4b8f      	ldr	r3, [pc, #572]	; (800104c <initDigitalInputs+0x268>)
 8000e10:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
	tutamakDigitalInputs[3].inputPin 	= BTN_04_Pin;
 8000e16:	4b8d      	ldr	r3, [pc, #564]	; (800104c <initDigitalInputs+0x268>)
 8000e18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
	tutamakDigitalInputs[3].inputPort	= BTN_04_GPIO_Port;
 8000e1e:	4b8b      	ldr	r3, [pc, #556]	; (800104c <initDigitalInputs+0x268>)
 8000e20:	4a8b      	ldr	r2, [pc, #556]	; (8001050 <initDigitalInputs+0x26c>)
 8000e22:	641a      	str	r2, [r3, #64]	; 0x40
	tutamakDigitalInputs[4].inputPin 	= BTN_05_Pin;
 8000e24:	4b89      	ldr	r3, [pc, #548]	; (800104c <initDigitalInputs+0x268>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	tutamakDigitalInputs[4].inputPort	= BTN_05_GPIO_Port;
 8000e2c:	4b87      	ldr	r3, [pc, #540]	; (800104c <initDigitalInputs+0x268>)
 8000e2e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e32:	655a      	str	r2, [r3, #84]	; 0x54
	tutamakDigitalInputs[5].inputPin 	= BTN_06_Pin;
 8000e34:	4b85      	ldr	r3, [pc, #532]	; (800104c <initDigitalInputs+0x268>)
 8000e36:	2204      	movs	r2, #4
 8000e38:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	tutamakDigitalInputs[5].inputPort	= BTN_06_GPIO_Port;
 8000e3c:	4b83      	ldr	r3, [pc, #524]	; (800104c <initDigitalInputs+0x268>)
 8000e3e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e42:	669a      	str	r2, [r3, #104]	; 0x68
	tutamakDigitalInputs[6].inputPin 	= BTN_07_Pin;
 8000e44:	4b81      	ldr	r3, [pc, #516]	; (800104c <initDigitalInputs+0x268>)
 8000e46:	2208      	movs	r2, #8
 8000e48:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	tutamakDigitalInputs[6].inputPort	= BTN_07_GPIO_Port;
 8000e4c:	4b7f      	ldr	r3, [pc, #508]	; (800104c <initDigitalInputs+0x268>)
 8000e4e:	4a81      	ldr	r2, [pc, #516]	; (8001054 <initDigitalInputs+0x270>)
 8000e50:	67da      	str	r2, [r3, #124]	; 0x7c
	tutamakDigitalInputs[7].inputPin 	= BTN_08_Pin;
 8000e52:	4b7e      	ldr	r3, [pc, #504]	; (800104c <initDigitalInputs+0x268>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	tutamakDigitalInputs[7].inputPort	= BTN_08_GPIO_Port;
 8000e5a:	4b7c      	ldr	r3, [pc, #496]	; (800104c <initDigitalInputs+0x268>)
 8000e5c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	tutamakDigitalInputs[8].inputPin 	= BTN_09_Pin;
 8000e64:	4b79      	ldr	r3, [pc, #484]	; (800104c <initDigitalInputs+0x268>)
 8000e66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e6a:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	tutamakDigitalInputs[8].inputPort	= BTN_09_GPIO_Port;
 8000e6e:	4b77      	ldr	r3, [pc, #476]	; (800104c <initDigitalInputs+0x268>)
 8000e70:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	tutamakDigitalInputs[9].inputPin 	= BTN_10_Pin;
 8000e78:	4b74      	ldr	r3, [pc, #464]	; (800104c <initDigitalInputs+0x268>)
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	tutamakDigitalInputs[9].inputPort	= BTN_10_GPIO_Port;
 8000e80:	4b72      	ldr	r3, [pc, #456]	; (800104c <initDigitalInputs+0x268>)
 8000e82:	4a75      	ldr	r2, [pc, #468]	; (8001058 <initDigitalInputs+0x274>)
 8000e84:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	tutamakDigitalInputs[10].inputPin 	= BTN_11_Pin;
 8000e88:	4b70      	ldr	r3, [pc, #448]	; (800104c <initDigitalInputs+0x268>)
 8000e8a:	2240      	movs	r2, #64	; 0x40
 8000e8c:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	tutamakDigitalInputs[10].inputPort	= BTN_11_GPIO_Port;
 8000e90:	4b6e      	ldr	r3, [pc, #440]	; (800104c <initDigitalInputs+0x268>)
 8000e92:	4a71      	ldr	r2, [pc, #452]	; (8001058 <initDigitalInputs+0x274>)
 8000e94:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	tutamakDigitalInputs[11].inputPin 	= BTN_12_Pin;
 8000e98:	4b6c      	ldr	r3, [pc, #432]	; (800104c <initDigitalInputs+0x268>)
 8000e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9e:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
	tutamakDigitalInputs[11].inputPort	= BTN_12_GPIO_Port;
 8000ea2:	4b6a      	ldr	r3, [pc, #424]	; (800104c <initDigitalInputs+0x268>)
 8000ea4:	4a6b      	ldr	r2, [pc, #428]	; (8001054 <initDigitalInputs+0x270>)
 8000ea6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	tutamakDigitalInputs[12].inputPin 	= BTN_13_Pin;
 8000eaa:	4b68      	ldr	r3, [pc, #416]	; (800104c <initDigitalInputs+0x268>)
 8000eac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb0:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
	tutamakDigitalInputs[12].inputPort	= BTN_13_GPIO_Port;
 8000eb4:	4b65      	ldr	r3, [pc, #404]	; (800104c <initDigitalInputs+0x268>)
 8000eb6:	4a67      	ldr	r2, [pc, #412]	; (8001054 <initDigitalInputs+0x270>)
 8000eb8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	tutamakDigitalInputs[13].inputPin 	= BTN_14_Pin;
 8000ebc:	4b63      	ldr	r3, [pc, #396]	; (800104c <initDigitalInputs+0x268>)
 8000ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec2:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	tutamakDigitalInputs[13].inputPort	= BTN_14_GPIO_Port;
 8000ec6:	4b61      	ldr	r3, [pc, #388]	; (800104c <initDigitalInputs+0x268>)
 8000ec8:	4a64      	ldr	r2, [pc, #400]	; (800105c <initDigitalInputs+0x278>)
 8000eca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	tutamakDigitalInputs[14].inputPin 	= BTN_15_Pin;
 8000ece:	4b5f      	ldr	r3, [pc, #380]	; (800104c <initDigitalInputs+0x268>)
 8000ed0:	2240      	movs	r2, #64	; 0x40
 8000ed2:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	tutamakDigitalInputs[14].inputPort	= BTN_15_GPIO_Port;
 8000ed6:	4b5d      	ldr	r3, [pc, #372]	; (800104c <initDigitalInputs+0x268>)
 8000ed8:	4a5e      	ldr	r2, [pc, #376]	; (8001054 <initDigitalInputs+0x270>)
 8000eda:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	tutamakDigitalInputs[15].inputPin 	= BTN_16_Pin;
 8000ede:	4b5b      	ldr	r3, [pc, #364]	; (800104c <initDigitalInputs+0x268>)
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
	tutamakDigitalInputs[15].inputPort	= BTN_16_GPIO_Port;
 8000ee6:	4b59      	ldr	r3, [pc, #356]	; (800104c <initDigitalInputs+0x268>)
 8000ee8:	4a5a      	ldr	r2, [pc, #360]	; (8001054 <initDigitalInputs+0x270>)
 8000eea:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	tutamakDigitalInputs[16].inputPin 	= BTN_17_Pin;
 8000eee:	4b57      	ldr	r3, [pc, #348]	; (800104c <initDigitalInputs+0x268>)
 8000ef0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ef4:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
	tutamakDigitalInputs[16].inputPort	= BTN_17_GPIO_Port;
 8000ef8:	4b54      	ldr	r3, [pc, #336]	; (800104c <initDigitalInputs+0x268>)
 8000efa:	4a56      	ldr	r2, [pc, #344]	; (8001054 <initDigitalInputs+0x270>)
 8000efc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	tutamakDigitalInputs[17].inputPin 	= BTN_18_Pin;
 8000f00:	4b52      	ldr	r3, [pc, #328]	; (800104c <initDigitalInputs+0x268>)
 8000f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f06:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
	tutamakDigitalInputs[17].inputPort	= BTN_18_GPIO_Port;
 8000f0a:	4b50      	ldr	r3, [pc, #320]	; (800104c <initDigitalInputs+0x268>)
 8000f0c:	4a51      	ldr	r2, [pc, #324]	; (8001054 <initDigitalInputs+0x270>)
 8000f0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	tutamakDigitalInputs[18].inputPin 	= BTN_19_Pin;
 8000f12:	4b4e      	ldr	r3, [pc, #312]	; (800104c <initDigitalInputs+0x268>)
 8000f14:	2210      	movs	r2, #16
 8000f16:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
	tutamakDigitalInputs[18].inputPort	= BTN_19_GPIO_Port;
 8000f1a:	4b4c      	ldr	r3, [pc, #304]	; (800104c <initDigitalInputs+0x268>)
 8000f1c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f20:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	tutamakDigitalInputs[19].inputPin 	= BTN_20_Pin;
 8000f24:	4b49      	ldr	r3, [pc, #292]	; (800104c <initDigitalInputs+0x268>)
 8000f26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f2a:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e
	tutamakDigitalInputs[19].inputPort	= BTN_20_GPIO_Port;
 8000f2e:	4b47      	ldr	r3, [pc, #284]	; (800104c <initDigitalInputs+0x268>)
 8000f30:	4a47      	ldr	r2, [pc, #284]	; (8001050 <initDigitalInputs+0x26c>)
 8000f32:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	tutamakDigitalInputs[20].inputPin 	= BTN_21_Pin;
 8000f36:	4b45      	ldr	r3, [pc, #276]	; (800104c <initDigitalInputs+0x268>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
	tutamakDigitalInputs[20].inputPort	= BTN_21_GPIO_Port;
 8000f3e:	4b43      	ldr	r3, [pc, #268]	; (800104c <initDigitalInputs+0x268>)
 8000f40:	4a44      	ldr	r2, [pc, #272]	; (8001054 <initDigitalInputs+0x270>)
 8000f42:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	tutamakDigitalInputs[21].inputPin 	= BTN_22_Pin;
 8000f46:	4b41      	ldr	r3, [pc, #260]	; (800104c <initDigitalInputs+0x268>)
 8000f48:	2204      	movs	r2, #4
 8000f4a:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
	tutamakDigitalInputs[21].inputPort	= BTN_22_GPIO_Port;
 8000f4e:	4b3f      	ldr	r3, [pc, #252]	; (800104c <initDigitalInputs+0x268>)
 8000f50:	4a40      	ldr	r2, [pc, #256]	; (8001054 <initDigitalInputs+0x270>)
 8000f52:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	tutamakDigitalInputs[22].inputPin 	= BTN_23_Pin;
 8000f56:	4b3d      	ldr	r3, [pc, #244]	; (800104c <initDigitalInputs+0x268>)
 8000f58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f5c:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
	tutamakDigitalInputs[22].inputPort	= BTN_23_GPIO_Port;
 8000f60:	4b3a      	ldr	r3, [pc, #232]	; (800104c <initDigitalInputs+0x268>)
 8000f62:	4a3c      	ldr	r2, [pc, #240]	; (8001054 <initDigitalInputs+0x270>)
 8000f64:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	tutamakDigitalInputs[23].inputPin 	= BTN_24_Pin;
 8000f68:	4b38      	ldr	r3, [pc, #224]	; (800104c <initDigitalInputs+0x268>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
	tutamakDigitalInputs[23].inputPort	= BTN_24_GPIO_Port;
 8000f70:	4b36      	ldr	r3, [pc, #216]	; (800104c <initDigitalInputs+0x268>)
 8000f72:	4a38      	ldr	r2, [pc, #224]	; (8001054 <initDigitalInputs+0x270>)
 8000f74:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	tutamakDigitalInputs[24].inputPin 	= BTN_25_Pin;
 8000f78:	4b34      	ldr	r3, [pc, #208]	; (800104c <initDigitalInputs+0x268>)
 8000f7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f7e:	f8a3 21e2 	strh.w	r2, [r3, #482]	; 0x1e2
	tutamakDigitalInputs[24].inputPort	= BTN_25_GPIO_Port;
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <initDigitalInputs+0x268>)
 8000f84:	4a33      	ldr	r2, [pc, #204]	; (8001054 <initDigitalInputs+0x270>)
 8000f86:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	tutamakDigitalInputs[25].inputPin 	= BTN_26_Pin;
 8000f8a:	4b30      	ldr	r3, [pc, #192]	; (800104c <initDigitalInputs+0x268>)
 8000f8c:	2208      	movs	r2, #8
 8000f8e:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
	tutamakDigitalInputs[25].inputPort	= BTN_26_GPIO_Port;
 8000f92:	4b2e      	ldr	r3, [pc, #184]	; (800104c <initDigitalInputs+0x268>)
 8000f94:	4a2e      	ldr	r2, [pc, #184]	; (8001050 <initDigitalInputs+0x26c>)
 8000f96:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	tutamakDigitalInputs[26].inputPin 	= BTN_27_Pin;
 8000f9a:	4b2c      	ldr	r3, [pc, #176]	; (800104c <initDigitalInputs+0x268>)
 8000f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa0:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
	tutamakDigitalInputs[26].inputPort	= BTN_27_GPIO_Port;
 8000fa4:	4b29      	ldr	r3, [pc, #164]	; (800104c <initDigitalInputs+0x268>)
 8000fa6:	4a2b      	ldr	r2, [pc, #172]	; (8001054 <initDigitalInputs+0x270>)
 8000fa8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tutamakDigitalInputs[27].inputPin 	= BTN_28_Pin;
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <initDigitalInputs+0x268>)
 8000fae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fb2:	f8a3 221e 	strh.w	r2, [r3, #542]	; 0x21e
	tutamakDigitalInputs[27].inputPort	= BTN_28_GPIO_Port;
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <initDigitalInputs+0x268>)
 8000fb8:	4a26      	ldr	r2, [pc, #152]	; (8001054 <initDigitalInputs+0x270>)
 8000fba:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	tutamakDigitalInputs[28].inputPin 	= BTN_29_Pin;
 8000fbe:	4b23      	ldr	r3, [pc, #140]	; (800104c <initDigitalInputs+0x268>)
 8000fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc4:	f8a3 2232 	strh.w	r2, [r3, #562]	; 0x232
	tutamakDigitalInputs[28].inputPort	= BTN_29_GPIO_Port;
 8000fc8:	4b20      	ldr	r3, [pc, #128]	; (800104c <initDigitalInputs+0x268>)
 8000fca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fce:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	tutamakDigitalInputs[29].inputPin 	= BTN_30_Pin;
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	; (800104c <initDigitalInputs+0x268>)
 8000fd4:	2240      	movs	r2, #64	; 0x40
 8000fd6:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
	tutamakDigitalInputs[29].inputPort	= BTN_30_GPIO_Port;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <initDigitalInputs+0x268>)
 8000fdc:	4a1c      	ldr	r2, [pc, #112]	; (8001050 <initDigitalInputs+0x26c>)
 8000fde:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	tutamakDigitalInputs[30].inputPin 	= BTN_31_Pin;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <initDigitalInputs+0x268>)
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
	tutamakDigitalInputs[30].inputPort	= BTN_31_GPIO_Port;
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <initDigitalInputs+0x268>)
 8000fec:	4a18      	ldr	r2, [pc, #96]	; (8001050 <initDigitalInputs+0x26c>)
 8000fee:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	tutamakDigitalInputs[31].inputPin 	= BTN_32_Pin;
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <initDigitalInputs+0x268>)
 8000ff4:	2210      	movs	r2, #16
 8000ff6:	f8a3 226e 	strh.w	r2, [r3, #622]	; 0x26e
	tutamakDigitalInputs[31].inputPort	= BTN_32_GPIO_Port;
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <initDigitalInputs+0x268>)
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <initDigitalInputs+0x26c>)
 8000ffe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	/***************************************************/

	uint32_t i;
	digitalInput* tempDigitalInputPtr = digitalInputPtr;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < BUTTON_COUNT; i++)
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e014      	b.n	8001036 <initDigitalInputs+0x252>
	{
		tempDigitalInputPtr	->	inputVal = GPIO_PIN_RESET;
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
		tempDigitalInputPtr	->	readFlag = false;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2200      	movs	r2, #0
 8001016:	705a      	strb	r2, [r3, #1]
		tempDigitalInputPtr ->  readState= GPIO_PIN_RESET;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2200      	movs	r2, #0
 800101c:	721a      	strb	r2, [r3, #8]
		tempDigitalInputPtr ->  debounceTimer = 0;
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
		//for prototype debounce factor
		tempDigitalInputPtr ->  debounceFactor = 20; /*!!!!!!!!!!!!! config structtan cekilecek !!!!!!!!!!!!!!!!!*/
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	2214      	movs	r2, #20
 8001028:	611a      	str	r2, [r3, #16]
		tempDigitalInputPtr++;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	3314      	adds	r3, #20
 800102e:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < BUTTON_COUNT; i++)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3301      	adds	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2b1f      	cmp	r3, #31
 800103a:	d9e7      	bls.n	800100c <initDigitalInputs+0x228>
	}

}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200000e8 	.word	0x200000e8
 8001050:	48000400 	.word	0x48000400
 8001054:	48000800 	.word	0x48000800
 8001058:	48001400 	.word	0x48001400
 800105c:	48000c00 	.word	0x48000c00

08001060 <sampleDigitalInputs>:
		@description	:

*/

void sampleDigitalInputs(digitalInput *digitalInputPtr)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	uint32_t i;
	digitalInput* tempDigitalInputPtr = digitalInputPtr;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < BUTTON_COUNT; i++)
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e053      	b.n	800111a <sampleDigitalInputs+0xba>
	{
		if(tempDigitalInputPtr -> readFlag == true)
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	785b      	ldrb	r3, [r3, #1]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d04c      	beq.n	8001114 <sampleDigitalInputs+0xb4>
		{
			if(tempDigitalInputPtr -> readState == GPIO_PIN_RESET)
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	7a1b      	ldrb	r3, [r3, #8]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d11f      	bne.n	80010c2 <sampleDigitalInputs+0x62>
			{
				if(tempDigitalInputPtr -> inputVal == GPIO_PIN_RESET)
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d117      	bne.n	80010ba <sampleDigitalInputs+0x5a>
				{
					if(tempDigitalInputPtr -> debounceTimer < tempDigitalInputPtr -> debounceFactor)
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	429a      	cmp	r2, r3
 8001094:	d204      	bcs.n	80010a0 <sampleDigitalInputs+0x40>
					{
						tempDigitalInputPtr -> debounceTimer++;
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60da      	str	r2, [r3, #12]
					}
					if(tempDigitalInputPtr ->debounceTimer >= tempDigitalInputPtr ->debounceFactor)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d32d      	bcc.n	8001108 <sampleDigitalInputs+0xa8>
					{
						tempDigitalInputPtr -> debounceTimer = 0;
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
						tempDigitalInputPtr -> readState = GPIO_PIN_SET;
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	2201      	movs	r2, #1
 80010b6:	721a      	strb	r2, [r3, #8]
 80010b8:	e026      	b.n	8001108 <sampleDigitalInputs+0xa8>
					}
				}
				else
				{
					tempDigitalInputPtr -> debounceTimer = 0;
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	e022      	b.n	8001108 <sampleDigitalInputs+0xa8>
				}
			}

			else if(tempDigitalInputPtr -> readState == GPIO_PIN_SET)
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	7a1b      	ldrb	r3, [r3, #8]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d11e      	bne.n	8001108 <sampleDigitalInputs+0xa8>
			{
				if(tempDigitalInputPtr -> inputVal == GPIO_PIN_SET)
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d117      	bne.n	8001102 <sampleDigitalInputs+0xa2>
				{
					if(tempDigitalInputPtr -> debounceTimer < tempDigitalInputPtr -> debounceFactor)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d204      	bcs.n	80010e8 <sampleDigitalInputs+0x88>
					{
						tempDigitalInputPtr -> debounceTimer++;
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60da      	str	r2, [r3, #12]
					}
					if(tempDigitalInputPtr ->debounceTimer >= tempDigitalInputPtr ->debounceFactor)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d309      	bcc.n	8001108 <sampleDigitalInputs+0xa8>
					{
						tempDigitalInputPtr -> debounceTimer = 0;
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
						tempDigitalInputPtr -> readState = GPIO_PIN_RESET;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	2200      	movs	r2, #0
 80010fe:	721a      	strb	r2, [r3, #8]
 8001100:	e002      	b.n	8001108 <sampleDigitalInputs+0xa8>
					}
				}
				else
				{
					tempDigitalInputPtr -> debounceTimer = 0;
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
				}
			}

			tempDigitalInputPtr   ->  readFlag = false;
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	2200      	movs	r2, #0
 800110c:	705a      	strb	r2, [r3, #1]

			tempDigitalInputPtr++;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	3314      	adds	r3, #20
 8001112:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < BUTTON_COUNT; i++)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3301      	adds	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b1f      	cmp	r3, #31
 800111e:	d9a8      	bls.n	8001072 <sampleDigitalInputs+0x12>
		}
	}
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <readDigitalInputs>:
/** @brief 				: function to read digital inputs sequantially
	* @param 	uint8_t DIN_NUMBER number of digital inputs to read
	* @retval None
	*/
void readDigitalInputs(digitalInput *digitalInputPtr)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
	uint32_t i;
	digitalInput* tempDigitalInputPtr = digitalInputPtr;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60bb      	str	r3, [r7, #8]

	for(i=0;i<BUTTON_COUNT;i++)
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	e014      	b.n	800116a <readDigitalInputs+0x3c>
	{
		tempDigitalInputPtr		->		inputVal = HAL_GPIO_ReadPin(tempDigitalInputPtr->inputPort, tempDigitalInputPtr->inputPin);
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	885b      	ldrh	r3, [r3, #2]
 8001148:	4619      	mov	r1, r3
 800114a:	4610      	mov	r0, r2
 800114c:	f003 ff6c 	bl	8005028 <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	701a      	strb	r2, [r3, #0]
		tempDigitalInputPtr		->		readFlag = true;
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2201      	movs	r2, #1
 800115c:	705a      	strb	r2, [r3, #1]
		tempDigitalInputPtr++;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	3314      	adds	r3, #20
 8001162:	60bb      	str	r3, [r7, #8]
	for(i=0;i<BUTTON_COUNT;i++)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3301      	adds	r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2b1f      	cmp	r3, #31
 800116e:	d9e7      	bls.n	8001140 <readDigitalInputs+0x12>
	}
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <getDigitalInputs>:
		@description	:

*/

digitalInput* getDigitalInputs(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
		return &tutamakDigitalInputs[0];
 8001180:	4b02      	ldr	r3, [pc, #8]	; (800118c <getDigitalInputs+0x10>)
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	200000e8 	.word	0x200000e8

08001190 <sendUartFrame>:
		@Param 				: ----
		@description	: ----

*/
void sendUartFrame(UART_HandleTypeDef *huart,uint8_t* rs422Frame_, uint16_t Size, uint32_t Timeout, bool* sendFlag)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08e      	sub	sp, #56	; 0x38
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	4613      	mov	r3, r2
 800119e:	80fb      	strh	r3, [r7, #6]
	unsigned int i;
	if(*sendFlag == true && userTkkConfig.tkkModSelection == TKK_MOD_RS422)
 80011a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 80ff 	beq.w	80013a8 <sendUartFrame+0x218>
 80011aa:	4b79      	ldr	r3, [pc, #484]	; (8001390 <sendUartFrame+0x200>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f040 80fa 	bne.w	80013a8 <sendUartFrame+0x218>
	{
		rs422Frame_[0] = RS422_HEADER;
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	22b5      	movs	r2, #181	; 0xb5
 80011b8:	701a      	strb	r2, [r3, #0]


		rs422Frame_[1] = 0x00 |
					   ( tutamakDigitalInputs[14].readState << 2) 	|									//SW4-DOWN
 80011ba:	4b76      	ldr	r3, [pc, #472]	; (8001394 <sendUartFrame+0x204>)
 80011bc:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
		rs422Frame_[1] = 0x00 |
 80011c0:	009b      	lsls	r3, r3, #2
					   ( tutamakDigitalInputs[14].readState << 2) 	|									//SW4-DOWN
 80011c2:	b25a      	sxtb	r2, r3
					   ( tutamakDigitalInputs[12].readState << 3) 	|									//SW4-UP
 80011c4:	4b73      	ldr	r3, [pc, #460]	; (8001394 <sendUartFrame+0x204>)
 80011c6:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 80011ca:	00db      	lsls	r3, r3, #3
					   ( tutamakDigitalInputs[14].readState << 2) 	|									//SW4-DOWN
 80011cc:	b25b      	sxtb	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b25a      	sxtb	r2, r3
					   (((~(tutamakDigitalInputs[0].readState)) << 4) & 0x10);							//SW1
 80011d2:	4b70      	ldr	r3, [pc, #448]	; (8001394 <sendUartFrame+0x204>)
 80011d4:	7a1b      	ldrb	r3, [r3, #8]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	f003 0310 	and.w	r3, r3, #16
 80011e0:	b25b      	sxtb	r3, r3
					   ( tutamakDigitalInputs[12].readState << 3) 	|									//SW4-UP
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b25a      	sxtb	r2, r3
		rs422Frame_[1] = 0x00 |
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	3301      	adds	r3, #1
					   ( tutamakDigitalInputs[12].readState << 3) 	|									//SW4-UP
 80011ea:	b2d2      	uxtb	r2, r2
		rs422Frame_[1] = 0x00 |
 80011ec:	701a      	strb	r2, [r3, #0]

		rs422Frame_[2] = 0x00 |
						(((~(tutamakDigitalInputs[11].readState)) << 0) & 0x01)	| 						//SW7
 80011ee:	4b69      	ldr	r3, [pc, #420]	; (8001394 <sendUartFrame+0x204>)
 80011f0:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 80011f4:	f003 0301 	and.w	r3, r3, #1
		rs422Frame_[2] = 0x00 |
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	bf0c      	ite	eq
 80011fc:	2301      	moveq	r3, #1
 80011fe:	2300      	movne	r3, #0
 8001200:	b2db      	uxtb	r3, r3
 8001202:	b25a      	sxtb	r2, r3
							(tutamakDigitalInputs[9].readState << 2) 			|						//SW6
 8001204:	4b63      	ldr	r3, [pc, #396]	; (8001394 <sendUartFrame+0x204>)
 8001206:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800120a:	009b      	lsls	r3, r3, #2
						(((~(tutamakDigitalInputs[11].readState)) << 0) & 0x01)	| 						//SW7
 800120c:	b25b      	sxtb	r3, r3
 800120e:	4313      	orrs	r3, r2
 8001210:	b25a      	sxtb	r2, r3
							(tutamakDigitalInputs[2].readState << 4);									//SW2
 8001212:	4b60      	ldr	r3, [pc, #384]	; (8001394 <sendUartFrame+0x204>)
 8001214:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001218:	011b      	lsls	r3, r3, #4
							(tutamakDigitalInputs[9].readState << 2) 			|						//SW6
 800121a:	b25b      	sxtb	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b25a      	sxtb	r2, r3
		rs422Frame_[2] = 0x00 |
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	3302      	adds	r3, #2
							(tutamakDigitalInputs[9].readState << 2) 			|						//SW6
 8001224:	b2d2      	uxtb	r2, r2
		rs422Frame_[2] = 0x00 |
 8001226:	701a      	strb	r2, [r3, #0]

		rs422Frame_[3] = (tutamakDigitalInputs[7].readState) 		|									//SW5-RIGHT
 8001228:	4b5a      	ldr	r3, [pc, #360]	; (8001394 <sendUartFrame+0x204>)
 800122a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800122e:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[5].readState << 1) 	|									//SW5-LEFT
 8001230:	4b58      	ldr	r3, [pc, #352]	; (8001394 <sendUartFrame+0x204>)
 8001232:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001236:	005b      	lsls	r3, r3, #1
		rs422Frame_[3] = (tutamakDigitalInputs[7].readState) 		|									//SW5-RIGHT
 8001238:	b25b      	sxtb	r3, r3
 800123a:	4313      	orrs	r3, r2
 800123c:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[3].readState << 2) 	|									//SW5-DOWN
 800123e:	4b55      	ldr	r3, [pc, #340]	; (8001394 <sendUartFrame+0x204>)
 8001240:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001244:	009b      	lsls	r3, r3, #2
						 (tutamakDigitalInputs[5].readState << 1) 	|									//SW5-LEFT
 8001246:	b25b      	sxtb	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[1].readState << 3) 	|									//SW5-UP
 800124c:	4b51      	ldr	r3, [pc, #324]	; (8001394 <sendUartFrame+0x204>)
 800124e:	7f1b      	ldrb	r3, [r3, #28]
 8001250:	00db      	lsls	r3, r3, #3
						 (tutamakDigitalInputs[3].readState << 2) 	|									//SW5-DOWN
 8001252:	b25b      	sxtb	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[10].readState << 4)	|									//SW3-RIGHT
 8001258:	4b4e      	ldr	r3, [pc, #312]	; (8001394 <sendUartFrame+0x204>)
 800125a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 800125e:	011b      	lsls	r3, r3, #4
						 (tutamakDigitalInputs[1].readState << 3) 	|									//SW5-UP
 8001260:	b25b      	sxtb	r3, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[8].readState << 5)	|									//SW3-LEFT
 8001266:	4b4b      	ldr	r3, [pc, #300]	; (8001394 <sendUartFrame+0x204>)
 8001268:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800126c:	015b      	lsls	r3, r3, #5
						 (tutamakDigitalInputs[10].readState << 4)	|									//SW3-RIGHT
 800126e:	b25b      	sxtb	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[6].readState << 6)	|									//SW3-DOWN
 8001274:	4b47      	ldr	r3, [pc, #284]	; (8001394 <sendUartFrame+0x204>)
 8001276:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800127a:	019b      	lsls	r3, r3, #6
						 (tutamakDigitalInputs[8].readState << 5)	|									//SW3-LEFT
 800127c:	b25b      	sxtb	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[4].readState << 7);										//SW3-UP
 8001282:	4b44      	ldr	r3, [pc, #272]	; (8001394 <sendUartFrame+0x204>)
 8001284:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001288:	01db      	lsls	r3, r3, #7
						 (tutamakDigitalInputs[6].readState << 6)	|									//SW3-DOWN
 800128a:	b25b      	sxtb	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b25a      	sxtb	r2, r3
		rs422Frame_[3] = (tutamakDigitalInputs[7].readState) 		|									//SW5-RIGHT
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3303      	adds	r3, #3
						 (tutamakDigitalInputs[6].readState << 6)	|									//SW3-DOWN
 8001294:	b2d2      	uxtb	r2, r2
		rs422Frame_[3] = (tutamakDigitalInputs[7].readState) 		|									//SW5-RIGHT
 8001296:	701a      	strb	r2, [r3, #0]

		if(remoteMode == 0)
 8001298:	4b3f      	ldr	r3, [pc, #252]	; (8001398 <sendUartFrame+0x208>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d11a      	bne.n	80012d6 <sendUartFrame+0x146>
		{
			//AnADC_Values[0]=( AnADC_Values[0] >> 3) & 0x1FFF;
			//AnADC_Values[1]=( AnADC_Values[1] >> 3) & 0x1FFF;

			rs422Frame_[4] = (AnADC_Values[0] >> 8) & 0xFF;// & 0x1F;			//AN2_7-0
 80012a0:	4b3e      	ldr	r3, [pc, #248]	; (800139c <sendUartFrame+0x20c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	0a1a      	lsrs	r2, r3, #8
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	3304      	adds	r3, #4
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]
			rs422Frame_[5] =  AnADC_Values[0]       & 0xFF; 					//AN2_15-8
 80012ae:	4b3b      	ldr	r3, [pc, #236]	; (800139c <sendUartFrame+0x20c>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3305      	adds	r3, #5
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	701a      	strb	r2, [r3, #0]

			rs422Frame_[6] = (AnADC_Values[1] >> 8) & 0xFF;      				//AN3_7-0
 80012ba:	4b38      	ldr	r3, [pc, #224]	; (800139c <sendUartFrame+0x20c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	0a1a      	lsrs	r2, r3, #8
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	3306      	adds	r3, #6
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	701a      	strb	r2, [r3, #0]
			rs422Frame_[7] =  AnADC_Values[1]       & 0xFF; 					//AN3_15-8
 80012c8:	4b34      	ldr	r3, [pc, #208]	; (800139c <sendUartFrame+0x20c>)
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	3307      	adds	r3, #7
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	e025      	b.n	8001322 <sendUartFrame+0x192>
			//fitted kullaniliyor

			//xAxisData = (AnADC_Values[0] >> 3) & 0x1FFF;
			//yAxisData = (AnADC_Values[1] >> 3) & 0x1FFF;

			rs422Frame_[4] = (fittedAnAdc_Values[0] >> 7) & 0x1F;
 80012d6:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <sendUartFrame+0x210>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	11db      	asrs	r3, r3, #7
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	3304      	adds	r3, #4
 80012e2:	f002 021f 	and.w	r2, r2, #31
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	701a      	strb	r2, [r3, #0]
			rs422Frame_[5] =  fittedAnAdc_Values[0]       & 0x7F;
 80012ea:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <sendUartFrame+0x210>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	3305      	adds	r3, #5
 80012f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	701a      	strb	r2, [r3, #0]

			rs422Frame_[6] = (fittedAnAdc_Values[1] >> 7) & 0x1F;
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <sendUartFrame+0x210>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	11db      	asrs	r3, r3, #7
 8001302:	b2da      	uxtb	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	3306      	adds	r3, #6
 8001308:	f002 021f 	and.w	r2, r2, #31
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	701a      	strb	r2, [r3, #0]
			rs422Frame_[7] =  fittedAnAdc_Values[1]       & 0x7F;
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <sendUartFrame+0x210>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	3307      	adds	r3, #7
 800131a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	701a      	strb	r2, [r3, #0]
		}

		rs422Frame_[8] = 0x00;
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	3308      	adds	r3, #8
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
		//rs422Frame_[8] = 0x00 |
		//								errY << 7 |
		//								errX << 6;//error byte

		/* checksum calculation */
		rs422Frame_[RS422_FRAME_SIZE-1] = 0;
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	3309      	adds	r3, #9
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
		for(i=1;i<RS422_FRAME_SIZE-1;i++)
 8001332:	2301      	movs	r3, #1
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
 8001336:	e00e      	b.n	8001356 <sendUartFrame+0x1c6>
		{
			rs422Frame_[RS422_FRAME_SIZE-1] += rs422Frame_[i];
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	3309      	adds	r3, #9
 800133c:	7819      	ldrb	r1, [r3, #0]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001342:	4413      	add	r3, r2
 8001344:	781a      	ldrb	r2, [r3, #0]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	3309      	adds	r3, #9
 800134a:	440a      	add	r2, r1
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	701a      	strb	r2, [r3, #0]
		for(i=1;i<RS422_FRAME_SIZE-1;i++)
 8001350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001352:	3301      	adds	r3, #1
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
 8001356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001358:	2b08      	cmp	r3, #8
 800135a:	d9ed      	bls.n	8001338 <sendUartFrame+0x1a8>
		}
		rs422Frame_[RS422_FRAME_SIZE-1] = (255-rs422Frame_[RS422_FRAME_SIZE-1]) + 1;
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	3309      	adds	r3, #9
 8001360:	781a      	ldrb	r2, [r3, #0]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	3309      	adds	r3, #9
 8001366:	4252      	negs	r2, r2
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	701a      	strb	r2, [r3, #0]
		rs422Frame_[RS422_FRAME_SIZE -1] = rs422Frame[RS422_FRAME_SIZE - 1] & 0x7F;
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <sendUartFrame+0x214>)
 800136e:	7a5a      	ldrb	r2, [r3, #9]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	3309      	adds	r3, #9
 8001374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001378:	b2d2      	uxtb	r2, r2
 800137a:	701a      	strb	r2, [r3, #0]

		/* transmit frame */
		  HAL_UART_Transmit(huart, (uint8_t*)rs422Frame_, 10, Timeout);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	220a      	movs	r2, #10
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f006 fbe0 	bl	8007b48 <HAL_UART_Transmit>
		*sendFlag = false;
 8001388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
	{
	// TX kuyruğu dolu vs. durumunda hata yönetimi
	}
	*sendFlag = false;
	}
}
 800138e:	e184      	b.n	800169a <sendUartFrame+0x50a>
 8001390:	200003f4 	.word	0x200003f4
 8001394:	200000e8 	.word	0x200000e8
 8001398:	20000000 	.word	0x20000000
 800139c:	200000d4 	.word	0x200000d4
 80013a0:	200000dc 	.word	0x200000dc
 80013a4:	20000368 	.word	0x20000368
	else if(*sendFlag == true && userTkkConfig.tkkModSelection == TKK_MOD_CAN)
 80013a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 8174 	beq.w	800169a <sendUartFrame+0x50a>
 80013b2:	4b86      	ldr	r3, [pc, #536]	; (80015cc <sendUartFrame+0x43c>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	f040 816f 	bne.w	800169a <sendUartFrame+0x50a>
		rs422Frame_[0] = (((!tutamakDigitalInputs[0].readState))		|
 80013bc:	4b84      	ldr	r3, [pc, #528]	; (80015d0 <sendUartFrame+0x440>)
 80013be:	7a1b      	ldrb	r3, [r3, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	bf0c      	ite	eq
 80013c4:	2301      	moveq	r3, #1
 80013c6:	2300      	movne	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[1].readState 	<< 1)	|
 80013cc:	4b80      	ldr	r3, [pc, #512]	; (80015d0 <sendUartFrame+0x440>)
 80013ce:	7f1b      	ldrb	r3, [r3, #28]
 80013d0:	005b      	lsls	r3, r3, #1
		rs422Frame_[0] = (((!tutamakDigitalInputs[0].readState))		|
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[2].readState 	<< 2) 	|
 80013d8:	4b7d      	ldr	r3, [pc, #500]	; (80015d0 <sendUartFrame+0x440>)
 80013da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013de:	009b      	lsls	r3, r3, #2
						 (   tutamakDigitalInputs[1].readState 	<< 1)	|
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[3].readState 	<< 3) 	|
 80013e6:	4b7a      	ldr	r3, [pc, #488]	; (80015d0 <sendUartFrame+0x440>)
 80013e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013ec:	00db      	lsls	r3, r3, #3
						 (   tutamakDigitalInputs[2].readState 	<< 2) 	|
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[4].readState  << 4) 	|
 80013f4:	4b76      	ldr	r3, [pc, #472]	; (80015d0 <sendUartFrame+0x440>)
 80013f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80013fa:	011b      	lsls	r3, r3, #4
						 (   tutamakDigitalInputs[3].readState 	<< 3) 	|
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[5].readState 	<< 5) 	|
 8001402:	4b73      	ldr	r3, [pc, #460]	; (80015d0 <sendUartFrame+0x440>)
 8001404:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001408:	015b      	lsls	r3, r3, #5
						 (   tutamakDigitalInputs[4].readState  << 4) 	|
 800140a:	b25b      	sxtb	r3, r3
 800140c:	4313      	orrs	r3, r2
 800140e:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[6].readState 	<< 6) 	|
 8001410:	4b6f      	ldr	r3, [pc, #444]	; (80015d0 <sendUartFrame+0x440>)
 8001412:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001416:	019b      	lsls	r3, r3, #6
						 (   tutamakDigitalInputs[5].readState 	<< 5) 	|
 8001418:	b25b      	sxtb	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[7].readState) << 7);
 800141e:	4b6c      	ldr	r3, [pc, #432]	; (80015d0 <sendUartFrame+0x440>)
 8001420:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001424:	01db      	lsls	r3, r3, #7
						 (   tutamakDigitalInputs[6].readState 	<< 6) 	|
 8001426:	b25b      	sxtb	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b25b      	sxtb	r3, r3
 800142c:	b2da      	uxtb	r2, r3
		rs422Frame_[0] = (((!tutamakDigitalInputs[0].readState))		|
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	701a      	strb	r2, [r3, #0]
		rs422Frame_[1] = (((tutamakDigitalInputs[8].readState)			|
 8001432:	4b67      	ldr	r3, [pc, #412]	; (80015d0 <sendUartFrame+0x440>)
 8001434:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8001438:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[9].readState 	<< 1)	|
 800143a:	4b65      	ldr	r3, [pc, #404]	; (80015d0 <sendUartFrame+0x440>)
 800143c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001440:	005b      	lsls	r3, r3, #1
		rs422Frame_[1] = (((tutamakDigitalInputs[8].readState)			|
 8001442:	b25b      	sxtb	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[10].readState 	<< 2) 	|
 8001448:	4b61      	ldr	r3, [pc, #388]	; (80015d0 <sendUartFrame+0x440>)
 800144a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 800144e:	009b      	lsls	r3, r3, #2
						 (  tutamakDigitalInputs[9].readState 	<< 1)	|
 8001450:	b25b      	sxtb	r3, r3
 8001452:	4313      	orrs	r3, r2
 8001454:	b25b      	sxtb	r3, r3
						 ((!tutamakDigitalInputs[11].readState) << 3) 	|
 8001456:	4a5e      	ldr	r2, [pc, #376]	; (80015d0 <sendUartFrame+0x440>)
 8001458:	f892 20e4 	ldrb.w	r2, [r2, #228]	; 0xe4
						 (  tutamakDigitalInputs[10].readState 	<< 2) 	|
 800145c:	2a00      	cmp	r2, #0
 800145e:	d101      	bne.n	8001464 <sendUartFrame+0x2d4>
 8001460:	2208      	movs	r2, #8
 8001462:	e000      	b.n	8001466 <sendUartFrame+0x2d6>
 8001464:	2200      	movs	r2, #0
 8001466:	4313      	orrs	r3, r2
 8001468:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[12].readState  << 4) 	|
 800146a:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <sendUartFrame+0x440>)
 800146c:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8001470:	011b      	lsls	r3, r3, #4
						 ((!tutamakDigitalInputs[11].readState) << 3) 	|
 8001472:	b25b      	sxtb	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[13].readState 	<< 5) 	|
 8001478:	4b55      	ldr	r3, [pc, #340]	; (80015d0 <sendUartFrame+0x440>)
 800147a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800147e:	015b      	lsls	r3, r3, #5
						 (  tutamakDigitalInputs[12].readState  << 4) 	|
 8001480:	b25b      	sxtb	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[14].readState 	<< 6) 	|
 8001486:	4b52      	ldr	r3, [pc, #328]	; (80015d0 <sendUartFrame+0x440>)
 8001488:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800148c:	019b      	lsls	r3, r3, #6
						 (  tutamakDigitalInputs[13].readState 	<< 5) 	|
 800148e:	b25b      	sxtb	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[15].readState) << 7));
 8001494:	4b4e      	ldr	r3, [pc, #312]	; (80015d0 <sendUartFrame+0x440>)
 8001496:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 800149a:	01db      	lsls	r3, r3, #7
						 (  tutamakDigitalInputs[14].readState 	<< 6) 	|
 800149c:	b25b      	sxtb	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b25a      	sxtb	r2, r3
		rs422Frame_[1] = (((tutamakDigitalInputs[8].readState)			|
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	3301      	adds	r3, #1
						 (  tutamakDigitalInputs[14].readState 	<< 6) 	|
 80014a6:	b2d2      	uxtb	r2, r2
		rs422Frame_[1] = (((tutamakDigitalInputs[8].readState)			|
 80014a8:	701a      	strb	r2, [r3, #0]
		rs422Frame_[2] =((( tutamakDigitalInputs[16].readState)			|
 80014aa:	4b49      	ldr	r3, [pc, #292]	; (80015d0 <sendUartFrame+0x440>)
 80014ac:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80014b0:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[17].readState 	<< 1)	|
 80014b2:	4b47      	ldr	r3, [pc, #284]	; (80015d0 <sendUartFrame+0x440>)
 80014b4:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80014b8:	005b      	lsls	r3, r3, #1
		rs422Frame_[2] =((( tutamakDigitalInputs[16].readState)			|
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[18].readState 	<< 2) 	|
 80014c0:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <sendUartFrame+0x440>)
 80014c2:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 80014c6:	009b      	lsls	r3, r3, #2
						(   tutamakDigitalInputs[17].readState 	<< 1)	|
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[19].readState 	<< 3) 	|
 80014ce:	4b40      	ldr	r3, [pc, #256]	; (80015d0 <sendUartFrame+0x440>)
 80014d0:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80014d4:	00db      	lsls	r3, r3, #3
						(   tutamakDigitalInputs[18].readState 	<< 2) 	|
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	4313      	orrs	r3, r2
 80014da:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[20].readState  << 4) 	|
 80014dc:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <sendUartFrame+0x440>)
 80014de:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 80014e2:	011b      	lsls	r3, r3, #4
						(   tutamakDigitalInputs[19].readState 	<< 3) 	|
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[21].readState 	<< 5) 	|
 80014ea:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <sendUartFrame+0x440>)
 80014ec:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 80014f0:	015b      	lsls	r3, r3, #5
						(   tutamakDigitalInputs[20].readState  << 4) 	|
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[22].readState 	<< 6) 	|
 80014f8:	4b35      	ldr	r3, [pc, #212]	; (80015d0 <sendUartFrame+0x440>)
 80014fa:	f893 31c0 	ldrb.w	r3, [r3, #448]	; 0x1c0
 80014fe:	019b      	lsls	r3, r3, #6
						(   tutamakDigitalInputs[21].readState 	<< 5) 	|
 8001500:	b25b      	sxtb	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[23].readState) << 7));
 8001506:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <sendUartFrame+0x440>)
 8001508:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 800150c:	01db      	lsls	r3, r3, #7
						(   tutamakDigitalInputs[22].readState 	<< 6) 	|
 800150e:	b25b      	sxtb	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	b25a      	sxtb	r2, r3
		rs422Frame_[2] =((( tutamakDigitalInputs[16].readState)			|
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	3302      	adds	r3, #2
						(   tutamakDigitalInputs[22].readState 	<< 6) 	|
 8001518:	b2d2      	uxtb	r2, r2
		rs422Frame_[2] =((( tutamakDigitalInputs[16].readState)			|
 800151a:	701a      	strb	r2, [r3, #0]
		rs422Frame_[3] =((( tutamakDigitalInputs[24].readState)			|
 800151c:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <sendUartFrame+0x440>)
 800151e:	f893 31e8 	ldrb.w	r3, [r3, #488]	; 0x1e8
 8001522:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[25].readState 	<< 1)	|
 8001524:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <sendUartFrame+0x440>)
 8001526:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800152a:	005b      	lsls	r3, r3, #1
		rs422Frame_[3] =((( tutamakDigitalInputs[24].readState)			|
 800152c:	b25b      	sxtb	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[26].readState 	<< 2) 	|
 8001532:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <sendUartFrame+0x440>)
 8001534:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 8001538:	009b      	lsls	r3, r3, #2
						(   tutamakDigitalInputs[25].readState 	<< 1)	|
 800153a:	b25b      	sxtb	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[27].readState 	<< 3) 	|
 8001540:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <sendUartFrame+0x440>)
 8001542:	f893 3224 	ldrb.w	r3, [r3, #548]	; 0x224
 8001546:	00db      	lsls	r3, r3, #3
						(   tutamakDigitalInputs[26].readState 	<< 2) 	|
 8001548:	b25b      	sxtb	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[28].readState  << 4) 	|
 800154e:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <sendUartFrame+0x440>)
 8001550:	f893 3238 	ldrb.w	r3, [r3, #568]	; 0x238
 8001554:	011b      	lsls	r3, r3, #4
						(   tutamakDigitalInputs[27].readState 	<< 3) 	|
 8001556:	b25b      	sxtb	r3, r3
 8001558:	4313      	orrs	r3, r2
 800155a:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[29].readState 	<< 5) 	|
 800155c:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <sendUartFrame+0x440>)
 800155e:	f893 324c 	ldrb.w	r3, [r3, #588]	; 0x24c
 8001562:	015b      	lsls	r3, r3, #5
						(   tutamakDigitalInputs[28].readState  << 4) 	|
 8001564:	b25b      	sxtb	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[30].readState 	<< 6) 	|
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <sendUartFrame+0x440>)
 800156c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8001570:	019b      	lsls	r3, r3, #6
						(   tutamakDigitalInputs[29].readState 	<< 5) 	|
 8001572:	b25b      	sxtb	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[31].readState) << 7));
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <sendUartFrame+0x440>)
 800157a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800157e:	01db      	lsls	r3, r3, #7
						(   tutamakDigitalInputs[30].readState 	<< 6) 	|
 8001580:	b25b      	sxtb	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	b25a      	sxtb	r2, r3
		rs422Frame_[3] =((( tutamakDigitalInputs[24].readState)			|
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	3303      	adds	r3, #3
						(   tutamakDigitalInputs[30].readState 	<< 6) 	|
 800158a:	b2d2      	uxtb	r2, r2
		rs422Frame_[3] =((( tutamakDigitalInputs[24].readState)			|
 800158c:	701a      	strb	r2, [r3, #0]
		if(remoteMode == 0)
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <sendUartFrame+0x444>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d122      	bne.n	80015dc <sendUartFrame+0x44c>
			rs422Frame_[4] = (AnADC_Values[0] >> 8) & 0xFF;// & 0x1F;			//AN2_7-0
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <sendUartFrame+0x448>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	0a1a      	lsrs	r2, r3, #8
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	3304      	adds	r3, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	701a      	strb	r2, [r3, #0]
			rs422Frame_[5] =  AnADC_Values[0]       & 0xFF; 					//AN2_15-8
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <sendUartFrame+0x448>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	3305      	adds	r3, #5
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	701a      	strb	r2, [r3, #0]
			rs422Frame_[6] = (AnADC_Values[1] >> 8) & 0xFF;      				//AN3_7-0
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <sendUartFrame+0x448>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	0a1a      	lsrs	r2, r3, #8
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	3306      	adds	r3, #6
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	701a      	strb	r2, [r3, #0]
			rs422Frame_[7] =  AnADC_Values[1]       & 0xFF; 					//AN3_15-8
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <sendUartFrame+0x448>)
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	3307      	adds	r3, #7
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]
 80015ca:	e02d      	b.n	8001628 <sendUartFrame+0x498>
 80015cc:	200003f4 	.word	0x200003f4
 80015d0:	200000e8 	.word	0x200000e8
 80015d4:	20000000 	.word	0x20000000
 80015d8:	200000d4 	.word	0x200000d4
			rs422Frame_[4] = (fittedAnAdc_Values[0] >> 7) & 0x1F;
 80015dc:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <sendUartFrame+0x514>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	11db      	asrs	r3, r3, #7
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	3304      	adds	r3, #4
 80015e8:	f002 021f 	and.w	r2, r2, #31
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	701a      	strb	r2, [r3, #0]
			rs422Frame_[5] =  fittedAnAdc_Values[0]       & 0x7F;
 80015f0:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <sendUartFrame+0x514>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3305      	adds	r3, #5
 80015fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]
			rs422Frame_[6] = (fittedAnAdc_Values[1] >> 7) & 0x1F;
 8001602:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <sendUartFrame+0x514>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	11db      	asrs	r3, r3, #7
 8001608:	b2da      	uxtb	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3306      	adds	r3, #6
 800160e:	f002 021f 	and.w	r2, r2, #31
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]
			rs422Frame_[7] =  fittedAnAdc_Values[1]       & 0x7F;
 8001616:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <sendUartFrame+0x514>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	3307      	adds	r3, #7
 8001620:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	701a      	strb	r2, [r3, #0]
	CAN_TxHeaderTypeDef txHeader = {0};
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	615a      	str	r2, [r3, #20]
	txHeader.StdId = 0x321;
 800163a:	f240 3321 	movw	r3, #801	; 0x321
 800163e:	61fb      	str	r3, [r7, #28]
	txHeader.IDE   = CAN_ID_STD;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.RTR   = CAN_RTR_DATA;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
	txHeader.DLC   = 8;
 8001648:	2308      	movs	r3, #8
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
	txHeader.TransmitGlobalTime = DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint8_t data[8] = { rs422Frame_[0],
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	753b      	strb	r3, [r7, #20]
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	785b      	ldrb	r3, [r3, #1]
 800165c:	757b      	strb	r3, [r7, #21]
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	789b      	ldrb	r3, [r3, #2]
 8001662:	75bb      	strb	r3, [r7, #22]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	78db      	ldrb	r3, [r3, #3]
 8001668:	75fb      	strb	r3, [r7, #23]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	791b      	ldrb	r3, [r3, #4]
 800166e:	763b      	strb	r3, [r7, #24]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	795b      	ldrb	r3, [r3, #5]
 8001674:	767b      	strb	r3, [r7, #25]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	799b      	ldrb	r3, [r3, #6]
 800167a:	76bb      	strb	r3, [r7, #26]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	79db      	ldrb	r3, [r3, #7]
 8001680:	76fb      	strb	r3, [r7, #27]
	if (HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &txMailbox) != HAL_OK)
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	f107 0214 	add.w	r2, r7, #20
 800168a:	f107 011c 	add.w	r1, r7, #28
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <sendUartFrame+0x518>)
 8001690:	f002 f9d6 	bl	8003a40 <HAL_CAN_AddTxMessage>
	*sendFlag = false;
 8001694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
}
 800169a:	bf00      	nop
 800169c:	3738      	adds	r7, #56	; 0x38
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200000dc 	.word	0x200000dc
 80016a8:	200000a0 	.word	0x200000a0

080016ac <eraseFlashUserConf>:
		@Param 			: none
		@description	:
*/

void eraseFlashUserConf(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80016b0:	f003 f9d8 	bl	8004a64 <HAL_FLASH_Unlock>

	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <eraseFlashUserConf+0x34>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = CONFIG_DATA_BASE_ADDR; // düzenlenecek !!!!!!!!!!!!!!!!!!!!*/
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <eraseFlashUserConf+0x34>)
 80016bc:	4a09      	ldr	r2, [pc, #36]	; (80016e4 <eraseFlashUserConf+0x38>)
 80016be:	605a      	str	r2, [r3, #4]
	EraseInitStruct.NbPages     = 1;
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <eraseFlashUserConf+0x34>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	609a      	str	r2, [r3, #8]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80016c6:	4908      	ldr	r1, [pc, #32]	; (80016e8 <eraseFlashUserConf+0x3c>)
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <eraseFlashUserConf+0x34>)
 80016ca:	f003 fa8f 	bl	8004bec <HAL_FLASHEx_Erase>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d000      	beq.n	80016d6 <eraseFlashUserConf+0x2a>
	{
		while (1)
 80016d4:	e7fe      	b.n	80016d4 <eraseFlashUserConf+0x28>
		{

		}
	}

	HAL_FLASH_Lock();
 80016d6:	f003 f9eb 	bl	8004ab0 <HAL_FLASH_Lock>
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200004d8 	.word	0x200004d8
 80016e4:	0800e000 	.word	0x0800e000
 80016e8:	200003a0 	.word	0x200003a0

080016ec <refreshFlashUserConf>:
		@Param 				: none
		@description	: Page Erase procedure is used before write function

*/
void refreshFlashUserConf(ConfigData *configDataPtr)
{
 80016ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016f0:	b08e      	sub	sp, #56	; 0x38
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	62f8      	str	r0, [r7, #44]	; 0x2c
	volatile uint32_t i = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
	ConfigData* tempConfigDataPtr = configDataPtr;
 80016fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
	eraseFlashUserConf();
 80016fe:	f7ff ffd5 	bl	80016ac <eraseFlashUserConf>
	HAL_FLASH_Unlock();
 8001702:	f003 f9af 	bl	8004a64 <HAL_FLASH_Unlock>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_DEFAULT_SELECT		, 0x00 									);
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	493f      	ldr	r1, [pc, #252]	; (800180c <refreshFlashUserConf+0x120>)
 8001710:	2001      	movs	r0, #1
 8001712:	f003 f937 	bl	8004984 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_INTERFACE_OFFSET		, tempConfigDataPtr -> tkkModSelection 	);
 8001716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	2200      	movs	r2, #0
 800171e:	461c      	mov	r4, r3
 8001720:	4615      	mov	r5, r2
 8001722:	4622      	mov	r2, r4
 8001724:	462b      	mov	r3, r5
 8001726:	493a      	ldr	r1, [pc, #232]	; (8001810 <refreshFlashUserConf+0x124>)
 8001728:	2001      	movs	r0, #1
 800172a:	f003 f92b 	bl	8004984 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_X_MIDDLEPOINT_OFFSET	, tempConfigDataPtr -> xMid				);
 800172e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001730:	88db      	ldrh	r3, [r3, #6]
 8001732:	b29b      	uxth	r3, r3
 8001734:	2200      	movs	r2, #0
 8001736:	4698      	mov	r8, r3
 8001738:	4691      	mov	r9, r2
 800173a:	4642      	mov	r2, r8
 800173c:	464b      	mov	r3, r9
 800173e:	4935      	ldr	r1, [pc, #212]	; (8001814 <refreshFlashUserConf+0x128>)
 8001740:	2001      	movs	r0, #1
 8001742:	f003 f91f 	bl	8004984 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_X_MINPOINT_OFFSET		, tempConfigDataPtr -> xMin				);
 8001746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001748:	885b      	ldrh	r3, [r3, #2]
 800174a:	b29b      	uxth	r3, r3
 800174c:	2200      	movs	r2, #0
 800174e:	469a      	mov	sl, r3
 8001750:	4693      	mov	fp, r2
 8001752:	4652      	mov	r2, sl
 8001754:	465b      	mov	r3, fp
 8001756:	4930      	ldr	r1, [pc, #192]	; (8001818 <refreshFlashUserConf+0x12c>)
 8001758:	2001      	movs	r0, #1
 800175a:	f003 f913 	bl	8004984 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_X_MAXPOINT_OFFSET		, tempConfigDataPtr -> xMax				);
 800175e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001760:	889b      	ldrh	r3, [r3, #4]
 8001762:	b29b      	uxth	r3, r3
 8001764:	2200      	movs	r2, #0
 8001766:	623b      	str	r3, [r7, #32]
 8001768:	627a      	str	r2, [r7, #36]	; 0x24
 800176a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800176e:	492b      	ldr	r1, [pc, #172]	; (800181c <refreshFlashUserConf+0x130>)
 8001770:	2001      	movs	r0, #1
 8001772:	f003 f907 	bl	8004984 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_Y_MIDDLEPOINT_OFFSET	, tempConfigDataPtr -> yMid				);
 8001776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001778:	899b      	ldrh	r3, [r3, #12]
 800177a:	b29b      	uxth	r3, r3
 800177c:	2200      	movs	r2, #0
 800177e:	61bb      	str	r3, [r7, #24]
 8001780:	61fa      	str	r2, [r7, #28]
 8001782:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001786:	4926      	ldr	r1, [pc, #152]	; (8001820 <refreshFlashUserConf+0x134>)
 8001788:	2001      	movs	r0, #1
 800178a:	f003 f8fb 	bl	8004984 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_Y_MINPOINT_OFFSET		, tempConfigDataPtr -> yMin				);
 800178e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001790:	891b      	ldrh	r3, [r3, #8]
 8001792:	b29b      	uxth	r3, r3
 8001794:	2200      	movs	r2, #0
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	617a      	str	r2, [r7, #20]
 800179a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800179e:	4921      	ldr	r1, [pc, #132]	; (8001824 <refreshFlashUserConf+0x138>)
 80017a0:	2001      	movs	r0, #1
 80017a2:	f003 f8ef 	bl	8004984 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_Y_MAXPOINT_OFFSET		, tempConfigDataPtr -> yMax				);
 80017a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a8:	895b      	ldrh	r3, [r3, #10]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	2200      	movs	r2, #0
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	60fa      	str	r2, [r7, #12]
 80017b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017b6:	491c      	ldr	r1, [pc, #112]	; (8001828 <refreshFlashUserConf+0x13c>)
 80017b8:	2001      	movs	r0, #1
 80017ba:	f003 f8e3 	bl	8004984 <HAL_FLASH_Program>

	for(i = 0; i < 32; i++)
 80017be:	2300      	movs	r3, #0
 80017c0:	633b      	str	r3, [r7, #48]	; 0x30
 80017c2:	e015      	b.n	80017f0 <refreshFlashUserConf+0x104>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT, tempTkkConfig.debounceFactor[i]);
 80017c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <refreshFlashUserConf+0x140>)
 80017c8:	4413      	add	r3, r2
 80017ca:	0099      	lsls	r1, r3, #2
 80017cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ce:	4a18      	ldr	r2, [pc, #96]	; (8001830 <refreshFlashUserConf+0x144>)
 80017d0:	3304      	adds	r3, #4
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	88db      	ldrh	r3, [r3, #6]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	2200      	movs	r2, #0
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017e4:	2001      	movs	r0, #1
 80017e6:	f003 f8cd 	bl	8004984 <HAL_FLASH_Program>
	for(i = 0; i < 32; i++)
 80017ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ec:	3301      	adds	r3, #1
 80017ee:	633b      	str	r3, [r7, #48]	; 0x30
 80017f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f2:	2b1f      	cmp	r3, #31
 80017f4:	d9e6      	bls.n	80017c4 <refreshFlashUserConf+0xd8>
	}

	HAL_FLASH_Lock();
 80017f6:	f003 f95b 	bl	8004ab0 <HAL_FLASH_Lock>

	readFlashUserConf(&userTkkConfig);
 80017fa:	480e      	ldr	r0, [pc, #56]	; (8001834 <refreshFlashUserConf+0x148>)
 80017fc:	f000 f81c 	bl	8001838 <readFlashUserConf>
}
 8001800:	bf00      	nop
 8001802:	3738      	adds	r7, #56	; 0x38
 8001804:	46bd      	mov	sp, r7
 8001806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180a:	bf00      	nop
 800180c:	0800e000 	.word	0x0800e000
 8001810:	0800e002 	.word	0x0800e002
 8001814:	0800e004 	.word	0x0800e004
 8001818:	0800e006 	.word	0x0800e006
 800181c:	0800e008 	.word	0x0800e008
 8001820:	0800e00a 	.word	0x0800e00a
 8001824:	0800e00c 	.word	0x0800e00c
 8001828:	0800e00e 	.word	0x0800e00e
 800182c:	02003814 	.word	0x02003814
 8001830:	200003a4 	.word	0x200003a4
 8001834:	200003f4 	.word	0x200003f4

08001838 <readFlashUserConf>:
		@Param 				: none
		@description	:

*/
void readFlashUserConf(ConfigData *configDataPtr)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
	ConfigData* tempConfigDataPtr = configDataPtr;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	60fb      	str	r3, [r7, #12]

	tempConfigDataPtr -> tkkModSelection 	= (*(uint32_t*)CONFIG_DATA_INTERFACE_OFFSET		);
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <readFlashUserConf+0x90>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	801a      	strh	r2, [r3, #0]

	tempConfigDataPtr -> xMid 				= (*(uint32_t*)CONFIG_DATA_X_MIDDLEPOINT_OFFSET	);
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <readFlashUserConf+0x94>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b29a      	uxth	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	80da      	strh	r2, [r3, #6]
	tempConfigDataPtr -> xMin 				= (*(uint32_t*)CONFIG_DATA_X_MINPOINT_OFFSET	);
 800185c:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <readFlashUserConf+0x98>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	805a      	strh	r2, [r3, #2]
	tempConfigDataPtr -> xMax 				= (*(uint32_t*)CONFIG_DATA_X_MAXPOINT_OFFSET	);
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <readFlashUserConf+0x9c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	b29a      	uxth	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	809a      	strh	r2, [r3, #4]

	tempConfigDataPtr -> yMid 				= (*(uint32_t*)CONFIG_DATA_Y_MIDDLEPOINT_OFFSET	);
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <readFlashUserConf+0xa0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	819a      	strh	r2, [r3, #12]
	tempConfigDataPtr -> yMin 				= (*(uint32_t*)CONFIG_DATA_Y_MINPOINT_OFFSET	);
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <readFlashUserConf+0xa4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29a      	uxth	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	811a      	strh	r2, [r3, #8]
	tempConfigDataPtr -> yMax 				= (*(uint32_t*)CONFIG_DATA_Y_MAXPOINT_OFFSET	);
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <readFlashUserConf+0xa8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	815a      	strh	r2, [r3, #10]

	for(i = 0; i < 32; i++)
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	e00f      	b.n	80018b4 <readFlashUserConf+0x7c>
	{
		tempConfigDataPtr -> debounceFactor [i] = (*(uint32_t*)(CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT));
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <readFlashUserConf+0xac>)
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	b291      	uxth	r1, r2
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	3304      	adds	r3, #4
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	460a      	mov	r2, r1
 80018ac:	80da      	strh	r2, [r3, #6]
	for(i = 0; i < 32; i++)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	3301      	adds	r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2b1f      	cmp	r3, #31
 80018b8:	d9ec      	bls.n	8001894 <readFlashUserConf+0x5c>
	}
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	0800e002 	.word	0x0800e002
 80018cc:	0800e004 	.word	0x0800e004
 80018d0:	0800e006 	.word	0x0800e006
 80018d4:	0800e008 	.word	0x0800e008
 80018d8:	0800e00a 	.word	0x0800e00a
 80018dc:	0800e00c 	.word	0x0800e00c
 80018e0:	0800e00e 	.word	0x0800e00e
 80018e4:	02003814 	.word	0x02003814

080018e8 <loadDefaultValues>:
void loadDefaultValues(ConfigData *configDataPtr)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]
	ConfigData* tempConfigDataPtr = configDataPtr;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	60fb      	str	r3, [r7, #12]

	tempConfigDataPtr -> tkkModSelection 	= (*(uint32_t*)DEFAULT_CONFIG_DATA_INTERFACE_OFFSET		);
 80018f8:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <loadDefaultValues+0x90>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	801a      	strh	r2, [r3, #0]

	tempConfigDataPtr -> xMid 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET	);
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <loadDefaultValues+0x94>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b29a      	uxth	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	80da      	strh	r2, [r3, #6]
	tempConfigDataPtr -> xMin 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET	);
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <loadDefaultValues+0x98>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b29a      	uxth	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	805a      	strh	r2, [r3, #2]
	tempConfigDataPtr -> xMax 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET	);
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <loadDefaultValues+0x9c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b29a      	uxth	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	809a      	strh	r2, [r3, #4]

	tempConfigDataPtr -> yMid 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET	);
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <loadDefaultValues+0xa0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	819a      	strh	r2, [r3, #12]
	tempConfigDataPtr -> yMin 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET	);
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <loadDefaultValues+0xa4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	811a      	strh	r2, [r3, #8]
	tempConfigDataPtr -> yMax 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET	);
 8001934:	4b16      	ldr	r3, [pc, #88]	; (8001990 <loadDefaultValues+0xa8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	b29a      	uxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	815a      	strh	r2, [r3, #10]

	for(i = 0; i < 32; i++)
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	e00f      	b.n	8001964 <loadDefaultValues+0x7c>
	{
		tempConfigDataPtr ->debounceFactor [i] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT));
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	009a      	lsls	r2, r3, #2
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <loadDefaultValues+0xac>)
 800194a:	4413      	add	r3, r2
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	b291      	uxth	r1, r2
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	3304      	adds	r3, #4
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	460a      	mov	r2, r1
 800195c:	80da      	strh	r2, [r3, #6]
	for(i = 0; i < 32; i++)
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	3301      	adds	r3, #1
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b1f      	cmp	r3, #31
 8001968:	d9ec      	bls.n	8001944 <loadDefaultValues+0x5c>
	}
}
 800196a:	bf00      	nop
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	0800f000 	.word	0x0800f000
 800197c:	0800f002 	.word	0x0800f002
 8001980:	0800f004 	.word	0x0800f004
 8001984:	0800f006 	.word	0x0800f006
 8001988:	0800f008 	.word	0x0800f008
 800198c:	0800f00a 	.word	0x0800f00a
 8001990:	0800f00c 	.word	0x0800f00c
 8001994:	0800f00e 	.word	0x0800f00e

08001998 <sendAckUart>:

void sendAckUart(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
	volatile uint8_t uartACK[9];

	uartACK[0] = COMMAND_HEADER;
 800199e:	23a5      	movs	r3, #165	; 0xa5
 80019a0:	713b      	strb	r3, [r7, #4]
	uartACK[1] = COMMAND_ACK;
 80019a2:	23ff      	movs	r3, #255	; 0xff
 80019a4:	717b      	strb	r3, [r7, #5]
	uartACK[2] = 0x00;
 80019a6:	2300      	movs	r3, #0
 80019a8:	71bb      	strb	r3, [r7, #6]
	uartACK[3] = 0x00;
 80019aa:	2300      	movs	r3, #0
 80019ac:	71fb      	strb	r3, [r7, #7]
	uartACK[4] = 0x00;
 80019ae:	2300      	movs	r3, #0
 80019b0:	723b      	strb	r3, [r7, #8]
	uartACK[5] = 0x00;
 80019b2:	2300      	movs	r3, #0
 80019b4:	727b      	strb	r3, [r7, #9]
	uartACK[6] = 0x00;
 80019b6:	2300      	movs	r3, #0
 80019b8:	72bb      	strb	r3, [r7, #10]
	uartACK[7] = 0x00;
 80019ba:	2300      	movs	r3, #0
 80019bc:	72fb      	strb	r3, [r7, #11]
	uartACK[8] = CHECKSUM_ACK;
 80019be:	2301      	movs	r3, #1
 80019c0:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*)uartACK, 9, 5000);
 80019c2:	1d39      	adds	r1, r7, #4
 80019c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80019c8:	2209      	movs	r2, #9
 80019ca:	4803      	ldr	r0, [pc, #12]	; (80019d8 <sendAckUart+0x40>)
 80019cc:	f006 f8bc 	bl	8007b48 <HAL_UART_Transmit>
}
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000610 	.word	0x20000610

080019dc <sendAckCan>:

void sendAckCan(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader = {0};
 80019e2:	f107 0310 	add.w	r3, r7, #16
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]
 80019f2:	615a      	str	r2, [r3, #20]
	uint32_t txMailbox;

	txHeader.StdId = 0x321;
 80019f4:	f240 3321 	movw	r3, #801	; 0x321
 80019f8:	613b      	str	r3, [r7, #16]
	txHeader.IDE   = CAN_ID_STD;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
	txHeader.RTR   = CAN_RTR_DATA;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
	txHeader.DLC   = 8;
 8001a02:	2308      	movs	r3, #8
 8001a04:	623b      	str	r3, [r7, #32]
	txHeader.TransmitGlobalTime = DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	uint8_t canACK[9];

	canACK[0] = COMMAND_HEADER;
 8001a0c:	23a5      	movs	r3, #165	; 0xa5
 8001a0e:	703b      	strb	r3, [r7, #0]
	canACK[1] = COMMAND_ACK;
 8001a10:	23ff      	movs	r3, #255	; 0xff
 8001a12:	707b      	strb	r3, [r7, #1]
	canACK[2] = 0x00;
 8001a14:	2300      	movs	r3, #0
 8001a16:	70bb      	strb	r3, [r7, #2]
	canACK[3] = 0x00;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	70fb      	strb	r3, [r7, #3]
	canACK[4] = 0x00;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	713b      	strb	r3, [r7, #4]
	canACK[5] = 0x00;
 8001a20:	2300      	movs	r3, #0
 8001a22:	717b      	strb	r3, [r7, #5]
	canACK[6] = 0x00;
 8001a24:	2300      	movs	r3, #0
 8001a26:	71bb      	strb	r3, [r7, #6]
	canACK[7] = 0x00;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	71fb      	strb	r3, [r7, #7]

	if (HAL_CAN_AddTxMessage(&hcan, &txHeader, canACK, &txMailbox) != HAL_OK)
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	463a      	mov	r2, r7
 8001a32:	f107 0110 	add.w	r1, r7, #16
 8001a36:	4803      	ldr	r0, [pc, #12]	; (8001a44 <sendAckCan+0x68>)
 8001a38:	f002 f802 	bl	8003a40 <HAL_CAN_AddTxMessage>
	{
		// TX kuyruğu dolu vs. durumunda hata yönetimi
	}
}
 8001a3c:	bf00      	nop
 8001a3e:	3728      	adds	r7, #40	; 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200000a0 	.word	0x200000a0

08001a48 <checkCommand>:

void checkCommand(uint8_t* rxBuffer)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24

	if(userTkkConfig.tkkModSelection == TKK_MOD_RS422)
 8001a54:	4bb3      	ldr	r3, [pc, #716]	; (8001d24 <checkCommand+0x2dc>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f040 82cb 	bne.w	8001ff4 <checkCommand+0x5ac>
	{
		switch (rxBuffer[1])
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3301      	adds	r3, #1
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2bdd      	cmp	r3, #221	; 0xdd
 8001a66:	f300 8515 	bgt.w	8002494 <checkCommand+0xa4c>
 8001a6a:	2bbb      	cmp	r3, #187	; 0xbb
 8001a6c:	da06      	bge.n	8001a7c <checkCommand+0x34>
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	f300 8090 	bgt.w	8001b94 <checkCommand+0x14c>
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	dc7d      	bgt.n	8001b74 <checkCommand+0x12c>

				break;
			}
	}

}
 8001a78:	f000 bd0c 	b.w	8002494 <checkCommand+0xa4c>
		switch (rxBuffer[1])
 8001a7c:	3bbb      	subs	r3, #187	; 0xbb
 8001a7e:	2b22      	cmp	r3, #34	; 0x22
 8001a80:	f200 8508 	bhi.w	8002494 <checkCommand+0xa4c>
 8001a84:	a201      	add	r2, pc, #4	; (adr r2, 8001a8c <checkCommand+0x44>)
 8001a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8a:	bf00      	nop
 8001a8c:	08001f77 	.word	0x08001f77
 8001a90:	08002495 	.word	0x08002495
 8001a94:	08002495 	.word	0x08002495
 8001a98:	08002495 	.word	0x08002495
 8001a9c:	08002495 	.word	0x08002495
 8001aa0:	08002495 	.word	0x08002495
 8001aa4:	08002495 	.word	0x08002495
 8001aa8:	08002495 	.word	0x08002495
 8001aac:	08002495 	.word	0x08002495
 8001ab0:	08002495 	.word	0x08002495
 8001ab4:	08001f5b 	.word	0x08001f5b
 8001ab8:	08002495 	.word	0x08002495
 8001abc:	08002495 	.word	0x08002495
 8001ac0:	08002495 	.word	0x08002495
 8001ac4:	08002495 	.word	0x08002495
 8001ac8:	08002495 	.word	0x08002495
 8001acc:	08002495 	.word	0x08002495
 8001ad0:	08002487 	.word	0x08002487
 8001ad4:	08002495 	.word	0x08002495
 8001ad8:	08002495 	.word	0x08002495
 8001adc:	08002495 	.word	0x08002495
 8001ae0:	08002495 	.word	0x08002495
 8001ae4:	08002495 	.word	0x08002495
 8001ae8:	08002495 	.word	0x08002495
 8001aec:	08002495 	.word	0x08002495
 8001af0:	08002495 	.word	0x08002495
 8001af4:	08001f61 	.word	0x08001f61
 8001af8:	08002495 	.word	0x08002495
 8001afc:	08002495 	.word	0x08002495
 8001b00:	08002495 	.word	0x08002495
 8001b04:	08002495 	.word	0x08002495
 8001b08:	08002495 	.word	0x08002495
 8001b0c:	08002495 	.word	0x08002495
 8001b10:	08002495 	.word	0x08002495
 8001b14:	08001f6b 	.word	0x08001f6b
 8001b18:	3b71      	subs	r3, #113	; 0x71
 8001b1a:	2b12      	cmp	r3, #18
 8001b1c:	f200 84ba 	bhi.w	8002494 <checkCommand+0xa4c>
 8001b20:	a201      	add	r2, pc, #4	; (adr r2, 8001b28 <checkCommand+0xe0>)
 8001b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b26:	bf00      	nop
 8001b28:	08001dfb 	.word	0x08001dfb
 8001b2c:	08001e63 	.word	0x08001e63
 8001b30:	08001edf 	.word	0x08001edf
 8001b34:	08002495 	.word	0x08002495
 8001b38:	08002495 	.word	0x08002495
 8001b3c:	08002495 	.word	0x08002495
 8001b40:	08002495 	.word	0x08002495
 8001b44:	08002495 	.word	0x08002495
 8001b48:	08002495 	.word	0x08002495
 8001b4c:	08002495 	.word	0x08002495
 8001b50:	08002495 	.word	0x08002495
 8001b54:	08002495 	.word	0x08002495
 8001b58:	08002495 	.word	0x08002495
 8001b5c:	08002495 	.word	0x08002495
 8001b60:	08002495 	.word	0x08002495
 8001b64:	08002495 	.word	0x08002495
 8001b68:	08001c6f 	.word	0x08001c6f
 8001b6c:	08001cd7 	.word	0x08001cd7
 8001b70:	08001d7f 	.word	0x08001d7f
 8001b74:	3b01      	subs	r3, #1
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	f200 848c 	bhi.w	8002494 <checkCommand+0xa4c>
 8001b7c:	a201      	add	r2, pc, #4	; (adr r2, 8001b84 <checkCommand+0x13c>)
 8001b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b82:	bf00      	nop
 8001b84:	08001ba3 	.word	0x08001ba3
 8001b88:	08001bb7 	.word	0x08001bb7
 8001b8c:	08001c13 	.word	0x08001c13
 8001b90:	0800248b 	.word	0x0800248b
 8001b94:	2b83      	cmp	r3, #131	; 0x83
 8001b96:	f300 847d 	bgt.w	8002494 <checkCommand+0xa4c>
 8001b9a:	2b71      	cmp	r3, #113	; 0x71
 8001b9c:	dabc      	bge.n	8001b18 <checkCommand+0xd0>
}
 8001b9e:	f000 bc79 	b.w	8002494 <checkCommand+0xa4c>
					tempTkkConfig.tkkModSelection = rxBuffer[2];
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	4b5f      	ldr	r3, [pc, #380]	; (8001d28 <checkCommand+0x2e0>)
 8001bac:	801a      	strh	r2, [r3, #0]
					sendAckUart();
 8001bae:	f7ff fef3 	bl	8001998 <sendAckUart>
				break;
 8001bb2:	f000 bc6f 	b.w	8002494 <checkCommand+0xa4c>
					tempTkkConfig.xMax = rxBuffer[2]<<8 | rxBuffer[3];
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3302      	adds	r3, #2
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	b21a      	sxth	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3303      	adds	r3, #3
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	4b56      	ldr	r3, [pc, #344]	; (8001d28 <checkCommand+0x2e0>)
 8001bd0:	809a      	strh	r2, [r3, #4]
					tempTkkConfig.xMin = rxBuffer[4]<<8 | rxBuffer[5];
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	b21a      	sxth	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3305      	adds	r3, #5
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	4313      	orrs	r3, r2
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	4b4f      	ldr	r3, [pc, #316]	; (8001d28 <checkCommand+0x2e0>)
 8001bec:	805a      	strh	r2, [r3, #2]
					tempTkkConfig.xMid = rxBuffer[6]<<8 | rxBuffer[7];
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3306      	adds	r3, #6
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3307      	adds	r3, #7
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	4313      	orrs	r3, r2
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	4b48      	ldr	r3, [pc, #288]	; (8001d28 <checkCommand+0x2e0>)
 8001c08:	80da      	strh	r2, [r3, #6]
					sendAckUart();
 8001c0a:	f7ff fec5 	bl	8001998 <sendAckUart>
				break;
 8001c0e:	f000 bc41 	b.w	8002494 <checkCommand+0xa4c>
					tempTkkConfig.yMax = rxBuffer[2]<<8 | rxBuffer[3];
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3302      	adds	r3, #2
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	b21a      	sxth	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3303      	adds	r3, #3
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	4313      	orrs	r3, r2
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	4b3f      	ldr	r3, [pc, #252]	; (8001d28 <checkCommand+0x2e0>)
 8001c2c:	815a      	strh	r2, [r3, #10]
					tempTkkConfig.yMin = rxBuffer[4]<<8 | rxBuffer[5];
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3304      	adds	r3, #4
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3305      	adds	r3, #5
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	4313      	orrs	r3, r2
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	4b38      	ldr	r3, [pc, #224]	; (8001d28 <checkCommand+0x2e0>)
 8001c48:	811a      	strh	r2, [r3, #8]
					tempTkkConfig.yMid = rxBuffer[6]<<8 | rxBuffer[7];
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3306      	adds	r3, #6
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	b21a      	sxth	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3307      	adds	r3, #7
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b21b      	sxth	r3, r3
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b31      	ldr	r3, [pc, #196]	; (8001d28 <checkCommand+0x2e0>)
 8001c64:	819a      	strh	r2, [r3, #12]
					sendAckUart();
 8001c66:	f7ff fe97 	bl	8001998 <sendAckUart>
				break;
 8001c6a:	f000 bc13 	b.w	8002494 <checkCommand+0xa4c>
					rsSendFormat[0] = COMMAND_HEADER;
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <checkCommand+0x2e4>)
 8001c70:	22a5      	movs	r2, #165	; 0xa5
 8001c72:	701a      	strb	r2, [r3, #0]
					rsSendFormat[1] = COMMAND_MODSEL_READ;
 8001c74:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <checkCommand+0x2e4>)
 8001c76:	2281      	movs	r2, #129	; 0x81
 8001c78:	705a      	strb	r2, [r3, #1]
					rsSendFormat[2] = (*(uint32_t*)CONFIG_DATA_INTERFACE_OFFSET);;
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <checkCommand+0x2e8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <checkCommand+0x2e4>)
 8001c82:	709a      	strb	r2, [r3, #2]
					rsSendFormat[3] = 0x00;
 8001c84:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <checkCommand+0x2e4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	70da      	strb	r2, [r3, #3]
					rsSendFormat[4] = 0x00;
 8001c8a:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <checkCommand+0x2e4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	711a      	strb	r2, [r3, #4]
					rsSendFormat[5] = 0x00;
 8001c90:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <checkCommand+0x2e4>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	715a      	strb	r2, [r3, #5]
					rsSendFormat[6] = 0x00;
 8001c96:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <checkCommand+0x2e4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	719a      	strb	r2, [r3, #6]
					rsSendFormat[7] = 0x00;
 8001c9c:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <checkCommand+0x2e4>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	71da      	strb	r2, [r3, #7]
					for(i = 1; i < 8; i++)
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca6:	e00b      	b.n	8001cc0 <checkCommand+0x278>
						rsSendFormat[8] += rsSendFormat[i];
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	4a20      	ldr	r2, [pc, #128]	; (8001d2c <checkCommand+0x2e4>)
 8001cac:	5cd2      	ldrb	r2, [r2, r3]
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <checkCommand+0x2e4>)
 8001cb0:	7a1b      	ldrb	r3, [r3, #8]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <checkCommand+0x2e4>)
 8001cb8:	721a      	strb	r2, [r3, #8]
					for(i = 1; i < 8; i++)
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	2b07      	cmp	r3, #7
 8001cc4:	d9f0      	bls.n	8001ca8 <checkCommand+0x260>
					HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001cc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cca:	2209      	movs	r2, #9
 8001ccc:	4917      	ldr	r1, [pc, #92]	; (8001d2c <checkCommand+0x2e4>)
 8001cce:	4819      	ldr	r0, [pc, #100]	; (8001d34 <checkCommand+0x2ec>)
 8001cd0:	f005 ff3a 	bl	8007b48 <HAL_UART_Transmit>
				break;
 8001cd4:	e3de      	b.n	8002494 <checkCommand+0xa4c>
					rsSendFormat[0] = COMMAND_HEADER;
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <checkCommand+0x2e4>)
 8001cd8:	22a5      	movs	r2, #165	; 0xa5
 8001cda:	701a      	strb	r2, [r3, #0]
					rsSendFormat[1] = COMMAND_XCALIB_READ;
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <checkCommand+0x2e4>)
 8001cde:	2282      	movs	r2, #130	; 0x82
 8001ce0:	705a      	strb	r2, [r3, #1]
					rsSendFormat[2] = (*(uint32_t*)(CONFIG_DATA_X_MAXPOINT_OFFSET + 1));
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <checkCommand+0x2f0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <checkCommand+0x2e4>)
 8001cea:	709a      	strb	r2, [r3, #2]
					rsSendFormat[3] = (*(uint32_t*)CONFIG_DATA_X_MAXPOINT_OFFSET);
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <checkCommand+0x2f4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <checkCommand+0x2e4>)
 8001cf4:	70da      	strb	r2, [r3, #3]
					rsSendFormat[4] = (*(uint32_t*)(CONFIG_DATA_X_MINPOINT_OFFSET + 1));
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <checkCommand+0x2f8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <checkCommand+0x2e4>)
 8001cfe:	711a      	strb	r2, [r3, #4]
					rsSendFormat[5] = (*(uint32_t*)CONFIG_DATA_X_MINPOINT_OFFSET);
 8001d00:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <checkCommand+0x2fc>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <checkCommand+0x2e4>)
 8001d08:	715a      	strb	r2, [r3, #5]
					rsSendFormat[6] = (*(uint32_t*)(CONFIG_DATA_X_MIDDLEPOINT_OFFSET + 1));
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <checkCommand+0x300>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <checkCommand+0x2e4>)
 8001d12:	719a      	strb	r2, [r3, #6]
					rsSendFormat[7] = (*(uint32_t*)CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <checkCommand+0x304>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <checkCommand+0x2e4>)
 8001d1c:	71da      	strb	r2, [r3, #7]
					for(i = 1; i < 8; i++)
 8001d1e:	2301      	movs	r3, #1
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
 8001d22:	e021      	b.n	8001d68 <checkCommand+0x320>
 8001d24:	200003f4 	.word	0x200003f4
 8001d28:	200003a4 	.word	0x200003a4
 8001d2c:	20000374 	.word	0x20000374
 8001d30:	0800e002 	.word	0x0800e002
 8001d34:	20000610 	.word	0x20000610
 8001d38:	0800e009 	.word	0x0800e009
 8001d3c:	0800e008 	.word	0x0800e008
 8001d40:	0800e007 	.word	0x0800e007
 8001d44:	0800e006 	.word	0x0800e006
 8001d48:	0800e005 	.word	0x0800e005
 8001d4c:	0800e004 	.word	0x0800e004
						rsSendFormat[8] += rsSendFormat[i];
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	4a8f      	ldr	r2, [pc, #572]	; (8001f90 <checkCommand+0x548>)
 8001d54:	5cd2      	ldrb	r2, [r2, r3]
 8001d56:	4b8e      	ldr	r3, [pc, #568]	; (8001f90 <checkCommand+0x548>)
 8001d58:	7a1b      	ldrb	r3, [r3, #8]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4b8c      	ldr	r3, [pc, #560]	; (8001f90 <checkCommand+0x548>)
 8001d60:	721a      	strb	r2, [r3, #8]
					for(i = 1; i < 8; i++)
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	3301      	adds	r3, #1
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	2b07      	cmp	r3, #7
 8001d6c:	d9f0      	bls.n	8001d50 <checkCommand+0x308>
					HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001d6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d72:	2209      	movs	r2, #9
 8001d74:	4986      	ldr	r1, [pc, #536]	; (8001f90 <checkCommand+0x548>)
 8001d76:	4887      	ldr	r0, [pc, #540]	; (8001f94 <checkCommand+0x54c>)
 8001d78:	f005 fee6 	bl	8007b48 <HAL_UART_Transmit>
				break;
 8001d7c:	e38a      	b.n	8002494 <checkCommand+0xa4c>
					rsSendFormat[0] = COMMAND_HEADER;
 8001d7e:	4b84      	ldr	r3, [pc, #528]	; (8001f90 <checkCommand+0x548>)
 8001d80:	22a5      	movs	r2, #165	; 0xa5
 8001d82:	701a      	strb	r2, [r3, #0]
					rsSendFormat[1] = COMMAND_YCALIB_READ;
 8001d84:	4b82      	ldr	r3, [pc, #520]	; (8001f90 <checkCommand+0x548>)
 8001d86:	2283      	movs	r2, #131	; 0x83
 8001d88:	705a      	strb	r2, [r3, #1]
					rsSendFormat[2] = (*(uint32_t*)(CONFIG_DATA_Y_MAXPOINT_OFFSET + 1));
 8001d8a:	4b83      	ldr	r3, [pc, #524]	; (8001f98 <checkCommand+0x550>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b7f      	ldr	r3, [pc, #508]	; (8001f90 <checkCommand+0x548>)
 8001d92:	709a      	strb	r2, [r3, #2]
					rsSendFormat[3] = (*(uint32_t*)CONFIG_DATA_Y_MAXPOINT_OFFSET);
 8001d94:	4b81      	ldr	r3, [pc, #516]	; (8001f9c <checkCommand+0x554>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4b7d      	ldr	r3, [pc, #500]	; (8001f90 <checkCommand+0x548>)
 8001d9c:	70da      	strb	r2, [r3, #3]
					rsSendFormat[4] = (*(uint32_t*)(CONFIG_DATA_Y_MINPOINT_OFFSET + 1));
 8001d9e:	4b80      	ldr	r3, [pc, #512]	; (8001fa0 <checkCommand+0x558>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	4b7a      	ldr	r3, [pc, #488]	; (8001f90 <checkCommand+0x548>)
 8001da6:	711a      	strb	r2, [r3, #4]
					rsSendFormat[5] = (*(uint32_t*)CONFIG_DATA_Y_MINPOINT_OFFSET);
 8001da8:	4b7e      	ldr	r3, [pc, #504]	; (8001fa4 <checkCommand+0x55c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4b78      	ldr	r3, [pc, #480]	; (8001f90 <checkCommand+0x548>)
 8001db0:	715a      	strb	r2, [r3, #5]
					rsSendFormat[6] = (*(uint32_t*)(CONFIG_DATA_Y_MIDDLEPOINT_OFFSET + 1));
 8001db2:	4b7d      	ldr	r3, [pc, #500]	; (8001fa8 <checkCommand+0x560>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	4b75      	ldr	r3, [pc, #468]	; (8001f90 <checkCommand+0x548>)
 8001dba:	719a      	strb	r2, [r3, #6]
					rsSendFormat[7] = (*(uint32_t*)CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 8001dbc:	4b7b      	ldr	r3, [pc, #492]	; (8001fac <checkCommand+0x564>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b73      	ldr	r3, [pc, #460]	; (8001f90 <checkCommand+0x548>)
 8001dc4:	71da      	strb	r2, [r3, #7]
					for(i = 1; i < 8; i++)
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dca:	e00b      	b.n	8001de4 <checkCommand+0x39c>
						rsSendFormat[8] += rsSendFormat[i];
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	4a70      	ldr	r2, [pc, #448]	; (8001f90 <checkCommand+0x548>)
 8001dd0:	5cd2      	ldrb	r2, [r2, r3]
 8001dd2:	4b6f      	ldr	r3, [pc, #444]	; (8001f90 <checkCommand+0x548>)
 8001dd4:	7a1b      	ldrb	r3, [r3, #8]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4b6d      	ldr	r3, [pc, #436]	; (8001f90 <checkCommand+0x548>)
 8001ddc:	721a      	strb	r2, [r3, #8]
					for(i = 1; i < 8; i++)
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	3301      	adds	r3, #1
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	2b07      	cmp	r3, #7
 8001de8:	d9f0      	bls.n	8001dcc <checkCommand+0x384>
					HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001dea:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dee:	2209      	movs	r2, #9
 8001df0:	4967      	ldr	r1, [pc, #412]	; (8001f90 <checkCommand+0x548>)
 8001df2:	4868      	ldr	r0, [pc, #416]	; (8001f94 <checkCommand+0x54c>)
 8001df4:	f005 fea8 	bl	8007b48 <HAL_UART_Transmit>
				break;
 8001df8:	e34c      	b.n	8002494 <checkCommand+0xa4c>
					rsSendFormat[0] = COMMAND_HEADER;
 8001dfa:	4b65      	ldr	r3, [pc, #404]	; (8001f90 <checkCommand+0x548>)
 8001dfc:	22a5      	movs	r2, #165	; 0xa5
 8001dfe:	701a      	strb	r2, [r3, #0]
					rsSendFormat[1] = COMMAND_DEFAULT_MODSEL_READ;
 8001e00:	4b63      	ldr	r3, [pc, #396]	; (8001f90 <checkCommand+0x548>)
 8001e02:	2271      	movs	r2, #113	; 0x71
 8001e04:	705a      	strb	r2, [r3, #1]
					rsSendFormat[2] = (*(uint32_t*)DEFAULT_CONFIG_DATA_INTERFACE_OFFSET);;
 8001e06:	4b6a      	ldr	r3, [pc, #424]	; (8001fb0 <checkCommand+0x568>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b60      	ldr	r3, [pc, #384]	; (8001f90 <checkCommand+0x548>)
 8001e0e:	709a      	strb	r2, [r3, #2]
					rsSendFormat[3] = 0x00;
 8001e10:	4b5f      	ldr	r3, [pc, #380]	; (8001f90 <checkCommand+0x548>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	70da      	strb	r2, [r3, #3]
					rsSendFormat[4] = 0x00;
 8001e16:	4b5e      	ldr	r3, [pc, #376]	; (8001f90 <checkCommand+0x548>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	711a      	strb	r2, [r3, #4]
					rsSendFormat[5] = 0x00;
 8001e1c:	4b5c      	ldr	r3, [pc, #368]	; (8001f90 <checkCommand+0x548>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	715a      	strb	r2, [r3, #5]
					rsSendFormat[6] = 0x00;
 8001e22:	4b5b      	ldr	r3, [pc, #364]	; (8001f90 <checkCommand+0x548>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	719a      	strb	r2, [r3, #6]
					rsSendFormat[7] = 0x00;
 8001e28:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <checkCommand+0x548>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	71da      	strb	r2, [r3, #7]
					for(i = 1; i < 8; i++)
 8001e2e:	2301      	movs	r3, #1
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
 8001e32:	e00b      	b.n	8001e4c <checkCommand+0x404>
						rsSendFormat[8] += rsSendFormat[i];
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	4a56      	ldr	r2, [pc, #344]	; (8001f90 <checkCommand+0x548>)
 8001e38:	5cd2      	ldrb	r2, [r2, r3]
 8001e3a:	4b55      	ldr	r3, [pc, #340]	; (8001f90 <checkCommand+0x548>)
 8001e3c:	7a1b      	ldrb	r3, [r3, #8]
 8001e3e:	4413      	add	r3, r2
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4b53      	ldr	r3, [pc, #332]	; (8001f90 <checkCommand+0x548>)
 8001e44:	721a      	strb	r2, [r3, #8]
					for(i = 1; i < 8; i++)
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	3301      	adds	r3, #1
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	2b07      	cmp	r3, #7
 8001e50:	d9f0      	bls.n	8001e34 <checkCommand+0x3ec>
					HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001e52:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e56:	2209      	movs	r2, #9
 8001e58:	494d      	ldr	r1, [pc, #308]	; (8001f90 <checkCommand+0x548>)
 8001e5a:	484e      	ldr	r0, [pc, #312]	; (8001f94 <checkCommand+0x54c>)
 8001e5c:	f005 fe74 	bl	8007b48 <HAL_UART_Transmit>
				break;
 8001e60:	e318      	b.n	8002494 <checkCommand+0xa4c>
					rsSendFormat[0] = COMMAND_HEADER;
 8001e62:	4b4b      	ldr	r3, [pc, #300]	; (8001f90 <checkCommand+0x548>)
 8001e64:	22a5      	movs	r2, #165	; 0xa5
 8001e66:	701a      	strb	r2, [r3, #0]
					rsSendFormat[1] = COMMAND_DEFAULT_XCALIB_READ;
 8001e68:	4b49      	ldr	r3, [pc, #292]	; (8001f90 <checkCommand+0x548>)
 8001e6a:	2272      	movs	r2, #114	; 0x72
 8001e6c:	705a      	strb	r2, [r3, #1]
					rsSendFormat[2] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET + 1)); //MSB
 8001e6e:	4b51      	ldr	r3, [pc, #324]	; (8001fb4 <checkCommand+0x56c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b46      	ldr	r3, [pc, #280]	; (8001f90 <checkCommand+0x548>)
 8001e76:	709a      	strb	r2, [r3, #2]
					rsSendFormat[3] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET);		 //LSB
 8001e78:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <checkCommand+0x570>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <checkCommand+0x548>)
 8001e80:	70da      	strb	r2, [r3, #3]
					rsSendFormat[4] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET + 1));
 8001e82:	4b4e      	ldr	r3, [pc, #312]	; (8001fbc <checkCommand+0x574>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <checkCommand+0x548>)
 8001e8a:	711a      	strb	r2, [r3, #4]
					rsSendFormat[5] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET);
 8001e8c:	4b4c      	ldr	r3, [pc, #304]	; (8001fc0 <checkCommand+0x578>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <checkCommand+0x548>)
 8001e94:	715a      	strb	r2, [r3, #5]
					rsSendFormat[6] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET + 1));
 8001e96:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <checkCommand+0x57c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	4b3c      	ldr	r3, [pc, #240]	; (8001f90 <checkCommand+0x548>)
 8001e9e:	719a      	strb	r2, [r3, #6]
					rsSendFormat[7] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 8001ea0:	4b49      	ldr	r3, [pc, #292]	; (8001fc8 <checkCommand+0x580>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <checkCommand+0x548>)
 8001ea8:	71da      	strb	r2, [r3, #7]
					for(i = 1; i < 8; i++)
 8001eaa:	2301      	movs	r3, #1
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
 8001eae:	e00b      	b.n	8001ec8 <checkCommand+0x480>
						rsSendFormat[8] += rsSendFormat[i];
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	4a37      	ldr	r2, [pc, #220]	; (8001f90 <checkCommand+0x548>)
 8001eb4:	5cd2      	ldrb	r2, [r2, r3]
 8001eb6:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <checkCommand+0x548>)
 8001eb8:	7a1b      	ldrb	r3, [r3, #8]
 8001eba:	4413      	add	r3, r2
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <checkCommand+0x548>)
 8001ec0:	721a      	strb	r2, [r3, #8]
					for(i = 1; i < 8; i++)
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	2b07      	cmp	r3, #7
 8001ecc:	d9f0      	bls.n	8001eb0 <checkCommand+0x468>
					HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001ece:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ed2:	2209      	movs	r2, #9
 8001ed4:	492e      	ldr	r1, [pc, #184]	; (8001f90 <checkCommand+0x548>)
 8001ed6:	482f      	ldr	r0, [pc, #188]	; (8001f94 <checkCommand+0x54c>)
 8001ed8:	f005 fe36 	bl	8007b48 <HAL_UART_Transmit>
				break;
 8001edc:	e2da      	b.n	8002494 <checkCommand+0xa4c>
					rsSendFormat[0] = COMMAND_HEADER;
 8001ede:	4b2c      	ldr	r3, [pc, #176]	; (8001f90 <checkCommand+0x548>)
 8001ee0:	22a5      	movs	r2, #165	; 0xa5
 8001ee2:	701a      	strb	r2, [r3, #0]
					rsSendFormat[1] = COMMAND_DEFAULT_YCALIB_READ;
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <checkCommand+0x548>)
 8001ee6:	2273      	movs	r2, #115	; 0x73
 8001ee8:	705a      	strb	r2, [r3, #1]
					rsSendFormat[2] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET + 1));
 8001eea:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <checkCommand+0x584>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <checkCommand+0x548>)
 8001ef2:	709a      	strb	r2, [r3, #2]
					rsSendFormat[3] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET);
 8001ef4:	4b36      	ldr	r3, [pc, #216]	; (8001fd0 <checkCommand+0x588>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <checkCommand+0x548>)
 8001efc:	70da      	strb	r2, [r3, #3]
					rsSendFormat[4] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET + 1));
 8001efe:	4b35      	ldr	r3, [pc, #212]	; (8001fd4 <checkCommand+0x58c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <checkCommand+0x548>)
 8001f06:	711a      	strb	r2, [r3, #4]
					rsSendFormat[5] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET);
 8001f08:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <checkCommand+0x590>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <checkCommand+0x548>)
 8001f10:	715a      	strb	r2, [r3, #5]
					rsSendFormat[6] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET + 1));
 8001f12:	4b32      	ldr	r3, [pc, #200]	; (8001fdc <checkCommand+0x594>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <checkCommand+0x548>)
 8001f1a:	719a      	strb	r2, [r3, #6]
					rsSendFormat[7] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 8001f1c:	4b30      	ldr	r3, [pc, #192]	; (8001fe0 <checkCommand+0x598>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <checkCommand+0x548>)
 8001f24:	71da      	strb	r2, [r3, #7]
					for(i = 1; i < 8; i++)
 8001f26:	2301      	movs	r3, #1
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2a:	e00b      	b.n	8001f44 <checkCommand+0x4fc>
						rsSendFormat[8] += rsSendFormat[i];
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <checkCommand+0x548>)
 8001f30:	5cd2      	ldrb	r2, [r2, r3]
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <checkCommand+0x548>)
 8001f34:	7a1b      	ldrb	r3, [r3, #8]
 8001f36:	4413      	add	r3, r2
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <checkCommand+0x548>)
 8001f3c:	721a      	strb	r2, [r3, #8]
					for(i = 1; i < 8; i++)
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	3301      	adds	r3, #1
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	2b07      	cmp	r3, #7
 8001f48:	d9f0      	bls.n	8001f2c <checkCommand+0x4e4>
					HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001f4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f4e:	2209      	movs	r2, #9
 8001f50:	490f      	ldr	r1, [pc, #60]	; (8001f90 <checkCommand+0x548>)
 8001f52:	4810      	ldr	r0, [pc, #64]	; (8001f94 <checkCommand+0x54c>)
 8001f54:	f005 fdf8 	bl	8007b48 <HAL_UART_Transmit>
				break;
 8001f58:	e29c      	b.n	8002494 <checkCommand+0xa4c>
					bootloaderCommand();
 8001f5a:	f7fe fd1b 	bl	8000994 <bootloaderCommand>
				break;
 8001f5e:	e299      	b.n	8002494 <checkCommand+0xa4c>
					sendAckUart();
 8001f60:	f7ff fd1a 	bl	8001998 <sendAckUart>
					HAL_NVIC_SystemReset();
 8001f64:	f002 facf 	bl	8004506 <HAL_NVIC_SystemReset>
				break;
 8001f68:	e294      	b.n	8002494 <checkCommand+0xa4c>
					remoteMode = 0;
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <checkCommand+0x59c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
					sendAckUart();
 8001f70:	f7ff fd12 	bl	8001998 <sendAckUart>
				break;
 8001f74:	e28e      	b.n	8002494 <checkCommand+0xa4c>
					refreshFlashUserConf(&tempTkkConfig);
 8001f76:	481c      	ldr	r0, [pc, #112]	; (8001fe8 <checkCommand+0x5a0>)
 8001f78:	f7ff fbb8 	bl	80016ec <refreshFlashUserConf>
					calculateJostickBorders(&userTkkConfig, &tkkJoystickBorder);
 8001f7c:	491b      	ldr	r1, [pc, #108]	; (8001fec <checkCommand+0x5a4>)
 8001f7e:	481c      	ldr	r0, [pc, #112]	; (8001ff0 <checkCommand+0x5a8>)
 8001f80:	f7fe fe4a 	bl	8000c18 <calculateJostickBorders>
					remoteMode = 1;
 8001f84:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <checkCommand+0x59c>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
					sendAckUart();
 8001f8a:	f7ff fd05 	bl	8001998 <sendAckUart>
				break;
 8001f8e:	e281      	b.n	8002494 <checkCommand+0xa4c>
 8001f90:	20000374 	.word	0x20000374
 8001f94:	20000610 	.word	0x20000610
 8001f98:	0800e00f 	.word	0x0800e00f
 8001f9c:	0800e00e 	.word	0x0800e00e
 8001fa0:	0800e00d 	.word	0x0800e00d
 8001fa4:	0800e00c 	.word	0x0800e00c
 8001fa8:	0800e00b 	.word	0x0800e00b
 8001fac:	0800e00a 	.word	0x0800e00a
 8001fb0:	0800f000 	.word	0x0800f000
 8001fb4:	0800f007 	.word	0x0800f007
 8001fb8:	0800f006 	.word	0x0800f006
 8001fbc:	0800f005 	.word	0x0800f005
 8001fc0:	0800f004 	.word	0x0800f004
 8001fc4:	0800f003 	.word	0x0800f003
 8001fc8:	0800f002 	.word	0x0800f002
 8001fcc:	0800f00d 	.word	0x0800f00d
 8001fd0:	0800f00c 	.word	0x0800f00c
 8001fd4:	0800f00b 	.word	0x0800f00b
 8001fd8:	0800f00a 	.word	0x0800f00a
 8001fdc:	0800f009 	.word	0x0800f009
 8001fe0:	0800f008 	.word	0x0800f008
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	200003a4 	.word	0x200003a4
 8001fec:	20000494 	.word	0x20000494
 8001ff0:	200003f4 	.word	0x200003f4
	else if(userTkkConfig.tkkModSelection == TKK_MOD_CAN)
 8001ff4:	4bb6      	ldr	r3, [pc, #728]	; (80022d0 <checkCommand+0x888>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	f040 824b 	bne.w	8002494 <checkCommand+0xa4c>
		CAN_TxHeaderTypeDef txHeader = {0};
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
 800200c:	611a      	str	r2, [r3, #16]
 800200e:	615a      	str	r2, [r3, #20]
		txHeader.StdId = 0x321;
 8002010:	f240 3321 	movw	r3, #801	; 0x321
 8002014:	60fb      	str	r3, [r7, #12]
		txHeader.IDE   = CAN_ID_STD;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
		txHeader.RTR   = CAN_RTR_DATA;
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
		txHeader.DLC   = 8;
 800201e:	2308      	movs	r3, #8
 8002020:	61fb      	str	r3, [r7, #28]
		txHeader.TransmitGlobalTime = DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	f887 3020 	strb.w	r3, [r7, #32]
		switch (rxBuffer[1])
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3301      	adds	r3, #1
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2bdd      	cmp	r3, #221	; 0xdd
 8002030:	f300 8230 	bgt.w	8002494 <checkCommand+0xa4c>
 8002034:	2bbb      	cmp	r3, #187	; 0xbb
 8002036:	da05      	bge.n	8002044 <checkCommand+0x5fc>
 8002038:	2b04      	cmp	r3, #4
 800203a:	f300 808f 	bgt.w	800215c <checkCommand+0x714>
 800203e:	2b00      	cmp	r3, #0
 8002040:	dc7c      	bgt.n	800213c <checkCommand+0x6f4>
}
 8002042:	e227      	b.n	8002494 <checkCommand+0xa4c>
		switch (rxBuffer[1])
 8002044:	3bbb      	subs	r3, #187	; 0xbb
 8002046:	2b22      	cmp	r3, #34	; 0x22
 8002048:	f200 8224 	bhi.w	8002494 <checkCommand+0xa4c>
 800204c:	a201      	add	r2, pc, #4	; (adr r2, 8002054 <checkCommand+0x60c>)
 800204e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002052:	bf00      	nop
 8002054:	0800246d 	.word	0x0800246d
 8002058:	08002495 	.word	0x08002495
 800205c:	08002495 	.word	0x08002495
 8002060:	08002495 	.word	0x08002495
 8002064:	08002495 	.word	0x08002495
 8002068:	08002495 	.word	0x08002495
 800206c:	08002495 	.word	0x08002495
 8002070:	08002495 	.word	0x08002495
 8002074:	08002495 	.word	0x08002495
 8002078:	08002495 	.word	0x08002495
 800207c:	08002451 	.word	0x08002451
 8002080:	08002495 	.word	0x08002495
 8002084:	08002495 	.word	0x08002495
 8002088:	08002495 	.word	0x08002495
 800208c:	08002495 	.word	0x08002495
 8002090:	08002495 	.word	0x08002495
 8002094:	08002495 	.word	0x08002495
 8002098:	0800248f 	.word	0x0800248f
 800209c:	08002495 	.word	0x08002495
 80020a0:	08002495 	.word	0x08002495
 80020a4:	08002495 	.word	0x08002495
 80020a8:	08002495 	.word	0x08002495
 80020ac:	08002495 	.word	0x08002495
 80020b0:	08002495 	.word	0x08002495
 80020b4:	08002495 	.word	0x08002495
 80020b8:	08002495 	.word	0x08002495
 80020bc:	08002457 	.word	0x08002457
 80020c0:	08002495 	.word	0x08002495
 80020c4:	08002495 	.word	0x08002495
 80020c8:	08002495 	.word	0x08002495
 80020cc:	08002495 	.word	0x08002495
 80020d0:	08002495 	.word	0x08002495
 80020d4:	08002495 	.word	0x08002495
 80020d8:	08002495 	.word	0x08002495
 80020dc:	08002461 	.word	0x08002461
 80020e0:	3b71      	subs	r3, #113	; 0x71
 80020e2:	2b12      	cmp	r3, #18
 80020e4:	f200 81d6 	bhi.w	8002494 <checkCommand+0xa4c>
 80020e8:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <checkCommand+0x6a8>)
 80020ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ee:	bf00      	nop
 80020f0:	08002357 	.word	0x08002357
 80020f4:	0800239d 	.word	0x0800239d
 80020f8:	080023f7 	.word	0x080023f7
 80020fc:	08002495 	.word	0x08002495
 8002100:	08002495 	.word	0x08002495
 8002104:	08002495 	.word	0x08002495
 8002108:	08002495 	.word	0x08002495
 800210c:	08002495 	.word	0x08002495
 8002110:	08002495 	.word	0x08002495
 8002114:	08002495 	.word	0x08002495
 8002118:	08002495 	.word	0x08002495
 800211c:	08002495 	.word	0x08002495
 8002120:	08002495 	.word	0x08002495
 8002124:	08002495 	.word	0x08002495
 8002128:	08002495 	.word	0x08002495
 800212c:	08002495 	.word	0x08002495
 8002130:	0800222f 	.word	0x0800222f
 8002134:	08002275 	.word	0x08002275
 8002138:	080022fd 	.word	0x080022fd
 800213c:	3b01      	subs	r3, #1
 800213e:	2b03      	cmp	r3, #3
 8002140:	f200 81a8 	bhi.w	8002494 <checkCommand+0xa4c>
 8002144:	a201      	add	r2, pc, #4	; (adr r2, 800214c <checkCommand+0x704>)
 8002146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214a:	bf00      	nop
 800214c:	08002169 	.word	0x08002169
 8002150:	0800217b 	.word	0x0800217b
 8002154:	080021d5 	.word	0x080021d5
 8002158:	08002493 	.word	0x08002493
 800215c:	2b83      	cmp	r3, #131	; 0x83
 800215e:	f300 8199 	bgt.w	8002494 <checkCommand+0xa4c>
 8002162:	2b71      	cmp	r3, #113	; 0x71
 8002164:	dabc      	bge.n	80020e0 <checkCommand+0x698>
}
 8002166:	e195      	b.n	8002494 <checkCommand+0xa4c>
					tempTkkConfig.tkkModSelection = rxBuffer[1];
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3301      	adds	r3, #1
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	b29a      	uxth	r2, r3
 8002170:	4b58      	ldr	r3, [pc, #352]	; (80022d4 <checkCommand+0x88c>)
 8002172:	801a      	strh	r2, [r3, #0]
					sendAckCan();
 8002174:	f7ff fc32 	bl	80019dc <sendAckCan>
				break;
 8002178:	e18c      	b.n	8002494 <checkCommand+0xa4c>
					tempTkkConfig.xMax = rxBuffer[1]<<8 | rxBuffer[2];
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3301      	adds	r3, #1
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	b21a      	sxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3302      	adds	r3, #2
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	b21b      	sxth	r3, r3
 800218c:	4313      	orrs	r3, r2
 800218e:	b21b      	sxth	r3, r3
 8002190:	b29a      	uxth	r2, r3
 8002192:	4b50      	ldr	r3, [pc, #320]	; (80022d4 <checkCommand+0x88c>)
 8002194:	809a      	strh	r2, [r3, #4]
					tempTkkConfig.xMin = rxBuffer[3]<<8 | rxBuffer[4];
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3303      	adds	r3, #3
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3304      	adds	r3, #4
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b21b      	sxth	r3, r3
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <checkCommand+0x88c>)
 80021b0:	805a      	strh	r2, [r3, #2]
					tempTkkConfig.xMid = rxBuffer[5]<<8 | rxBuffer[6];
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3305      	adds	r3, #5
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	b21a      	sxth	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3306      	adds	r3, #6
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b21b      	sxth	r3, r3
 80021c4:	4313      	orrs	r3, r2
 80021c6:	b21b      	sxth	r3, r3
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	4b42      	ldr	r3, [pc, #264]	; (80022d4 <checkCommand+0x88c>)
 80021cc:	80da      	strh	r2, [r3, #6]
					sendAckCan();
 80021ce:	f7ff fc05 	bl	80019dc <sendAckCan>
				break;
 80021d2:	e15f      	b.n	8002494 <checkCommand+0xa4c>
					tempTkkConfig.yMax = rxBuffer[1]<<8 | rxBuffer[2];
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3301      	adds	r3, #1
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	b21a      	sxth	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3302      	adds	r3, #2
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b21b      	sxth	r3, r3
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <checkCommand+0x88c>)
 80021ee:	815a      	strh	r2, [r3, #10]
					tempTkkConfig.yMin = rxBuffer[3]<<8 | rxBuffer[4];
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3303      	adds	r3, #3
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3304      	adds	r3, #4
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b21b      	sxth	r3, r3
 8002202:	4313      	orrs	r3, r2
 8002204:	b21b      	sxth	r3, r3
 8002206:	b29a      	uxth	r2, r3
 8002208:	4b32      	ldr	r3, [pc, #200]	; (80022d4 <checkCommand+0x88c>)
 800220a:	811a      	strh	r2, [r3, #8]
					tempTkkConfig.yMid = rxBuffer[5]<<8 | rxBuffer[6];
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3305      	adds	r3, #5
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	b21a      	sxth	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3306      	adds	r3, #6
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b21b      	sxth	r3, r3
 800221e:	4313      	orrs	r3, r2
 8002220:	b21b      	sxth	r3, r3
 8002222:	b29a      	uxth	r2, r3
 8002224:	4b2b      	ldr	r3, [pc, #172]	; (80022d4 <checkCommand+0x88c>)
 8002226:	819a      	strh	r2, [r3, #12]
					sendAckCan();
 8002228:	f7ff fbd8 	bl	80019dc <sendAckCan>
				break;
 800222c:	e132      	b.n	8002494 <checkCommand+0xa4c>
					canSendFormat[0] = COMMAND_HEADER;
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <checkCommand+0x890>)
 8002230:	22a5      	movs	r2, #165	; 0xa5
 8002232:	701a      	strb	r2, [r3, #0]
					canSendFormat[1] = COMMAND_MODSEL_READ;
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <checkCommand+0x890>)
 8002236:	2281      	movs	r2, #129	; 0x81
 8002238:	705a      	strb	r2, [r3, #1]
					canSendFormat[2] = (*(uint32_t*)CONFIG_DATA_INTERFACE_OFFSET);;
 800223a:	4b28      	ldr	r3, [pc, #160]	; (80022dc <checkCommand+0x894>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <checkCommand+0x890>)
 8002242:	709a      	strb	r2, [r3, #2]
					canSendFormat[3] = 0x00;
 8002244:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <checkCommand+0x890>)
 8002246:	2200      	movs	r2, #0
 8002248:	70da      	strb	r2, [r3, #3]
					canSendFormat[4] = 0x00;
 800224a:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <checkCommand+0x890>)
 800224c:	2200      	movs	r2, #0
 800224e:	711a      	strb	r2, [r3, #4]
					canSendFormat[5] = 0x00;
 8002250:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <checkCommand+0x890>)
 8002252:	2200      	movs	r2, #0
 8002254:	715a      	strb	r2, [r3, #5]
					canSendFormat[6] = 0x00;
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <checkCommand+0x890>)
 8002258:	2200      	movs	r2, #0
 800225a:	719a      	strb	r2, [r3, #6]
					canSendFormat[7] = 0x00;
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <checkCommand+0x890>)
 800225e:	2200      	movs	r2, #0
 8002260:	71da      	strb	r2, [r3, #7]
					if (HAL_CAN_AddTxMessage(&hcan, &txHeader, canSendFormat, &txMailbox) != HAL_OK)
 8002262:	f107 0308 	add.w	r3, r7, #8
 8002266:	f107 010c 	add.w	r1, r7, #12
 800226a:	4a1b      	ldr	r2, [pc, #108]	; (80022d8 <checkCommand+0x890>)
 800226c:	481c      	ldr	r0, [pc, #112]	; (80022e0 <checkCommand+0x898>)
 800226e:	f001 fbe7 	bl	8003a40 <HAL_CAN_AddTxMessage>
				break;
 8002272:	e10f      	b.n	8002494 <checkCommand+0xa4c>
					canSendFormat[0] = COMMAND_HEADER;
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <checkCommand+0x890>)
 8002276:	22a5      	movs	r2, #165	; 0xa5
 8002278:	701a      	strb	r2, [r3, #0]
					canSendFormat[1] = COMMAND_XCALIB_READ;
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <checkCommand+0x890>)
 800227c:	2282      	movs	r2, #130	; 0x82
 800227e:	705a      	strb	r2, [r3, #1]
					canSendFormat[2] = (*(uint32_t*)(CONFIG_DATA_X_MAXPOINT_OFFSET + 1));
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <checkCommand+0x89c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <checkCommand+0x890>)
 8002288:	709a      	strb	r2, [r3, #2]
					canSendFormat[3] = (*(uint32_t*)CONFIG_DATA_X_MAXPOINT_OFFSET);
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <checkCommand+0x8a0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <checkCommand+0x890>)
 8002292:	70da      	strb	r2, [r3, #3]
					canSendFormat[4] = (*(uint32_t*)(CONFIG_DATA_X_MINPOINT_OFFSET + 1));
 8002294:	4b15      	ldr	r3, [pc, #84]	; (80022ec <checkCommand+0x8a4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <checkCommand+0x890>)
 800229c:	711a      	strb	r2, [r3, #4]
					canSendFormat[5] = (*(uint32_t*)CONFIG_DATA_X_MINPOINT_OFFSET);
 800229e:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <checkCommand+0x8a8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <checkCommand+0x890>)
 80022a6:	715a      	strb	r2, [r3, #5]
					canSendFormat[6] = (*(uint32_t*)(CONFIG_DATA_X_MIDDLEPOINT_OFFSET + 1));
 80022a8:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <checkCommand+0x8ac>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <checkCommand+0x890>)
 80022b0:	719a      	strb	r2, [r3, #6]
					canSendFormat[7] = (*(uint32_t*)CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <checkCommand+0x8b0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <checkCommand+0x890>)
 80022ba:	71da      	strb	r2, [r3, #7]
					if (HAL_CAN_AddTxMessage(&hcan, &txHeader, canSendFormat, &txMailbox) != HAL_OK)
 80022bc:	f107 0308 	add.w	r3, r7, #8
 80022c0:	f107 010c 	add.w	r1, r7, #12
 80022c4:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <checkCommand+0x890>)
 80022c6:	4806      	ldr	r0, [pc, #24]	; (80022e0 <checkCommand+0x898>)
 80022c8:	f001 fbba 	bl	8003a40 <HAL_CAN_AddTxMessage>
				break;
 80022cc:	e0e2      	b.n	8002494 <checkCommand+0xa4c>
 80022ce:	bf00      	nop
 80022d0:	200003f4 	.word	0x200003f4
 80022d4:	200003a4 	.word	0x200003a4
 80022d8:	20000380 	.word	0x20000380
 80022dc:	0800e002 	.word	0x0800e002
 80022e0:	200000a0 	.word	0x200000a0
 80022e4:	0800e009 	.word	0x0800e009
 80022e8:	0800e008 	.word	0x0800e008
 80022ec:	0800e007 	.word	0x0800e007
 80022f0:	0800e006 	.word	0x0800e006
 80022f4:	0800e005 	.word	0x0800e005
 80022f8:	0800e004 	.word	0x0800e004
					canSendFormat[0] = COMMAND_HEADER;
 80022fc:	4b67      	ldr	r3, [pc, #412]	; (800249c <checkCommand+0xa54>)
 80022fe:	22a5      	movs	r2, #165	; 0xa5
 8002300:	701a      	strb	r2, [r3, #0]
					canSendFormat[1] = COMMAND_YCALIB_READ;
 8002302:	4b66      	ldr	r3, [pc, #408]	; (800249c <checkCommand+0xa54>)
 8002304:	2283      	movs	r2, #131	; 0x83
 8002306:	705a      	strb	r2, [r3, #1]
					canSendFormat[2] = (*(uint32_t*)(CONFIG_DATA_Y_MAXPOINT_OFFSET + 1));
 8002308:	4b65      	ldr	r3, [pc, #404]	; (80024a0 <checkCommand+0xa58>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4b63      	ldr	r3, [pc, #396]	; (800249c <checkCommand+0xa54>)
 8002310:	709a      	strb	r2, [r3, #2]
					canSendFormat[3] = (*(uint32_t*)CONFIG_DATA_Y_MAXPOINT_OFFSET);
 8002312:	4b64      	ldr	r3, [pc, #400]	; (80024a4 <checkCommand+0xa5c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	4b60      	ldr	r3, [pc, #384]	; (800249c <checkCommand+0xa54>)
 800231a:	70da      	strb	r2, [r3, #3]
					canSendFormat[4] = (*(uint32_t*)(CONFIG_DATA_Y_MINPOINT_OFFSET + 1));
 800231c:	4b62      	ldr	r3, [pc, #392]	; (80024a8 <checkCommand+0xa60>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4b5e      	ldr	r3, [pc, #376]	; (800249c <checkCommand+0xa54>)
 8002324:	711a      	strb	r2, [r3, #4]
					canSendFormat[5] = (*(uint32_t*)CONFIG_DATA_Y_MINPOINT_OFFSET);
 8002326:	4b61      	ldr	r3, [pc, #388]	; (80024ac <checkCommand+0xa64>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4b5b      	ldr	r3, [pc, #364]	; (800249c <checkCommand+0xa54>)
 800232e:	715a      	strb	r2, [r3, #5]
					canSendFormat[6] = (*(uint32_t*)(CONFIG_DATA_Y_MIDDLEPOINT_OFFSET + 1));
 8002330:	4b5f      	ldr	r3, [pc, #380]	; (80024b0 <checkCommand+0xa68>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4b59      	ldr	r3, [pc, #356]	; (800249c <checkCommand+0xa54>)
 8002338:	719a      	strb	r2, [r3, #6]
					canSendFormat[7] = (*(uint32_t*)CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 800233a:	4b5e      	ldr	r3, [pc, #376]	; (80024b4 <checkCommand+0xa6c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b56      	ldr	r3, [pc, #344]	; (800249c <checkCommand+0xa54>)
 8002342:	71da      	strb	r2, [r3, #7]
					if (HAL_CAN_AddTxMessage(&hcan, &txHeader, canSendFormat, &txMailbox) != HAL_OK)
 8002344:	f107 0308 	add.w	r3, r7, #8
 8002348:	f107 010c 	add.w	r1, r7, #12
 800234c:	4a53      	ldr	r2, [pc, #332]	; (800249c <checkCommand+0xa54>)
 800234e:	485a      	ldr	r0, [pc, #360]	; (80024b8 <checkCommand+0xa70>)
 8002350:	f001 fb76 	bl	8003a40 <HAL_CAN_AddTxMessage>
				break;
 8002354:	e09e      	b.n	8002494 <checkCommand+0xa4c>
					canSendFormat[0] = COMMAND_HEADER;
 8002356:	4b51      	ldr	r3, [pc, #324]	; (800249c <checkCommand+0xa54>)
 8002358:	22a5      	movs	r2, #165	; 0xa5
 800235a:	701a      	strb	r2, [r3, #0]
					canSendFormat[1] = COMMAND_DEFAULT_MODSEL_READ;
 800235c:	4b4f      	ldr	r3, [pc, #316]	; (800249c <checkCommand+0xa54>)
 800235e:	2271      	movs	r2, #113	; 0x71
 8002360:	705a      	strb	r2, [r3, #1]
					canSendFormat[2] = (*(uint32_t*)DEFAULT_CONFIG_DATA_INTERFACE_OFFSET);;
 8002362:	4b56      	ldr	r3, [pc, #344]	; (80024bc <checkCommand+0xa74>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	4b4c      	ldr	r3, [pc, #304]	; (800249c <checkCommand+0xa54>)
 800236a:	709a      	strb	r2, [r3, #2]
					canSendFormat[3] = 0x00;
 800236c:	4b4b      	ldr	r3, [pc, #300]	; (800249c <checkCommand+0xa54>)
 800236e:	2200      	movs	r2, #0
 8002370:	70da      	strb	r2, [r3, #3]
					canSendFormat[4] = 0x00;
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <checkCommand+0xa54>)
 8002374:	2200      	movs	r2, #0
 8002376:	711a      	strb	r2, [r3, #4]
					canSendFormat[5] = 0x00;
 8002378:	4b48      	ldr	r3, [pc, #288]	; (800249c <checkCommand+0xa54>)
 800237a:	2200      	movs	r2, #0
 800237c:	715a      	strb	r2, [r3, #5]
					canSendFormat[6] = 0x00;
 800237e:	4b47      	ldr	r3, [pc, #284]	; (800249c <checkCommand+0xa54>)
 8002380:	2200      	movs	r2, #0
 8002382:	719a      	strb	r2, [r3, #6]
					canSendFormat[7] = 0x00;
 8002384:	4b45      	ldr	r3, [pc, #276]	; (800249c <checkCommand+0xa54>)
 8002386:	2200      	movs	r2, #0
 8002388:	71da      	strb	r2, [r3, #7]
					if (HAL_CAN_AddTxMessage(&hcan, &txHeader, canSendFormat, &txMailbox) != HAL_OK)
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	f107 010c 	add.w	r1, r7, #12
 8002392:	4a42      	ldr	r2, [pc, #264]	; (800249c <checkCommand+0xa54>)
 8002394:	4848      	ldr	r0, [pc, #288]	; (80024b8 <checkCommand+0xa70>)
 8002396:	f001 fb53 	bl	8003a40 <HAL_CAN_AddTxMessage>
				break;
 800239a:	e07b      	b.n	8002494 <checkCommand+0xa4c>
					canSendFormat[0] = COMMAND_HEADER;
 800239c:	4b3f      	ldr	r3, [pc, #252]	; (800249c <checkCommand+0xa54>)
 800239e:	22a5      	movs	r2, #165	; 0xa5
 80023a0:	701a      	strb	r2, [r3, #0]
					canSendFormat[1] = COMMAND_DEFAULT_XCALIB_READ;
 80023a2:	4b3e      	ldr	r3, [pc, #248]	; (800249c <checkCommand+0xa54>)
 80023a4:	2272      	movs	r2, #114	; 0x72
 80023a6:	705a      	strb	r2, [r3, #1]
					canSendFormat[2] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET + 1)); //MSB
 80023a8:	4b45      	ldr	r3, [pc, #276]	; (80024c0 <checkCommand+0xa78>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <checkCommand+0xa54>)
 80023b0:	709a      	strb	r2, [r3, #2]
					canSendFormat[3] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET);		 //LSB
 80023b2:	4b44      	ldr	r3, [pc, #272]	; (80024c4 <checkCommand+0xa7c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b38      	ldr	r3, [pc, #224]	; (800249c <checkCommand+0xa54>)
 80023ba:	70da      	strb	r2, [r3, #3]
					canSendFormat[4] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET + 1));
 80023bc:	4b42      	ldr	r3, [pc, #264]	; (80024c8 <checkCommand+0xa80>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4b36      	ldr	r3, [pc, #216]	; (800249c <checkCommand+0xa54>)
 80023c4:	711a      	strb	r2, [r3, #4]
					canSendFormat[5] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET);
 80023c6:	4b41      	ldr	r3, [pc, #260]	; (80024cc <checkCommand+0xa84>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b33      	ldr	r3, [pc, #204]	; (800249c <checkCommand+0xa54>)
 80023ce:	715a      	strb	r2, [r3, #5]
					canSendFormat[6] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET + 1));
 80023d0:	4b3f      	ldr	r3, [pc, #252]	; (80024d0 <checkCommand+0xa88>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b31      	ldr	r3, [pc, #196]	; (800249c <checkCommand+0xa54>)
 80023d8:	719a      	strb	r2, [r3, #6]
					canSendFormat[7] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 80023da:	4b3e      	ldr	r3, [pc, #248]	; (80024d4 <checkCommand+0xa8c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b2e      	ldr	r3, [pc, #184]	; (800249c <checkCommand+0xa54>)
 80023e2:	71da      	strb	r2, [r3, #7]
					if (HAL_CAN_AddTxMessage(&hcan, &txHeader, canSendFormat, &txMailbox) != HAL_OK)
 80023e4:	f107 0308 	add.w	r3, r7, #8
 80023e8:	f107 010c 	add.w	r1, r7, #12
 80023ec:	4a2b      	ldr	r2, [pc, #172]	; (800249c <checkCommand+0xa54>)
 80023ee:	4832      	ldr	r0, [pc, #200]	; (80024b8 <checkCommand+0xa70>)
 80023f0:	f001 fb26 	bl	8003a40 <HAL_CAN_AddTxMessage>
				break;
 80023f4:	e04e      	b.n	8002494 <checkCommand+0xa4c>
					canSendFormat[0] = COMMAND_HEADER;
 80023f6:	4b29      	ldr	r3, [pc, #164]	; (800249c <checkCommand+0xa54>)
 80023f8:	22a5      	movs	r2, #165	; 0xa5
 80023fa:	701a      	strb	r2, [r3, #0]
					canSendFormat[1] = COMMAND_DEFAULT_YCALIB_READ;
 80023fc:	4b27      	ldr	r3, [pc, #156]	; (800249c <checkCommand+0xa54>)
 80023fe:	2273      	movs	r2, #115	; 0x73
 8002400:	705a      	strb	r2, [r3, #1]
					canSendFormat[2] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET + 1));
 8002402:	4b35      	ldr	r3, [pc, #212]	; (80024d8 <checkCommand+0xa90>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	4b24      	ldr	r3, [pc, #144]	; (800249c <checkCommand+0xa54>)
 800240a:	709a      	strb	r2, [r3, #2]
					canSendFormat[3] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET);
 800240c:	4b33      	ldr	r3, [pc, #204]	; (80024dc <checkCommand+0xa94>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4b22      	ldr	r3, [pc, #136]	; (800249c <checkCommand+0xa54>)
 8002414:	70da      	strb	r2, [r3, #3]
					canSendFormat[4] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET + 1));
 8002416:	4b32      	ldr	r3, [pc, #200]	; (80024e0 <checkCommand+0xa98>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b1f      	ldr	r3, [pc, #124]	; (800249c <checkCommand+0xa54>)
 800241e:	711a      	strb	r2, [r3, #4]
					canSendFormat[5] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET);
 8002420:	4b30      	ldr	r3, [pc, #192]	; (80024e4 <checkCommand+0xa9c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b1d      	ldr	r3, [pc, #116]	; (800249c <checkCommand+0xa54>)
 8002428:	715a      	strb	r2, [r3, #5]
					canSendFormat[6] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET + 1));
 800242a:	4b2f      	ldr	r3, [pc, #188]	; (80024e8 <checkCommand+0xaa0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	4b1a      	ldr	r3, [pc, #104]	; (800249c <checkCommand+0xa54>)
 8002432:	719a      	strb	r2, [r3, #6]
					canSendFormat[7] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 8002434:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <checkCommand+0xaa4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <checkCommand+0xa54>)
 800243c:	71da      	strb	r2, [r3, #7]
					if (HAL_CAN_AddTxMessage(&hcan, &txHeader, canSendFormat, &txMailbox) != HAL_OK)
 800243e:	f107 0308 	add.w	r3, r7, #8
 8002442:	f107 010c 	add.w	r1, r7, #12
 8002446:	4a15      	ldr	r2, [pc, #84]	; (800249c <checkCommand+0xa54>)
 8002448:	481b      	ldr	r0, [pc, #108]	; (80024b8 <checkCommand+0xa70>)
 800244a:	f001 faf9 	bl	8003a40 <HAL_CAN_AddTxMessage>
				break;
 800244e:	e021      	b.n	8002494 <checkCommand+0xa4c>
					bootloaderCommand();
 8002450:	f7fe faa0 	bl	8000994 <bootloaderCommand>
				break;
 8002454:	e01e      	b.n	8002494 <checkCommand+0xa4c>
					sendAckCan();
 8002456:	f7ff fac1 	bl	80019dc <sendAckCan>
					HAL_NVIC_SystemReset();
 800245a:	f002 f854 	bl	8004506 <HAL_NVIC_SystemReset>
				break;
 800245e:	e019      	b.n	8002494 <checkCommand+0xa4c>
					remoteMode = 0;
 8002460:	4b23      	ldr	r3, [pc, #140]	; (80024f0 <checkCommand+0xaa8>)
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
					sendAckCan();
 8002466:	f7ff fab9 	bl	80019dc <sendAckCan>
				break;
 800246a:	e013      	b.n	8002494 <checkCommand+0xa4c>
					refreshFlashUserConf(&tempTkkConfig);
 800246c:	4821      	ldr	r0, [pc, #132]	; (80024f4 <checkCommand+0xaac>)
 800246e:	f7ff f93d 	bl	80016ec <refreshFlashUserConf>
					calculateJostickBorders(&userTkkConfig, &tkkJoystickBorder);
 8002472:	4921      	ldr	r1, [pc, #132]	; (80024f8 <checkCommand+0xab0>)
 8002474:	4821      	ldr	r0, [pc, #132]	; (80024fc <checkCommand+0xab4>)
 8002476:	f7fe fbcf 	bl	8000c18 <calculateJostickBorders>
					remoteMode = 1;
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <checkCommand+0xaa8>)
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
					sendAckCan();
 8002480:	f7ff faac 	bl	80019dc <sendAckCan>
				break;
 8002484:	e006      	b.n	8002494 <checkCommand+0xa4c>
				break;
 8002486:	bf00      	nop
 8002488:	e004      	b.n	8002494 <checkCommand+0xa4c>
				break;
 800248a:	bf00      	nop
 800248c:	e002      	b.n	8002494 <checkCommand+0xa4c>
				break;
 800248e:	bf00      	nop
 8002490:	e000      	b.n	8002494 <checkCommand+0xa4c>
				break;
 8002492:	bf00      	nop
}
 8002494:	bf00      	nop
 8002496:	3728      	adds	r7, #40	; 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000380 	.word	0x20000380
 80024a0:	0800e00f 	.word	0x0800e00f
 80024a4:	0800e00e 	.word	0x0800e00e
 80024a8:	0800e00d 	.word	0x0800e00d
 80024ac:	0800e00c 	.word	0x0800e00c
 80024b0:	0800e00b 	.word	0x0800e00b
 80024b4:	0800e00a 	.word	0x0800e00a
 80024b8:	200000a0 	.word	0x200000a0
 80024bc:	0800f000 	.word	0x0800f000
 80024c0:	0800f007 	.word	0x0800f007
 80024c4:	0800f006 	.word	0x0800f006
 80024c8:	0800f005 	.word	0x0800f005
 80024cc:	0800f004 	.word	0x0800f004
 80024d0:	0800f003 	.word	0x0800f003
 80024d4:	0800f002 	.word	0x0800f002
 80024d8:	0800f00d 	.word	0x0800f00d
 80024dc:	0800f00c 	.word	0x0800f00c
 80024e0:	0800f00b 	.word	0x0800f00b
 80024e4:	0800f00a 	.word	0x0800f00a
 80024e8:	0800f009 	.word	0x0800f009
 80024ec:	0800f008 	.word	0x0800f008
 80024f0:	20000000 	.word	0x20000000
 80024f4:	200003a4 	.word	0x200003a4
 80024f8:	20000494 	.word	0x20000494
 80024fc:	200003f4 	.word	0x200003f4

08002500 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_arg)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08c      	sub	sp, #48	; 0x30
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rxHeader;
  uint8_t rxData[8];
  if(userTkkConfig.tkkModSelection == TKK_MOD_CAN)
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d11c      	bne.n	800254a <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
  {
	  if (HAL_CAN_GetRxMessage(hcan_arg, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 8002510:	f107 030c 	add.w	r3, r7, #12
 8002514:	f107 0214 	add.w	r2, r7, #20
 8002518:	2100      	movs	r1, #0
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f001 fb60 	bl	8003be0 <HAL_CAN_GetRxMessage>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d110      	bne.n	8002548 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
	    {
	      return;
	    }

	    if (rxHeader.IDE == CAN_ID_STD && rxHeader.RTR == CAN_RTR_DATA)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10e      	bne.n	800254a <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10b      	bne.n	800254a <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
	    {
	  	  if(rxHeader.StdId == 0x101)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f240 1201 	movw	r2, #257	; 0x101
 8002538:	4293      	cmp	r3, r2
 800253a:	d106      	bne.n	800254a <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
	  	  {
	  		    checkCommand(rxData);
 800253c:	f107 030c 	add.w	r3, r7, #12
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fa81 	bl	8001a48 <checkCommand>
 8002546:	e000      	b.n	800254a <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
	      return;
 8002548:	bf00      	nop
	  	  }
	    }
  }
}
 800254a:	3730      	adds	r7, #48	; 0x30
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200003f4 	.word	0x200003f4

08002554 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	unsigned int i;
	tempRxDataIn = rxDataIn;
 800255c:	4b34      	ldr	r3, [pc, #208]	; (8002630 <HAL_UART_RxCpltCallback+0xdc>)
 800255e:	781a      	ldrb	r2, [r3, #0]
 8002560:	4b34      	ldr	r3, [pc, #208]	; (8002634 <HAL_UART_RxCpltCallback+0xe0>)
 8002562:	701a      	strb	r2, [r3, #0]

	if(userTkkConfig.tkkModSelection == TKK_MOD_RS422)
 8002564:	4b34      	ldr	r3, [pc, #208]	; (8002638 <HAL_UART_RxCpltCallback+0xe4>)
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d15d      	bne.n	8002628 <HAL_UART_RxCpltCallback+0xd4>
	{
		if(rxBufferDataCounter==0 && rxDataIn==0xA5)
 800256c:	4b33      	ldr	r3, [pc, #204]	; (800263c <HAL_UART_RxCpltCallback+0xe8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10d      	bne.n	8002590 <HAL_UART_RxCpltCallback+0x3c>
 8002574:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <HAL_UART_RxCpltCallback+0xdc>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2ba5      	cmp	r3, #165	; 0xa5
 800257a:	d109      	bne.n	8002590 <HAL_UART_RxCpltCallback+0x3c>
			{
				rxBuffer[0] = rxDataIn;
 800257c:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <HAL_UART_RxCpltCallback+0xdc>)
 800257e:	781a      	ldrb	r2, [r3, #0]
 8002580:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <HAL_UART_RxCpltCallback+0xec>)
 8002582:	701a      	strb	r2, [r3, #0]
				rxBufferDataCounter++;
 8002584:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_UART_RxCpltCallback+0xe8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	4a2c      	ldr	r2, [pc, #176]	; (800263c <HAL_UART_RxCpltCallback+0xe8>)
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e04b      	b.n	8002628 <HAL_UART_RxCpltCallback+0xd4>
			}
			else if(rxBufferDataCounter>0 && rxBufferDataCounter<8)
 8002590:	4b2a      	ldr	r3, [pc, #168]	; (800263c <HAL_UART_RxCpltCallback+0xe8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00f      	beq.n	80025b8 <HAL_UART_RxCpltCallback+0x64>
 8002598:	4b28      	ldr	r3, [pc, #160]	; (800263c <HAL_UART_RxCpltCallback+0xe8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b07      	cmp	r3, #7
 800259e:	d80b      	bhi.n	80025b8 <HAL_UART_RxCpltCallback+0x64>
			{
				rxBuffer[rxBufferDataCounter] = rxDataIn;
 80025a0:	4b26      	ldr	r3, [pc, #152]	; (800263c <HAL_UART_RxCpltCallback+0xe8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a22      	ldr	r2, [pc, #136]	; (8002630 <HAL_UART_RxCpltCallback+0xdc>)
 80025a6:	7811      	ldrb	r1, [r2, #0]
 80025a8:	4a25      	ldr	r2, [pc, #148]	; (8002640 <HAL_UART_RxCpltCallback+0xec>)
 80025aa:	54d1      	strb	r1, [r2, r3]
				rxBufferDataCounter++;
 80025ac:	4b23      	ldr	r3, [pc, #140]	; (800263c <HAL_UART_RxCpltCallback+0xe8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	4a22      	ldr	r2, [pc, #136]	; (800263c <HAL_UART_RxCpltCallback+0xe8>)
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e037      	b.n	8002628 <HAL_UART_RxCpltCallback+0xd4>
			}
			else if(rxBufferDataCounter==8)
 80025b8:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_UART_RxCpltCallback+0xe8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d12f      	bne.n	8002620 <HAL_UART_RxCpltCallback+0xcc>
			{
				/* checksum control */
				rxDataCheksum = 0;
 80025c0:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_UART_RxCpltCallback+0xf0>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
				rxBuffer[rxBufferDataCounter] = rxDataIn;
 80025c6:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_UART_RxCpltCallback+0xe8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a19      	ldr	r2, [pc, #100]	; (8002630 <HAL_UART_RxCpltCallback+0xdc>)
 80025cc:	7811      	ldrb	r1, [r2, #0]
 80025ce:	4a1c      	ldr	r2, [pc, #112]	; (8002640 <HAL_UART_RxCpltCallback+0xec>)
 80025d0:	54d1      	strb	r1, [r2, r3]

				for(i=1;i<9;i++)
 80025d2:	2301      	movs	r3, #1
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	e00c      	b.n	80025f2 <HAL_UART_RxCpltCallback+0x9e>
				{
					rxDataCheksum += rxBuffer[i];
 80025d8:	4a19      	ldr	r2, [pc, #100]	; (8002640 <HAL_UART_RxCpltCallback+0xec>)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4413      	add	r3, r2
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <HAL_UART_RxCpltCallback+0xf0>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4413      	add	r3, r2
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <HAL_UART_RxCpltCallback+0xf0>)
 80025ea:	701a      	strb	r2, [r3, #0]
				for(i=1;i<9;i++)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3301      	adds	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d9ef      	bls.n	80025d8 <HAL_UART_RxCpltCallback+0x84>
				}
				if(rxDataCheksum==0)
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_UART_RxCpltCallback+0xf0>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d106      	bne.n	800260e <HAL_UART_RxCpltCallback+0xba>
				{
					/* checkSum OK, process the command */
					checkCommand(rxBuffer);
 8002600:	480f      	ldr	r0, [pc, #60]	; (8002640 <HAL_UART_RxCpltCallback+0xec>)
 8002602:	f7ff fa21 	bl	8001a48 <checkCommand>
					rxBufferDataCounter = 0; /* test breakpoint icin */
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <HAL_UART_RxCpltCallback+0xe8>)
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e004      	b.n	8002618 <HAL_UART_RxCpltCallback+0xc4>
				}
				else
				{
					/* error, do nothing*/
					errorCounter++;
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <HAL_UART_RxCpltCallback+0xf4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3301      	adds	r3, #1
 8002614:	4a0c      	ldr	r2, [pc, #48]	; (8002648 <HAL_UART_RxCpltCallback+0xf4>)
 8002616:	6013      	str	r3, [r2, #0]
				}
				rxBufferDataCounter = 0;
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <HAL_UART_RxCpltCallback+0xe8>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
			else
			{
				rxBufferDataCounter = 0;
			}
	}
}
 800261e:	e003      	b.n	8002628 <HAL_UART_RxCpltCallback+0xd4>
				rxBufferDataCounter = 0;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_UART_RxCpltCallback+0xe8>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
}
 8002626:	e7ff      	b.n	8002628 <HAL_UART_RxCpltCallback+0xd4>
 8002628:	bf00      	nop
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	2000038a 	.word	0x2000038a
 8002634:	20000389 	.word	0x20000389
 8002638:	200003f4 	.word	0x200003f4
 800263c:	2000038c 	.word	0x2000038c
 8002640:	20000390 	.word	0x20000390
 8002644:	20000399 	.word	0x20000399
 8002648:	2000039c 	.word	0x2000039c

0800264c <writeDefaultConfigPage>:

void writeDefaultConfigPage(void)
{
 800264c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002650:	b08c      	sub	sp, #48	; 0x30
 8002652:	af00      	add	r7, sp, #0
	uint32_t index = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c

	defaultTkkConfig.tkkModSelection = TKK_MOD_RS422;
 8002658:	4a5f      	ldr	r2, [pc, #380]	; (80027d8 <writeDefaultConfigPage+0x18c>)
 800265a:	2300      	movs	r3, #0
 800265c:	8013      	strh	r3, [r2, #0]

	defaultTkkConfig.yMin = 32900;
 800265e:	4a5e      	ldr	r2, [pc, #376]	; (80027d8 <writeDefaultConfigPage+0x18c>)
 8002660:	f248 0384 	movw	r3, #32900	; 0x8084
 8002664:	8113      	strh	r3, [r2, #8]
	defaultTkkConfig.yMax = 65535;
 8002666:	4a5c      	ldr	r2, [pc, #368]	; (80027d8 <writeDefaultConfigPage+0x18c>)
 8002668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800266c:	8153      	strh	r3, [r2, #10]
	defaultTkkConfig.yMid = 49220;
 800266e:	4a5a      	ldr	r2, [pc, #360]	; (80027d8 <writeDefaultConfigPage+0x18c>)
 8002670:	f24c 0344 	movw	r3, #49220	; 0xc044
 8002674:	8193      	strh	r3, [r2, #12]

	defaultTkkConfig.xMin = 32900;
 8002676:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <writeDefaultConfigPage+0x18c>)
 8002678:	f248 0384 	movw	r3, #32900	; 0x8084
 800267c:	8053      	strh	r3, [r2, #2]
	defaultTkkConfig.xMax = 65535;
 800267e:	4a56      	ldr	r2, [pc, #344]	; (80027d8 <writeDefaultConfigPage+0x18c>)
 8002680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002684:	8093      	strh	r3, [r2, #4]
	defaultTkkConfig.xMid = 49220;
 8002686:	4a54      	ldr	r2, [pc, #336]	; (80027d8 <writeDefaultConfigPage+0x18c>)
 8002688:	f24c 0344 	movw	r3, #49220	; 0xc044
 800268c:	80d3      	strh	r3, [r2, #6]

	for(index = 0; index < BUTTON_COUNT; index++)
 800268e:	2300      	movs	r3, #0
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002692:	e009      	b.n	80026a8 <writeDefaultConfigPage+0x5c>
	{
		defaultTkkConfig.debounceFactor[index] = 20;
 8002694:	4950      	ldr	r1, [pc, #320]	; (80027d8 <writeDefaultConfigPage+0x18c>)
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	3304      	adds	r3, #4
 800269a:	005a      	lsls	r2, r3, #1
 800269c:	440a      	add	r2, r1
 800269e:	2314      	movs	r3, #20
 80026a0:	80d3      	strh	r3, [r2, #6]
	for(index = 0; index < BUTTON_COUNT; index++)
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	3301      	adds	r3, #1
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026aa:	2b1f      	cmp	r3, #31
 80026ac:	d9f2      	bls.n	8002694 <writeDefaultConfigPage+0x48>
	}

	volatile uint32_t i = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_FLASH_Unlock();
 80026b2:	f002 f9d7 	bl	8004a64 <HAL_FLASH_Unlock>

	static FLASH_EraseInitTypeDef EraseInitStructDefaultPage;
	EraseInitStructDefaultPage.TypeErase = FLASH_TYPEERASE_PAGES;
 80026b6:	4a49      	ldr	r2, [pc, #292]	; (80027dc <writeDefaultConfigPage+0x190>)
 80026b8:	2300      	movs	r3, #0
 80026ba:	6013      	str	r3, [r2, #0]
	EraseInitStructDefaultPage.PageAddress = DEFAULT_CONFIG_DATA_BASE_ADDR;
 80026bc:	4a47      	ldr	r2, [pc, #284]	; (80027dc <writeDefaultConfigPage+0x190>)
 80026be:	4b48      	ldr	r3, [pc, #288]	; (80027e0 <writeDefaultConfigPage+0x194>)
 80026c0:	6053      	str	r3, [r2, #4]
	EraseInitStructDefaultPage.NbPages = 1;
 80026c2:	4a46      	ldr	r2, [pc, #280]	; (80027dc <writeDefaultConfigPage+0x190>)
 80026c4:	2301      	movs	r3, #1
 80026c6:	6093      	str	r3, [r2, #8]

	if(HAL_FLASHEx_Erase(&EraseInitStructDefaultPage, &PAGEError) != HAL_OK)
 80026c8:	4946      	ldr	r1, [pc, #280]	; (80027e4 <writeDefaultConfigPage+0x198>)
 80026ca:	4844      	ldr	r0, [pc, #272]	; (80027dc <writeDefaultConfigPage+0x190>)
 80026cc:	f002 fa8e 	bl	8004bec <HAL_FLASHEx_Erase>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <writeDefaultConfigPage+0x8e>
	{
		Error_Handler();
 80026d6:	f000 f895 	bl	8002804 <Error_Handler>
	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_INTERFACE_OFFSET		, defaultTkkConfig.tkkModSelection );
 80026da:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <writeDefaultConfigPage+0x18c>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2200      	movs	r2, #0
 80026e4:	461c      	mov	r4, r3
 80026e6:	4615      	mov	r5, r2
 80026e8:	4622      	mov	r2, r4
 80026ea:	462b      	mov	r3, r5
 80026ec:	493c      	ldr	r1, [pc, #240]	; (80027e0 <writeDefaultConfigPage+0x194>)
 80026ee:	2001      	movs	r0, #1
 80026f0:	f002 f948 	bl	8004984 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET	, defaultTkkConfig.xMid);
 80026f4:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <writeDefaultConfigPage+0x18c>)
 80026f6:	88db      	ldrh	r3, [r3, #6]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2200      	movs	r2, #0
 80026fe:	4698      	mov	r8, r3
 8002700:	4691      	mov	r9, r2
 8002702:	4642      	mov	r2, r8
 8002704:	464b      	mov	r3, r9
 8002706:	4938      	ldr	r1, [pc, #224]	; (80027e8 <writeDefaultConfigPage+0x19c>)
 8002708:	2001      	movs	r0, #1
 800270a:	f002 f93b 	bl	8004984 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET		, defaultTkkConfig.xMin);
 800270e:	4b32      	ldr	r3, [pc, #200]	; (80027d8 <writeDefaultConfigPage+0x18c>)
 8002710:	885b      	ldrh	r3, [r3, #2]
 8002712:	b29b      	uxth	r3, r3
 8002714:	b29b      	uxth	r3, r3
 8002716:	2200      	movs	r2, #0
 8002718:	469a      	mov	sl, r3
 800271a:	4693      	mov	fp, r2
 800271c:	4652      	mov	r2, sl
 800271e:	465b      	mov	r3, fp
 8002720:	4932      	ldr	r1, [pc, #200]	; (80027ec <writeDefaultConfigPage+0x1a0>)
 8002722:	2001      	movs	r0, #1
 8002724:	f002 f92e 	bl	8004984 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET		, defaultTkkConfig.xMax);
 8002728:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <writeDefaultConfigPage+0x18c>)
 800272a:	889b      	ldrh	r3, [r3, #4]
 800272c:	b29b      	uxth	r3, r3
 800272e:	b29b      	uxth	r3, r3
 8002730:	2200      	movs	r2, #0
 8002732:	623b      	str	r3, [r7, #32]
 8002734:	627a      	str	r2, [r7, #36]	; 0x24
 8002736:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800273a:	492d      	ldr	r1, [pc, #180]	; (80027f0 <writeDefaultConfigPage+0x1a4>)
 800273c:	2001      	movs	r0, #1
 800273e:	f002 f921 	bl	8004984 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET	, defaultTkkConfig.yMid);
 8002742:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <writeDefaultConfigPage+0x18c>)
 8002744:	899b      	ldrh	r3, [r3, #12]
 8002746:	b29b      	uxth	r3, r3
 8002748:	b29b      	uxth	r3, r3
 800274a:	2200      	movs	r2, #0
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	61fa      	str	r2, [r7, #28]
 8002750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002754:	4927      	ldr	r1, [pc, #156]	; (80027f4 <writeDefaultConfigPage+0x1a8>)
 8002756:	2001      	movs	r0, #1
 8002758:	f002 f914 	bl	8004984 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET		, defaultTkkConfig.yMin);
 800275c:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <writeDefaultConfigPage+0x18c>)
 800275e:	891b      	ldrh	r3, [r3, #8]
 8002760:	b29b      	uxth	r3, r3
 8002762:	b29b      	uxth	r3, r3
 8002764:	2200      	movs	r2, #0
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	617a      	str	r2, [r7, #20]
 800276a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800276e:	4922      	ldr	r1, [pc, #136]	; (80027f8 <writeDefaultConfigPage+0x1ac>)
 8002770:	2001      	movs	r0, #1
 8002772:	f002 f907 	bl	8004984 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET		, defaultTkkConfig.yMax);
 8002776:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <writeDefaultConfigPage+0x18c>)
 8002778:	895b      	ldrh	r3, [r3, #10]
 800277a:	b29b      	uxth	r3, r3
 800277c:	b29b      	uxth	r3, r3
 800277e:	2200      	movs	r2, #0
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	60fa      	str	r2, [r7, #12]
 8002784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002788:	491c      	ldr	r1, [pc, #112]	; (80027fc <writeDefaultConfigPage+0x1b0>)
 800278a:	2001      	movs	r0, #1
 800278c:	f002 f8fa 	bl	8004984 <HAL_FLASH_Program>

	for(i = 0; i < 32; i++)
 8002790:	2300      	movs	r3, #0
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28
 8002794:	e016      	b.n	80027c4 <writeDefaultConfigPage+0x178>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT, defaultTkkConfig.debounceFactor[i]);
 8002796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4919      	ldr	r1, [pc, #100]	; (8002800 <writeDefaultConfigPage+0x1b4>)
 800279c:	4419      	add	r1, r3
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <writeDefaultConfigPage+0x18c>)
 80027a2:	3304      	adds	r3, #4
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	88db      	ldrh	r3, [r3, #6]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2200      	movs	r2, #0
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027b8:	2001      	movs	r0, #1
 80027ba:	f002 f8e3 	bl	8004984 <HAL_FLASH_Program>
	for(i = 0; i < 32; i++)
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	3301      	adds	r3, #1
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c6:	2b1f      	cmp	r3, #31
 80027c8:	d9e5      	bls.n	8002796 <writeDefaultConfigPage+0x14a>
	}

	HAL_FLASH_Lock();
 80027ca:	f002 f971 	bl	8004ab0 <HAL_FLASH_Lock>
}
 80027ce:	bf00      	nop
 80027d0:	3730      	adds	r7, #48	; 0x30
 80027d2:	46bd      	mov	sp, r7
 80027d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027d8:	20000444 	.word	0x20000444
 80027dc:	200004e4 	.word	0x200004e4
 80027e0:	0800f000 	.word	0x0800f000
 80027e4:	200003a0 	.word	0x200003a0
 80027e8:	0800f002 	.word	0x0800f002
 80027ec:	0800f004 	.word	0x0800f004
 80027f0:	0800f006 	.word	0x0800f006
 80027f4:	0800f008 	.word	0x0800f008
 80027f8:	0800f00a 	.word	0x0800f00a
 80027fc:	0800f00c 	.word	0x0800f00c
 8002800:	0800f00e 	.word	0x0800f00e

08002804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002808:	b672      	cpsid	i
}
 800280a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800280c:	e7fe      	b.n	800280c <Error_Handler+0x8>
	...

08002810 <MX_SDADC1_Init>:
SDADC_HandleTypeDef hsdadc1;
DMA_HandleTypeDef hdma_sdadc1;

/* SDADC1 init function */
void MX_SDADC1_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8002816:	463b      	mov	r3, r7
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
  /* USER CODE END SDADC1_Init 1 */

  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 8002822:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <MX_SDADC1_Init+0x100>)
 8002824:	4a3b      	ldr	r2, [pc, #236]	; (8002914 <MX_SDADC1_Init+0x104>)
 8002826:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8002828:	4b39      	ldr	r3, [pc, #228]	; (8002910 <MX_SDADC1_Init+0x100>)
 800282a:	2200      	movs	r2, #0
 800282c:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 800282e:	4b38      	ldr	r3, [pc, #224]	; (8002910 <MX_SDADC1_Init+0x100>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8002834:	4b36      	ldr	r3, [pc, #216]	; (8002910 <MX_SDADC1_Init+0x100>)
 8002836:	2200      	movs	r2, #0
 8002838:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 800283a:	4b35      	ldr	r3, [pc, #212]	; (8002910 <MX_SDADC1_Init+0x100>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  hsdadc1.InjectedTrigger = SDADC_SOFTWARE_TRIGGER;
 8002840:	4b33      	ldr	r3, [pc, #204]	; (8002910 <MX_SDADC1_Init+0x100>)
 8002842:	2200      	movs	r2, #0
 8002844:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8002846:	4832      	ldr	r0, [pc, #200]	; (8002910 <MX_SDADC1_Init+0x100>)
 8002848:	f004 f89e 	bl	8006988 <HAL_SDADC_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_SDADC1_Init+0x46>
  {
    Error_Handler();
 8002852:	f7ff ffd7 	bl	8002804 <Error_Handler>
  }

  /** Configure the Injected Mode
  */
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc1, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 8002856:	2100      	movs	r1, #0
 8002858:	482d      	ldr	r0, [pc, #180]	; (8002910 <MX_SDADC1_Init+0x100>)
 800285a:	f004 fa61 	bl	8006d20 <HAL_SDADC_SelectInjectedDelay>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_SDADC1_Init+0x58>
  {
    Error_Handler();
 8002864:	f7ff ffce 	bl	8002804 <Error_Handler>
  }
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 8002868:	2100      	movs	r1, #0
 800286a:	4829      	ldr	r0, [pc, #164]	; (8002910 <MX_SDADC1_Init+0x100>)
 800286c:	f004 fa28 	bl	8006cc0 <HAL_SDADC_SelectInjectedTrigger>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_SDADC1_Init+0x6a>
  {
    Error_Handler();
 8002876:	f7ff ffc5 	bl	8002804 <Error_Handler>
  }
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc1, SDADC_CHANNEL_7|SDADC_CHANNEL_8
 800287a:	2200      	movs	r2, #0
 800287c:	4926      	ldr	r1, [pc, #152]	; (8002918 <MX_SDADC1_Init+0x108>)
 800287e:	4824      	ldr	r0, [pc, #144]	; (8002910 <MX_SDADC1_Init+0x100>)
 8002880:	f004 f9e2 	bl	8006c48 <HAL_SDADC_InjectedConfigChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_SDADC1_Init+0x7e>
                              |SDADC_CHANNEL_4|SDADC_CHANNEL_5, SDADC_CONTINUOUS_CONV_OFF) != HAL_OK)
  {
    Error_Handler();
 800288a:	f7ff ffbb 	bl	8002804 <Error_Handler>
  }

  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_OFFSET;
 800288e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002892:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8002894:	2300      	movs	r3, #0
 8002896:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 80028a0:	463b      	mov	r3, r7
 80028a2:	461a      	mov	r2, r3
 80028a4:	2100      	movs	r1, #0
 80028a6:	481a      	ldr	r0, [pc, #104]	; (8002910 <MX_SDADC1_Init+0x100>)
 80028a8:	f004 f8fe 	bl	8006aa8 <HAL_SDADC_PrepareChannelConfig>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_SDADC1_Init+0xa6>
  {
    Error_Handler();
 80028b2:	f7ff ffa7 	bl	8002804 <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_7, SDADC_CONF_INDEX_0) != HAL_OK)
 80028b6:	2200      	movs	r2, #0
 80028b8:	4918      	ldr	r1, [pc, #96]	; (800291c <MX_SDADC1_Init+0x10c>)
 80028ba:	4815      	ldr	r0, [pc, #84]	; (8002910 <MX_SDADC1_Init+0x100>)
 80028bc:	f004 f930 	bl	8006b20 <HAL_SDADC_AssociateChannelConfig>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_SDADC1_Init+0xba>
  {
    Error_Handler();
 80028c6:	f7ff ff9d 	bl	8002804 <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_8, SDADC_CONF_INDEX_0) != HAL_OK)
 80028ca:	2200      	movs	r2, #0
 80028cc:	4914      	ldr	r1, [pc, #80]	; (8002920 <MX_SDADC1_Init+0x110>)
 80028ce:	4810      	ldr	r0, [pc, #64]	; (8002910 <MX_SDADC1_Init+0x100>)
 80028d0:	f004 f926 	bl	8006b20 <HAL_SDADC_AssociateChannelConfig>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_SDADC1_Init+0xce>
  {
    Error_Handler();
 80028da:	f7ff ff93 	bl	8002804 <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONF_INDEX_0) != HAL_OK)
 80028de:	2200      	movs	r2, #0
 80028e0:	4910      	ldr	r1, [pc, #64]	; (8002924 <MX_SDADC1_Init+0x114>)
 80028e2:	480b      	ldr	r0, [pc, #44]	; (8002910 <MX_SDADC1_Init+0x100>)
 80028e4:	f004 f91c 	bl	8006b20 <HAL_SDADC_AssociateChannelConfig>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_SDADC1_Init+0xe2>
  {
    Error_Handler();
 80028ee:	f7ff ff89 	bl	8002804 <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONF_INDEX_0) != HAL_OK)
 80028f2:	2200      	movs	r2, #0
 80028f4:	490c      	ldr	r1, [pc, #48]	; (8002928 <MX_SDADC1_Init+0x118>)
 80028f6:	4806      	ldr	r0, [pc, #24]	; (8002910 <MX_SDADC1_Init+0x100>)
 80028f8:	f004 f912 	bl	8006b20 <HAL_SDADC_AssociateChannelConfig>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_SDADC1_Init+0xf6>
  {
    Error_Handler();
 8002902:	f7ff ff7f 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 8002906:	bf00      	nop
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200004f0 	.word	0x200004f0
 8002914:	40016000 	.word	0x40016000
 8002918:	000f01b0 	.word	0x000f01b0
 800291c:	00070080 	.word	0x00070080
 8002920:	00080100 	.word	0x00080100
 8002924:	00040010 	.word	0x00040010
 8002928:	00050020 	.word	0x00050020

0800292c <HAL_SDADC_MspInit>:

void HAL_SDADC_MspInit(SDADC_HandleTypeDef* sdadcHandle)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(sdadcHandle->Instance==SDADC1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a36      	ldr	r2, [pc, #216]	; (8002a24 <HAL_SDADC_MspInit+0xf8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d165      	bne.n	8002a1a <HAL_SDADC_MspInit+0xee>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* SDADC1 clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 800294e:	4b36      	ldr	r3, [pc, #216]	; (8002a28 <HAL_SDADC_MspInit+0xfc>)
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	4a35      	ldr	r2, [pc, #212]	; (8002a28 <HAL_SDADC_MspInit+0xfc>)
 8002954:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002958:	6193      	str	r3, [r2, #24]
 800295a:	4b33      	ldr	r3, [pc, #204]	; (8002a28 <HAL_SDADC_MspInit+0xfc>)
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002966:	4b30      	ldr	r3, [pc, #192]	; (8002a28 <HAL_SDADC_MspInit+0xfc>)
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	4a2f      	ldr	r2, [pc, #188]	; (8002a28 <HAL_SDADC_MspInit+0xfc>)
 800296c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002970:	6153      	str	r3, [r2, #20]
 8002972:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <HAL_SDADC_MspInit+0xfc>)
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800297e:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <HAL_SDADC_MspInit+0xfc>)
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	4a29      	ldr	r2, [pc, #164]	; (8002a28 <HAL_SDADC_MspInit+0xfc>)
 8002984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002988:	6153      	str	r3, [r2, #20]
 800298a:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_SDADC_MspInit+0xfc>)
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> SDADC1_AIN5P
    PB2     ------> SDADC1_AIN4P
    PE8     ------> SDADC1_AIN8P
    PE9     ------> SDADC1_AIN7P
    */
    GPIO_InitStruct.Pin = AN_ADC4_Pin|AN_ADC3_Pin;
 8002996:	2306      	movs	r3, #6
 8002998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800299a:	2303      	movs	r3, #3
 800299c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	4619      	mov	r1, r3
 80029a8:	4820      	ldr	r0, [pc, #128]	; (8002a2c <HAL_SDADC_MspInit+0x100>)
 80029aa:	f002 f9c3 	bl	8004d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AN_ADC2_Pin|AN_ADC1_Pin;
 80029ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029b4:	2303      	movs	r3, #3
 80029b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	4619      	mov	r1, r3
 80029c2:	481b      	ldr	r0, [pc, #108]	; (8002a30 <HAL_SDADC_MspInit+0x104>)
 80029c4:	f002 f9b6 	bl	8004d34 <HAL_GPIO_Init>

    /* SDADC1 DMA Init */
    /* SDADC1 Init */
    hdma_sdadc1.Instance = DMA2_Channel3;
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <HAL_SDADC_MspInit+0x108>)
 80029ca:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <HAL_SDADC_MspInit+0x10c>)
 80029cc:	601a      	str	r2, [r3, #0]
    hdma_sdadc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_SDADC_MspInit+0x108>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	605a      	str	r2, [r3, #4]
    hdma_sdadc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d4:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <HAL_SDADC_MspInit+0x108>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
    hdma_sdadc1.Init.MemInc = DMA_MINC_ENABLE;
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <HAL_SDADC_MspInit+0x108>)
 80029dc:	2280      	movs	r2, #128	; 0x80
 80029de:	60da      	str	r2, [r3, #12]
    hdma_sdadc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_SDADC_MspInit+0x108>)
 80029e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029e6:	611a      	str	r2, [r3, #16]
    hdma_sdadc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_SDADC_MspInit+0x108>)
 80029ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ee:	615a      	str	r2, [r3, #20]
    hdma_sdadc1.Init.Mode = DMA_CIRCULAR;
 80029f0:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <HAL_SDADC_MspInit+0x108>)
 80029f2:	2220      	movs	r2, #32
 80029f4:	619a      	str	r2, [r3, #24]
    hdma_sdadc1.Init.Priority = DMA_PRIORITY_HIGH;
 80029f6:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <HAL_SDADC_MspInit+0x108>)
 80029f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029fc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_sdadc1) != HAL_OK)
 80029fe:	480d      	ldr	r0, [pc, #52]	; (8002a34 <HAL_SDADC_MspInit+0x108>)
 8002a00:	f001 fd91 	bl	8004526 <HAL_DMA_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_SDADC_MspInit+0xe2>
    {
      Error_Handler();
 8002a0a:	f7ff fefb 	bl	8002804 <Error_Handler>
    }

    __HAL_LINKDMA(sdadcHandle,hdma,hdma_sdadc1);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <HAL_SDADC_MspInit+0x108>)
 8002a12:	615a      	str	r2, [r3, #20]
 8002a14:	4a07      	ldr	r2, [pc, #28]	; (8002a34 <HAL_SDADC_MspInit+0x108>)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SDADC1_MspInit 1 */

  /* USER CODE END SDADC1_MspInit 1 */
  }
}
 8002a1a:	bf00      	nop
 8002a1c:	3728      	adds	r7, #40	; 0x28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40016000 	.word	0x40016000
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	48000400 	.word	0x48000400
 8002a30:	48001000 	.word	0x48001000
 8002a34:	20000534 	.word	0x20000534
 8002a38:	40020430 	.word	0x40020430

08002a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a42:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_MspInit+0x44>)
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <HAL_MspInit+0x44>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6193      	str	r3, [r2, #24]
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <HAL_MspInit+0x44>)
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_MspInit+0x44>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	4a08      	ldr	r2, [pc, #32]	; (8002a80 <HAL_MspInit+0x44>)
 8002a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a64:	61d3      	str	r3, [r2, #28]
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_MspInit+0x44>)
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000

08002a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a88:	e7fe      	b.n	8002a88 <NMI_Handler+0x4>

08002a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a8e:	e7fe      	b.n	8002a8e <HardFault_Handler+0x4>

08002a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <MemManage_Handler+0x4>

08002a96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a9a:	e7fe      	b.n	8002a9a <BusFault_Handler+0x4>

08002a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <UsageFault_Handler+0x4>

08002aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ad0:	f000 fa68 	bl	8002fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad4:	bf00      	nop
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <DMA1_Channel1_IRQHandler+0x10>)
 8002ade:	f001 fe44 	bl	800476a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	2000005c 	.word	0x2000005c

08002aec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002af0:	4802      	ldr	r0, [pc, #8]	; (8002afc <DMA1_Channel5_IRQHandler+0x10>)
 8002af2:	f001 fe3a 	bl	800476a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000698 	.word	0x20000698

08002b00 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002b04:	4802      	ldr	r0, [pc, #8]	; (8002b10 <CAN_RX0_IRQHandler+0x10>)
 8002b06:	f001 f9b3 	bl	8003e70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200000a0 	.word	0x200000a0

08002b14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  sendUartFlag = true;
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <TIM2_IRQHandler+0x2c>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
		sendUartFrame(&huart1, rs422Frame, 10 , 5000, &sendUartFlag);
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <TIM2_IRQHandler+0x2c>)
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b28:	220a      	movs	r2, #10
 8002b2a:	4906      	ldr	r1, [pc, #24]	; (8002b44 <TIM2_IRQHandler+0x30>)
 8002b2c:	4806      	ldr	r0, [pc, #24]	; (8002b48 <TIM2_IRQHandler+0x34>)
 8002b2e:	f7fe fb2f 	bl	8001190 <sendUartFrame>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b32:	4806      	ldr	r0, [pc, #24]	; (8002b4c <TIM2_IRQHandler+0x38>)
 8002b34:	f004 fc08 	bl	8007348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000388 	.word	0x20000388
 8002b44:	20000368 	.word	0x20000368
 8002b48:	20000610 	.word	0x20000610
 8002b4c:	20000578 	.word	0x20000578

08002b50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	  //analog sample flag
		//SDADC_ScanConversion();
		sampleAnalogInputs = true;
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <TIM3_IRQHandler+0x20>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]

		//digital read function
		readDigitalInputs(getDigitalInputs());
 8002b5a:	f7fe fb0f 	bl	800117c <getDigitalInputs>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe fae4 	bl	800112e <readDigitalInputs>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b66:	4803      	ldr	r0, [pc, #12]	; (8002b74 <TIM3_IRQHandler+0x24>)
 8002b68:	f004 fbee 	bl	8007348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b6c:	bf00      	nop
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	200000c8 	.word	0x200000c8
 8002b74:	200005c4 	.word	0x200005c4

08002b78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <USART1_IRQHandler+0x10>)
 8002b7e:	f005 f8b1 	bl	8007ce4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000610 	.word	0x20000610

08002b8c <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc1);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <DMA2_Channel3_IRQHandler+0x10>)
 8002b92:	f001 fdea 	bl	800476a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000534 	.word	0x20000534

08002ba0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <SystemInit+0x20>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <SystemInit+0x20>)
 8002bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bca:	f107 0308 	add.w	r3, r7, #8
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd8:	463b      	mov	r3, r7
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002be0:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002be2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002be6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002bea:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002bee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 8002bf6:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c08:	4813      	ldr	r0, [pc, #76]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002c0a:	f004 fae5 	bl	80071d8 <HAL_TIM_Base_Init>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002c14:	f7ff fdf6 	bl	8002804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c1e:	f107 0308 	add.w	r3, r7, #8
 8002c22:	4619      	mov	r1, r3
 8002c24:	480c      	ldr	r0, [pc, #48]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002c26:	f004 fc7f 	bl	8007528 <HAL_TIM_ConfigClockSource>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002c30:	f7ff fde8 	bl	8002804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c34:	2300      	movs	r3, #0
 8002c36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c3c:	463b      	mov	r3, r7
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4805      	ldr	r0, [pc, #20]	; (8002c58 <MX_TIM2_Init+0x94>)
 8002c42:	f004 feab 	bl	800799c <HAL_TIMEx_MasterConfigSynchronization>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c4c:	f7ff fdda 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c50:	bf00      	nop
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20000578 	.word	0x20000578

08002c5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c62:	f107 0308 	add.w	r3, r7, #8
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c70:	463b      	mov	r3, r7
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002c7a:	4a1e      	ldr	r2, [pc, #120]	; (8002cf4 <MX_TIM3_Init+0x98>)
 8002c7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4800;
 8002c7e:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002c80:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8002c84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4;
 8002c8c:	4b18      	ldr	r3, [pc, #96]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002c8e:	2204      	movs	r2, #4
 8002c90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c98:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c9e:	4814      	ldr	r0, [pc, #80]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002ca0:	f004 fa9a 	bl	80071d8 <HAL_TIM_Base_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002caa:	f7ff fdab 	bl	8002804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cb4:	f107 0308 	add.w	r3, r7, #8
 8002cb8:	4619      	mov	r1, r3
 8002cba:	480d      	ldr	r0, [pc, #52]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002cbc:	f004 fc34 	bl	8007528 <HAL_TIM_ConfigClockSource>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002cc6:	f7ff fd9d 	bl	8002804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cd2:	463b      	mov	r3, r7
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4806      	ldr	r0, [pc, #24]	; (8002cf0 <MX_TIM3_Init+0x94>)
 8002cd8:	f004 fe60 	bl	800799c <HAL_TIMEx_MasterConfigSynchronization>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002ce2:	f7ff fd8f 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ce6:	bf00      	nop
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	200005c4 	.word	0x200005c4
 8002cf4:	40000400 	.word	0x40000400

08002cf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d08:	d114      	bne.n	8002d34 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_TIM_Base_MspInit+0x78>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	4a18      	ldr	r2, [pc, #96]	; (8002d70 <HAL_TIM_Base_MspInit+0x78>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	61d3      	str	r3, [r2, #28]
 8002d16:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <HAL_TIM_Base_MspInit+0x78>)
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d22:	2200      	movs	r2, #0
 8002d24:	2100      	movs	r1, #0
 8002d26:	201c      	movs	r0, #28
 8002d28:	f001 fbc3 	bl	80044b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d2c:	201c      	movs	r0, #28
 8002d2e:	f001 fbdc 	bl	80044ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002d32:	e018      	b.n	8002d66 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0e      	ldr	r2, [pc, #56]	; (8002d74 <HAL_TIM_Base_MspInit+0x7c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d113      	bne.n	8002d66 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <HAL_TIM_Base_MspInit+0x78>)
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	4a0b      	ldr	r2, [pc, #44]	; (8002d70 <HAL_TIM_Base_MspInit+0x78>)
 8002d44:	f043 0302 	orr.w	r3, r3, #2
 8002d48:	61d3      	str	r3, [r2, #28]
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_TIM_Base_MspInit+0x78>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2100      	movs	r1, #0
 8002d5a:	201d      	movs	r0, #29
 8002d5c:	f001 fba9 	bl	80044b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d60:	201d      	movs	r0, #29
 8002d62:	f001 fbc2 	bl	80044ea <HAL_NVIC_EnableIRQ>
}
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40000400 	.word	0x40000400

08002d78 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d7c:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <MX_USART1_UART_Init+0x58>)
 8002d7e:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <MX_USART1_UART_Init+0x5c>)
 8002d80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d82:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <MX_USART1_UART_Init+0x58>)
 8002d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d8a:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <MX_USART1_UART_Init+0x58>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <MX_USART1_UART_Init+0x58>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <MX_USART1_UART_Init+0x58>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <MX_USART1_UART_Init+0x58>)
 8002d9e:	220c      	movs	r2, #12
 8002da0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002da2:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <MX_USART1_UART_Init+0x58>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <MX_USART1_UART_Init+0x58>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dae:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <MX_USART1_UART_Init+0x58>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <MX_USART1_UART_Init+0x58>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dba:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <MX_USART1_UART_Init+0x58>)
 8002dbc:	f004 fe76 	bl	8007aac <HAL_UART_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002dc6:	f7ff fd1d 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000610 	.word	0x20000610
 8002dd4:	40013800 	.word	0x40013800

08002dd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2f      	ldr	r2, [pc, #188]	; (8002eb4 <HAL_UART_MspInit+0xdc>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d158      	bne.n	8002eac <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dfa:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <HAL_UART_MspInit+0xe0>)
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	4a2e      	ldr	r2, [pc, #184]	; (8002eb8 <HAL_UART_MspInit+0xe0>)
 8002e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e04:	6193      	str	r3, [r2, #24]
 8002e06:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <HAL_UART_MspInit+0xe0>)
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e12:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <HAL_UART_MspInit+0xe0>)
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	4a28      	ldr	r2, [pc, #160]	; (8002eb8 <HAL_UART_MspInit+0xe0>)
 8002e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e1c:	6153      	str	r3, [r2, #20]
 8002e1e:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <HAL_UART_MspInit+0xe0>)
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	2302      	movs	r3, #2
 8002e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e3c:	2307      	movs	r3, #7
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	4619      	mov	r1, r3
 8002e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e4a:	f001 ff73 	bl	8004d34 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002e4e:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <HAL_UART_MspInit+0xe4>)
 8002e50:	4a1b      	ldr	r2, [pc, #108]	; (8002ec0 <HAL_UART_MspInit+0xe8>)
 8002e52:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e54:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_UART_MspInit+0xe4>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e5a:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <HAL_UART_MspInit+0xe4>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e60:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <HAL_UART_MspInit+0xe4>)
 8002e62:	2280      	movs	r2, #128	; 0x80
 8002e64:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_UART_MspInit+0xe4>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e6c:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <HAL_UART_MspInit+0xe4>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002e72:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_UART_MspInit+0xe4>)
 8002e74:	2220      	movs	r2, #32
 8002e76:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e78:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_UART_MspInit+0xe4>)
 8002e7a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002e7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002e80:	480e      	ldr	r0, [pc, #56]	; (8002ebc <HAL_UART_MspInit+0xe4>)
 8002e82:	f001 fb50 	bl	8004526 <HAL_DMA_Init>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 8002e8c:	f7ff fcba 	bl	8002804 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_UART_MspInit+0xe4>)
 8002e94:	675a      	str	r2, [r3, #116]	; 0x74
 8002e96:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <HAL_UART_MspInit+0xe4>)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	2025      	movs	r0, #37	; 0x25
 8002ea2:	f001 fb06 	bl	80044b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ea6:	2025      	movs	r0, #37	; 0x25
 8002ea8:	f001 fb1f 	bl	80044ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002eac:	bf00      	nop
 8002eae:	3728      	adds	r7, #40	; 0x28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40013800 	.word	0x40013800
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	20000698 	.word	0x20000698
 8002ec0:	40020058 	.word	0x40020058

08002ec4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002efc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ec8:	f7ff fe6a 	bl	8002ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ecc:	480c      	ldr	r0, [pc, #48]	; (8002f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ece:	490d      	ldr	r1, [pc, #52]	; (8002f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	; (8002f08 <LoopForever+0xe>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed4:	e002      	b.n	8002edc <LoopCopyDataInit>

08002ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eda:	3304      	adds	r3, #4

08002edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee0:	d3f9      	bcc.n	8002ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ee4:	4c0a      	ldr	r4, [pc, #40]	; (8002f10 <LoopForever+0x16>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee8:	e001      	b.n	8002eee <LoopFillZerobss>

08002eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eec:	3204      	adds	r2, #4

08002eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef0:	d3fb      	bcc.n	8002eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ef2:	f005 ffa7 	bl	8008e44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ef6:	f7fd fc13 	bl	8000720 <main>

08002efa <LoopForever>:

LoopForever:
    b LoopForever
 8002efa:	e7fe      	b.n	8002efa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002efc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f04:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002f08:	08008ee4 	.word	0x08008ee4
  ldr r2, =_sbss
 8002f0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002f10:	20000700 	.word	0x20000700

08002f14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f14:	e7fe      	b.n	8002f14 <ADC1_IRQHandler>
	...

08002f18 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f1c:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_Init+0x28>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <HAL_Init+0x28>)
 8002f22:	f043 0310 	orr.w	r3, r3, #16
 8002f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f28:	2003      	movs	r0, #3
 8002f2a:	f001 fab7 	bl	800449c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f000 f808 	bl	8002f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f34:	f7ff fd82 	bl	8002a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40022000 	.word	0x40022000

08002f44 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f4c:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <HAL_InitTick+0x54>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_InitTick+0x58>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	4619      	mov	r1, r3
 8002f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 fad3 	bl	800450e <HAL_SYSTICK_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e00e      	b.n	8002f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b0f      	cmp	r3, #15
 8002f76:	d80a      	bhi.n	8002f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f80:	f001 fa97 	bl	80044b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f84:	4a06      	ldr	r2, [pc, #24]	; (8002fa0 <HAL_InitTick+0x5c>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e000      	b.n	8002f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20000004 	.word	0x20000004
 8002f9c:	2000000c 	.word	0x2000000c
 8002fa0:	20000008 	.word	0x20000008

08002fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_IncTick+0x20>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	2000000c 	.word	0x2000000c
 8002fc8:	200006dc 	.word	0x200006dc

08002fcc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return uwTick;  
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_GetTick+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	200006dc 	.word	0x200006dc

08002fe4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff ffee 	bl	8002fcc <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d005      	beq.n	800300a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_Delay+0x44>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800300a:	bf00      	nop
 800300c:	f7ff ffde 	bl	8002fcc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	429a      	cmp	r2, r3
 800301a:	d8f7      	bhi.n	800300c <HAL_Delay+0x28>
  {
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	2000000c 	.word	0x2000000c

0800302c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e0be      	b.n	80031cc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	2b00      	cmp	r3, #0
 800305a:	d109      	bne.n	8003070 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fd f916 	bl	800029c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fa9b 	bl	80035ac <ADC_ConversionStop_Disable>
 8003076:	4603      	mov	r3, r0
 8003078:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	f040 8099 	bne.w	80031ba <HAL_ADC_Init+0x18e>
 8003088:	7dfb      	ldrb	r3, [r7, #23]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f040 8095 	bne.w	80031ba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003098:	f023 0302 	bic.w	r3, r3, #2
 800309c:	f043 0202 	orr.w	r2, r3, #2
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 80030ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	7b1b      	ldrb	r3, [r3, #12]
 80030b2:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 80030b4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c4:	d003      	beq.n	80030ce <HAL_ADC_Init+0xa2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d102      	bne.n	80030d4 <HAL_ADC_Init+0xa8>
 80030ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030d2:	e000      	b.n	80030d6 <HAL_ADC_Init+0xaa>
 80030d4:	2300      	movs	r3, #0
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	7d1b      	ldrb	r3, [r3, #20]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d119      	bne.n	8003118 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	7b1b      	ldrb	r3, [r3, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d109      	bne.n	8003100 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	e00b      	b.n	8003118 <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	f043 0201 	orr.w	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	430a      	orrs	r2, r1
 800312a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	4b28      	ldr	r3, [pc, #160]	; (80031d4 <HAL_ADC_Init+0x1a8>)
 8003134:	4013      	ands	r3, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	430b      	orrs	r3, r1
 800313e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003148:	d003      	beq.n	8003152 <HAL_ADC_Init+0x126>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d104      	bne.n	800315c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	3b01      	subs	r3, #1
 8003158:	051b      	lsls	r3, r3, #20
 800315a:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	430a      	orrs	r2, r1
 800316e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <HAL_ADC_Init+0x1ac>)
 8003178:	4013      	ands	r3, r2
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	429a      	cmp	r2, r3
 800317e:	d10b      	bne.n	8003198 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	f023 0303 	bic.w	r3, r3, #3
 800318e:	f043 0201 	orr.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003196:	e018      	b.n	80031ca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	f023 0312 	bic.w	r3, r3, #18
 80031a0:	f043 0210 	orr.w	r2, r3, #16
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	f043 0201 	orr.w	r2, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80031b8:	e007      	b.n	80031ca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	f043 0210 	orr.w	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	ffe1f7fd 	.word	0xffe1f7fd
 80031d8:	ff1f0efe 	.word	0xff1f0efe

080031dc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_ADCEx_Calibration_Start+0x1e>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e08a      	b.n	8003310 <HAL_ADCEx_Calibration_Start+0x134>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f9d2 	bl	80035ac <ADC_ConversionStop_Disable>
 8003208:	4603      	mov	r3, r0
 800320a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d179      	bne.n	8003306 <HAL_ADCEx_Calibration_Start+0x12a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800321a:	f023 0302 	bic.w	r3, r3, #2
 800321e:	f043 0202 	orr.w	r2, r3, #2
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Wait two ADC clock cycles */
    while(wait_loop_index < ADC_CYCLE_WORST_CASE_CPU_CYCLES *2U)
 8003226:	e002      	b.n	800322e <HAL_ADCEx_Calibration_Start+0x52>
    {
      wait_loop_index++;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3301      	adds	r3, #1
 800322c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index < ADC_CYCLE_WORST_CASE_CPU_CYCLES *2U)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2bff      	cmp	r3, #255	; 0xff
 8003232:	d9f9      	bls.n	8003228 <HAL_ADCEx_Calibration_Start+0x4c>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f95f 	bl	80034f8 <ADC_Enable>
    

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 0208 	orr.w	r2, r2, #8
 8003248:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800324a:	f7ff febf 	bl	8002fcc <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003250:	e01b      	b.n	800328a <HAL_ADCEx_Calibration_Start+0xae>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003252:	f7ff febb 	bl	8002fcc <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b0a      	cmp	r3, #10
 800325e:	d914      	bls.n	800328a <HAL_ADCEx_Calibration_Start+0xae>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b08      	cmp	r3, #8
 800326c:	d10d      	bne.n	800328a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	f023 0312 	bic.w	r3, r3, #18
 8003276:	f043 0210 	orr.w	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e042      	b.n	8003310 <HAL_ADCEx_Calibration_Start+0x134>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b08      	cmp	r3, #8
 8003296:	d0dc      	beq.n	8003252 <HAL_ADCEx_Calibration_Start+0x76>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0204 	orr.w	r2, r2, #4
 80032a6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80032a8:	f7ff fe90 	bl	8002fcc <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80032ae:	e01b      	b.n	80032e8 <HAL_ADCEx_Calibration_Start+0x10c>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80032b0:	f7ff fe8c 	bl	8002fcc <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b0a      	cmp	r3, #10
 80032bc:	d914      	bls.n	80032e8 <HAL_ADCEx_Calibration_Start+0x10c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d10d      	bne.n	80032e8 <HAL_ADCEx_Calibration_Start+0x10c>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	f023 0312 	bic.w	r3, r3, #18
 80032d4:	f043 0210 	orr.w	r2, r3, #16
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;            
 80032e4:	2301      	movs	r3, #1
 80032e6:	e013      	b.n	8003310 <HAL_ADCEx_Calibration_Start+0x134>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d0dc      	beq.n	80032b0 <HAL_ADCEx_Calibration_Start+0xd4>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	f023 0303 	bic.w	r3, r3, #3
 80032fe:	f043 0201 	orr.w	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800330e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x20>
 8003334:	2302      	movs	r3, #2
 8003336:	e0d2      	b.n	80034de <HAL_ADC_ConfigChannel+0x1c6>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b06      	cmp	r3, #6
 8003346:	d81c      	bhi.n	8003382 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	3b05      	subs	r3, #5
 800335a:	221f      	movs	r2, #31
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	4019      	ands	r1, r3
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	3b05      	subs	r3, #5
 8003374:	fa00 f203 	lsl.w	r2, r0, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	635a      	str	r2, [r3, #52]	; 0x34
 8003380:	e03c      	b.n	80033fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d81c      	bhi.n	80033c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	3b23      	subs	r3, #35	; 0x23
 800339c:	221f      	movs	r2, #31
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	4019      	ands	r1, r3
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	3b23      	subs	r3, #35	; 0x23
 80033b6:	fa00 f203 	lsl.w	r2, r0, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	631a      	str	r2, [r3, #48]	; 0x30
 80033c2:	e01b      	b.n	80033fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	3b41      	subs	r3, #65	; 0x41
 80033d6:	221f      	movs	r2, #31
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	4019      	ands	r1, r3
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	3b41      	subs	r3, #65	; 0x41
 80033f0:	fa00 f203 	lsl.w	r2, r0, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b0a      	cmp	r3, #10
 8003402:	d91c      	bls.n	800343e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68d9      	ldr	r1, [r3, #12]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	3b1e      	subs	r3, #30
 8003416:	2207      	movs	r2, #7
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	4019      	ands	r1, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6898      	ldr	r0, [r3, #8]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	3b1e      	subs	r3, #30
 8003430:	fa00 f203 	lsl.w	r2, r0, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	60da      	str	r2, [r3, #12]
 800343c:	e019      	b.n	8003472 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6919      	ldr	r1, [r3, #16]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4613      	mov	r3, r2
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4413      	add	r3, r2
 800344e:	2207      	movs	r2, #7
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	4019      	ands	r1, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6898      	ldr	r0, [r3, #8]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	fa00 f203 	lsl.w	r2, r0, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b10      	cmp	r3, #16
 8003478:	d003      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800347e:	2b11      	cmp	r3, #17
 8003480:	d11e      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003490:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b10      	cmp	r3, #16
 8003498:	d11c      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800349a:	4b14      	ldr	r3, [pc, #80]	; (80034ec <HAL_ADC_ConfigChannel+0x1d4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <HAL_ADC_ConfigChannel+0x1d8>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	0c9a      	lsrs	r2, r3, #18
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 80034b0:	e002      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f9      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80034be:	e009      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b12      	cmp	r3, #18
 80034c6:	d105      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 80034c8:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <HAL_ADC_ConfigChannel+0x1dc>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <HAL_ADC_ConfigChannel+0x1dc>)
 80034ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d2:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000004 	.word	0x20000004
 80034f0:	431bde83 	.word	0x431bde83
 80034f4:	40010000 	.word	0x40010000

080034f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b01      	cmp	r3, #1
 8003514:	d040      	beq.n	8003598 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0201 	orr.w	r2, r2, #1
 8003524:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003526:	4b1f      	ldr	r3, [pc, #124]	; (80035a4 <ADC_Enable+0xac>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1f      	ldr	r2, [pc, #124]	; (80035a8 <ADC_Enable+0xb0>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	0c9b      	lsrs	r3, r3, #18
 8003532:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003534:	e002      	b.n	800353c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	3b01      	subs	r3, #1
 800353a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f9      	bne.n	8003536 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003542:	f7ff fd43 	bl	8002fcc <HAL_GetTick>
 8003546:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003548:	e01f      	b.n	800358a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800354a:	f7ff fd3f 	bl	8002fcc <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d918      	bls.n	800358a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b01      	cmp	r3, #1
 8003564:	d011      	beq.n	800358a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	f043 0210 	orr.w	r2, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	f043 0201 	orr.w	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e007      	b.n	800359a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d1d8      	bne.n	800354a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000004 	.word	0x20000004
 80035a8:	431bde83 	.word	0x431bde83

080035ac <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d12e      	bne.n	8003624 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0201 	bic.w	r2, r2, #1
 80035d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035d6:	f7ff fcf9 	bl	8002fcc <HAL_GetTick>
 80035da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035dc:	e01b      	b.n	8003616 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035de:	f7ff fcf5 	bl	8002fcc <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d914      	bls.n	8003616 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d10d      	bne.n	8003616 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	f043 0210 	orr.w	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	f043 0201 	orr.w	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e007      	b.n	8003626 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b01      	cmp	r3, #1
 8003622:	d0dc      	beq.n	80035de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0ed      	b.n	800381c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7fc fefb 	bl	8000448 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003662:	f7ff fcb3 	bl	8002fcc <HAL_GetTick>
 8003666:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003668:	e012      	b.n	8003690 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800366a:	f7ff fcaf 	bl	8002fcc <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b0a      	cmp	r3, #10
 8003676:	d90b      	bls.n	8003690 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2205      	movs	r2, #5
 8003688:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0c5      	b.n	800381c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0e5      	beq.n	800366a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0202 	bic.w	r2, r2, #2
 80036ac:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036ae:	f7ff fc8d 	bl	8002fcc <HAL_GetTick>
 80036b2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036b4:	e012      	b.n	80036dc <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036b6:	f7ff fc89 	bl	8002fcc <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b0a      	cmp	r3, #10
 80036c2:	d90b      	bls.n	80036dc <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2205      	movs	r2, #5
 80036d4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e09f      	b.n	800381c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e5      	bne.n	80036b6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	7e1b      	ldrb	r3, [r3, #24]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d108      	bne.n	8003704 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e007      	b.n	8003714 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003712:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7e5b      	ldrb	r3, [r3, #25]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d108      	bne.n	800372e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	e007      	b.n	800373e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800373c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	7e9b      	ldrb	r3, [r3, #26]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d108      	bne.n	8003758 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0220 	orr.w	r2, r2, #32
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	e007      	b.n	8003768 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0220 	bic.w	r2, r2, #32
 8003766:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	7edb      	ldrb	r3, [r3, #27]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d108      	bne.n	8003782 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0210 	bic.w	r2, r2, #16
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	e007      	b.n	8003792 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0210 	orr.w	r2, r2, #16
 8003790:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	7f1b      	ldrb	r3, [r3, #28]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d108      	bne.n	80037ac <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0208 	orr.w	r2, r2, #8
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	e007      	b.n	80037bc <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0208 	bic.w	r2, r2, #8
 80037ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	7f5b      	ldrb	r3, [r3, #29]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d108      	bne.n	80037d6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0204 	orr.w	r2, r2, #4
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e007      	b.n	80037e6 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0204 	bic.w	r2, r2, #4
 80037e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	ea42 0103 	orr.w	r1, r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	1e5a      	subs	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800383a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800383c:	7cfb      	ldrb	r3, [r7, #19]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d003      	beq.n	800384a <HAL_CAN_ConfigFilter+0x26>
 8003842:	7cfb      	ldrb	r3, [r7, #19]
 8003844:	2b02      	cmp	r3, #2
 8003846:	f040 80aa 	bne.w	800399e <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003850:	f043 0201 	orr.w	r2, r3, #1
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 031f 	and.w	r3, r3, #31
 8003862:	2201      	movs	r2, #1
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	43db      	mvns	r3, r3
 8003874:	401a      	ands	r2, r3
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d123      	bne.n	80038cc <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	43db      	mvns	r3, r3
 800388e:	401a      	ands	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80038a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	3248      	adds	r2, #72	; 0x48
 80038ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038c2:	6979      	ldr	r1, [r7, #20]
 80038c4:	3348      	adds	r3, #72	; 0x48
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	440b      	add	r3, r1
 80038ca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d122      	bne.n	800391a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	431a      	orrs	r2, r3
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80038f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	3248      	adds	r2, #72	; 0x48
 80038fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800390e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003910:	6979      	ldr	r1, [r7, #20]
 8003912:	3348      	adds	r3, #72	; 0x48
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	43db      	mvns	r3, r3
 800392c:	401a      	ands	r2, r3
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003934:	e007      	b.n	8003946 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	431a      	orrs	r2, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	43db      	mvns	r3, r3
 8003958:	401a      	ands	r2, r3
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003960:	e007      	b.n	8003972 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	431a      	orrs	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d107      	bne.n	800398a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	431a      	orrs	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003990:	f023 0201 	bic.w	r2, r3, #1
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e006      	b.n	80039ac <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
  }
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d12e      	bne.n	8003a2a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039e4:	f7ff faf2 	bl	8002fcc <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80039ea:	e012      	b.n	8003a12 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039ec:	f7ff faee 	bl	8002fcc <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b0a      	cmp	r3, #10
 80039f8:	d90b      	bls.n	8003a12 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2205      	movs	r2, #5
 8003a0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e012      	b.n	8003a38 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e5      	bne.n	80039ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e006      	b.n	8003a38 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
  }
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b089      	sub	sp, #36	; 0x24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a54:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a5e:	7ffb      	ldrb	r3, [r7, #31]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d003      	beq.n	8003a6c <HAL_CAN_AddTxMessage+0x2c>
 8003a64:	7ffb      	ldrb	r3, [r7, #31]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	f040 80ad 	bne.w	8003bc6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10a      	bne.n	8003a8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d105      	bne.n	8003a8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8095 	beq.w	8003bb6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	0e1b      	lsrs	r3, r3, #24
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003a96:	2201      	movs	r2, #1
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10d      	bne.n	8003ac4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003ab2:	68f9      	ldr	r1, [r7, #12]
 8003ab4:	6809      	ldr	r1, [r1, #0]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	3318      	adds	r3, #24
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	440b      	add	r3, r1
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e00f      	b.n	8003ae4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ace:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ad4:	68f9      	ldr	r1, [r7, #12]
 8003ad6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003ad8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	3318      	adds	r3, #24
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	440b      	add	r3, r1
 8003ae2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6819      	ldr	r1, [r3, #0]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	3318      	adds	r3, #24
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	440b      	add	r3, r1
 8003af4:	3304      	adds	r3, #4
 8003af6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	7d1b      	ldrb	r3, [r3, #20]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d111      	bne.n	8003b24 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	3318      	adds	r3, #24
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	6811      	ldr	r1, [r2, #0]
 8003b14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	3318      	adds	r3, #24
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	440b      	add	r3, r1
 8003b20:	3304      	adds	r3, #4
 8003b22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3307      	adds	r3, #7
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	061a      	lsls	r2, r3, #24
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3306      	adds	r3, #6
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	041b      	lsls	r3, r3, #16
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3305      	adds	r3, #5
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	021b      	lsls	r3, r3, #8
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	3204      	adds	r2, #4
 8003b44:	7812      	ldrb	r2, [r2, #0]
 8003b46:	4610      	mov	r0, r2
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	6811      	ldr	r1, [r2, #0]
 8003b4c:	ea43 0200 	orr.w	r2, r3, r0
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	440b      	add	r3, r1
 8003b56:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003b5a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3303      	adds	r3, #3
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	061a      	lsls	r2, r3, #24
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3302      	adds	r3, #2
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	041b      	lsls	r3, r3, #16
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3301      	adds	r3, #1
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	4313      	orrs	r3, r2
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	7812      	ldrb	r2, [r2, #0]
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	6811      	ldr	r1, [r2, #0]
 8003b82:	ea43 0200 	orr.w	r2, r3, r0
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	440b      	add	r3, r1
 8003b8c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003b90:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	3318      	adds	r3, #24
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	4413      	add	r3, r2
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	6811      	ldr	r1, [r2, #0]
 8003ba4:	f043 0201 	orr.w	r2, r3, #1
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	3318      	adds	r3, #24
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	440b      	add	r3, r1
 8003bb0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e00e      	b.n	8003bd4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e006      	b.n	8003bd4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
  }
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3724      	adds	r7, #36	; 0x24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bf4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d003      	beq.n	8003c04 <HAL_CAN_GetRxMessage+0x24>
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	f040 8103 	bne.w	8003e0a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10e      	bne.n	8003c28 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d116      	bne.n	8003c46 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0f7      	b.n	8003e18 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e0e8      	b.n	8003e18 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	331b      	adds	r3, #27
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	4413      	add	r3, r2
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0204 	and.w	r2, r3, #4
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10c      	bne.n	8003c7e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	331b      	adds	r3, #27
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	4413      	add	r3, r2
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	0d5b      	lsrs	r3, r3, #21
 8003c74:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e00b      	b.n	8003c96 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	331b      	adds	r3, #27
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	4413      	add	r3, r2
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	08db      	lsrs	r3, r3, #3
 8003c8e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	331b      	adds	r3, #27
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	4413      	add	r3, r2
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0202 	and.w	r2, r3, #2
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	331b      	adds	r3, #27
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3304      	adds	r3, #4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2208      	movs	r2, #8
 8003cc8:	611a      	str	r2, [r3, #16]
 8003cca:	e00b      	b.n	8003ce4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	331b      	adds	r3, #27
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3304      	adds	r3, #4
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 020f 	and.w	r2, r3, #15
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	331b      	adds	r3, #27
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	4413      	add	r3, r2
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	331b      	adds	r3, #27
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	4413      	add	r3, r2
 8003d08:	3304      	adds	r3, #4
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	0c1b      	lsrs	r3, r3, #16
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	0a1a      	lsrs	r2, r3, #8
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	0c1a      	lsrs	r2, r3, #16
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	3302      	adds	r3, #2
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	0e1a      	lsrs	r2, r3, #24
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	3303      	adds	r3, #3
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	0a1a      	lsrs	r2, r3, #8
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	3305      	adds	r3, #5
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	0c1a      	lsrs	r2, r3, #16
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	3306      	adds	r3, #6
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	0e1a      	lsrs	r2, r3, #24
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	3307      	adds	r3, #7
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d108      	bne.n	8003df6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0220 	orr.w	r2, r2, #32
 8003df2:	60da      	str	r2, [r3, #12]
 8003df4:	e007      	b.n	8003e06 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0220 	orr.w	r2, r2, #32
 8003e04:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e006      	b.n	8003e18 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
  }
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e34:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d002      	beq.n	8003e42 <HAL_CAN_ActivateNotification+0x1e>
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d109      	bne.n	8003e56 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6959      	ldr	r1, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	e006      	b.n	8003e64 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
  }
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	; 0x28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d07c      	beq.n	8003fb0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d023      	beq.n	8003f08 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f983 	bl	80041de <HAL_CAN_TxMailbox0CompleteCallback>
 8003ed8:	e016      	b.n	8003f08 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
 8003eec:	e00c      	b.n	8003f08 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
 8003f00:	e002      	b.n	8003f08 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f989 	bl	800421a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d024      	beq.n	8003f5c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f1a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f963 	bl	80041f2 <HAL_CAN_TxMailbox1CompleteCallback>
 8003f2c:	e016      	b.n	8003f5c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d004      	beq.n	8003f42 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f40:	e00c      	b.n	8003f5c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d004      	beq.n	8003f56 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
 8003f54:	e002      	b.n	8003f5c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f969 	bl	800422e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d024      	beq.n	8003fb0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f943 	bl	8004206 <HAL_CAN_TxMailbox2CompleteCallback>
 8003f80:	e016      	b.n	8003fb0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d004      	beq.n	8003f96 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
 8003f94:	e00c      	b.n	8003fb0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa8:	e002      	b.n	8003fb0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f949 	bl	8004242 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00c      	beq.n	8003fd4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0310 	and.w	r3, r3, #16
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2210      	movs	r2, #16
 8003fd2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d006      	beq.n	8003ff6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2208      	movs	r2, #8
 8003fee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f930 	bl	8004256 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d009      	beq.n	8004014 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fe fa76 	bl	8002500 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00c      	beq.n	8004038 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	d007      	beq.n	8004038 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800402e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2210      	movs	r2, #16
 8004036:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00b      	beq.n	800405a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d006      	beq.n	800405a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2208      	movs	r2, #8
 8004052:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f912 	bl	800427e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	d009      	beq.n	8004078 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8f9 	bl	800426a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b00      	cmp	r3, #0
 800408a:	d006      	beq.n	800409a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2210      	movs	r2, #16
 8004092:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f8fc 	bl	8004292 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00b      	beq.n	80040bc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d006      	beq.n	80040bc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2208      	movs	r2, #8
 80040b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f8f5 	bl	80042a6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d07b      	beq.n	80041be <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d072      	beq.n	80041b6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	f043 0302 	orr.w	r3, r3, #2
 8004106:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	f043 0304 	orr.w	r3, r3, #4
 8004122:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800412a:	2b00      	cmp	r3, #0
 800412c:	d043      	beq.n	80041b6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004134:	2b00      	cmp	r3, #0
 8004136:	d03e      	beq.n	80041b6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800413e:	2b60      	cmp	r3, #96	; 0x60
 8004140:	d02b      	beq.n	800419a <HAL_CAN_IRQHandler+0x32a>
 8004142:	2b60      	cmp	r3, #96	; 0x60
 8004144:	d82e      	bhi.n	80041a4 <HAL_CAN_IRQHandler+0x334>
 8004146:	2b50      	cmp	r3, #80	; 0x50
 8004148:	d022      	beq.n	8004190 <HAL_CAN_IRQHandler+0x320>
 800414a:	2b50      	cmp	r3, #80	; 0x50
 800414c:	d82a      	bhi.n	80041a4 <HAL_CAN_IRQHandler+0x334>
 800414e:	2b40      	cmp	r3, #64	; 0x40
 8004150:	d019      	beq.n	8004186 <HAL_CAN_IRQHandler+0x316>
 8004152:	2b40      	cmp	r3, #64	; 0x40
 8004154:	d826      	bhi.n	80041a4 <HAL_CAN_IRQHandler+0x334>
 8004156:	2b30      	cmp	r3, #48	; 0x30
 8004158:	d010      	beq.n	800417c <HAL_CAN_IRQHandler+0x30c>
 800415a:	2b30      	cmp	r3, #48	; 0x30
 800415c:	d822      	bhi.n	80041a4 <HAL_CAN_IRQHandler+0x334>
 800415e:	2b10      	cmp	r3, #16
 8004160:	d002      	beq.n	8004168 <HAL_CAN_IRQHandler+0x2f8>
 8004162:	2b20      	cmp	r3, #32
 8004164:	d005      	beq.n	8004172 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004166:	e01d      	b.n	80041a4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	f043 0308 	orr.w	r3, r3, #8
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004170:	e019      	b.n	80041a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	f043 0310 	orr.w	r3, r3, #16
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800417a:	e014      	b.n	80041a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	f043 0320 	orr.w	r3, r3, #32
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004184:	e00f      	b.n	80041a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800418e:	e00a      	b.n	80041a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004198:	e005      	b.n	80041a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041a2:	e000      	b.n	80041a6 <HAL_CAN_IRQHandler+0x336>
            break;
 80041a4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699a      	ldr	r2, [r3, #24]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80041b4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2204      	movs	r2, #4
 80041bc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f872 	bl	80042ba <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80041d6:	bf00      	nop
 80041d8:	3728      	adds	r7, #40	; 0x28
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042e0:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <__NVIC_SetPriorityGrouping+0x44>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042ec:	4013      	ands	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004302:	4a04      	ldr	r2, [pc, #16]	; (8004314 <__NVIC_SetPriorityGrouping+0x44>)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	60d3      	str	r3, [r2, #12]
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	e000ed00 	.word	0xe000ed00

08004318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800431c:	4b04      	ldr	r3, [pc, #16]	; (8004330 <__NVIC_GetPriorityGrouping+0x18>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	0a1b      	lsrs	r3, r3, #8
 8004322:	f003 0307 	and.w	r3, r3, #7
}
 8004326:	4618      	mov	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	2b00      	cmp	r3, #0
 8004344:	db0b      	blt.n	800435e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	f003 021f 	and.w	r2, r3, #31
 800434c:	4907      	ldr	r1, [pc, #28]	; (800436c <__NVIC_EnableIRQ+0x38>)
 800434e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2001      	movs	r0, #1
 8004356:	fa00 f202 	lsl.w	r2, r0, r2
 800435a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	e000e100 	.word	0xe000e100

08004370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	6039      	str	r1, [r7, #0]
 800437a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800437c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004380:	2b00      	cmp	r3, #0
 8004382:	db0a      	blt.n	800439a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	490c      	ldr	r1, [pc, #48]	; (80043bc <__NVIC_SetPriority+0x4c>)
 800438a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438e:	0112      	lsls	r2, r2, #4
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	440b      	add	r3, r1
 8004394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004398:	e00a      	b.n	80043b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	4908      	ldr	r1, [pc, #32]	; (80043c0 <__NVIC_SetPriority+0x50>)
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	3b04      	subs	r3, #4
 80043a8:	0112      	lsls	r2, r2, #4
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	440b      	add	r3, r1
 80043ae:	761a      	strb	r2, [r3, #24]
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	e000e100 	.word	0xe000e100
 80043c0:	e000ed00 	.word	0xe000ed00

080043c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b089      	sub	sp, #36	; 0x24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f1c3 0307 	rsb	r3, r3, #7
 80043de:	2b04      	cmp	r3, #4
 80043e0:	bf28      	it	cs
 80043e2:	2304      	movcs	r3, #4
 80043e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3304      	adds	r3, #4
 80043ea:	2b06      	cmp	r3, #6
 80043ec:	d902      	bls.n	80043f4 <NVIC_EncodePriority+0x30>
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	3b03      	subs	r3, #3
 80043f2:	e000      	b.n	80043f6 <NVIC_EncodePriority+0x32>
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f8:	f04f 32ff 	mov.w	r2, #4294967295
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43da      	mvns	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	401a      	ands	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800440c:	f04f 31ff 	mov.w	r1, #4294967295
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	fa01 f303 	lsl.w	r3, r1, r3
 8004416:	43d9      	mvns	r1, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800441c:	4313      	orrs	r3, r2
         );
}
 800441e:	4618      	mov	r0, r3
 8004420:	3724      	adds	r7, #36	; 0x24
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004430:	f3bf 8f4f 	dsb	sy
}
 8004434:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <__NVIC_SystemReset+0x24>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800443e:	4904      	ldr	r1, [pc, #16]	; (8004450 <__NVIC_SystemReset+0x24>)
 8004440:	4b04      	ldr	r3, [pc, #16]	; (8004454 <__NVIC_SystemReset+0x28>)
 8004442:	4313      	orrs	r3, r2
 8004444:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004446:	f3bf 8f4f 	dsb	sy
}
 800444a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800444c:	bf00      	nop
 800444e:	e7fd      	b.n	800444c <__NVIC_SystemReset+0x20>
 8004450:	e000ed00 	.word	0xe000ed00
 8004454:	05fa0004 	.word	0x05fa0004

08004458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3b01      	subs	r3, #1
 8004464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004468:	d301      	bcc.n	800446e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800446a:	2301      	movs	r3, #1
 800446c:	e00f      	b.n	800448e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800446e:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <SysTick_Config+0x40>)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3b01      	subs	r3, #1
 8004474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004476:	210f      	movs	r1, #15
 8004478:	f04f 30ff 	mov.w	r0, #4294967295
 800447c:	f7ff ff78 	bl	8004370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <SysTick_Config+0x40>)
 8004482:	2200      	movs	r2, #0
 8004484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004486:	4b04      	ldr	r3, [pc, #16]	; (8004498 <SysTick_Config+0x40>)
 8004488:	2207      	movs	r2, #7
 800448a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	e000e010 	.word	0xe000e010

0800449c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff ff13 	bl	80042d0 <__NVIC_SetPriorityGrouping>
}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	4603      	mov	r3, r0
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
 80044be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044c4:	f7ff ff28 	bl	8004318 <__NVIC_GetPriorityGrouping>
 80044c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	6978      	ldr	r0, [r7, #20]
 80044d0:	f7ff ff78 	bl	80043c4 <NVIC_EncodePriority>
 80044d4:	4602      	mov	r2, r0
 80044d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044da:	4611      	mov	r1, r2
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff ff47 	bl	8004370 <__NVIC_SetPriority>
}
 80044e2:	bf00      	nop
 80044e4:	3718      	adds	r7, #24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	4603      	mov	r3, r0
 80044f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff ff1b 	bl	8004334 <__NVIC_EnableIRQ>
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800450a:	f7ff ff8f 	bl	800442c <__NVIC_SystemReset>

0800450e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b082      	sub	sp, #8
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff ff9e 	bl	8004458 <SysTick_Config>
 800451c:	4603      	mov	r3, r0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e037      	b.n	80045ac <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004552:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004556:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800456c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f9bc 	bl	800490c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_DMA_Start_IT+0x20>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e04a      	b.n	800466a <HAL_DMA_Start_IT+0xb6>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d13a      	bne.n	800465c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2202      	movs	r2, #2
 80045ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0201 	bic.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f950 	bl	80048b0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 020e 	orr.w	r2, r2, #14
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	e00f      	b.n	800464a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 020a 	orr.w	r2, r2, #10
 8004638:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0204 	bic.w	r2, r2, #4
 8004648:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0201 	orr.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e005      	b.n	8004668 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004664:	2302      	movs	r3, #2
 8004666:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004668:	7dfb      	ldrb	r3, [r7, #23]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e02e      	b.n	80046e2 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800468a:	2b02      	cmp	r3, #2
 800468c:	d008      	beq.n	80046a0 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2204      	movs	r2, #4
 8004692:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e020      	b.n	80046e2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 020e 	bic.w	r2, r2, #14
 80046ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0201 	bic.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c8:	2101      	movs	r1, #1
 80046ca:	fa01 f202 	lsl.w	r2, r1, r2
 80046ce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004700:	2b02      	cmp	r3, #2
 8004702:	d005      	beq.n	8004710 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2204      	movs	r2, #4
 8004708:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
 800470e:	e027      	b.n	8004760 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 020e 	bic.w	r2, r2, #14
 800471e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0201 	bic.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004738:	2101      	movs	r1, #1
 800473a:	fa01 f202 	lsl.w	r2, r1, r2
 800473e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	4798      	blx	r3
    }
  }
  return status;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	2204      	movs	r2, #4
 8004788:	409a      	lsls	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4013      	ands	r3, r2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d024      	beq.n	80047dc <HAL_DMA_IRQHandler+0x72>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01f      	beq.n	80047dc <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d107      	bne.n	80047ba <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0204 	bic.w	r2, r2, #4
 80047b8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c2:	2104      	movs	r1, #4
 80047c4:	fa01 f202 	lsl.w	r2, r1, r2
 80047c8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d06a      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80047da:	e065      	b.n	80048a8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	2202      	movs	r2, #2
 80047e2:	409a      	lsls	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d02c      	beq.n	8004846 <HAL_DMA_IRQHandler+0xdc>
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d027      	beq.n	8004846 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 020a 	bic.w	r2, r2, #10
 8004812:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004824:	2102      	movs	r1, #2
 8004826:	fa01 f202 	lsl.w	r2, r1, r2
 800482a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	2b00      	cmp	r3, #0
 800483a:	d035      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004844:	e030      	b.n	80048a8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	2208      	movs	r2, #8
 800484c:	409a      	lsls	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4013      	ands	r3, r2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d028      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x13e>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d023      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 020e 	bic.w	r2, r2, #14
 800486e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004878:	2101      	movs	r1, #1
 800487a:	fa01 f202 	lsl.w	r2, r1, r2
 800487e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	2b00      	cmp	r3, #0
 800489c:	d004      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	4798      	blx	r3
    }
  }
}
 80048a6:	e7ff      	b.n	80048a8 <HAL_DMA_IRQHandler+0x13e>
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c6:	2101      	movs	r1, #1
 80048c8:	fa01 f202 	lsl.w	r2, r1, r2
 80048cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	2b10      	cmp	r3, #16
 80048dc:	d108      	bne.n	80048f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048ee:	e007      	b.n	8004900 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	60da      	str	r2, [r3, #12]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	461a      	mov	r2, r3
 800491a:	4b14      	ldr	r3, [pc, #80]	; (800496c <DMA_CalcBaseAndBitshift+0x60>)
 800491c:	429a      	cmp	r2, r3
 800491e:	d80f      	bhi.n	8004940 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	4b12      	ldr	r3, [pc, #72]	; (8004970 <DMA_CalcBaseAndBitshift+0x64>)
 8004928:	4413      	add	r3, r2
 800492a:	4a12      	ldr	r2, [pc, #72]	; (8004974 <DMA_CalcBaseAndBitshift+0x68>)
 800492c:	fba2 2303 	umull	r2, r3, r2, r3
 8004930:	091b      	lsrs	r3, r3, #4
 8004932:	009a      	lsls	r2, r3, #2
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a0f      	ldr	r2, [pc, #60]	; (8004978 <DMA_CalcBaseAndBitshift+0x6c>)
 800493c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800493e:	e00e      	b.n	800495e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	4b0d      	ldr	r3, [pc, #52]	; (800497c <DMA_CalcBaseAndBitshift+0x70>)
 8004948:	4413      	add	r3, r2
 800494a:	4a0a      	ldr	r2, [pc, #40]	; (8004974 <DMA_CalcBaseAndBitshift+0x68>)
 800494c:	fba2 2303 	umull	r2, r3, r2, r3
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	009a      	lsls	r2, r3, #2
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a09      	ldr	r2, [pc, #36]	; (8004980 <DMA_CalcBaseAndBitshift+0x74>)
 800495c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40020407 	.word	0x40020407
 8004970:	bffdfff8 	.word	0xbffdfff8
 8004974:	cccccccd 	.word	0xcccccccd
 8004978:	40020000 	.word	0x40020000
 800497c:	bffdfbf8 	.word	0xbffdfbf8
 8004980:	40020400 	.word	0x40020400

08004984 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800499e:	4b2f      	ldr	r3, [pc, #188]	; (8004a5c <HAL_FLASH_Program+0xd8>)
 80049a0:	7e1b      	ldrb	r3, [r3, #24]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_FLASH_Program+0x26>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e054      	b.n	8004a54 <HAL_FLASH_Program+0xd0>
 80049aa:	4b2c      	ldr	r3, [pc, #176]	; (8004a5c <HAL_FLASH_Program+0xd8>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80049b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80049b4:	f000 f8a8 	bl	8004b08 <FLASH_WaitForLastOperation>
 80049b8:	4603      	mov	r3, r0
 80049ba:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d144      	bne.n	8004a4c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d102      	bne.n	80049ce <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80049c8:	2301      	movs	r3, #1
 80049ca:	757b      	strb	r3, [r7, #21]
 80049cc:	e007      	b.n	80049de <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d102      	bne.n	80049da <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80049d4:	2302      	movs	r3, #2
 80049d6:	757b      	strb	r3, [r7, #21]
 80049d8:	e001      	b.n	80049de <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80049da:	2304      	movs	r3, #4
 80049dc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80049de:	2300      	movs	r3, #0
 80049e0:	75bb      	strb	r3, [r7, #22]
 80049e2:	e02d      	b.n	8004a40 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80049e4:	7dbb      	ldrb	r3, [r7, #22]
 80049e6:	005a      	lsls	r2, r3, #1
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	eb02 0c03 	add.w	ip, r2, r3
 80049ee:	7dbb      	ldrb	r3, [r7, #22]
 80049f0:	0119      	lsls	r1, r3, #4
 80049f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049f6:	f1c1 0620 	rsb	r6, r1, #32
 80049fa:	f1a1 0020 	sub.w	r0, r1, #32
 80049fe:	fa22 f401 	lsr.w	r4, r2, r1
 8004a02:	fa03 f606 	lsl.w	r6, r3, r6
 8004a06:	4334      	orrs	r4, r6
 8004a08:	fa23 f000 	lsr.w	r0, r3, r0
 8004a0c:	4304      	orrs	r4, r0
 8004a0e:	fa23 f501 	lsr.w	r5, r3, r1
 8004a12:	b2a3      	uxth	r3, r4
 8004a14:	4619      	mov	r1, r3
 8004a16:	4660      	mov	r0, ip
 8004a18:	f000 f85a 	bl	8004ad0 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004a20:	f000 f872 	bl	8004b08 <FLASH_WaitForLastOperation>
 8004a24:	4603      	mov	r3, r0
 8004a26:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004a28:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <HAL_FLASH_Program+0xdc>)
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	4a0c      	ldr	r2, [pc, #48]	; (8004a60 <HAL_FLASH_Program+0xdc>)
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d107      	bne.n	8004a4a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004a3a:	7dbb      	ldrb	r3, [r7, #22]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	75bb      	strb	r3, [r7, #22]
 8004a40:	7dba      	ldrb	r2, [r7, #22]
 8004a42:	7d7b      	ldrb	r3, [r7, #21]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d3cd      	bcc.n	80049e4 <HAL_FLASH_Program+0x60>
 8004a48:	e000      	b.n	8004a4c <HAL_FLASH_Program+0xc8>
      {
        break;
 8004a4a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a4c:	4b03      	ldr	r3, [pc, #12]	; (8004a5c <HAL_FLASH_Program+0xd8>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	761a      	strb	r2, [r3, #24]

  return status;
 8004a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a5c:	200006e0 	.word	0x200006e0
 8004a60:	40022000 	.word	0x40022000

08004a64 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <HAL_FLASH_Unlock+0x40>)
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00d      	beq.n	8004a96 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <HAL_FLASH_Unlock+0x40>)
 8004a7c:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <HAL_FLASH_Unlock+0x44>)
 8004a7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a80:	4b08      	ldr	r3, [pc, #32]	; (8004aa4 <HAL_FLASH_Unlock+0x40>)
 8004a82:	4a0a      	ldr	r2, [pc, #40]	; (8004aac <HAL_FLASH_Unlock+0x48>)
 8004a84:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004a86:	4b07      	ldr	r3, [pc, #28]	; (8004aa4 <HAL_FLASH_Unlock+0x40>)
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004a96:	79fb      	ldrb	r3, [r7, #7]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	40022000 	.word	0x40022000
 8004aa8:	45670123 	.word	0x45670123
 8004aac:	cdef89ab 	.word	0xcdef89ab

08004ab0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <HAL_FLASH_Lock+0x1c>)
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	4a04      	ldr	r2, [pc, #16]	; (8004acc <HAL_FLASH_Lock+0x1c>)
 8004aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004abe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	40022000 	.word	0x40022000

08004ad0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004adc:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <FLASH_Program_HalfWord+0x30>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004ae2:	4b08      	ldr	r3, [pc, #32]	; (8004b04 <FLASH_Program_HalfWord+0x34>)
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	4a07      	ldr	r2, [pc, #28]	; (8004b04 <FLASH_Program_HalfWord+0x34>)
 8004ae8:	f043 0301 	orr.w	r3, r3, #1
 8004aec:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	887a      	ldrh	r2, [r7, #2]
 8004af2:	801a      	strh	r2, [r3, #0]
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	200006e0 	.word	0x200006e0
 8004b04:	40022000 	.word	0x40022000

08004b08 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004b10:	f7fe fa5c 	bl	8002fcc <HAL_GetTick>
 8004b14:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004b16:	e010      	b.n	8004b3a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b1e:	d00c      	beq.n	8004b3a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <FLASH_WaitForLastOperation+0x2e>
 8004b26:	f7fe fa51 	bl	8002fcc <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d201      	bcs.n	8004b3a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e01f      	b.n	8004b7a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004b3a:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <FLASH_WaitForLastOperation+0x7c>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d0e8      	beq.n	8004b18 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004b46:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <FLASH_WaitForLastOperation+0x7c>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b20      	cmp	r3, #32
 8004b50:	d102      	bne.n	8004b58 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004b52:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <FLASH_WaitForLastOperation+0x7c>)
 8004b54:	2220      	movs	r2, #32
 8004b56:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004b58:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <FLASH_WaitForLastOperation+0x7c>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d005      	beq.n	8004b70 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004b64:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <FLASH_WaitForLastOperation+0x7c>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d103      	bne.n	8004b78 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004b70:	f000 f80a 	bl	8004b88 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40022000 	.word	0x40022000

08004b88 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004b92:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <FLASH_SetErrorCode+0x5c>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b10      	cmp	r3, #16
 8004b9c:	d109      	bne.n	8004bb2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004b9e:	4b12      	ldr	r3, [pc, #72]	; (8004be8 <FLASH_SetErrorCode+0x60>)
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f043 0302 	orr.w	r3, r3, #2
 8004ba6:	4a10      	ldr	r2, [pc, #64]	; (8004be8 <FLASH_SetErrorCode+0x60>)
 8004ba8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f043 0310 	orr.w	r3, r3, #16
 8004bb0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004bb2:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <FLASH_SetErrorCode+0x5c>)
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d109      	bne.n	8004bd2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004bbe:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <FLASH_SetErrorCode+0x60>)
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	4a08      	ldr	r2, [pc, #32]	; (8004be8 <FLASH_SetErrorCode+0x60>)
 8004bc8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f043 0304 	orr.w	r3, r3, #4
 8004bd0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004bd2:	4a04      	ldr	r2, [pc, #16]	; (8004be4 <FLASH_SetErrorCode+0x5c>)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	60d3      	str	r3, [r2, #12]
}  
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	40022000 	.word	0x40022000
 8004be8:	200006e0 	.word	0x200006e0

08004bec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004bfe:	4b2e      	ldr	r3, [pc, #184]	; (8004cb8 <HAL_FLASHEx_Erase+0xcc>)
 8004c00:	7e1b      	ldrb	r3, [r3, #24]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_FLASHEx_Erase+0x1e>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e052      	b.n	8004cb0 <HAL_FLASHEx_Erase+0xc4>
 8004c0a:	4b2b      	ldr	r3, [pc, #172]	; (8004cb8 <HAL_FLASHEx_Erase+0xcc>)
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d115      	bne.n	8004c44 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004c18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c1c:	f7ff ff74 	bl	8004b08 <FLASH_WaitForLastOperation>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d140      	bne.n	8004ca8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8004c26:	f000 f84b 	bl	8004cc0 <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c2a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c2e:	f7ff ff6b 	bl	8004b08 <FLASH_WaitForLastOperation>
 8004c32:	4603      	mov	r3, r0
 8004c34:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004c36:	4b21      	ldr	r3, [pc, #132]	; (8004cbc <HAL_FLASHEx_Erase+0xd0>)
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	4a20      	ldr	r2, [pc, #128]	; (8004cbc <HAL_FLASHEx_Erase+0xd0>)
 8004c3c:	f023 0304 	bic.w	r3, r3, #4
 8004c40:	6113      	str	r3, [r2, #16]
 8004c42:	e031      	b.n	8004ca8 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004c44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c48:	f7ff ff5e 	bl	8004b08 <FLASH_WaitForLastOperation>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d12a      	bne.n	8004ca8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	f04f 32ff 	mov.w	r2, #4294967295
 8004c58:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	60bb      	str	r3, [r7, #8]
 8004c60:	e019      	b.n	8004c96 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004c62:	68b8      	ldr	r0, [r7, #8]
 8004c64:	f000 f846 	bl	8004cf4 <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c6c:	f7ff ff4c 	bl	8004b08 <FLASH_WaitForLastOperation>
 8004c70:	4603      	mov	r3, r0
 8004c72:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004c74:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <HAL_FLASHEx_Erase+0xd0>)
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	4a10      	ldr	r2, [pc, #64]	; (8004cbc <HAL_FLASHEx_Erase+0xd0>)
 8004c7a:	f023 0302 	bic.w	r3, r3, #2
 8004c7e:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	601a      	str	r2, [r3, #0]
            break;
 8004c8c:	e00c      	b.n	8004ca8 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c94:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	02da      	lsls	r2, r3, #11
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d3dc      	bcc.n	8004c62 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004ca8:	4b03      	ldr	r3, [pc, #12]	; (8004cb8 <HAL_FLASHEx_Erase+0xcc>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	761a      	strb	r2, [r3, #24]

  return status;
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	200006e0 	.word	0x200006e0
 8004cbc:	40022000 	.word	0x40022000

08004cc0 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004cc4:	4b09      	ldr	r3, [pc, #36]	; (8004cec <FLASH_MassErase+0x2c>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004cca:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <FLASH_MassErase+0x30>)
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	4a08      	ldr	r2, [pc, #32]	; (8004cf0 <FLASH_MassErase+0x30>)
 8004cd0:	f043 0304 	orr.w	r3, r3, #4
 8004cd4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004cd6:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <FLASH_MassErase+0x30>)
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	4a05      	ldr	r2, [pc, #20]	; (8004cf0 <FLASH_MassErase+0x30>)
 8004cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ce0:	6113      	str	r3, [r2, #16]
}
 8004ce2:	bf00      	nop
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	200006e0 	.word	0x200006e0
 8004cf0:	40022000 	.word	0x40022000

08004cf4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <FLASH_PageErase+0x38>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004d02:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <FLASH_PageErase+0x3c>)
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	4a0a      	ldr	r2, [pc, #40]	; (8004d30 <FLASH_PageErase+0x3c>)
 8004d08:	f043 0302 	orr.w	r3, r3, #2
 8004d0c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004d0e:	4a08      	ldr	r2, [pc, #32]	; (8004d30 <FLASH_PageErase+0x3c>)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004d14:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <FLASH_PageErase+0x3c>)
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	4a05      	ldr	r2, [pc, #20]	; (8004d30 <FLASH_PageErase+0x3c>)
 8004d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d1e:	6113      	str	r3, [r2, #16]
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	200006e0 	.word	0x200006e0
 8004d30:	40022000 	.word	0x40022000

08004d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d42:	e154      	b.n	8004fee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	2101      	movs	r1, #1
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d50:	4013      	ands	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 8146 	beq.w	8004fe8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d005      	beq.n	8004d74 <HAL_GPIO_Init+0x40>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d130      	bne.n	8004dd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	2203      	movs	r2, #3
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	43db      	mvns	r3, r3
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004daa:	2201      	movs	r2, #1
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43db      	mvns	r3, r3
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4013      	ands	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	091b      	lsrs	r3, r3, #4
 8004dc0:	f003 0201 	and.w	r2, r3, #1
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d017      	beq.n	8004e12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	2203      	movs	r2, #3
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	43db      	mvns	r3, r3
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4013      	ands	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d123      	bne.n	8004e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	08da      	lsrs	r2, r3, #3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3208      	adds	r2, #8
 8004e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	220f      	movs	r2, #15
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	08da      	lsrs	r2, r3, #3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3208      	adds	r2, #8
 8004e60:	6939      	ldr	r1, [r7, #16]
 8004e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	2203      	movs	r2, #3
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	43db      	mvns	r3, r3
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f003 0203 	and.w	r2, r3, #3
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 80a0 	beq.w	8004fe8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ea8:	4b58      	ldr	r3, [pc, #352]	; (800500c <HAL_GPIO_Init+0x2d8>)
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	4a57      	ldr	r2, [pc, #348]	; (800500c <HAL_GPIO_Init+0x2d8>)
 8004eae:	f043 0301 	orr.w	r3, r3, #1
 8004eb2:	6193      	str	r3, [r2, #24]
 8004eb4:	4b55      	ldr	r3, [pc, #340]	; (800500c <HAL_GPIO_Init+0x2d8>)
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	60bb      	str	r3, [r7, #8]
 8004ebe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004ec0:	4a53      	ldr	r2, [pc, #332]	; (8005010 <HAL_GPIO_Init+0x2dc>)
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	089b      	lsrs	r3, r3, #2
 8004ec6:	3302      	adds	r3, #2
 8004ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	220f      	movs	r2, #15
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	43db      	mvns	r3, r3
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004eea:	d019      	beq.n	8004f20 <HAL_GPIO_Init+0x1ec>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a49      	ldr	r2, [pc, #292]	; (8005014 <HAL_GPIO_Init+0x2e0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <HAL_GPIO_Init+0x1e8>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a48      	ldr	r2, [pc, #288]	; (8005018 <HAL_GPIO_Init+0x2e4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00d      	beq.n	8004f18 <HAL_GPIO_Init+0x1e4>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a47      	ldr	r2, [pc, #284]	; (800501c <HAL_GPIO_Init+0x2e8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d007      	beq.n	8004f14 <HAL_GPIO_Init+0x1e0>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a46      	ldr	r2, [pc, #280]	; (8005020 <HAL_GPIO_Init+0x2ec>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d101      	bne.n	8004f10 <HAL_GPIO_Init+0x1dc>
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	e008      	b.n	8004f22 <HAL_GPIO_Init+0x1ee>
 8004f10:	2305      	movs	r3, #5
 8004f12:	e006      	b.n	8004f22 <HAL_GPIO_Init+0x1ee>
 8004f14:	2303      	movs	r3, #3
 8004f16:	e004      	b.n	8004f22 <HAL_GPIO_Init+0x1ee>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e002      	b.n	8004f22 <HAL_GPIO_Init+0x1ee>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <HAL_GPIO_Init+0x1ee>
 8004f20:	2300      	movs	r3, #0
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	f002 0203 	and.w	r2, r2, #3
 8004f28:	0092      	lsls	r2, r2, #2
 8004f2a:	4093      	lsls	r3, r2
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f32:	4937      	ldr	r1, [pc, #220]	; (8005010 <HAL_GPIO_Init+0x2dc>)
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	089b      	lsrs	r3, r3, #2
 8004f38:	3302      	adds	r3, #2
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f40:	4b38      	ldr	r3, [pc, #224]	; (8005024 <HAL_GPIO_Init+0x2f0>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f64:	4a2f      	ldr	r2, [pc, #188]	; (8005024 <HAL_GPIO_Init+0x2f0>)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f6a:	4b2e      	ldr	r3, [pc, #184]	; (8005024 <HAL_GPIO_Init+0x2f0>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	43db      	mvns	r3, r3
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4013      	ands	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f8e:	4a25      	ldr	r2, [pc, #148]	; (8005024 <HAL_GPIO_Init+0x2f0>)
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f94:	4b23      	ldr	r3, [pc, #140]	; (8005024 <HAL_GPIO_Init+0x2f0>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004fb8:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <HAL_GPIO_Init+0x2f0>)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fbe:	4b19      	ldr	r3, [pc, #100]	; (8005024 <HAL_GPIO_Init+0x2f0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004fe2:	4a10      	ldr	r2, [pc, #64]	; (8005024 <HAL_GPIO_Init+0x2f0>)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	3301      	adds	r3, #1
 8004fec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f47f aea3 	bne.w	8004d44 <HAL_GPIO_Init+0x10>
  }
}
 8004ffe:	bf00      	nop
 8005000:	bf00      	nop
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	40021000 	.word	0x40021000
 8005010:	40010000 	.word	0x40010000
 8005014:	48000400 	.word	0x48000400
 8005018:	48000800 	.word	0x48000800
 800501c:	48000c00 	.word	0x48000c00
 8005020:	48001000 	.word	0x48001000
 8005024:	40010400 	.word	0x40010400

08005028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	887b      	ldrh	r3, [r7, #2]
 800503a:	4013      	ands	r3, r2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
 8005044:	e001      	b.n	800504a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005046:	2300      	movs	r3, #0
 8005048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800504a:	7bfb      	ldrb	r3, [r7, #15]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <HAL_PWREx_EnableSDADC+0x38>)
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	4a0a      	ldr	r2, [pc, #40]	; (8005090 <HAL_PWREx_EnableSDADC+0x38>)
 8005066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506a:	61d3      	str	r3, [r2, #28]
 800506c:	4b08      	ldr	r3, [pc, #32]	; (8005090 <HAL_PWREx_EnableSDADC+0x38>)
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8005078:	4b06      	ldr	r3, [pc, #24]	; (8005094 <HAL_PWREx_EnableSDADC+0x3c>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	4905      	ldr	r1, [pc, #20]	; (8005094 <HAL_PWREx_EnableSDADC+0x3c>)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4313      	orrs	r3, r2
 8005082:	600b      	str	r3, [r1, #0]
}
 8005084:	bf00      	nop
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	40021000 	.word	0x40021000
 8005094:	40007000 	.word	0x40007000

08005098 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80050a2:	4b49      	ldr	r3, [pc, #292]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a48      	ldr	r2, [pc, #288]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	6013      	str	r3, [r2, #0]

  /* Insure HSIRDY bit is set before writing default HSITRIM value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80050ae:	f7fd ff8d 	bl	8002fcc <HAL_GetTick>
 80050b2:	60f8      	str	r0, [r7, #12]

  /* Wait till HSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80050b4:	e008      	b.n	80050c8 <HAL_RCC_DeInit+0x30>
  {
    if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050b6:	f7fd ff89 	bl	8002fcc <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e07b      	b.n	80051c0 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80050c8:	4b3f      	ldr	r3, [pc, #252]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0f0      	beq.n	80050b6 <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM default value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, RCC_CR_HSITRIM_4);
 80050d4:	4b3c      	ldr	r3, [pc, #240]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80050dc:	4a3a      	ldr	r2, [pc, #232]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 80050de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e2:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2 | RCC_CFGR_MCO);
 80050e4:	4b38      	ldr	r3, [pc, #224]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	4937      	ldr	r1, [pc, #220]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 80050ea:	4b38      	ldr	r3, [pc, #224]	; (80051cc <HAL_RCC_DeInit+0x134>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	604b      	str	r3, [r1, #4]

  /* Insure HSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80050f0:	f7fd ff6c 	bl	8002fcc <HAL_GetTick>
 80050f4:	60f8      	str	r0, [r7, #12]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80050f6:	e00a      	b.n	800510e <HAL_RCC_DeInit+0x76>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f8:	f7fd ff68 	bl	8002fcc <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	; 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_DeInit+0x76>
    {
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e058      	b.n	80051c0 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800510e:	4b2e      	ldr	r3, [pc, #184]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f003 030c 	and.w	r3, r3, #12
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1ee      	bne.n	80050f8 <HAL_RCC_DeInit+0x60>
    }
  }

  /* Update the SystemCoreClock global variable for HSI as system clock source */
  SystemCoreClock = HSI_VALUE;
 800511a:	4b2d      	ldr	r3, [pc, #180]	; (80051d0 <HAL_RCC_DeInit+0x138>)
 800511c:	4a2d      	ldr	r2, [pc, #180]	; (80051d4 <HAL_RCC_DeInit+0x13c>)
 800511e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8005120:	4b2d      	ldr	r3, [pc, #180]	; (80051d8 <HAL_RCC_DeInit+0x140>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4618      	mov	r0, r3
 8005126:	f7fd ff0d 	bl	8002f44 <HAL_InitTick>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <HAL_RCC_DeInit+0x9c>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e045      	b.n	80051c0 <HAL_RCC_DeInit+0x128>
  }

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 8005134:	4b24      	ldr	r3, [pc, #144]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a23      	ldr	r2, [pc, #140]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 800513a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800513e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005142:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005144:	4b20      	ldr	r3, [pc, #128]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1f      	ldr	r2, [pc, #124]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 800514a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800514e:	6013      	str	r3, [r2, #0]

  /* Insure PLLRDY is reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8005150:	f7fd ff3c 	bl	8002fcc <HAL_GetTick>
 8005154:	60f8      	str	r0, [r7, #12]
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_DeInit+0xd2>
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005158:	f7fd ff38 	bl	8002fcc <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_DeInit+0xd2>
    {
      return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e02a      	b.n	80051c0 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800516a:	4b17      	ldr	r3, [pc, #92]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_DeInit+0xc0>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8005176:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 8005178:	2200      	movs	r2, #0
 800517a:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 800517c:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 800517e:	2200      	movs	r2, #0
 8005180:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 8005182:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8005188:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4a0e      	ldr	r2, [pc, #56]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 800518e:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8005192:	6093      	str	r3, [r2, #8]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8005194:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <HAL_RCC_DeInit+0x130>)
 8005196:	2200      	movs	r2, #0
 8005198:	609a      	str	r2, [r3, #8]
 800519a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800519e:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	fa93 f3a3 	rbit	r3, r3
 80051a6:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80051a8:	687b      	ldr	r3, [r7, #4]

  /* Reset all CSR flags */
  __HAL_RCC_CLEAR_RESET_FLAGS();
 80051aa:	fab3 f383 	clz	r3, r3
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <HAL_RCC_DeInit+0x144>)
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	461a      	mov	r2, r3
 80051ba:	2301      	movs	r3, #1
 80051bc:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40021000 	.word	0x40021000
 80051cc:	f8ffc00c 	.word	0xf8ffc00c
 80051d0:	20000004 	.word	0x20000004
 80051d4:	007a1200 	.word	0x007a1200
 80051d8:	20000008 	.word	0x20000008
 80051dc:	10908120 	.word	0x10908120

080051e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051f0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	f001 b823 	b.w	800624c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 817d 	beq.w	8005516 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800521c:	4bbc      	ldr	r3, [pc, #752]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 030c 	and.w	r3, r3, #12
 8005224:	2b04      	cmp	r3, #4
 8005226:	d00c      	beq.n	8005242 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005228:	4bb9      	ldr	r3, [pc, #740]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 030c 	and.w	r3, r3, #12
 8005230:	2b08      	cmp	r3, #8
 8005232:	d15c      	bne.n	80052ee <HAL_RCC_OscConfig+0x10e>
 8005234:	4bb6      	ldr	r3, [pc, #728]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800523c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005240:	d155      	bne.n	80052ee <HAL_RCC_OscConfig+0x10e>
 8005242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005246:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800524e:	fa93 f3a3 	rbit	r3, r3
 8005252:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8005256:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525a:	fab3 f383 	clz	r3, r3
 800525e:	b2db      	uxtb	r3, r3
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	d102      	bne.n	8005274 <HAL_RCC_OscConfig+0x94>
 800526e:	4ba8      	ldr	r3, [pc, #672]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	e015      	b.n	80052a0 <HAL_RCC_OscConfig+0xc0>
 8005274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005278:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005280:	fa93 f3a3 	rbit	r3, r3
 8005284:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800528c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005290:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005294:	fa93 f3a3 	rbit	r3, r3
 8005298:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800529c:	4b9c      	ldr	r3, [pc, #624]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052a4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80052a8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80052ac:	fa92 f2a2 	rbit	r2, r2
 80052b0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80052b4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80052b8:	fab2 f282 	clz	r2, r2
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	f042 0220 	orr.w	r2, r2, #32
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	f002 021f 	and.w	r2, r2, #31
 80052c8:	2101      	movs	r1, #1
 80052ca:	fa01 f202 	lsl.w	r2, r1, r2
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 811f 	beq.w	8005514 <HAL_RCC_OscConfig+0x334>
 80052d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f040 8116 	bne.w	8005514 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	f000 bfaf 	b.w	800624c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fe:	d106      	bne.n	800530e <HAL_RCC_OscConfig+0x12e>
 8005300:	4b83      	ldr	r3, [pc, #524]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a82      	ldr	r2, [pc, #520]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 8005306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	e036      	b.n	800537c <HAL_RCC_OscConfig+0x19c>
 800530e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005312:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10c      	bne.n	8005338 <HAL_RCC_OscConfig+0x158>
 800531e:	4b7c      	ldr	r3, [pc, #496]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a7b      	ldr	r2, [pc, #492]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 8005324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	4b79      	ldr	r3, [pc, #484]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a78      	ldr	r2, [pc, #480]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 8005330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	e021      	b.n	800537c <HAL_RCC_OscConfig+0x19c>
 8005338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800533c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005348:	d10c      	bne.n	8005364 <HAL_RCC_OscConfig+0x184>
 800534a:	4b71      	ldr	r3, [pc, #452]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a70      	ldr	r2, [pc, #448]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 8005350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	4b6e      	ldr	r3, [pc, #440]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a6d      	ldr	r2, [pc, #436]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e00b      	b.n	800537c <HAL_RCC_OscConfig+0x19c>
 8005364:	4b6a      	ldr	r3, [pc, #424]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a69      	ldr	r2, [pc, #420]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 800536a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	4b67      	ldr	r3, [pc, #412]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a66      	ldr	r2, [pc, #408]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 8005376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800537a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800537c:	4b64      	ldr	r3, [pc, #400]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	f023 020f 	bic.w	r2, r3, #15
 8005384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005388:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	495f      	ldr	r1, [pc, #380]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 8005392:	4313      	orrs	r3, r2
 8005394:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800539a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d059      	beq.n	800545a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a6:	f7fd fe11 	bl	8002fcc <HAL_GetTick>
 80053aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ae:	e00a      	b.n	80053c6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b0:	f7fd fe0c 	bl	8002fcc <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b64      	cmp	r3, #100	; 0x64
 80053be:	d902      	bls.n	80053c6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	f000 bf43 	b.w	800624c <HAL_RCC_OscConfig+0x106c>
 80053c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053ca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80053d2:	fa93 f3a3 	rbit	r3, r3
 80053d6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80053da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053de:	fab3 f383 	clz	r3, r3
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	f043 0301 	orr.w	r3, r3, #1
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d102      	bne.n	80053f8 <HAL_RCC_OscConfig+0x218>
 80053f2:	4b47      	ldr	r3, [pc, #284]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	e015      	b.n	8005424 <HAL_RCC_OscConfig+0x244>
 80053f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053fc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005400:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005404:	fa93 f3a3 	rbit	r3, r3
 8005408:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800540c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005410:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005414:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005418:	fa93 f3a3 	rbit	r3, r3
 800541c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005420:	4b3b      	ldr	r3, [pc, #236]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005428:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800542c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005430:	fa92 f2a2 	rbit	r2, r2
 8005434:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005438:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800543c:	fab2 f282 	clz	r2, r2
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	f042 0220 	orr.w	r2, r2, #32
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	f002 021f 	and.w	r2, r2, #31
 800544c:	2101      	movs	r1, #1
 800544e:	fa01 f202 	lsl.w	r2, r1, r2
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0ab      	beq.n	80053b0 <HAL_RCC_OscConfig+0x1d0>
 8005458:	e05d      	b.n	8005516 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545a:	f7fd fdb7 	bl	8002fcc <HAL_GetTick>
 800545e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005462:	e00a      	b.n	800547a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005464:	f7fd fdb2 	bl	8002fcc <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b64      	cmp	r3, #100	; 0x64
 8005472:	d902      	bls.n	800547a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	f000 bee9 	b.w	800624c <HAL_RCC_OscConfig+0x106c>
 800547a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800547e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005482:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005486:	fa93 f3a3 	rbit	r3, r3
 800548a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800548e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005492:	fab3 f383 	clz	r3, r3
 8005496:	b2db      	uxtb	r3, r3
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	b2db      	uxtb	r3, r3
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d102      	bne.n	80054ac <HAL_RCC_OscConfig+0x2cc>
 80054a6:	4b1a      	ldr	r3, [pc, #104]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	e015      	b.n	80054d8 <HAL_RCC_OscConfig+0x2f8>
 80054ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054b0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80054b8:	fa93 f3a3 	rbit	r3, r3
 80054bc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80054c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054c4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80054c8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80054cc:	fa93 f3a3 	rbit	r3, r3
 80054d0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80054d4:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <HAL_RCC_OscConfig+0x330>)
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054dc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80054e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80054e4:	fa92 f2a2 	rbit	r2, r2
 80054e8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80054ec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80054f0:	fab2 f282 	clz	r2, r2
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	f042 0220 	orr.w	r2, r2, #32
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	f002 021f 	and.w	r2, r2, #31
 8005500:	2101      	movs	r1, #1
 8005502:	fa01 f202 	lsl.w	r2, r1, r2
 8005506:	4013      	ands	r3, r2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1ab      	bne.n	8005464 <HAL_RCC_OscConfig+0x284>
 800550c:	e003      	b.n	8005516 <HAL_RCC_OscConfig+0x336>
 800550e:	bf00      	nop
 8005510:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 817d 	beq.w	8005826 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800552c:	4ba6      	ldr	r3, [pc, #664]	; (80057c8 <HAL_RCC_OscConfig+0x5e8>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f003 030c 	and.w	r3, r3, #12
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00b      	beq.n	8005550 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005538:	4ba3      	ldr	r3, [pc, #652]	; (80057c8 <HAL_RCC_OscConfig+0x5e8>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f003 030c 	and.w	r3, r3, #12
 8005540:	2b08      	cmp	r3, #8
 8005542:	d172      	bne.n	800562a <HAL_RCC_OscConfig+0x44a>
 8005544:	4ba0      	ldr	r3, [pc, #640]	; (80057c8 <HAL_RCC_OscConfig+0x5e8>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d16c      	bne.n	800562a <HAL_RCC_OscConfig+0x44a>
 8005550:	2302      	movs	r3, #2
 8005552:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005556:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800555a:	fa93 f3a3 	rbit	r3, r3
 800555e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8005562:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005566:	fab3 f383 	clz	r3, r3
 800556a:	b2db      	uxtb	r3, r3
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	b2db      	uxtb	r3, r3
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b01      	cmp	r3, #1
 8005578:	d102      	bne.n	8005580 <HAL_RCC_OscConfig+0x3a0>
 800557a:	4b93      	ldr	r3, [pc, #588]	; (80057c8 <HAL_RCC_OscConfig+0x5e8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	e013      	b.n	80055a8 <HAL_RCC_OscConfig+0x3c8>
 8005580:	2302      	movs	r3, #2
 8005582:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005586:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800558a:	fa93 f3a3 	rbit	r3, r3
 800558e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005592:	2302      	movs	r3, #2
 8005594:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005598:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800559c:	fa93 f3a3 	rbit	r3, r3
 80055a0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80055a4:	4b88      	ldr	r3, [pc, #544]	; (80057c8 <HAL_RCC_OscConfig+0x5e8>)
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	2202      	movs	r2, #2
 80055aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80055ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80055b2:	fa92 f2a2 	rbit	r2, r2
 80055b6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80055ba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80055be:	fab2 f282 	clz	r2, r2
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	f042 0220 	orr.w	r2, r2, #32
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	f002 021f 	and.w	r2, r2, #31
 80055ce:	2101      	movs	r1, #1
 80055d0:	fa01 f202 	lsl.w	r2, r1, r2
 80055d4:	4013      	ands	r3, r2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <HAL_RCC_OscConfig+0x410>
 80055da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d002      	beq.n	80055f0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	f000 be2e 	b.w	800624c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f0:	4b75      	ldr	r3, [pc, #468]	; (80057c8 <HAL_RCC_OscConfig+0x5e8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	21f8      	movs	r1, #248	; 0xf8
 8005606:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800560e:	fa91 f1a1 	rbit	r1, r1
 8005612:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005616:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800561a:	fab1 f181 	clz	r1, r1
 800561e:	b2c9      	uxtb	r1, r1
 8005620:	408b      	lsls	r3, r1
 8005622:	4969      	ldr	r1, [pc, #420]	; (80057c8 <HAL_RCC_OscConfig+0x5e8>)
 8005624:	4313      	orrs	r3, r2
 8005626:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005628:	e0fd      	b.n	8005826 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800562a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800562e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 8088 	beq.w	800574c <HAL_RCC_OscConfig+0x56c>
 800563c:	2301      	movs	r3, #1
 800563e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005642:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005646:	fa93 f3a3 	rbit	r3, r3
 800564a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800564e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005652:	fab3 f383 	clz	r3, r3
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800565c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	461a      	mov	r2, r3
 8005664:	2301      	movs	r3, #1
 8005666:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005668:	f7fd fcb0 	bl	8002fcc <HAL_GetTick>
 800566c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005670:	e00a      	b.n	8005688 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005672:	f7fd fcab 	bl	8002fcc <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d902      	bls.n	8005688 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	f000 bde2 	b.w	800624c <HAL_RCC_OscConfig+0x106c>
 8005688:	2302      	movs	r3, #2
 800568a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005692:	fa93 f3a3 	rbit	r3, r3
 8005696:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800569a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569e:	fab3 f383 	clz	r3, r3
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d102      	bne.n	80056b8 <HAL_RCC_OscConfig+0x4d8>
 80056b2:	4b45      	ldr	r3, [pc, #276]	; (80057c8 <HAL_RCC_OscConfig+0x5e8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	e013      	b.n	80056e0 <HAL_RCC_OscConfig+0x500>
 80056b8:	2302      	movs	r3, #2
 80056ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80056c2:	fa93 f3a3 	rbit	r3, r3
 80056c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80056ca:	2302      	movs	r3, #2
 80056cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80056d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80056d4:	fa93 f3a3 	rbit	r3, r3
 80056d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80056dc:	4b3a      	ldr	r3, [pc, #232]	; (80057c8 <HAL_RCC_OscConfig+0x5e8>)
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	2202      	movs	r2, #2
 80056e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80056e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80056ea:	fa92 f2a2 	rbit	r2, r2
 80056ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80056f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80056f6:	fab2 f282 	clz	r2, r2
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	f042 0220 	orr.w	r2, r2, #32
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	f002 021f 	and.w	r2, r2, #31
 8005706:	2101      	movs	r1, #1
 8005708:	fa01 f202 	lsl.w	r2, r1, r2
 800570c:	4013      	ands	r3, r2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0af      	beq.n	8005672 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005712:	4b2d      	ldr	r3, [pc, #180]	; (80057c8 <HAL_RCC_OscConfig+0x5e8>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800571a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800571e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	21f8      	movs	r1, #248	; 0xf8
 8005728:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005730:	fa91 f1a1 	rbit	r1, r1
 8005734:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005738:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800573c:	fab1 f181 	clz	r1, r1
 8005740:	b2c9      	uxtb	r1, r1
 8005742:	408b      	lsls	r3, r1
 8005744:	4920      	ldr	r1, [pc, #128]	; (80057c8 <HAL_RCC_OscConfig+0x5e8>)
 8005746:	4313      	orrs	r3, r2
 8005748:	600b      	str	r3, [r1, #0]
 800574a:	e06c      	b.n	8005826 <HAL_RCC_OscConfig+0x646>
 800574c:	2301      	movs	r3, #1
 800574e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005752:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005756:	fa93 f3a3 	rbit	r3, r3
 800575a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800575e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005762:	fab3 f383 	clz	r3, r3
 8005766:	b2db      	uxtb	r3, r3
 8005768:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800576c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	461a      	mov	r2, r3
 8005774:	2300      	movs	r3, #0
 8005776:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005778:	f7fd fc28 	bl	8002fcc <HAL_GetTick>
 800577c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005780:	e00a      	b.n	8005798 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005782:	f7fd fc23 	bl	8002fcc <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d902      	bls.n	8005798 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	f000 bd5a 	b.w	800624c <HAL_RCC_OscConfig+0x106c>
 8005798:	2302      	movs	r3, #2
 800579a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80057a2:	fa93 f3a3 	rbit	r3, r3
 80057a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80057aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ae:	fab3 f383 	clz	r3, r3
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f043 0301 	orr.w	r3, r3, #1
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d104      	bne.n	80057cc <HAL_RCC_OscConfig+0x5ec>
 80057c2:	4b01      	ldr	r3, [pc, #4]	; (80057c8 <HAL_RCC_OscConfig+0x5e8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	e015      	b.n	80057f4 <HAL_RCC_OscConfig+0x614>
 80057c8:	40021000 	.word	0x40021000
 80057cc:	2302      	movs	r3, #2
 80057ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057d6:	fa93 f3a3 	rbit	r3, r3
 80057da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80057de:	2302      	movs	r3, #2
 80057e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80057e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80057e8:	fa93 f3a3 	rbit	r3, r3
 80057ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80057f0:	4bc8      	ldr	r3, [pc, #800]	; (8005b14 <HAL_RCC_OscConfig+0x934>)
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	2202      	movs	r2, #2
 80057f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80057fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80057fe:	fa92 f2a2 	rbit	r2, r2
 8005802:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005806:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800580a:	fab2 f282 	clz	r2, r2
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	f042 0220 	orr.w	r2, r2, #32
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	f002 021f 	and.w	r2, r2, #31
 800581a:	2101      	movs	r1, #1
 800581c:	fa01 f202 	lsl.w	r2, r1, r2
 8005820:	4013      	ands	r3, r2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1ad      	bne.n	8005782 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800582a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 8110 	beq.w	8005a5c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800583c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005840:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d079      	beq.n	8005940 <HAL_RCC_OscConfig+0x760>
 800584c:	2301      	movs	r3, #1
 800584e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005852:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005856:	fa93 f3a3 	rbit	r3, r3
 800585a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800585e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005862:	fab3 f383 	clz	r3, r3
 8005866:	b2db      	uxtb	r3, r3
 8005868:	461a      	mov	r2, r3
 800586a:	4bab      	ldr	r3, [pc, #684]	; (8005b18 <HAL_RCC_OscConfig+0x938>)
 800586c:	4413      	add	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	461a      	mov	r2, r3
 8005872:	2301      	movs	r3, #1
 8005874:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005876:	f7fd fba9 	bl	8002fcc <HAL_GetTick>
 800587a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800587e:	e00a      	b.n	8005896 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005880:	f7fd fba4 	bl	8002fcc <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d902      	bls.n	8005896 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	f000 bcdb 	b.w	800624c <HAL_RCC_OscConfig+0x106c>
 8005896:	2302      	movs	r3, #2
 8005898:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80058a0:	fa93 f3a3 	rbit	r3, r3
 80058a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80058b0:	2202      	movs	r2, #2
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	fa93 f2a3 	rbit	r2, r3
 80058c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d4:	2202      	movs	r2, #2
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	fa93 f2a3 	rbit	r2, r3
 80058e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058f0:	4b88      	ldr	r3, [pc, #544]	; (8005b14 <HAL_RCC_OscConfig+0x934>)
 80058f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80058fc:	2102      	movs	r1, #2
 80058fe:	6019      	str	r1, [r3, #0]
 8005900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005904:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	fa93 f1a3 	rbit	r1, r3
 800590e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005912:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005916:	6019      	str	r1, [r3, #0]
  return result;
 8005918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800591c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	fab3 f383 	clz	r3, r3
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	2101      	movs	r1, #1
 8005934:	fa01 f303 	lsl.w	r3, r1, r3
 8005938:	4013      	ands	r3, r2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0a0      	beq.n	8005880 <HAL_RCC_OscConfig+0x6a0>
 800593e:	e08d      	b.n	8005a5c <HAL_RCC_OscConfig+0x87c>
 8005940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005944:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005948:	2201      	movs	r2, #1
 800594a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005950:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	fa93 f2a3 	rbit	r2, r3
 800595a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800595e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005962:	601a      	str	r2, [r3, #0]
  return result;
 8005964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005968:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800596c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800596e:	fab3 f383 	clz	r3, r3
 8005972:	b2db      	uxtb	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	4b68      	ldr	r3, [pc, #416]	; (8005b18 <HAL_RCC_OscConfig+0x938>)
 8005978:	4413      	add	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	461a      	mov	r2, r3
 800597e:	2300      	movs	r3, #0
 8005980:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005982:	f7fd fb23 	bl	8002fcc <HAL_GetTick>
 8005986:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800598a:	e00a      	b.n	80059a2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800598c:	f7fd fb1e 	bl	8002fcc <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d902      	bls.n	80059a2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	f000 bc55 	b.w	800624c <HAL_RCC_OscConfig+0x106c>
 80059a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80059aa:	2202      	movs	r2, #2
 80059ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	fa93 f2a3 	rbit	r2, r3
 80059bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80059ce:	2202      	movs	r2, #2
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	fa93 f2a3 	rbit	r2, r3
 80059e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059f2:	2202      	movs	r2, #2
 80059f4:	601a      	str	r2, [r3, #0]
 80059f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	fa93 f2a3 	rbit	r2, r3
 8005a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a08:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005a0c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a0e:	4b41      	ldr	r3, [pc, #260]	; (8005b14 <HAL_RCC_OscConfig+0x934>)
 8005a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a16:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005a1a:	2102      	movs	r1, #2
 8005a1c:	6019      	str	r1, [r3, #0]
 8005a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a22:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	fa93 f1a3 	rbit	r1, r3
 8005a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a30:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005a34:	6019      	str	r1, [r3, #0]
  return result;
 8005a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a3a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	fab3 f383 	clz	r3, r3
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	f003 031f 	and.w	r3, r3, #31
 8005a50:	2101      	movs	r1, #1
 8005a52:	fa01 f303 	lsl.w	r3, r1, r3
 8005a56:	4013      	ands	r3, r2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d197      	bne.n	800598c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 81a1 	beq.w	8005db4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a72:	2300      	movs	r3, #0
 8005a74:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a78:	4b26      	ldr	r3, [pc, #152]	; (8005b14 <HAL_RCC_OscConfig+0x934>)
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d116      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a84:	4b23      	ldr	r3, [pc, #140]	; (8005b14 <HAL_RCC_OscConfig+0x934>)
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	4a22      	ldr	r2, [pc, #136]	; (8005b14 <HAL_RCC_OscConfig+0x934>)
 8005a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a8e:	61d3      	str	r3, [r2, #28]
 8005a90:	4b20      	ldr	r3, [pc, #128]	; (8005b14 <HAL_RCC_OscConfig+0x934>)
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a9c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aa6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005aaa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005aac:	2301      	movs	r3, #1
 8005aae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab2:	4b1a      	ldr	r3, [pc, #104]	; (8005b1c <HAL_RCC_OscConfig+0x93c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d11a      	bne.n	8005af4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005abe:	4b17      	ldr	r3, [pc, #92]	; (8005b1c <HAL_RCC_OscConfig+0x93c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a16      	ldr	r2, [pc, #88]	; (8005b1c <HAL_RCC_OscConfig+0x93c>)
 8005ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aca:	f7fd fa7f 	bl	8002fcc <HAL_GetTick>
 8005ace:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ad2:	e009      	b.n	8005ae8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad4:	f7fd fa7a 	bl	8002fcc <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	2b64      	cmp	r3, #100	; 0x64
 8005ae2:	d901      	bls.n	8005ae8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e3b1      	b.n	800624c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae8:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <HAL_RCC_OscConfig+0x93c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d0ef      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005af8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d10d      	bne.n	8005b20 <HAL_RCC_OscConfig+0x940>
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <HAL_RCC_OscConfig+0x934>)
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	4a02      	ldr	r2, [pc, #8]	; (8005b14 <HAL_RCC_OscConfig+0x934>)
 8005b0a:	f043 0301 	orr.w	r3, r3, #1
 8005b0e:	6213      	str	r3, [r2, #32]
 8005b10:	e03c      	b.n	8005b8c <HAL_RCC_OscConfig+0x9ac>
 8005b12:	bf00      	nop
 8005b14:	40021000 	.word	0x40021000
 8005b18:	10908120 	.word	0x10908120
 8005b1c:	40007000 	.word	0x40007000
 8005b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10c      	bne.n	8005b4a <HAL_RCC_OscConfig+0x96a>
 8005b30:	4bc1      	ldr	r3, [pc, #772]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	4ac0      	ldr	r2, [pc, #768]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005b36:	f023 0301 	bic.w	r3, r3, #1
 8005b3a:	6213      	str	r3, [r2, #32]
 8005b3c:	4bbe      	ldr	r3, [pc, #760]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	4abd      	ldr	r2, [pc, #756]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005b42:	f023 0304 	bic.w	r3, r3, #4
 8005b46:	6213      	str	r3, [r2, #32]
 8005b48:	e020      	b.n	8005b8c <HAL_RCC_OscConfig+0x9ac>
 8005b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	2b05      	cmp	r3, #5
 8005b58:	d10c      	bne.n	8005b74 <HAL_RCC_OscConfig+0x994>
 8005b5a:	4bb7      	ldr	r3, [pc, #732]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	4ab6      	ldr	r2, [pc, #728]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005b60:	f043 0304 	orr.w	r3, r3, #4
 8005b64:	6213      	str	r3, [r2, #32]
 8005b66:	4bb4      	ldr	r3, [pc, #720]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	4ab3      	ldr	r2, [pc, #716]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005b6c:	f043 0301 	orr.w	r3, r3, #1
 8005b70:	6213      	str	r3, [r2, #32]
 8005b72:	e00b      	b.n	8005b8c <HAL_RCC_OscConfig+0x9ac>
 8005b74:	4bb0      	ldr	r3, [pc, #704]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	4aaf      	ldr	r2, [pc, #700]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005b7a:	f023 0301 	bic.w	r3, r3, #1
 8005b7e:	6213      	str	r3, [r2, #32]
 8005b80:	4bad      	ldr	r3, [pc, #692]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	4aac      	ldr	r2, [pc, #688]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005b86:	f023 0304 	bic.w	r3, r3, #4
 8005b8a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 8081 	beq.w	8005ca0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b9e:	f7fd fa15 	bl	8002fcc <HAL_GetTick>
 8005ba2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba6:	e00b      	b.n	8005bc0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ba8:	f7fd fa10 	bl	8002fcc <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e345      	b.n	800624c <HAL_RCC_OscConfig+0x106c>
 8005bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bc4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005bc8:	2202      	movs	r2, #2
 8005bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bd0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	fa93 f2a3 	rbit	r2, r3
 8005bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bde:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005be8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005bec:	2202      	movs	r2, #2
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bf4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	fa93 f2a3 	rbit	r2, r3
 8005bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c02:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005c06:	601a      	str	r2, [r3, #0]
  return result;
 8005c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c0c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005c10:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c12:	fab3 f383 	clz	r3, r3
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	095b      	lsrs	r3, r3, #5
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f043 0302 	orr.w	r3, r3, #2
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d102      	bne.n	8005c2c <HAL_RCC_OscConfig+0xa4c>
 8005c26:	4b84      	ldr	r3, [pc, #528]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	e013      	b.n	8005c54 <HAL_RCC_OscConfig+0xa74>
 8005c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c30:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005c34:	2202      	movs	r2, #2
 8005c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c3c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	fa93 f2a3 	rbit	r2, r3
 8005c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c4a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	4b79      	ldr	r3, [pc, #484]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c58:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	6011      	str	r1, [r2, #0]
 8005c60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c64:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005c68:	6812      	ldr	r2, [r2, #0]
 8005c6a:	fa92 f1a2 	rbit	r1, r2
 8005c6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c72:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005c76:	6011      	str	r1, [r2, #0]
  return result;
 8005c78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005c7c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	fab2 f282 	clz	r2, r2
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	f002 021f 	and.w	r2, r2, #31
 8005c92:	2101      	movs	r1, #1
 8005c94:	fa01 f202 	lsl.w	r2, r1, r2
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d084      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x9c8>
 8005c9e:	e07f      	b.n	8005da0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ca0:	f7fd f994 	bl	8002fcc <HAL_GetTick>
 8005ca4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ca8:	e00b      	b.n	8005cc2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005caa:	f7fd f98f 	bl	8002fcc <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e2c4      	b.n	800624c <HAL_RCC_OscConfig+0x106c>
 8005cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cc6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005cca:	2202      	movs	r2, #2
 8005ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cd2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	fa93 f2a3 	rbit	r2, r3
 8005cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ce0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005cee:	2202      	movs	r2, #2
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cf6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	fa93 f2a3 	rbit	r2, r3
 8005d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005d08:	601a      	str	r2, [r3, #0]
  return result;
 8005d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d0e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005d12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d14:	fab3 f383 	clz	r3, r3
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f043 0302 	orr.w	r3, r3, #2
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d102      	bne.n	8005d2e <HAL_RCC_OscConfig+0xb4e>
 8005d28:	4b43      	ldr	r3, [pc, #268]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	e013      	b.n	8005d56 <HAL_RCC_OscConfig+0xb76>
 8005d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d32:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005d36:	2202      	movs	r2, #2
 8005d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d3e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	fa93 f2a3 	rbit	r2, r3
 8005d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d4c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	4b39      	ldr	r3, [pc, #228]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d5a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005d5e:	2102      	movs	r1, #2
 8005d60:	6011      	str	r1, [r2, #0]
 8005d62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d66:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005d6a:	6812      	ldr	r2, [r2, #0]
 8005d6c:	fa92 f1a2 	rbit	r1, r2
 8005d70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d74:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005d78:	6011      	str	r1, [r2, #0]
  return result;
 8005d7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005d7e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	fab2 f282 	clz	r2, r2
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	f002 021f 	and.w	r2, r2, #31
 8005d94:	2101      	movs	r1, #1
 8005d96:	fa01 f202 	lsl.w	r2, r1, r2
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d184      	bne.n	8005caa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005da0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d105      	bne.n	8005db4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005da8:	4b23      	ldr	r3, [pc, #140]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	4a22      	ldr	r2, [pc, #136]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005db2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005db8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 8242 	beq.w	800624a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dc6:	4b1c      	ldr	r3, [pc, #112]	; (8005e38 <HAL_RCC_OscConfig+0xc58>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f003 030c 	and.w	r3, r3, #12
 8005dce:	2b08      	cmp	r3, #8
 8005dd0:	f000 8213 	beq.w	80061fa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	f040 8162 	bne.w	80060aa <HAL_RCC_OscConfig+0xeca>
 8005de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005dee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005df2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005df8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	fa93 f2a3 	rbit	r2, r3
 8005e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e06:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005e0a:	601a      	str	r2, [r3, #0]
  return result;
 8005e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e10:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005e14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e16:	fab3 f383 	clz	r3, r3
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	461a      	mov	r2, r3
 8005e28:	2300      	movs	r3, #0
 8005e2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2c:	f7fd f8ce 	bl	8002fcc <HAL_GetTick>
 8005e30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e34:	e00c      	b.n	8005e50 <HAL_RCC_OscConfig+0xc70>
 8005e36:	bf00      	nop
 8005e38:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e3c:	f7fd f8c6 	bl	8002fcc <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d901      	bls.n	8005e50 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e1fd      	b.n	800624c <HAL_RCC_OscConfig+0x106c>
 8005e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e54:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e62:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	fa93 f2a3 	rbit	r2, r3
 8005e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e70:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005e74:	601a      	str	r2, [r3, #0]
  return result;
 8005e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e7a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005e7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e80:	fab3 f383 	clz	r3, r3
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	f043 0301 	orr.w	r3, r3, #1
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d102      	bne.n	8005e9a <HAL_RCC_OscConfig+0xcba>
 8005e94:	4bb0      	ldr	r3, [pc, #704]	; (8006158 <HAL_RCC_OscConfig+0xf78>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	e027      	b.n	8005eea <HAL_RCC_OscConfig+0xd0a>
 8005e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005ea2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ea6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	fa93 f2a3 	rbit	r2, r3
 8005eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ec4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ed2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	fa93 f2a3 	rbit	r2, r3
 8005edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ee0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	4b9c      	ldr	r3, [pc, #624]	; (8006158 <HAL_RCC_OscConfig+0xf78>)
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005eee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005ef2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005ef6:	6011      	str	r1, [r2, #0]
 8005ef8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005efc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005f00:	6812      	ldr	r2, [r2, #0]
 8005f02:	fa92 f1a2 	rbit	r1, r2
 8005f06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f0a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005f0e:	6011      	str	r1, [r2, #0]
  return result;
 8005f10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005f14:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005f18:	6812      	ldr	r2, [r2, #0]
 8005f1a:	fab2 f282 	clz	r2, r2
 8005f1e:	b2d2      	uxtb	r2, r2
 8005f20:	f042 0220 	orr.w	r2, r2, #32
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	f002 021f 	and.w	r2, r2, #31
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f30:	4013      	ands	r3, r2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d182      	bne.n	8005e3c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f36:	4b88      	ldr	r3, [pc, #544]	; (8006158 <HAL_RCC_OscConfig+0xf78>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	430b      	orrs	r3, r1
 8005f58:	497f      	ldr	r1, [pc, #508]	; (8006158 <HAL_RCC_OscConfig+0xf78>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	604b      	str	r3, [r1, #4]
 8005f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f62:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005f66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f70:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	fa93 f2a3 	rbit	r2, r3
 8005f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f7e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005f82:	601a      	str	r2, [r3, #0]
  return result;
 8005f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f88:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005f8c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f8e:	fab3 f383 	clz	r3, r3
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa4:	f7fd f812 	bl	8002fcc <HAL_GetTick>
 8005fa8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fac:	e009      	b.n	8005fc2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fae:	f7fd f80d 	bl	8002fcc <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e144      	b.n	800624c <HAL_RCC_OscConfig+0x106c>
 8005fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fc6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005fca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fd4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	fa93 f2a3 	rbit	r2, r3
 8005fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fe2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005fe6:	601a      	str	r2, [r3, #0]
  return result;
 8005fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005ff0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ff2:	fab3 f383 	clz	r3, r3
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	095b      	lsrs	r3, r3, #5
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	f043 0301 	orr.w	r3, r3, #1
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d102      	bne.n	800600c <HAL_RCC_OscConfig+0xe2c>
 8006006:	4b54      	ldr	r3, [pc, #336]	; (8006158 <HAL_RCC_OscConfig+0xf78>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	e027      	b.n	800605c <HAL_RCC_OscConfig+0xe7c>
 800600c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006010:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006014:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800601a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800601e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	fa93 f2a3 	rbit	r2, r3
 8006028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800602c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006036:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800603a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006044:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	fa93 f2a3 	rbit	r2, r3
 800604e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006052:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	4b3f      	ldr	r3, [pc, #252]	; (8006158 <HAL_RCC_OscConfig+0xf78>)
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006060:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006064:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006068:	6011      	str	r1, [r2, #0]
 800606a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800606e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006072:	6812      	ldr	r2, [r2, #0]
 8006074:	fa92 f1a2 	rbit	r1, r2
 8006078:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800607c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006080:	6011      	str	r1, [r2, #0]
  return result;
 8006082:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006086:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800608a:	6812      	ldr	r2, [r2, #0]
 800608c:	fab2 f282 	clz	r2, r2
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	f042 0220 	orr.w	r2, r2, #32
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	f002 021f 	and.w	r2, r2, #31
 800609c:	2101      	movs	r1, #1
 800609e:	fa01 f202 	lsl.w	r2, r1, r2
 80060a2:	4013      	ands	r3, r2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d082      	beq.n	8005fae <HAL_RCC_OscConfig+0xdce>
 80060a8:	e0cf      	b.n	800624a <HAL_RCC_OscConfig+0x106a>
 80060aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060ae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80060b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060bc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	fa93 f2a3 	rbit	r2, r3
 80060c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060ca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80060ce:	601a      	str	r2, [r3, #0]
  return result;
 80060d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060d4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80060d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060da:	fab3 f383 	clz	r3, r3
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80060e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	461a      	mov	r2, r3
 80060ec:	2300      	movs	r3, #0
 80060ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f0:	f7fc ff6c 	bl	8002fcc <HAL_GetTick>
 80060f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060f8:	e009      	b.n	800610e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060fa:	f7fc ff67 	bl	8002fcc <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e09e      	b.n	800624c <HAL_RCC_OscConfig+0x106c>
 800610e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006112:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006116:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800611a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800611c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006120:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	fa93 f2a3 	rbit	r2, r3
 800612a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800612e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006132:	601a      	str	r2, [r3, #0]
  return result;
 8006134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006138:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800613c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800613e:	fab3 f383 	clz	r3, r3
 8006142:	b2db      	uxtb	r3, r3
 8006144:	095b      	lsrs	r3, r3, #5
 8006146:	b2db      	uxtb	r3, r3
 8006148:	f043 0301 	orr.w	r3, r3, #1
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b01      	cmp	r3, #1
 8006150:	d104      	bne.n	800615c <HAL_RCC_OscConfig+0xf7c>
 8006152:	4b01      	ldr	r3, [pc, #4]	; (8006158 <HAL_RCC_OscConfig+0xf78>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	e029      	b.n	80061ac <HAL_RCC_OscConfig+0xfcc>
 8006158:	40021000 	.word	0x40021000
 800615c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006160:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006164:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006168:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800616a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800616e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	fa93 f2a3 	rbit	r2, r3
 8006178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800617c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006186:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800618a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006194:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	fa93 f2a3 	rbit	r2, r3
 800619e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061a2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	4b2b      	ldr	r3, [pc, #172]	; (8006258 <HAL_RCC_OscConfig+0x1078>)
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061b0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80061b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80061b8:	6011      	str	r1, [r2, #0]
 80061ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061be:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	fa92 f1a2 	rbit	r1, r2
 80061c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061cc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80061d0:	6011      	str	r1, [r2, #0]
  return result;
 80061d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061d6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80061da:	6812      	ldr	r2, [r2, #0]
 80061dc:	fab2 f282 	clz	r2, r2
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	f042 0220 	orr.w	r2, r2, #32
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	f002 021f 	and.w	r2, r2, #31
 80061ec:	2101      	movs	r1, #1
 80061ee:	fa01 f202 	lsl.w	r2, r1, r2
 80061f2:	4013      	ands	r3, r2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d180      	bne.n	80060fa <HAL_RCC_OscConfig+0xf1a>
 80061f8:	e027      	b.n	800624a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e01e      	b.n	800624c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800620e:	4b12      	ldr	r3, [pc, #72]	; (8006258 <HAL_RCC_OscConfig+0x1078>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006216:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800621a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800621e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006222:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	429a      	cmp	r2, r3
 800622c:	d10b      	bne.n	8006246 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800622e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006232:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800623a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006242:	429a      	cmp	r2, r3
 8006244:	d001      	beq.n	800624a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	40021000 	.word	0x40021000

0800625c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b09e      	sub	sp, #120	; 0x78
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e162      	b.n	800653a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006274:	4b90      	ldr	r3, [pc, #576]	; (80064b8 <HAL_RCC_ClockConfig+0x25c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d910      	bls.n	80062a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006282:	4b8d      	ldr	r3, [pc, #564]	; (80064b8 <HAL_RCC_ClockConfig+0x25c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f023 0207 	bic.w	r2, r3, #7
 800628a:	498b      	ldr	r1, [pc, #556]	; (80064b8 <HAL_RCC_ClockConfig+0x25c>)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	4313      	orrs	r3, r2
 8006290:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006292:	4b89      	ldr	r3, [pc, #548]	; (80064b8 <HAL_RCC_ClockConfig+0x25c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d001      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e14a      	b.n	800653a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d008      	beq.n	80062c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062b0:	4b82      	ldr	r3, [pc, #520]	; (80064bc <HAL_RCC_ClockConfig+0x260>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	497f      	ldr	r1, [pc, #508]	; (80064bc <HAL_RCC_ClockConfig+0x260>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 80dc 	beq.w	8006488 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d13c      	bne.n	8006352 <HAL_RCC_ClockConfig+0xf6>
 80062d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062e0:	fa93 f3a3 	rbit	r3, r3
 80062e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80062e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062e8:	fab3 f383 	clz	r3, r3
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	f043 0301 	orr.w	r3, r3, #1
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d102      	bne.n	8006302 <HAL_RCC_ClockConfig+0xa6>
 80062fc:	4b6f      	ldr	r3, [pc, #444]	; (80064bc <HAL_RCC_ClockConfig+0x260>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	e00f      	b.n	8006322 <HAL_RCC_ClockConfig+0xc6>
 8006302:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006306:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800630a:	fa93 f3a3 	rbit	r3, r3
 800630e:	667b      	str	r3, [r7, #100]	; 0x64
 8006310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006314:	663b      	str	r3, [r7, #96]	; 0x60
 8006316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006318:	fa93 f3a3 	rbit	r3, r3
 800631c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800631e:	4b67      	ldr	r3, [pc, #412]	; (80064bc <HAL_RCC_ClockConfig+0x260>)
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006326:	65ba      	str	r2, [r7, #88]	; 0x58
 8006328:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800632a:	fa92 f2a2 	rbit	r2, r2
 800632e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006330:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006332:	fab2 f282 	clz	r2, r2
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	f042 0220 	orr.w	r2, r2, #32
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	f002 021f 	and.w	r2, r2, #31
 8006342:	2101      	movs	r1, #1
 8006344:	fa01 f202 	lsl.w	r2, r1, r2
 8006348:	4013      	ands	r3, r2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d17b      	bne.n	8006446 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e0f3      	b.n	800653a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d13c      	bne.n	80063d4 <HAL_RCC_ClockConfig+0x178>
 800635a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800635e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006362:	fa93 f3a3 	rbit	r3, r3
 8006366:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800636a:	fab3 f383 	clz	r3, r3
 800636e:	b2db      	uxtb	r3, r3
 8006370:	095b      	lsrs	r3, r3, #5
 8006372:	b2db      	uxtb	r3, r3
 8006374:	f043 0301 	orr.w	r3, r3, #1
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b01      	cmp	r3, #1
 800637c:	d102      	bne.n	8006384 <HAL_RCC_ClockConfig+0x128>
 800637e:	4b4f      	ldr	r3, [pc, #316]	; (80064bc <HAL_RCC_ClockConfig+0x260>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	e00f      	b.n	80063a4 <HAL_RCC_ClockConfig+0x148>
 8006384:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006388:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800638a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800638c:	fa93 f3a3 	rbit	r3, r3
 8006390:	647b      	str	r3, [r7, #68]	; 0x44
 8006392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006396:	643b      	str	r3, [r7, #64]	; 0x40
 8006398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800639a:	fa93 f3a3 	rbit	r3, r3
 800639e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063a0:	4b46      	ldr	r3, [pc, #280]	; (80064bc <HAL_RCC_ClockConfig+0x260>)
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80063a8:	63ba      	str	r2, [r7, #56]	; 0x38
 80063aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ac:	fa92 f2a2 	rbit	r2, r2
 80063b0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80063b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063b4:	fab2 f282 	clz	r2, r2
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	f042 0220 	orr.w	r2, r2, #32
 80063be:	b2d2      	uxtb	r2, r2
 80063c0:	f002 021f 	and.w	r2, r2, #31
 80063c4:	2101      	movs	r1, #1
 80063c6:	fa01 f202 	lsl.w	r2, r1, r2
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d13a      	bne.n	8006446 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e0b2      	b.n	800653a <HAL_RCC_ClockConfig+0x2de>
 80063d4:	2302      	movs	r3, #2
 80063d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	fa93 f3a3 	rbit	r3, r3
 80063de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e2:	fab3 f383 	clz	r3, r3
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	095b      	lsrs	r3, r3, #5
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	f043 0301 	orr.w	r3, r3, #1
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d102      	bne.n	80063fc <HAL_RCC_ClockConfig+0x1a0>
 80063f6:	4b31      	ldr	r3, [pc, #196]	; (80064bc <HAL_RCC_ClockConfig+0x260>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	e00d      	b.n	8006418 <HAL_RCC_ClockConfig+0x1bc>
 80063fc:	2302      	movs	r3, #2
 80063fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	fa93 f3a3 	rbit	r3, r3
 8006406:	627b      	str	r3, [r7, #36]	; 0x24
 8006408:	2302      	movs	r3, #2
 800640a:	623b      	str	r3, [r7, #32]
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	fa93 f3a3 	rbit	r3, r3
 8006412:	61fb      	str	r3, [r7, #28]
 8006414:	4b29      	ldr	r3, [pc, #164]	; (80064bc <HAL_RCC_ClockConfig+0x260>)
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	2202      	movs	r2, #2
 800641a:	61ba      	str	r2, [r7, #24]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	fa92 f2a2 	rbit	r2, r2
 8006422:	617a      	str	r2, [r7, #20]
  return result;
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	fab2 f282 	clz	r2, r2
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	f042 0220 	orr.w	r2, r2, #32
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	f002 021f 	and.w	r2, r2, #31
 8006436:	2101      	movs	r1, #1
 8006438:	fa01 f202 	lsl.w	r2, r1, r2
 800643c:	4013      	ands	r3, r2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e079      	b.n	800653a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006446:	4b1d      	ldr	r3, [pc, #116]	; (80064bc <HAL_RCC_ClockConfig+0x260>)
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f023 0203 	bic.w	r2, r3, #3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	491a      	ldr	r1, [pc, #104]	; (80064bc <HAL_RCC_ClockConfig+0x260>)
 8006454:	4313      	orrs	r3, r2
 8006456:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006458:	f7fc fdb8 	bl	8002fcc <HAL_GetTick>
 800645c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800645e:	e00a      	b.n	8006476 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006460:	f7fc fdb4 	bl	8002fcc <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	f241 3288 	movw	r2, #5000	; 0x1388
 800646e:	4293      	cmp	r3, r2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e061      	b.n	800653a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006476:	4b11      	ldr	r3, [pc, #68]	; (80064bc <HAL_RCC_ClockConfig+0x260>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f003 020c 	and.w	r2, r3, #12
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	429a      	cmp	r2, r3
 8006486:	d1eb      	bne.n	8006460 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006488:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <HAL_RCC_ClockConfig+0x25c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	429a      	cmp	r2, r3
 8006494:	d214      	bcs.n	80064c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006496:	4b08      	ldr	r3, [pc, #32]	; (80064b8 <HAL_RCC_ClockConfig+0x25c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f023 0207 	bic.w	r2, r3, #7
 800649e:	4906      	ldr	r1, [pc, #24]	; (80064b8 <HAL_RCC_ClockConfig+0x25c>)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a6:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <HAL_RCC_ClockConfig+0x25c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d005      	beq.n	80064c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e040      	b.n	800653a <HAL_RCC_ClockConfig+0x2de>
 80064b8:	40022000 	.word	0x40022000
 80064bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d008      	beq.n	80064de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064cc:	4b1d      	ldr	r3, [pc, #116]	; (8006544 <HAL_RCC_ClockConfig+0x2e8>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	491a      	ldr	r1, [pc, #104]	; (8006544 <HAL_RCC_ClockConfig+0x2e8>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d009      	beq.n	80064fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064ea:	4b16      	ldr	r3, [pc, #88]	; (8006544 <HAL_RCC_ClockConfig+0x2e8>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	4912      	ldr	r1, [pc, #72]	; (8006544 <HAL_RCC_ClockConfig+0x2e8>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80064fe:	f000 f829 	bl	8006554 <HAL_RCC_GetSysClockFreq>
 8006502:	4601      	mov	r1, r0
 8006504:	4b0f      	ldr	r3, [pc, #60]	; (8006544 <HAL_RCC_ClockConfig+0x2e8>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800650c:	22f0      	movs	r2, #240	; 0xf0
 800650e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	fa92 f2a2 	rbit	r2, r2
 8006516:	60fa      	str	r2, [r7, #12]
  return result;
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	fab2 f282 	clz	r2, r2
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	40d3      	lsrs	r3, r2
 8006522:	4a09      	ldr	r2, [pc, #36]	; (8006548 <HAL_RCC_ClockConfig+0x2ec>)
 8006524:	5cd3      	ldrb	r3, [r2, r3]
 8006526:	fa21 f303 	lsr.w	r3, r1, r3
 800652a:	4a08      	ldr	r2, [pc, #32]	; (800654c <HAL_RCC_ClockConfig+0x2f0>)
 800652c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800652e:	4b08      	ldr	r3, [pc, #32]	; (8006550 <HAL_RCC_ClockConfig+0x2f4>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f7fc fd06 	bl	8002f44 <HAL_InitTick>
  
  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3778      	adds	r7, #120	; 0x78
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	40021000 	.word	0x40021000
 8006548:	08008ea4 	.word	0x08008ea4
 800654c:	20000004 	.word	0x20000004
 8006550:	20000008 	.word	0x20000008

08006554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	2300      	movs	r3, #0
 8006560:	60bb      	str	r3, [r7, #8]
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	2300      	movs	r3, #0
 8006568:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800656e:	4b1e      	ldr	r3, [pc, #120]	; (80065e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 030c 	and.w	r3, r3, #12
 800657a:	2b04      	cmp	r3, #4
 800657c:	d002      	beq.n	8006584 <HAL_RCC_GetSysClockFreq+0x30>
 800657e:	2b08      	cmp	r3, #8
 8006580:	d003      	beq.n	800658a <HAL_RCC_GetSysClockFreq+0x36>
 8006582:	e026      	b.n	80065d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006584:	4b19      	ldr	r3, [pc, #100]	; (80065ec <HAL_RCC_GetSysClockFreq+0x98>)
 8006586:	613b      	str	r3, [r7, #16]
      break;
 8006588:	e026      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	0c9b      	lsrs	r3, r3, #18
 800658e:	f003 030f 	and.w	r3, r3, #15
 8006592:	4a17      	ldr	r2, [pc, #92]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006594:	5cd3      	ldrb	r3, [r2, r3]
 8006596:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006598:	4b13      	ldr	r3, [pc, #76]	; (80065e8 <HAL_RCC_GetSysClockFreq+0x94>)
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	4a14      	ldr	r2, [pc, #80]	; (80065f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80065a2:	5cd3      	ldrb	r3, [r2, r3]
 80065a4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d008      	beq.n	80065c2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80065b0:	4a0e      	ldr	r2, [pc, #56]	; (80065ec <HAL_RCC_GetSysClockFreq+0x98>)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	fb02 f303 	mul.w	r3, r2, r3
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	e004      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a0c      	ldr	r2, [pc, #48]	; (80065f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80065c6:	fb02 f303 	mul.w	r3, r2, r3
 80065ca:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	613b      	str	r3, [r7, #16]
      break;
 80065d0:	e002      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80065d2:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <HAL_RCC_GetSysClockFreq+0xa8>)
 80065d4:	613b      	str	r3, [r7, #16]
      break;
 80065d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065d8:	693b      	ldr	r3, [r7, #16]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40021000 	.word	0x40021000
 80065ec:	016e3600 	.word	0x016e3600
 80065f0:	08008ebc 	.word	0x08008ebc
 80065f4:	08008ecc 	.word	0x08008ecc
 80065f8:	003d0900 	.word	0x003d0900
 80065fc:	007a1200 	.word	0x007a1200

08006600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006604:	4b03      	ldr	r3, [pc, #12]	; (8006614 <HAL_RCC_GetHCLKFreq+0x14>)
 8006606:	681b      	ldr	r3, [r3, #0]
}
 8006608:	4618      	mov	r0, r3
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	20000004 	.word	0x20000004

08006618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800661e:	f7ff ffef 	bl	8006600 <HAL_RCC_GetHCLKFreq>
 8006622:	4601      	mov	r1, r0
 8006624:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800662c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006630:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	fa92 f2a2 	rbit	r2, r2
 8006638:	603a      	str	r2, [r7, #0]
  return result;
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	fab2 f282 	clz	r2, r2
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	40d3      	lsrs	r3, r2
 8006644:	4a04      	ldr	r2, [pc, #16]	; (8006658 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006646:	5cd3      	ldrb	r3, [r2, r3]
 8006648:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	40021000 	.word	0x40021000
 8006658:	08008eb4 	.word	0x08008eb4

0800665c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006662:	f7ff ffcd 	bl	8006600 <HAL_RCC_GetHCLKFreq>
 8006666:	4601      	mov	r1, r0
 8006668:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006670:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006674:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	fa92 f2a2 	rbit	r2, r2
 800667c:	603a      	str	r2, [r7, #0]
  return result;
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	fab2 f282 	clz	r2, r2
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	40d3      	lsrs	r3, r2
 8006688:	4a04      	ldr	r2, [pc, #16]	; (800669c <HAL_RCC_GetPCLK2Freq+0x40>)
 800668a:	5cd3      	ldrb	r3, [r2, r3]
 800668c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006690:	4618      	mov	r0, r3
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40021000 	.word	0x40021000
 800669c:	08008eb4 	.word	0x08008eb4

080066a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b092      	sub	sp, #72	; 0x48
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80066b0:	2300      	movs	r3, #0
 80066b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 80d4 	beq.w	800686c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066c4:	4b4e      	ldr	r3, [pc, #312]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10e      	bne.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066d0:	4b4b      	ldr	r3, [pc, #300]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	4a4a      	ldr	r2, [pc, #296]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066da:	61d3      	str	r3, [r2, #28]
 80066dc:	4b48      	ldr	r3, [pc, #288]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e4:	60bb      	str	r3, [r7, #8]
 80066e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066e8:	2301      	movs	r3, #1
 80066ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ee:	4b45      	ldr	r3, [pc, #276]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d118      	bne.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066fa:	4b42      	ldr	r3, [pc, #264]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a41      	ldr	r2, [pc, #260]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006704:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006706:	f7fc fc61 	bl	8002fcc <HAL_GetTick>
 800670a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800670c:	e008      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800670e:	f7fc fc5d 	bl	8002fcc <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b64      	cmp	r3, #100	; 0x64
 800671a:	d901      	bls.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e12d      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006720:	4b38      	ldr	r3, [pc, #224]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006728:	2b00      	cmp	r3, #0
 800672a:	d0f0      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800672c:	4b34      	ldr	r3, [pc, #208]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006734:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 8084 	beq.w	8006846 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006746:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006748:	429a      	cmp	r2, r3
 800674a:	d07c      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800674c:	4b2c      	ldr	r3, [pc, #176]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800675a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	fa93 f3a3 	rbit	r3, r3
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006766:	fab3 f383 	clz	r3, r3
 800676a:	b2db      	uxtb	r3, r3
 800676c:	461a      	mov	r2, r3
 800676e:	4b26      	ldr	r3, [pc, #152]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006770:	4413      	add	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	461a      	mov	r2, r3
 8006776:	2301      	movs	r3, #1
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800677e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	fa93 f3a3 	rbit	r3, r3
 8006786:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800678a:	fab3 f383 	clz	r3, r3
 800678e:	b2db      	uxtb	r3, r3
 8006790:	461a      	mov	r2, r3
 8006792:	4b1d      	ldr	r3, [pc, #116]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	461a      	mov	r2, r3
 800679a:	2300      	movs	r3, #0
 800679c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800679e:	4a18      	ldr	r2, [pc, #96]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80067a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d04b      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ae:	f7fc fc0d 	bl	8002fcc <HAL_GetTick>
 80067b2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067b4:	e00a      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067b6:	f7fc fc09 	bl	8002fcc <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d901      	bls.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e0d7      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80067cc:	2302      	movs	r3, #2
 80067ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d2:	fa93 f3a3 	rbit	r3, r3
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24
 80067d8:	2302      	movs	r3, #2
 80067da:	623b      	str	r3, [r7, #32]
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	fa93 f3a3 	rbit	r3, r3
 80067e2:	61fb      	str	r3, [r7, #28]
  return result;
 80067e4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067e6:	fab3 f383 	clz	r3, r3
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	095b      	lsrs	r3, r3, #5
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	f043 0302 	orr.w	r3, r3, #2
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d108      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80067fa:	4b01      	ldr	r3, [pc, #4]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	e00d      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006800:	40021000 	.word	0x40021000
 8006804:	40007000 	.word	0x40007000
 8006808:	10908100 	.word	0x10908100
 800680c:	2302      	movs	r3, #2
 800680e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	fa93 f3a3 	rbit	r3, r3
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	4b5a      	ldr	r3, [pc, #360]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	2202      	movs	r2, #2
 800681e:	613a      	str	r2, [r7, #16]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	fa92 f2a2 	rbit	r2, r2
 8006826:	60fa      	str	r2, [r7, #12]
  return result;
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	fab2 f282 	clz	r2, r2
 800682e:	b2d2      	uxtb	r2, r2
 8006830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006834:	b2d2      	uxtb	r2, r2
 8006836:	f002 021f 	and.w	r2, r2, #31
 800683a:	2101      	movs	r1, #1
 800683c:	fa01 f202 	lsl.w	r2, r1, r2
 8006840:	4013      	ands	r3, r2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0b7      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006846:	4b4f      	ldr	r3, [pc, #316]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	494c      	ldr	r1, [pc, #304]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006854:	4313      	orrs	r3, r2
 8006856:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006858:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800685c:	2b01      	cmp	r3, #1
 800685e:	d105      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006860:	4b48      	ldr	r3, [pc, #288]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	4a47      	ldr	r2, [pc, #284]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800686a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d008      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006878:	4b42      	ldr	r3, [pc, #264]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800687a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687c:	f023 0203 	bic.w	r2, r3, #3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	493f      	ldr	r1, [pc, #252]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006886:	4313      	orrs	r3, r2
 8006888:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d008      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006896:	4b3b      	ldr	r3, [pc, #236]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	4938      	ldr	r1, [pc, #224]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d008      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068b4:	4b33      	ldr	r3, [pc, #204]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80068b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	4930      	ldr	r1, [pc, #192]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d008      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068d2:	4b2c      	ldr	r3, [pc, #176]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	f023 0210 	bic.w	r2, r3, #16
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	4929      	ldr	r1, [pc, #164]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d008      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80068f0:	4b24      	ldr	r3, [pc, #144]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	4921      	ldr	r1, [pc, #132]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d008      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800690e:	4b1d      	ldr	r3, [pc, #116]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006912:	f023 0220 	bic.w	r2, r3, #32
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	491a      	ldr	r1, [pc, #104]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800691c:	4313      	orrs	r3, r2
 800691e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006928:	2b00      	cmp	r3, #0
 800692a:	d008      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800692c:	4b15      	ldr	r3, [pc, #84]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	4912      	ldr	r1, [pc, #72]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800693a:	4313      	orrs	r3, r2
 800693c:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006946:	2b00      	cmp	r3, #0
 8006948:	d008      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 800694a:	4b0e      	ldr	r3, [pc, #56]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	490b      	ldr	r1, [pc, #44]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006958:	4313      	orrs	r3, r2
 800695a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006964:	2b00      	cmp	r3, #0
 8006966:	d008      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006968:	4b06      	ldr	r3, [pc, #24]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800696a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	4903      	ldr	r1, [pc, #12]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006976:	4313      	orrs	r3, r2
 8006978:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3748      	adds	r7, #72	; 0x48
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	40021000 	.word	0x40021000

08006988 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check SDADC handle */
  if(hsdadc == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e07f      	b.n	8006a9a <HAL_SDADC_Init+0x112>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));

  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	629a      	str	r2, [r3, #40]	; 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	635a      	str	r2, [r3, #52]	; 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	639a      	str	r2, [r3, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7fb ffa7 	bl	800292c <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80069ec:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6819      	ldr	r1, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 80069fc:	431a      	orrs	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006a14:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6859      	ldr	r1, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8006a28:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <HAL_SDADC_Init+0x11c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d00f      	beq.n	8006a58 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8006a38:	4b1a      	ldr	r3, [pc, #104]	; (8006aa4 <HAL_SDADC_Init+0x11c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a19      	ldr	r2, [pc, #100]	; (8006aa4 <HAL_SDADC_Init+0x11c>)
 8006a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a42:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8006a44:	4b17      	ldr	r3, [pc, #92]	; (8006aa4 <HAL_SDADC_Init+0x11c>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	4915      	ldr	r1, [pc, #84]	; (8006aa4 <HAL_SDADC_Init+0x11c>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	600b      	str	r3, [r1, #0]

    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 8006a52:	2002      	movs	r0, #2
 8006a54:	f7fc fac6 	bl	8002fe4 <HAL_Delay>
  }

  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  tickstart = HAL_GetTick();
 8006a68:	f7fc fab0 	bl	8002fcc <HAL_GetTick>
 8006a6c:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8006a6e:	e008      	b.n	8006a82 <HAL_SDADC_Init+0xfa>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8006a70:	f7fc faac 	bl	8002fcc <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2bc8      	cmp	r3, #200	; 0xc8
 8006a7c:	d901      	bls.n	8006a82 <HAL_SDADC_Init+0xfa>
    {
      return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e00b      	b.n	8006a9a <HAL_SDADC_Init+0x112>
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1ef      	bne.n	8006a70 <HAL_SDADC_Init+0xe8>
    }
  }

  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return HAL status */
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	40016000 	.word	0x40016000

08006aa8 <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d002      	beq.n	8006ac8 <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	75fb      	strb	r3, [r7, #23]
 8006ac6:	e025      	b.n	8006b14 <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 fa7d 	bl	8006fc8 <SDADC_EnterInitMode>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d006      	beq.n	8006ae2 <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	22ff      	movs	r2, #255	; 0xff
 8006ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	75fb      	strb	r3, [r7, #23]
 8006ae0:	e018      	b.n	8006b14 <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8006aec:	4413      	add	r3, r2
 8006aee:	3320      	adds	r3, #32
 8006af0:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006afa:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 8006b00:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006b08:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 8006b0a:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006b0c:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 fa7d 	bl	800700e <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d002      	beq.n	8006b40 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	75fb      	strb	r3, [r7, #23]
 8006b3e:	e037      	b.n	8006bb0 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 fa41 	bl	8006fc8 <SDADC_EnterInitMode>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d006      	beq.n	8006b5a <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	22ff      	movs	r2, #255	; 0xff
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	75fb      	strb	r3, [r7, #23]
 8006b58:	e02a      	b.n	8006bb0 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	4a17      	ldr	r2, [pc, #92]	; (8006bbc <HAL_SDADC_AssociateChannelConfig+0x9c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d01f      	beq.n	8006ba2 <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	0c1b      	lsrs	r3, r3, #16
 8006b66:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	f003 031f 	and.w	r3, r3, #31
 8006b76:	2203      	movs	r2, #3
 8006b78:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7c:	43da      	mvns	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	400a      	ands	r2, r1
 8006b84:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	f003 031f 	and.w	r3, r3, #31
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	409a      	lsls	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	641a      	str	r2, [r3, #64]	; 0x40
 8006ba0:	e003      	b.n	8006baa <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	645a      	str	r2, [r3, #68]	; 0x44
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 fa2f 	bl	800700e <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	00080100 	.word	0x00080100

08006bc0 <HAL_SDADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_ConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                          uint32_t Channel,
                                          uint32_t ContinuousMode)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d02a      	beq.n	8006c30 <HAL_SDADC_ConfigChannel+0x70>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006be0:	2bff      	cmp	r3, #255	; 0xff
 8006be2:	d025      	beq.n	8006c30 <HAL_SDADC_ConfigChannel+0x70>
  {
    /* Set RCH[3:0] and RCONT bits in SDADC_CR2 */
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 029e 	bic.w	r2, r2, #5177344	; 0x4f0000
 8006bf2:	605a      	str	r2, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d10c      	bne.n	8006c14 <HAL_SDADC_ConfigChannel+0x54>
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK) | SDADC_CR2_RCONT);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	68b9      	ldr	r1, [r7, #8]
 8006c02:	4b10      	ldr	r3, [pc, #64]	; (8006c44 <HAL_SDADC_ConfigChannel+0x84>)
 8006c04:	400b      	ands	r3, r1
 8006c06:	431a      	orrs	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006c10:	605a      	str	r2, [r3, #4]
 8006c12:	e009      	b.n	8006c28 <HAL_SDADC_ConfigChannel+0x68>
    }
    else
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK));
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6859      	ldr	r1, [r3, #4]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	0c1b      	lsrs	r3, r3, #16
 8006c1e:	041b      	lsls	r3, r3, #16
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	6812      	ldr	r2, [r2, #0]
 8006c24:	430b      	orrs	r3, r1
 8006c26:	6053      	str	r3, [r2, #4]
    }
    /* Store continuous mode information */
    hsdadc->RegularContMode = ContinuousMode;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	619a      	str	r2, [r3, #24]
 8006c2e:	e001      	b.n	8006c34 <HAL_SDADC_ConfigChannel+0x74>
  }
  else
  {
    status = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	371c      	adds	r7, #28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	ffbf0000 	.word	0xffbf0000

08006c48 <HAL_SDADC_InjectedConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                                  uint32_t Channel,
                                                  uint32_t ContinuousMode)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d027      	beq.n	8006cb2 <HAL_SDADC_InjectedConfigChannel+0x6a>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c68:	2bff      	cmp	r3, #255	; 0xff
 8006c6a:	d022      	beq.n	8006cb2 <HAL_SDADC_InjectedConfigChannel+0x6a>
  {
    /* Set JCHG[8:0] bits in SDADC_JCHG */
    hsdadc->Instance->JCHGR = (uint32_t) (Channel & SDADC_LSB_MASK);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	b292      	uxth	r2, r2
 8006c74:	615a      	str	r2, [r3, #20]
    /* Set or clear JCONT bit in SDADC_CR2 */
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d108      	bne.n	8006c8e <HAL_SDADC_InjectedConfigChannel+0x46>
    {
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0220 	orr.w	r2, r2, #32
 8006c8a:	605a      	str	r2, [r3, #4]
 8006c8c:	e007      	b.n	8006c9e <HAL_SDADC_InjectedConfigChannel+0x56>
    }
    else
    {
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0220 	bic.w	r2, r2, #32
 8006c9c:	605a      	str	r2, [r3, #4]
    }
    /* Store continuous mode information */
    hsdadc->InjectedContMode = ContinuousMode;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	61da      	str	r2, [r3, #28]
    /* Store number of injected channels */
    hsdadc->InjectedChannelsNbr = SDADC_GetInjChannelsNbr(Channel);
 8006ca4:	68b8      	ldr	r0, [r7, #8]
 8006ca6:	f000 f9c4 	bl	8007032 <SDADC_GetInjChannelsNbr>
 8006caa:	4602      	mov	r2, r0
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	621a      	str	r2, [r3, #32]
 8006cb0:	e001      	b.n	8006cb6 <HAL_SDADC_InjectedConfigChannel+0x6e>
  }
  else
  {
    status = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_SDADC_SelectInjectedTrigger>:
  *            @arg SDADC_SYNCHRONOUS_TRIGGER : Synchronous with SDADC1 (only for SDADC2 and SDADC3).
  *            @arg SDADC_EXTERNAL_TRIGGER : External trigger.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedTrigger(SDADC_HandleTypeDef *hsdadc, uint32_t Trigger)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_TRIGGER(Trigger));

  /* Check parameters compatibility */
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a12      	ldr	r2, [pc, #72]	; (8006d1c <HAL_SDADC_SelectInjectedTrigger+0x5c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d105      	bne.n	8006ce4 <HAL_SDADC_SelectInjectedTrigger+0x24>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d102      	bne.n	8006ce4 <HAL_SDADC_SelectInjectedTrigger+0x24>
  {
    status = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	73fb      	strb	r3, [r7, #15]
 8006ce2:	e014      	b.n	8006d0e <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d009      	beq.n	8006d02 <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d004      	beq.n	8006d02 <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_REG))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d103      	bne.n	8006d0a <HAL_SDADC_SelectInjectedTrigger+0x4a>
  {
    /* Store regular trigger information */
    hsdadc->InjectedTrigger = Trigger;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d08:	e001      	b.n	8006d0e <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  else
  {
    status = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	40016000 	.word	0x40016000

08006d20 <HAL_SDADC_SelectInjectedDelay>:
  *         This parameter can be a value of @ref SDADC_InjectedDelay.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedDelay(SDADC_HandleTypeDef *hsdadc,
                                                uint32_t InjectedDelay)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_DELAY(InjectedDelay));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d120      	bne.n	8006d7a <HAL_SDADC_SelectInjectedDelay+0x5a>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f945 	bl	8006fc8 <SDADC_EnterInitMode>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d006      	beq.n	8006d52 <HAL_SDADC_SelectInjectedDelay+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	22ff      	movs	r2, #255	; 0xff
 8006d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	73fb      	strb	r3, [r7, #15]
 8006d50:	e015      	b.n	8006d7e <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
    else
    {
      /* Set JDS bit in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JDS);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d60:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= InjectedDelay;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6859      	ldr	r1, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f94b 	bl	800700e <SDADC_ExitInitMode>
 8006d78:	e001      	b.n	8006d7e <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_SDADC_CalibrationStart>:
  *         This parameter can be a value of @ref SDADC_CalibrationSequence.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_CalibrationStart(SDADC_HandleTypeDef *hsdadc,
                                             uint32_t CalibrationSequence)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_CALIB_SEQUENCE(CalibrationSequence));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d12c      	bne.n	8006dfa <HAL_SDADC_CalibrationStart+0x72>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f911 	bl	8006fc8 <SDADC_EnterInitMode>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d006      	beq.n	8006dba <HAL_SDADC_CalibrationStart+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	22ff      	movs	r2, #255	; 0xff
 8006db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	73fb      	strb	r3, [r7, #15]
 8006db8:	e021      	b.n	8006dfe <HAL_SDADC_CalibrationStart+0x76>
    }
    else
    {
      /* Set CALIBCNT[1:0] bits in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0206 	bic.w	r2, r2, #6
 8006dc8:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6859      	ldr	r1, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 f917 	bl	800700e <SDADC_ExitInitMode>

      /* Set STARTCALIB in SDADC_CR2 */
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 0210 	orr.w	r2, r2, #16
 8006dee:	605a      	str	r2, [r3, #4]

      /* Set SDADC in calibration state */
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006df8:	e001      	b.n	8006dfe <HAL_SDADC_CalibrationStart+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_SDADC_PollForCalibEvent>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForCalibEvent(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d001      	beq.n	8006e20 <HAL_SDADC_PollForCalibEvent+0x18>
  {
    /* Return error status */
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e028      	b.n	8006e72 <HAL_SDADC_PollForCalibEvent+0x6a>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006e20:	f7fc f8d4 	bl	8002fcc <HAL_GetTick>
 8006e24:	60f8      	str	r0, [r7, #12]

    /* Wait EOCALF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8006e26:	e010      	b.n	8006e4a <HAL_SDADC_PollForCalibEvent+0x42>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2e:	d00c      	beq.n	8006e4a <HAL_SDADC_PollForCalibEvent+0x42>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8006e30:	f7fc f8cc 	bl	8002fcc <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d302      	bcc.n	8006e46 <HAL_SDADC_PollForCalibEvent+0x3e>
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_SDADC_PollForCalibEvent+0x42>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e013      	b.n	8006e72 <HAL_SDADC_PollForCalibEvent+0x6a>
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d1e7      	bne.n	8006e28 <HAL_SDADC_PollForCalibEvent+0x20>
        }
      }
    }
    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0201 	orr.w	r2, r2, #1
 8006e66:	60da      	str	r2, [r3, #12]

    /* Set SDADC in ready state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_OK;
 8006e70:	2300      	movs	r3, #0
  }
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <HAL_SDADC_Start>:
  *         or if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Start(SDADC_HandleTypeDef *hsdadc)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d004      	beq.n	8006e96 <HAL_SDADC_Start+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_INJ))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d105      	bne.n	8006ea2 <HAL_SDADC_Start+0x28>
  {
    /* Start regular conversion */
    status = SDADC_RegConvStart(hsdadc);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f8ef 	bl	800707a <SDADC_RegConvStart>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73fb      	strb	r3, [r7, #15]
 8006ea0:	e001      	b.n	8006ea6 <HAL_SDADC_Start+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_SDADC_PollForConversion>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForConversion(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d006      	beq.n	8006ed2 <HAL_SDADC_PollForConversion+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8006eca:	2b05      	cmp	r3, #5
 8006ecc:	d001      	beq.n	8006ed2 <HAL_SDADC_PollForConversion+0x22>
  {
    /* Return error status */
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e044      	b.n	8006f5c <HAL_SDADC_PollForConversion+0xac>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006ed2:	f7fc f87b 	bl	8002fcc <HAL_GetTick>
 8006ed6:	60f8      	str	r0, [r7, #12]

    /* Wait REOCF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 8006ed8:	e010      	b.n	8006efc <HAL_SDADC_PollForConversion+0x4c>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee0:	d00c      	beq.n	8006efc <HAL_SDADC_PollForConversion+0x4c>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8006ee2:	f7fc f873 	bl	8002fcc <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d302      	bcc.n	8006ef8 <HAL_SDADC_PollForConversion+0x48>
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <HAL_SDADC_PollForConversion+0x4c>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e02f      	b.n	8006f5c <HAL_SDADC_PollForConversion+0xac>
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b08      	cmp	r3, #8
 8006f08:	d1e7      	bne.n	8006eda <HAL_SDADC_PollForConversion+0x2a>
        }
      }
    }
    /* Check if overrun occurs */
    if((hsdadc->Instance->ISR & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f003 0310 	and.w	r3, r3, #16
 8006f14:	2b10      	cmp	r3, #16
 8006f16:	d10d      	bne.n	8006f34 <HAL_SDADC_PollForConversion+0x84>
    {
      /* Update error code and call error callback */
      hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
      hsdadc->ErrorCallback(hsdadc);
#else
      HAL_SDADC_ErrorCallback(hsdadc);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f848 	bl	8006fb4 <HAL_SDADC_ErrorCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

      /* Set CLRROVRF bit in SDADC_CLRISR register */
      hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0210 	orr.w	r2, r2, #16
 8006f32:	60da      	str	r2, [r3, #12]
    }
    /* Update SDADC state only if not continuous conversion and SW trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10e      	bne.n	8006f5a <HAL_SDADC_PollForConversion+0xaa>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10a      	bne.n	8006f5a <HAL_SDADC_PollForConversion+0xaa>
    {
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d101      	bne.n	8006f52 <HAL_SDADC_PollForConversion+0xa2>
 8006f4e:	2201      	movs	r2, #1
 8006f50:	e000      	b.n	8006f54 <HAL_SDADC_PollForConversion+0xa4>
 8006f52:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Return function status */
    return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
  }
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_SDADC_Stop>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Stop(SDADC_HandleTypeDef *hsdadc)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d007      	beq.n	8006f86 <HAL_SDADC_Stop+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8006f7c:	2b05      	cmp	r3, #5
 8006f7e:	d002      	beq.n	8006f86 <HAL_SDADC_Stop+0x22>
  {
    /* Return error status */
    status = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	73fb      	strb	r3, [r7, #15]
 8006f84:	e004      	b.n	8006f90 <HAL_SDADC_Stop+0x2c>
  }
  else
  {
    /* Stop regular conversion */
    status = SDADC_RegConvStop(hsdadc);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f8b5 	bl	80070f6 <SDADC_RegConvStop>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_SDADC_GetValue>:
  * @brief  This function allows to get regular conversion value.
  * @param  hsdadc SDADC handle.
  * @retval Regular conversion value
  */
uint32_t HAL_SDADC_GetValue(SDADC_HandleTypeDef *hsdadc)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Return regular conversion value */
  return hsdadc->Instance->RDATAR;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006fde:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 8006fe0:	f7fb fff4 	bl	8002fcc <HAL_GetTick>
 8006fe4:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8006fe6:	e008      	b.n	8006ffa <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8006fe8:	f7fb fff0 	bl	8002fcc <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2bc8      	cmp	r3, #200	; 0xc8
 8006ff4:	d901      	bls.n	8006ffa <SDADC_EnterInitMode+0x32>
    {
      return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e005      	b.n	8007006 <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	daf1      	bge.n	8006fe8 <SDADC_EnterInitMode+0x20>
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 800700e:	b480      	push	{r7}
 8007010:	b083      	sub	sp, #12
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007024:	601a      	str	r2, [r3, #0]
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <SDADC_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t SDADC_GetInjChannelsNbr(uint32_t Channels)
{
 8007032:	b480      	push	{r7}
 8007034:	b087      	sub	sp, #28
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0UL;
 800703a:	2300      	movs	r3, #0
 800703c:	617b      	str	r3, [r7, #20]
  uint32_t tmp,i;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & SDADC_LSB_MASK);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	b29b      	uxth	r3, r3
 8007042:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	e00d      	b.n	8007066 <SDADC_GetInjChannelsNbr+0x34>
  {
    if((tmp & 0x00000001UL) != 0UL)
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <SDADC_GetInjChannelsNbr+0x28>
    {
      nbChannels++;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	3301      	adds	r3, #1
 8007058:	617b      	str	r3, [r7, #20]
    }
    tmp = (uint32_t) (tmp >> 1UL);
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	085b      	lsrs	r3, r3, #1
 800705e:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3301      	adds	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b08      	cmp	r3, #8
 800706a:	d9ee      	bls.n	800704a <SDADC_GetInjChannelsNbr+0x18>
  }
  return nbChannels;
 800706c:	697b      	ldr	r3, [r7, #20]
}
 800706e:	4618      	mov	r0, r3
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <SDADC_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73fb      	strb	r3, [r7, #15]

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708a:	2b00      	cmp	r3, #0
 800708c:	d108      	bne.n	80070a0 <SDADC_RegConvStart+0x26>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800709c:	605a      	str	r2, [r3, #4]
 800709e:	e017      	b.n	80070d0 <SDADC_RegConvStart+0x56>
  }
  else /* synchronous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7ff ff91 	bl	8006fc8 <SDADC_EnterInitMode>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d006      	beq.n	80070ba <SDADC_RegConvStart+0x40>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	22ff      	movs	r2, #255	; 0xff
 80070b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	73fb      	strb	r3, [r7, #15]
 80070b8:	e00a      	b.n	80070d0 <SDADC_RegConvStart+0x56>
    }
    else
    {
      /* Set RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070c8:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7ff ff9f 	bl	800700e <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10a      	bne.n	80070ec <SDADC_RegConvStart+0x72>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d101      	bne.n	80070e4 <SDADC_RegConvStart+0x6a>
 80070e0:	2203      	movs	r2, #3
 80070e2:	e000      	b.n	80070e6 <SDADC_RegConvStart+0x6c>
 80070e4:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <SDADC_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStop(SDADC_HandleTypeDef* hsdadc)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t dummy_read_for_register_reset;

  /* Check continuous mode */
  if(hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_ON)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d10c      	bne.n	8007120 <SDADC_RegConvStop+0x2a>
  {
    /* Clear REOCF by reading SDADC_RDATAR register */
    dummy_read_for_register_reset = hsdadc->Instance->RDATAR;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800710c:	60bb      	str	r3, [r7, #8]
    UNUSED(dummy_read_for_register_reset);
 800710e:	68bb      	ldr	r3, [r7, #8]

    /* Clear RCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 &= ~(SDADC_CR2_RCONT);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800711e:	605a      	str	r2, [r3, #4]
  }
  /* Wait for the end of regular conversion */
  tickstart = HAL_GetTick();
 8007120:	f7fb ff54 	bl	8002fcc <HAL_GetTick>
 8007124:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_RCIP) != 0UL)
 8007126:	e00c      	b.n	8007142 <SDADC_RegConvStop+0x4c>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8007128:	f7fb ff50 	bl	8002fcc <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2bc8      	cmp	r3, #200	; 0xc8
 8007134:	d905      	bls.n	8007142 <SDADC_RegConvStop+0x4c>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	22ff      	movs	r2, #255	; 0xff
 800713a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e046      	b.n	80071d0 <SDADC_RegConvStop+0xda>
  while((hsdadc->Instance->ISR & SDADC_ISR_RCIP) != 0UL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1eb      	bne.n	8007128 <SDADC_RegConvStop+0x32>
    }
  }
  /* Check if trigger is synchronous */
  if(hsdadc->RegularTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007154:	2b01      	cmp	r3, #1
 8007156:	d116      	bne.n	8007186 <SDADC_RegConvStop+0x90>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7ff ff35 	bl	8006fc8 <SDADC_EnterInitMode>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d005      	beq.n	8007170 <SDADC_RegConvStop+0x7a>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	22ff      	movs	r2, #255	; 0xff
 8007168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e02f      	b.n	80071d0 <SDADC_RegConvStop+0xda>
    }
    else
    {
      /* Clear RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_RSYNC);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800717e:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff ff44 	bl	800700e <SDADC_ExitInitMode>
    }
  }
  /* Check if continuous mode */
  if(hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_ON)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d107      	bne.n	800719e <SDADC_RegConvStop+0xa8>
  {
    /* Restore RCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RCONT;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800719c:	605a      	str	r2, [r3, #4]
  }
  /* Clear REOCF by reading SDADC_RDATAR register */
  dummy_read_for_register_reset = hsdadc->Instance->RDATAR;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071a4:	60bb      	str	r3, [r7, #8]
  UNUSED(dummy_read_for_register_reset);
 80071a6:	68bb      	ldr	r3, [r7, #8]

  /* Set CLRROVRF bit in SDADC_CLRISR register */
  hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68da      	ldr	r2, [r3, #12]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 0210 	orr.w	r2, r2, #16
 80071b6:	60da      	str	r2, [r3, #12]

  /* Update SDADC state */
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                  HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d101      	bne.n	80071c6 <SDADC_RegConvStop+0xd0>
 80071c2:	2201      	movs	r2, #1
 80071c4:	e000      	b.n	80071c8 <SDADC_RegConvStop+0xd2>
 80071c6:	2204      	movs	r2, #4
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e041      	b.n	800726e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d106      	bne.n	8007204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7fb fd7a 	bl	8002cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2202      	movs	r2, #2
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3304      	adds	r3, #4
 8007214:	4619      	mov	r1, r3
 8007216:	4610      	mov	r0, r2
 8007218:	f000 fa80 	bl	800771c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
	...

08007278 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b01      	cmp	r3, #1
 800728a:	d001      	beq.n	8007290 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e049      	b.n	8007324 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0201 	orr.w	r2, r2, #1
 80072a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b0:	d01d      	beq.n	80072ee <HAL_TIM_Base_Start_IT+0x76>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a1e      	ldr	r2, [pc, #120]	; (8007330 <HAL_TIM_Base_Start_IT+0xb8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d018      	beq.n	80072ee <HAL_TIM_Base_Start_IT+0x76>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a1c      	ldr	r2, [pc, #112]	; (8007334 <HAL_TIM_Base_Start_IT+0xbc>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d013      	beq.n	80072ee <HAL_TIM_Base_Start_IT+0x76>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a1b      	ldr	r2, [pc, #108]	; (8007338 <HAL_TIM_Base_Start_IT+0xc0>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d00e      	beq.n	80072ee <HAL_TIM_Base_Start_IT+0x76>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a19      	ldr	r2, [pc, #100]	; (800733c <HAL_TIM_Base_Start_IT+0xc4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d009      	beq.n	80072ee <HAL_TIM_Base_Start_IT+0x76>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a18      	ldr	r2, [pc, #96]	; (8007340 <HAL_TIM_Base_Start_IT+0xc8>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d004      	beq.n	80072ee <HAL_TIM_Base_Start_IT+0x76>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a16      	ldr	r2, [pc, #88]	; (8007344 <HAL_TIM_Base_Start_IT+0xcc>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d111      	bne.n	8007312 <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b06      	cmp	r3, #6
 80072fe:	d010      	beq.n	8007322 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0201 	orr.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007310:	e007      	b.n	8007322 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f042 0201 	orr.w	r2, r2, #1
 8007320:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	40000400 	.word	0x40000400
 8007334:	40000800 	.word	0x40000800
 8007338:	40000c00 	.word	0x40000c00
 800733c:	40001800 	.word	0x40001800
 8007340:	40014000 	.word	0x40014000
 8007344:	40015c00 	.word	0x40015c00

08007348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d020      	beq.n	80073ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d01b      	beq.n	80073ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f06f 0202 	mvn.w	r2, #2
 800737c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	f003 0303 	and.w	r3, r3, #3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f9a3 	bl	80076de <HAL_TIM_IC_CaptureCallback>
 8007398:	e005      	b.n	80073a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f995 	bl	80076ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f9a6 	bl	80076f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f003 0304 	and.w	r3, r3, #4
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d020      	beq.n	80073f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d01b      	beq.n	80073f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f06f 0204 	mvn.w	r2, #4
 80073c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2202      	movs	r2, #2
 80073ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f97d 	bl	80076de <HAL_TIM_IC_CaptureCallback>
 80073e4:	e005      	b.n	80073f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f96f 	bl	80076ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f980 	bl	80076f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f003 0308 	and.w	r3, r3, #8
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d020      	beq.n	8007444 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f003 0308 	and.w	r3, r3, #8
 8007408:	2b00      	cmp	r3, #0
 800740a:	d01b      	beq.n	8007444 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f06f 0208 	mvn.w	r2, #8
 8007414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2204      	movs	r2, #4
 800741a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	f003 0303 	and.w	r3, r3, #3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f957 	bl	80076de <HAL_TIM_IC_CaptureCallback>
 8007430:	e005      	b.n	800743e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f949 	bl	80076ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f95a 	bl	80076f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f003 0310 	and.w	r3, r3, #16
 800744a:	2b00      	cmp	r3, #0
 800744c:	d020      	beq.n	8007490 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f003 0310 	and.w	r3, r3, #16
 8007454:	2b00      	cmp	r3, #0
 8007456:	d01b      	beq.n	8007490 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f06f 0210 	mvn.w	r2, #16
 8007460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2208      	movs	r2, #8
 8007466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f931 	bl	80076de <HAL_TIM_IC_CaptureCallback>
 800747c:	e005      	b.n	800748a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f923 	bl	80076ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f934 	bl	80076f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00c      	beq.n	80074b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d007      	beq.n	80074b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f06f 0201 	mvn.w	r2, #1
 80074ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f901 	bl	80076b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00c      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d007      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fae0 	bl	8007a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00c      	beq.n	80074fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d007      	beq.n	80074fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f905 	bl	8007706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f003 0320 	and.w	r3, r3, #32
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00c      	beq.n	8007520 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f003 0320 	and.w	r3, r3, #32
 800750c:	2b00      	cmp	r3, #0
 800750e:	d007      	beq.n	8007520 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f06f 0220 	mvn.w	r2, #32
 8007518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fab2 	bl	8007a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007520:	bf00      	nop
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_TIM_ConfigClockSource+0x1c>
 8007540:	2302      	movs	r3, #2
 8007542:	e0b4      	b.n	80076ae <HAL_TIM_ConfigClockSource+0x186>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800756a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800757c:	d03e      	beq.n	80075fc <HAL_TIM_ConfigClockSource+0xd4>
 800757e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007582:	f200 8087 	bhi.w	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 8007586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800758a:	f000 8086 	beq.w	800769a <HAL_TIM_ConfigClockSource+0x172>
 800758e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007592:	d87f      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 8007594:	2b70      	cmp	r3, #112	; 0x70
 8007596:	d01a      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0xa6>
 8007598:	2b70      	cmp	r3, #112	; 0x70
 800759a:	d87b      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 800759c:	2b60      	cmp	r3, #96	; 0x60
 800759e:	d050      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x11a>
 80075a0:	2b60      	cmp	r3, #96	; 0x60
 80075a2:	d877      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075a4:	2b50      	cmp	r3, #80	; 0x50
 80075a6:	d03c      	beq.n	8007622 <HAL_TIM_ConfigClockSource+0xfa>
 80075a8:	2b50      	cmp	r3, #80	; 0x50
 80075aa:	d873      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	d058      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0x13a>
 80075b0:	2b40      	cmp	r3, #64	; 0x40
 80075b2:	d86f      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075b4:	2b30      	cmp	r3, #48	; 0x30
 80075b6:	d064      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075b8:	2b30      	cmp	r3, #48	; 0x30
 80075ba:	d86b      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d060      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075c0:	2b20      	cmp	r3, #32
 80075c2:	d867      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d05c      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075c8:	2b10      	cmp	r3, #16
 80075ca:	d05a      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075cc:	e062      	b.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075de:	f000 f9bd 	bl	800795c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	609a      	str	r2, [r3, #8]
      break;
 80075fa:	e04f      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800760c:	f000 f9a6 	bl	800795c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800761e:	609a      	str	r2, [r3, #8]
      break;
 8007620:	e03c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800762e:	461a      	mov	r2, r3
 8007630:	f000 f91a 	bl	8007868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2150      	movs	r1, #80	; 0x50
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f973 	bl	8007926 <TIM_ITRx_SetConfig>
      break;
 8007640:	e02c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800764e:	461a      	mov	r2, r3
 8007650:	f000 f939 	bl	80078c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2160      	movs	r1, #96	; 0x60
 800765a:	4618      	mov	r0, r3
 800765c:	f000 f963 	bl	8007926 <TIM_ITRx_SetConfig>
      break;
 8007660:	e01c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800766e:	461a      	mov	r2, r3
 8007670:	f000 f8fa 	bl	8007868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2140      	movs	r1, #64	; 0x40
 800767a:	4618      	mov	r0, r3
 800767c:	f000 f953 	bl	8007926 <TIM_ITRx_SetConfig>
      break;
 8007680:	e00c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f000 f94a 	bl	8007926 <TIM_ITRx_SetConfig>
      break;
 8007692:	e003      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
      break;
 8007698:	e000      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800769a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
	...

0800771c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007732:	d00f      	beq.n	8007754 <TIM_Base_SetConfig+0x38>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a42      	ldr	r2, [pc, #264]	; (8007840 <TIM_Base_SetConfig+0x124>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d00b      	beq.n	8007754 <TIM_Base_SetConfig+0x38>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a41      	ldr	r2, [pc, #260]	; (8007844 <TIM_Base_SetConfig+0x128>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d007      	beq.n	8007754 <TIM_Base_SetConfig+0x38>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a40      	ldr	r2, [pc, #256]	; (8007848 <TIM_Base_SetConfig+0x12c>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d003      	beq.n	8007754 <TIM_Base_SetConfig+0x38>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a3f      	ldr	r2, [pc, #252]	; (800784c <TIM_Base_SetConfig+0x130>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d108      	bne.n	8007766 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800775a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	4313      	orrs	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776c:	d027      	beq.n	80077be <TIM_Base_SetConfig+0xa2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a33      	ldr	r2, [pc, #204]	; (8007840 <TIM_Base_SetConfig+0x124>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d023      	beq.n	80077be <TIM_Base_SetConfig+0xa2>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a32      	ldr	r2, [pc, #200]	; (8007844 <TIM_Base_SetConfig+0x128>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d01f      	beq.n	80077be <TIM_Base_SetConfig+0xa2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a31      	ldr	r2, [pc, #196]	; (8007848 <TIM_Base_SetConfig+0x12c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d01b      	beq.n	80077be <TIM_Base_SetConfig+0xa2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a31      	ldr	r2, [pc, #196]	; (8007850 <TIM_Base_SetConfig+0x134>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d017      	beq.n	80077be <TIM_Base_SetConfig+0xa2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a30      	ldr	r2, [pc, #192]	; (8007854 <TIM_Base_SetConfig+0x138>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d013      	beq.n	80077be <TIM_Base_SetConfig+0xa2>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a2f      	ldr	r2, [pc, #188]	; (8007858 <TIM_Base_SetConfig+0x13c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d00f      	beq.n	80077be <TIM_Base_SetConfig+0xa2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a2e      	ldr	r2, [pc, #184]	; (800785c <TIM_Base_SetConfig+0x140>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d00b      	beq.n	80077be <TIM_Base_SetConfig+0xa2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a2d      	ldr	r2, [pc, #180]	; (8007860 <TIM_Base_SetConfig+0x144>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d007      	beq.n	80077be <TIM_Base_SetConfig+0xa2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a2c      	ldr	r2, [pc, #176]	; (8007864 <TIM_Base_SetConfig+0x148>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d003      	beq.n	80077be <TIM_Base_SetConfig+0xa2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a24      	ldr	r2, [pc, #144]	; (800784c <TIM_Base_SetConfig+0x130>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d108      	bne.n	80077d0 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	4313      	orrs	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	689a      	ldr	r2, [r3, #8]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a19      	ldr	r2, [pc, #100]	; (800785c <TIM_Base_SetConfig+0x140>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d007      	beq.n	800780c <TIM_Base_SetConfig+0xf0>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a18      	ldr	r2, [pc, #96]	; (8007860 <TIM_Base_SetConfig+0x144>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d003      	beq.n	800780c <TIM_Base_SetConfig+0xf0>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a17      	ldr	r2, [pc, #92]	; (8007864 <TIM_Base_SetConfig+0x148>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d103      	bne.n	8007814 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	691a      	ldr	r2, [r3, #16]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b01      	cmp	r3, #1
 8007824:	d105      	bne.n	8007832 <TIM_Base_SetConfig+0x116>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f023 0201 	bic.w	r2, r3, #1
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	611a      	str	r2, [r3, #16]
  }
}
 8007832:	bf00      	nop
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	40000400 	.word	0x40000400
 8007844:	40000800 	.word	0x40000800
 8007848:	40000c00 	.word	0x40000c00
 800784c:	40015c00 	.word	0x40015c00
 8007850:	40001800 	.word	0x40001800
 8007854:	40001c00 	.word	0x40001c00
 8007858:	40002000 	.word	0x40002000
 800785c:	40014000 	.word	0x40014000
 8007860:	40014400 	.word	0x40014400
 8007864:	40014800 	.word	0x40014800

08007868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007868:	b480      	push	{r7}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	f023 0201 	bic.w	r2, r3, #1
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	011b      	lsls	r3, r3, #4
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	4313      	orrs	r3, r2
 800789c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f023 030a 	bic.w	r3, r3, #10
 80078a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	621a      	str	r2, [r3, #32]
}
 80078ba:	bf00      	nop
 80078bc:	371c      	adds	r7, #28
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b087      	sub	sp, #28
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	f023 0210 	bic.w	r2, r3, #16
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	031b      	lsls	r3, r3, #12
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007902:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	4313      	orrs	r3, r2
 800790c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	621a      	str	r2, [r3, #32]
}
 800791a:	bf00      	nop
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007926:	b480      	push	{r7}
 8007928:	b085      	sub	sp, #20
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800793c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4313      	orrs	r3, r2
 8007944:	f043 0307 	orr.w	r3, r3, #7
 8007948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	609a      	str	r2, [r3, #8]
}
 8007950:	bf00      	nop
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	021a      	lsls	r2, r3, #8
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	431a      	orrs	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4313      	orrs	r3, r2
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	4313      	orrs	r3, r2
 8007988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	609a      	str	r2, [r3, #8]
}
 8007990:	bf00      	nop
 8007992:	371c      	adds	r7, #28
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d101      	bne.n	80079b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079b0:	2302      	movs	r3, #2
 80079b2:	e055      	b.n	8007a60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079f6:	d01d      	beq.n	8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a1b      	ldr	r2, [pc, #108]	; (8007a6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d018      	beq.n	8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a1a      	ldr	r2, [pc, #104]	; (8007a70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d013      	beq.n	8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a18      	ldr	r2, [pc, #96]	; (8007a74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00e      	beq.n	8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a17      	ldr	r2, [pc, #92]	; (8007a78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d009      	beq.n	8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a15      	ldr	r2, [pc, #84]	; (8007a7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d004      	beq.n	8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a14      	ldr	r2, [pc, #80]	; (8007a80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d10c      	bne.n	8007a4e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	40000400 	.word	0x40000400
 8007a70:	40000800 	.word	0x40000800
 8007a74:	40000c00 	.word	0x40000c00
 8007a78:	40001800 	.word	0x40001800
 8007a7c:	40014000 	.word	0x40014000
 8007a80:	40015c00 	.word	0x40015c00

08007a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e040      	b.n	8007b40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d106      	bne.n	8007ad4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7fb f982 	bl	8002dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2224      	movs	r2, #36	; 0x24
 8007ad8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0201 	bic.w	r2, r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fd80 	bl	80085f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fc03 	bl	8008304 <UART_SetConfig>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e01b      	b.n	8007b40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0201 	orr.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fdff 	bl	800873c <UART_CheckIdleState>
 8007b3e:	4603      	mov	r3, r0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08a      	sub	sp, #40	; 0x28
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	4613      	mov	r3, r2
 8007b56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b5c:	2b20      	cmp	r3, #32
 8007b5e:	d178      	bne.n	8007c52 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d002      	beq.n	8007b6c <HAL_UART_Transmit+0x24>
 8007b66:	88fb      	ldrh	r3, [r7, #6]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e071      	b.n	8007c54 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2221      	movs	r2, #33	; 0x21
 8007b7c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b7e:	f7fb fa25 	bl	8002fcc <HAL_GetTick>
 8007b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	88fa      	ldrh	r2, [r7, #6]
 8007b88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	88fa      	ldrh	r2, [r7, #6]
 8007b90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b9c:	d108      	bne.n	8007bb0 <HAL_UART_Transmit+0x68>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d104      	bne.n	8007bb0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	61bb      	str	r3, [r7, #24]
 8007bae:	e003      	b.n	8007bb8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007bb8:	e030      	b.n	8007c1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2180      	movs	r1, #128	; 0x80
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 fe61 	bl	800888c <UART_WaitOnFlagUntilTimeout>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d004      	beq.n	8007bda <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e03c      	b.n	8007c54 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10b      	bne.n	8007bf8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	881a      	ldrh	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bec:	b292      	uxth	r2, r2
 8007bee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	3302      	adds	r3, #2
 8007bf4:	61bb      	str	r3, [r7, #24]
 8007bf6:	e008      	b.n	8007c0a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	781a      	ldrb	r2, [r3, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	b292      	uxth	r2, r2
 8007c02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	3301      	adds	r3, #1
 8007c08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	3b01      	subs	r3, #1
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1c8      	bne.n	8007bba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2140      	movs	r1, #64	; 0x40
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 fe2a 	bl	800888c <UART_WaitOnFlagUntilTimeout>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d004      	beq.n	8007c48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2220      	movs	r2, #32
 8007c42:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e005      	b.n	8007c54 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e000      	b.n	8007c54 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007c52:	2302      	movs	r3, #2
  }
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3720      	adds	r7, #32
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b08a      	sub	sp, #40	; 0x28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	4613      	mov	r3, r2
 8007c68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	d132      	bne.n	8007cda <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <HAL_UART_Receive_DMA+0x24>
 8007c7a:	88fb      	ldrh	r3, [r7, #6]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e02b      	b.n	8007cdc <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d018      	beq.n	8007cca <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	623b      	str	r3, [r7, #32]
 8007cb8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	69f9      	ldr	r1, [r7, #28]
 8007cbc:	6a3a      	ldr	r2, [r7, #32]
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e6      	bne.n	8007c98 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007cca:	88fb      	ldrh	r3, [r7, #6]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	68b9      	ldr	r1, [r7, #8]
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 fe49 	bl	8008968 <UART_Start_Receive_DMA>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	e000      	b.n	8007cdc <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007cda:	2302      	movs	r3, #2
  }
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3728      	adds	r7, #40	; 0x28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b0ba      	sub	sp, #232	; 0xe8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007d0e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007d12:	4013      	ands	r3, r2
 8007d14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007d18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d115      	bne.n	8007d4c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d24:	f003 0320 	and.w	r3, r3, #32
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00f      	beq.n	8007d4c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d30:	f003 0320 	and.w	r3, r3, #32
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d009      	beq.n	8007d4c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 82ab 	beq.w	8008298 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	4798      	blx	r3
      }
      return;
 8007d4a:	e2a5      	b.n	8008298 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007d4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 8117 	beq.w	8007f84 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d106      	bne.n	8007d70 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007d62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007d66:	4b85      	ldr	r3, [pc, #532]	; (8007f7c <HAL_UART_IRQHandler+0x298>)
 8007d68:	4013      	ands	r3, r2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 810a 	beq.w	8007f84 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d011      	beq.n	8007da0 <HAL_UART_IRQHandler+0xbc>
 8007d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d96:	f043 0201 	orr.w	r2, r3, #1
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da4:	f003 0302 	and.w	r3, r3, #2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d011      	beq.n	8007dd0 <HAL_UART_IRQHandler+0xec>
 8007dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00b      	beq.n	8007dd0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc6:	f043 0204 	orr.w	r2, r3, #4
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d011      	beq.n	8007e00 <HAL_UART_IRQHandler+0x11c>
 8007ddc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00b      	beq.n	8007e00 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2204      	movs	r2, #4
 8007dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007df6:	f043 0202 	orr.w	r2, r3, #2
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e04:	f003 0308 	and.w	r3, r3, #8
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d017      	beq.n	8007e3c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e10:	f003 0320 	and.w	r3, r3, #32
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d105      	bne.n	8007e24 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00b      	beq.n	8007e3c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2208      	movs	r2, #8
 8007e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e32:	f043 0208 	orr.w	r2, r3, #8
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d012      	beq.n	8007e6e <HAL_UART_IRQHandler+0x18a>
 8007e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00c      	beq.n	8007e6e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e64:	f043 0220 	orr.w	r2, r3, #32
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 8211 	beq.w	800829c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e7e:	f003 0320 	and.w	r3, r3, #32
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00d      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e8a:	f003 0320 	and.w	r3, r3, #32
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d007      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ea8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb6:	2b40      	cmp	r3, #64	; 0x40
 8007eb8:	d005      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ebe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d04f      	beq.n	8007f66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fe14 	bl	8008af4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed6:	2b40      	cmp	r3, #64	; 0x40
 8007ed8:	d141      	bne.n	8007f5e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3308      	adds	r3, #8
 8007ee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ee8:	e853 3f00 	ldrex	r3, [r3]
 8007eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3308      	adds	r3, #8
 8007f02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f16:	e841 2300 	strex	r3, r2, [r1]
 8007f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1d9      	bne.n	8007eda <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d013      	beq.n	8007f56 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f32:	4a13      	ldr	r2, [pc, #76]	; (8007f80 <HAL_UART_IRQHandler+0x29c>)
 8007f34:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fc fbd7 	bl	80046ee <HAL_DMA_Abort_IT>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d017      	beq.n	8007f76 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007f50:	4610      	mov	r0, r2
 8007f52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f54:	e00f      	b.n	8007f76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f9be 	bl	80082d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f5c:	e00b      	b.n	8007f76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f9ba 	bl	80082d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f64:	e007      	b.n	8007f76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f9b6 	bl	80082d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007f74:	e192      	b.n	800829c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f76:	bf00      	nop
    return;
 8007f78:	e190      	b.n	800829c <HAL_UART_IRQHandler+0x5b8>
 8007f7a:	bf00      	nop
 8007f7c:	04000120 	.word	0x04000120
 8007f80:	08008d9f 	.word	0x08008d9f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	f040 814b 	bne.w	8008224 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f92:	f003 0310 	and.w	r3, r3, #16
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f000 8144 	beq.w	8008224 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fa0:	f003 0310 	and.w	r3, r3, #16
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 813d 	beq.w	8008224 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2210      	movs	r2, #16
 8007fb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fbc:	2b40      	cmp	r3, #64	; 0x40
 8007fbe:	f040 80b5 	bne.w	800812c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007fce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 8164 	beq.w	80082a0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	f080 815c 	bcs.w	80082a0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007fee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	2b20      	cmp	r3, #32
 8007ffa:	f000 8086 	beq.w	800810a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008006:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800800a:	e853 3f00 	ldrex	r3, [r3]
 800800e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800801a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008028:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800802c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008030:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008034:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008038:	e841 2300 	strex	r3, r2, [r1]
 800803c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008040:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1da      	bne.n	8007ffe <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3308      	adds	r3, #8
 800804e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008052:	e853 3f00 	ldrex	r3, [r3]
 8008056:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008058:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800805a:	f023 0301 	bic.w	r3, r3, #1
 800805e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3308      	adds	r3, #8
 8008068:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800806c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008070:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008072:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008074:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800807e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e1      	bne.n	8008048 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3308      	adds	r3, #8
 800808a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800809a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3308      	adds	r3, #8
 80080a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80080a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80080ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80080b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e3      	bne.n	8008084 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2220      	movs	r2, #32
 80080c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80080d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080da:	f023 0310 	bic.w	r3, r3, #16
 80080de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80080ee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080f4:	e841 2300 	strex	r3, r2, [r1]
 80080f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80080fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e4      	bne.n	80080ca <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008104:	4618      	mov	r0, r3
 8008106:	f7fc fab4 	bl	8004672 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2202      	movs	r2, #2
 800810e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800811c:	b29b      	uxth	r3, r3
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	b29b      	uxth	r3, r3
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f8e1 	bl	80082ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800812a:	e0b9      	b.n	80082a0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008138:	b29b      	uxth	r3, r3
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008146:	b29b      	uxth	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 80ab 	beq.w	80082a4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800814e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 80a6 	beq.w	80082a4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008160:	e853 3f00 	ldrex	r3, [r3]
 8008164:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008168:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800816c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	461a      	mov	r2, r3
 8008176:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800817a:	647b      	str	r3, [r7, #68]	; 0x44
 800817c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008182:	e841 2300 	strex	r3, r2, [r1]
 8008186:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1e4      	bne.n	8008158 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3308      	adds	r3, #8
 8008194:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	623b      	str	r3, [r7, #32]
   return(result);
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	f023 0301 	bic.w	r3, r3, #1
 80081a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3308      	adds	r3, #8
 80081ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80081b2:	633a      	str	r2, [r7, #48]	; 0x30
 80081b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ba:	e841 2300 	strex	r3, r2, [r1]
 80081be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1e3      	bne.n	800818e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2220      	movs	r2, #32
 80081ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	e853 3f00 	ldrex	r3, [r3]
 80081e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f023 0310 	bic.w	r3, r3, #16
 80081ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081fc:	61fb      	str	r3, [r7, #28]
 80081fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008200:	69b9      	ldr	r1, [r7, #24]
 8008202:	69fa      	ldr	r2, [r7, #28]
 8008204:	e841 2300 	strex	r3, r2, [r1]
 8008208:	617b      	str	r3, [r7, #20]
   return(result);
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1e4      	bne.n	80081da <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008216:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f865 	bl	80082ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008222:	e03f      	b.n	80082a4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00e      	beq.n	800824e <HAL_UART_IRQHandler+0x56a>
 8008230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d008      	beq.n	800824e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008244:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fde9 	bl	8008e1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800824c:	e02d      	b.n	80082aa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800824e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00e      	beq.n	8008278 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800825a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800825e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008262:	2b00      	cmp	r3, #0
 8008264:	d008      	beq.n	8008278 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800826a:	2b00      	cmp	r3, #0
 800826c:	d01c      	beq.n	80082a8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	4798      	blx	r3
    }
    return;
 8008276:	e017      	b.n	80082a8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800827c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d012      	beq.n	80082aa <HAL_UART_IRQHandler+0x5c6>
 8008284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00c      	beq.n	80082aa <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fd9a 	bl	8008dca <UART_EndTransmit_IT>
    return;
 8008296:	e008      	b.n	80082aa <HAL_UART_IRQHandler+0x5c6>
      return;
 8008298:	bf00      	nop
 800829a:	e006      	b.n	80082aa <HAL_UART_IRQHandler+0x5c6>
    return;
 800829c:	bf00      	nop
 800829e:	e004      	b.n	80082aa <HAL_UART_IRQHandler+0x5c6>
      return;
 80082a0:	bf00      	nop
 80082a2:	e002      	b.n	80082aa <HAL_UART_IRQHandler+0x5c6>
      return;
 80082a4:	bf00      	nop
 80082a6:	e000      	b.n	80082aa <HAL_UART_IRQHandler+0x5c6>
    return;
 80082a8:	bf00      	nop
  }

}
 80082aa:	37e8      	adds	r7, #232	; 0xe8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800830c:	2300      	movs	r3, #0
 800830e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	689a      	ldr	r2, [r3, #8]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	431a      	orrs	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	431a      	orrs	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	4313      	orrs	r3, r2
 8008326:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008332:	f023 030c 	bic.w	r3, r3, #12
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	6812      	ldr	r2, [r2, #0]
 800833a:	6979      	ldr	r1, [r7, #20]
 800833c:	430b      	orrs	r3, r1
 800833e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68da      	ldr	r2, [r3, #12]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	430a      	orrs	r2, r1
 8008354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a1b      	ldr	r3, [r3, #32]
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	4313      	orrs	r3, r2
 8008364:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	430a      	orrs	r2, r1
 8008378:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a99      	ldr	r2, [pc, #612]	; (80085e4 <UART_SetConfig+0x2e0>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d120      	bne.n	80083c6 <UART_SetConfig+0xc2>
 8008384:	4b98      	ldr	r3, [pc, #608]	; (80085e8 <UART_SetConfig+0x2e4>)
 8008386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008388:	f003 0303 	and.w	r3, r3, #3
 800838c:	2b03      	cmp	r3, #3
 800838e:	d817      	bhi.n	80083c0 <UART_SetConfig+0xbc>
 8008390:	a201      	add	r2, pc, #4	; (adr r2, 8008398 <UART_SetConfig+0x94>)
 8008392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008396:	bf00      	nop
 8008398:	080083a9 	.word	0x080083a9
 800839c:	080083b5 	.word	0x080083b5
 80083a0:	080083bb 	.word	0x080083bb
 80083a4:	080083af 	.word	0x080083af
 80083a8:	2301      	movs	r3, #1
 80083aa:	77fb      	strb	r3, [r7, #31]
 80083ac:	e061      	b.n	8008472 <UART_SetConfig+0x16e>
 80083ae:	2302      	movs	r3, #2
 80083b0:	77fb      	strb	r3, [r7, #31]
 80083b2:	e05e      	b.n	8008472 <UART_SetConfig+0x16e>
 80083b4:	2304      	movs	r3, #4
 80083b6:	77fb      	strb	r3, [r7, #31]
 80083b8:	e05b      	b.n	8008472 <UART_SetConfig+0x16e>
 80083ba:	2308      	movs	r3, #8
 80083bc:	77fb      	strb	r3, [r7, #31]
 80083be:	e058      	b.n	8008472 <UART_SetConfig+0x16e>
 80083c0:	2310      	movs	r3, #16
 80083c2:	77fb      	strb	r3, [r7, #31]
 80083c4:	e055      	b.n	8008472 <UART_SetConfig+0x16e>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a88      	ldr	r2, [pc, #544]	; (80085ec <UART_SetConfig+0x2e8>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d124      	bne.n	800841a <UART_SetConfig+0x116>
 80083d0:	4b85      	ldr	r3, [pc, #532]	; (80085e8 <UART_SetConfig+0x2e4>)
 80083d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80083d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083dc:	d011      	beq.n	8008402 <UART_SetConfig+0xfe>
 80083de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083e2:	d817      	bhi.n	8008414 <UART_SetConfig+0x110>
 80083e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083e8:	d011      	beq.n	800840e <UART_SetConfig+0x10a>
 80083ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083ee:	d811      	bhi.n	8008414 <UART_SetConfig+0x110>
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d003      	beq.n	80083fc <UART_SetConfig+0xf8>
 80083f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083f8:	d006      	beq.n	8008408 <UART_SetConfig+0x104>
 80083fa:	e00b      	b.n	8008414 <UART_SetConfig+0x110>
 80083fc:	2300      	movs	r3, #0
 80083fe:	77fb      	strb	r3, [r7, #31]
 8008400:	e037      	b.n	8008472 <UART_SetConfig+0x16e>
 8008402:	2302      	movs	r3, #2
 8008404:	77fb      	strb	r3, [r7, #31]
 8008406:	e034      	b.n	8008472 <UART_SetConfig+0x16e>
 8008408:	2304      	movs	r3, #4
 800840a:	77fb      	strb	r3, [r7, #31]
 800840c:	e031      	b.n	8008472 <UART_SetConfig+0x16e>
 800840e:	2308      	movs	r3, #8
 8008410:	77fb      	strb	r3, [r7, #31]
 8008412:	e02e      	b.n	8008472 <UART_SetConfig+0x16e>
 8008414:	2310      	movs	r3, #16
 8008416:	77fb      	strb	r3, [r7, #31]
 8008418:	e02b      	b.n	8008472 <UART_SetConfig+0x16e>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a74      	ldr	r2, [pc, #464]	; (80085f0 <UART_SetConfig+0x2ec>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d124      	bne.n	800846e <UART_SetConfig+0x16a>
 8008424:	4b70      	ldr	r3, [pc, #448]	; (80085e8 <UART_SetConfig+0x2e4>)
 8008426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008428:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800842c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008430:	d011      	beq.n	8008456 <UART_SetConfig+0x152>
 8008432:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008436:	d817      	bhi.n	8008468 <UART_SetConfig+0x164>
 8008438:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800843c:	d011      	beq.n	8008462 <UART_SetConfig+0x15e>
 800843e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008442:	d811      	bhi.n	8008468 <UART_SetConfig+0x164>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d003      	beq.n	8008450 <UART_SetConfig+0x14c>
 8008448:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800844c:	d006      	beq.n	800845c <UART_SetConfig+0x158>
 800844e:	e00b      	b.n	8008468 <UART_SetConfig+0x164>
 8008450:	2300      	movs	r3, #0
 8008452:	77fb      	strb	r3, [r7, #31]
 8008454:	e00d      	b.n	8008472 <UART_SetConfig+0x16e>
 8008456:	2302      	movs	r3, #2
 8008458:	77fb      	strb	r3, [r7, #31]
 800845a:	e00a      	b.n	8008472 <UART_SetConfig+0x16e>
 800845c:	2304      	movs	r3, #4
 800845e:	77fb      	strb	r3, [r7, #31]
 8008460:	e007      	b.n	8008472 <UART_SetConfig+0x16e>
 8008462:	2308      	movs	r3, #8
 8008464:	77fb      	strb	r3, [r7, #31]
 8008466:	e004      	b.n	8008472 <UART_SetConfig+0x16e>
 8008468:	2310      	movs	r3, #16
 800846a:	77fb      	strb	r3, [r7, #31]
 800846c:	e001      	b.n	8008472 <UART_SetConfig+0x16e>
 800846e:	2310      	movs	r3, #16
 8008470:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800847a:	d15a      	bne.n	8008532 <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 800847c:	7ffb      	ldrb	r3, [r7, #31]
 800847e:	2b08      	cmp	r3, #8
 8008480:	d827      	bhi.n	80084d2 <UART_SetConfig+0x1ce>
 8008482:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <UART_SetConfig+0x184>)
 8008484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008488:	080084ad 	.word	0x080084ad
 800848c:	080084b5 	.word	0x080084b5
 8008490:	080084bd 	.word	0x080084bd
 8008494:	080084d3 	.word	0x080084d3
 8008498:	080084c3 	.word	0x080084c3
 800849c:	080084d3 	.word	0x080084d3
 80084a0:	080084d3 	.word	0x080084d3
 80084a4:	080084d3 	.word	0x080084d3
 80084a8:	080084cb 	.word	0x080084cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084ac:	f7fe f8b4 	bl	8006618 <HAL_RCC_GetPCLK1Freq>
 80084b0:	61b8      	str	r0, [r7, #24]
        break;
 80084b2:	e013      	b.n	80084dc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084b4:	f7fe f8d2 	bl	800665c <HAL_RCC_GetPCLK2Freq>
 80084b8:	61b8      	str	r0, [r7, #24]
        break;
 80084ba:	e00f      	b.n	80084dc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084bc:	4b4d      	ldr	r3, [pc, #308]	; (80085f4 <UART_SetConfig+0x2f0>)
 80084be:	61bb      	str	r3, [r7, #24]
        break;
 80084c0:	e00c      	b.n	80084dc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084c2:	f7fe f847 	bl	8006554 <HAL_RCC_GetSysClockFreq>
 80084c6:	61b8      	str	r0, [r7, #24]
        break;
 80084c8:	e008      	b.n	80084dc <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ce:	61bb      	str	r3, [r7, #24]
        break;
 80084d0:	e004      	b.n	80084dc <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 80084d2:	2300      	movs	r3, #0
 80084d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	77bb      	strb	r3, [r7, #30]
        break;
 80084da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d074      	beq.n	80085cc <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	005a      	lsls	r2, r3, #1
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	085b      	lsrs	r3, r3, #1
 80084ec:	441a      	add	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	2b0f      	cmp	r3, #15
 80084fc:	d916      	bls.n	800852c <UART_SetConfig+0x228>
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008504:	d212      	bcs.n	800852c <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	b29b      	uxth	r3, r3
 800850a:	f023 030f 	bic.w	r3, r3, #15
 800850e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	085b      	lsrs	r3, r3, #1
 8008514:	b29b      	uxth	r3, r3
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	b29a      	uxth	r2, r3
 800851c:	89fb      	ldrh	r3, [r7, #14]
 800851e:	4313      	orrs	r3, r2
 8008520:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	89fa      	ldrh	r2, [r7, #14]
 8008528:	60da      	str	r2, [r3, #12]
 800852a:	e04f      	b.n	80085cc <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	77bb      	strb	r3, [r7, #30]
 8008530:	e04c      	b.n	80085cc <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008532:	7ffb      	ldrb	r3, [r7, #31]
 8008534:	2b08      	cmp	r3, #8
 8008536:	d828      	bhi.n	800858a <UART_SetConfig+0x286>
 8008538:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <UART_SetConfig+0x23c>)
 800853a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853e:	bf00      	nop
 8008540:	08008565 	.word	0x08008565
 8008544:	0800856d 	.word	0x0800856d
 8008548:	08008575 	.word	0x08008575
 800854c:	0800858b 	.word	0x0800858b
 8008550:	0800857b 	.word	0x0800857b
 8008554:	0800858b 	.word	0x0800858b
 8008558:	0800858b 	.word	0x0800858b
 800855c:	0800858b 	.word	0x0800858b
 8008560:	08008583 	.word	0x08008583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008564:	f7fe f858 	bl	8006618 <HAL_RCC_GetPCLK1Freq>
 8008568:	61b8      	str	r0, [r7, #24]
        break;
 800856a:	e013      	b.n	8008594 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800856c:	f7fe f876 	bl	800665c <HAL_RCC_GetPCLK2Freq>
 8008570:	61b8      	str	r0, [r7, #24]
        break;
 8008572:	e00f      	b.n	8008594 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008574:	4b1f      	ldr	r3, [pc, #124]	; (80085f4 <UART_SetConfig+0x2f0>)
 8008576:	61bb      	str	r3, [r7, #24]
        break;
 8008578:	e00c      	b.n	8008594 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800857a:	f7fd ffeb 	bl	8006554 <HAL_RCC_GetSysClockFreq>
 800857e:	61b8      	str	r0, [r7, #24]
        break;
 8008580:	e008      	b.n	8008594 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008586:	61bb      	str	r3, [r7, #24]
        break;
 8008588:	e004      	b.n	8008594 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	77bb      	strb	r3, [r7, #30]
        break;
 8008592:	bf00      	nop
    }

    if (pclk != 0U)
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d018      	beq.n	80085cc <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	085a      	lsrs	r2, r3, #1
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	441a      	add	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2b0f      	cmp	r3, #15
 80085b2:	d909      	bls.n	80085c8 <UART_SetConfig+0x2c4>
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ba:	d205      	bcs.n	80085c8 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	b29a      	uxth	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	60da      	str	r2, [r3, #12]
 80085c6:	e001      	b.n	80085cc <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80085d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3720      	adds	r7, #32
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	40013800 	.word	0x40013800
 80085e8:	40021000 	.word	0x40021000
 80085ec:	40004400 	.word	0x40004400
 80085f0:	40004800 	.word	0x40004800
 80085f4:	007a1200 	.word	0x007a1200

080085f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	f003 0308 	and.w	r3, r3, #8
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00a      	beq.n	8008622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	430a      	orrs	r2, r1
 8008620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00a      	beq.n	8008644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	430a      	orrs	r2, r1
 8008642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	f003 0302 	and.w	r3, r3, #2
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00a      	beq.n	8008666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866a:	f003 0304 	and.w	r3, r3, #4
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	f003 0310 	and.w	r3, r3, #16
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00a      	beq.n	80086aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ae:	f003 0320 	and.w	r3, r3, #32
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d01a      	beq.n	800870e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086f6:	d10a      	bne.n	800870e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00a      	beq.n	8008730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	605a      	str	r2, [r3, #4]
  }
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b098      	sub	sp, #96	; 0x60
 8008740:	af02      	add	r7, sp, #8
 8008742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800874c:	f7fa fc3e 	bl	8002fcc <HAL_GetTick>
 8008750:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0308 	and.w	r3, r3, #8
 800875c:	2b08      	cmp	r3, #8
 800875e:	d12e      	bne.n	80087be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008768:	2200      	movs	r2, #0
 800876a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f88c 	bl	800888c <UART_WaitOnFlagUntilTimeout>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d021      	beq.n	80087be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008782:	e853 3f00 	ldrex	r3, [r3]
 8008786:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800878e:	653b      	str	r3, [r7, #80]	; 0x50
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	461a      	mov	r2, r3
 8008796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008798:	647b      	str	r3, [r7, #68]	; 0x44
 800879a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800879e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e6      	bne.n	800877a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2220      	movs	r2, #32
 80087b0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e062      	b.n	8008884 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 0304 	and.w	r3, r3, #4
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d149      	bne.n	8008860 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087d4:	2200      	movs	r2, #0
 80087d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f856 	bl	800888c <UART_WaitOnFlagUntilTimeout>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d03c      	beq.n	8008860 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	623b      	str	r3, [r7, #32]
   return(result);
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	461a      	mov	r2, r3
 8008802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008804:	633b      	str	r3, [r7, #48]	; 0x30
 8008806:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008808:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800880a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800880c:	e841 2300 	strex	r3, r2, [r1]
 8008810:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1e6      	bne.n	80087e6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3308      	adds	r3, #8
 800881e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	e853 3f00 	ldrex	r3, [r3]
 8008826:	60fb      	str	r3, [r7, #12]
   return(result);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 0301 	bic.w	r3, r3, #1
 800882e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3308      	adds	r3, #8
 8008836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008838:	61fa      	str	r2, [r7, #28]
 800883a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883c:	69b9      	ldr	r1, [r7, #24]
 800883e:	69fa      	ldr	r2, [r7, #28]
 8008840:	e841 2300 	strex	r3, r2, [r1]
 8008844:	617b      	str	r3, [r7, #20]
   return(result);
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1e5      	bne.n	8008818 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2220      	movs	r2, #32
 8008850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e011      	b.n	8008884 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2220      	movs	r2, #32
 8008864:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2220      	movs	r2, #32
 800886a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3758      	adds	r7, #88	; 0x58
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	603b      	str	r3, [r7, #0]
 8008898:	4613      	mov	r3, r2
 800889a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800889c:	e04f      	b.n	800893e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a4:	d04b      	beq.n	800893e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088a6:	f7fa fb91 	bl	8002fcc <HAL_GetTick>
 80088aa:	4602      	mov	r2, r0
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d302      	bcc.n	80088bc <UART_WaitOnFlagUntilTimeout+0x30>
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e04e      	b.n	800895e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0304 	and.w	r3, r3, #4
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d037      	beq.n	800893e <UART_WaitOnFlagUntilTimeout+0xb2>
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	2b80      	cmp	r3, #128	; 0x80
 80088d2:	d034      	beq.n	800893e <UART_WaitOnFlagUntilTimeout+0xb2>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b40      	cmp	r3, #64	; 0x40
 80088d8:	d031      	beq.n	800893e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	f003 0308 	and.w	r3, r3, #8
 80088e4:	2b08      	cmp	r3, #8
 80088e6:	d110      	bne.n	800890a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2208      	movs	r2, #8
 80088ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 f8ff 	bl	8008af4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2208      	movs	r2, #8
 80088fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e029      	b.n	800895e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008918:	d111      	bne.n	800893e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008922:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 f8e5 	bl	8008af4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2220      	movs	r2, #32
 800892e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e00f      	b.n	800895e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	69da      	ldr	r2, [r3, #28]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	4013      	ands	r3, r2
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	429a      	cmp	r2, r3
 800894c:	bf0c      	ite	eq
 800894e:	2301      	moveq	r3, #1
 8008950:	2300      	movne	r3, #0
 8008952:	b2db      	uxtb	r3, r3
 8008954:	461a      	mov	r2, r3
 8008956:	79fb      	ldrb	r3, [r7, #7]
 8008958:	429a      	cmp	r2, r3
 800895a:	d0a0      	beq.n	800889e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b096      	sub	sp, #88	; 0x58
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	4613      	mov	r3, r2
 8008974:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	88fa      	ldrh	r2, [r7, #6]
 8008980:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2222      	movs	r2, #34	; 0x22
 8008990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008998:	2b00      	cmp	r3, #0
 800899a:	d028      	beq.n	80089ee <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089a0:	4a3e      	ldr	r2, [pc, #248]	; (8008a9c <UART_Start_Receive_DMA+0x134>)
 80089a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089a8:	4a3d      	ldr	r2, [pc, #244]	; (8008aa0 <UART_Start_Receive_DMA+0x138>)
 80089aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089b0:	4a3c      	ldr	r2, [pc, #240]	; (8008aa4 <UART_Start_Receive_DMA+0x13c>)
 80089b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089b8:	2200      	movs	r2, #0
 80089ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3324      	adds	r3, #36	; 0x24
 80089c6:	4619      	mov	r1, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089cc:	461a      	mov	r2, r3
 80089ce:	88fb      	ldrh	r3, [r7, #6]
 80089d0:	f7fb fdf0 	bl	80045b4 <HAL_DMA_Start_IT>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d009      	beq.n	80089ee <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2210      	movs	r2, #16
 80089de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e051      	b.n	8008a92 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d018      	beq.n	8008a28 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a0a:	657b      	str	r3, [r7, #84]	; 0x54
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a14:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a16:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a1c:	e841 2300 	strex	r3, r2, [r1]
 8008a20:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1e6      	bne.n	80089f6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	f043 0301 	orr.w	r3, r3, #1
 8008a3e:	653b      	str	r3, [r7, #80]	; 0x50
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3308      	adds	r3, #8
 8008a46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a48:	637a      	str	r2, [r7, #52]	; 0x34
 8008a4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e5      	bne.n	8008a28 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3308      	adds	r3, #8
 8008a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	e853 3f00 	ldrex	r3, [r3]
 8008a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3308      	adds	r3, #8
 8008a7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a7c:	623a      	str	r2, [r7, #32]
 8008a7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a80:	69f9      	ldr	r1, [r7, #28]
 8008a82:	6a3a      	ldr	r2, [r7, #32]
 8008a84:	e841 2300 	strex	r3, r2, [r1]
 8008a88:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e5      	bne.n	8008a5c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3758      	adds	r7, #88	; 0x58
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	08008bbd 	.word	0x08008bbd
 8008aa0:	08008ce3 	.word	0x08008ce3
 8008aa4:	08008d21 	.word	0x08008d21

08008aa8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b089      	sub	sp, #36	; 0x24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	e853 3f00 	ldrex	r3, [r3]
 8008abc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008ac4:	61fb      	str	r3, [r7, #28]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	61bb      	str	r3, [r7, #24]
 8008ad0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad2:	6979      	ldr	r1, [r7, #20]
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	613b      	str	r3, [r7, #16]
   return(result);
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1e6      	bne.n	8008ab0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2220      	movs	r2, #32
 8008ae6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008ae8:	bf00      	nop
 8008aea:	3724      	adds	r7, #36	; 0x24
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b095      	sub	sp, #84	; 0x54
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b04:	e853 3f00 	ldrex	r3, [r3]
 8008b08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	461a      	mov	r2, r3
 8008b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8008b1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b22:	e841 2300 	strex	r3, r2, [r1]
 8008b26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1e6      	bne.n	8008afc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3308      	adds	r3, #8
 8008b34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	f023 0301 	bic.w	r3, r3, #1
 8008b44:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3308      	adds	r3, #8
 8008b4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1e5      	bne.n	8008b2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d118      	bne.n	8008b9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	e853 3f00 	ldrex	r3, [r3]
 8008b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	f023 0310 	bic.w	r3, r3, #16
 8008b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	461a      	mov	r2, r3
 8008b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b88:	61bb      	str	r3, [r7, #24]
 8008b8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8c:	6979      	ldr	r1, [r7, #20]
 8008b8e:	69ba      	ldr	r2, [r7, #24]
 8008b90:	e841 2300 	strex	r3, r2, [r1]
 8008b94:	613b      	str	r3, [r7, #16]
   return(result);
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1e6      	bne.n	8008b6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2220      	movs	r2, #32
 8008ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008bb0:	bf00      	nop
 8008bb2:	3754      	adds	r7, #84	; 0x54
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b09c      	sub	sp, #112	; 0x70
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	2b20      	cmp	r3, #32
 8008bd0:	d071      	beq.n	8008cb6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8008bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008be2:	e853 3f00 	ldrex	r3, [r3]
 8008be6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bee:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bf8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bfa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c00:	e841 2300 	strex	r3, r2, [r1]
 8008c04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e6      	bne.n	8008bda <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3308      	adds	r3, #8
 8008c12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c16:	e853 3f00 	ldrex	r3, [r3]
 8008c1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1e:	f023 0301 	bic.w	r3, r3, #1
 8008c22:	667b      	str	r3, [r7, #100]	; 0x64
 8008c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3308      	adds	r3, #8
 8008c2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c2c:	647a      	str	r2, [r7, #68]	; 0x44
 8008c2e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c34:	e841 2300 	strex	r3, r2, [r1]
 8008c38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1e5      	bne.n	8008c0c <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3308      	adds	r3, #8
 8008c46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	e853 3f00 	ldrex	r3, [r3]
 8008c4e:	623b      	str	r3, [r7, #32]
   return(result);
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c56:	663b      	str	r3, [r7, #96]	; 0x60
 8008c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c60:	633a      	str	r2, [r7, #48]	; 0x30
 8008c62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c68:	e841 2300 	strex	r3, r2, [r1]
 8008c6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1e5      	bne.n	8008c40 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c76:	2220      	movs	r2, #32
 8008c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d118      	bne.n	8008cb6 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	e853 3f00 	ldrex	r3, [r3]
 8008c90:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f023 0310 	bic.w	r3, r3, #16
 8008c98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ca2:	61fb      	str	r3, [r7, #28]
 8008ca4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca6:	69b9      	ldr	r1, [r7, #24]
 8008ca8:	69fa      	ldr	r2, [r7, #28]
 8008caa:	e841 2300 	strex	r3, r2, [r1]
 8008cae:	617b      	str	r3, [r7, #20]
   return(result);
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1e6      	bne.n	8008c84 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cb8:	2200      	movs	r2, #0
 8008cba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d107      	bne.n	8008cd4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008cce:	f7ff fb0d 	bl	80082ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008cd2:	e002      	b.n	8008cda <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008cd4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008cd6:	f7f9 fc3d 	bl	8002554 <HAL_UART_RxCpltCallback>
}
 8008cda:	bf00      	nop
 8008cdc:	3770      	adds	r7, #112	; 0x70
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d109      	bne.n	8008d12 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d04:	085b      	lsrs	r3, r3, #1
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	4619      	mov	r1, r3
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f7ff faee 	bl	80082ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d10:	e002      	b.n	8008d18 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f7ff fad6 	bl	80082c4 <HAL_UART_RxHalfCpltCallback>
}
 8008d18:	bf00      	nop
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d32:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d3a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d46:	2b80      	cmp	r3, #128	; 0x80
 8008d48:	d109      	bne.n	8008d5e <UART_DMAError+0x3e>
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	2b21      	cmp	r3, #33	; 0x21
 8008d4e:	d106      	bne.n	8008d5e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008d58:	6978      	ldr	r0, [r7, #20]
 8008d5a:	f7ff fea5 	bl	8008aa8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d68:	2b40      	cmp	r3, #64	; 0x40
 8008d6a:	d109      	bne.n	8008d80 <UART_DMAError+0x60>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2b22      	cmp	r3, #34	; 0x22
 8008d70:	d106      	bne.n	8008d80 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008d7a:	6978      	ldr	r0, [r7, #20]
 8008d7c:	f7ff feba 	bl	8008af4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d86:	f043 0210 	orr.w	r2, r3, #16
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d90:	6978      	ldr	r0, [r7, #20]
 8008d92:	f7ff faa1 	bl	80082d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d96:	bf00      	nop
 8008d98:	3718      	adds	r7, #24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f7ff fa8b 	bl	80082d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dc2:	bf00      	nop
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b088      	sub	sp, #32
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	e853 3f00 	ldrex	r3, [r3]
 8008dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008de6:	61fb      	str	r3, [r7, #28]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	461a      	mov	r2, r3
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	61bb      	str	r3, [r7, #24]
 8008df2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df4:	6979      	ldr	r1, [r7, #20]
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	e841 2300 	strex	r3, r2, [r1]
 8008dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1e6      	bne.n	8008dd2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2220      	movs	r2, #32
 8008e08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7ff fa4d 	bl	80082b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e16:	bf00      	nop
 8008e18:	3720      	adds	r7, #32
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b083      	sub	sp, #12
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008e26:	bf00      	nop
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <memset>:
 8008e32:	4402      	add	r2, r0
 8008e34:	4603      	mov	r3, r0
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d100      	bne.n	8008e3c <memset+0xa>
 8008e3a:	4770      	bx	lr
 8008e3c:	f803 1b01 	strb.w	r1, [r3], #1
 8008e40:	e7f9      	b.n	8008e36 <memset+0x4>
	...

08008e44 <__libc_init_array>:
 8008e44:	b570      	push	{r4, r5, r6, lr}
 8008e46:	4d0d      	ldr	r5, [pc, #52]	; (8008e7c <__libc_init_array+0x38>)
 8008e48:	4c0d      	ldr	r4, [pc, #52]	; (8008e80 <__libc_init_array+0x3c>)
 8008e4a:	1b64      	subs	r4, r4, r5
 8008e4c:	10a4      	asrs	r4, r4, #2
 8008e4e:	2600      	movs	r6, #0
 8008e50:	42a6      	cmp	r6, r4
 8008e52:	d109      	bne.n	8008e68 <__libc_init_array+0x24>
 8008e54:	4d0b      	ldr	r5, [pc, #44]	; (8008e84 <__libc_init_array+0x40>)
 8008e56:	4c0c      	ldr	r4, [pc, #48]	; (8008e88 <__libc_init_array+0x44>)
 8008e58:	f000 f818 	bl	8008e8c <_init>
 8008e5c:	1b64      	subs	r4, r4, r5
 8008e5e:	10a4      	asrs	r4, r4, #2
 8008e60:	2600      	movs	r6, #0
 8008e62:	42a6      	cmp	r6, r4
 8008e64:	d105      	bne.n	8008e72 <__libc_init_array+0x2e>
 8008e66:	bd70      	pop	{r4, r5, r6, pc}
 8008e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e6c:	4798      	blx	r3
 8008e6e:	3601      	adds	r6, #1
 8008e70:	e7ee      	b.n	8008e50 <__libc_init_array+0xc>
 8008e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e76:	4798      	blx	r3
 8008e78:	3601      	adds	r6, #1
 8008e7a:	e7f2      	b.n	8008e62 <__libc_init_array+0x1e>
 8008e7c:	08008edc 	.word	0x08008edc
 8008e80:	08008edc 	.word	0x08008edc
 8008e84:	08008edc 	.word	0x08008edc
 8008e88:	08008ee0 	.word	0x08008ee0

08008e8c <_init>:
 8008e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8e:	bf00      	nop
 8008e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e92:	bc08      	pop	{r3}
 8008e94:	469e      	mov	lr, r3
 8008e96:	4770      	bx	lr

08008e98 <_fini>:
 8008e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9a:	bf00      	nop
 8008e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e9e:	bc08      	pop	{r3}
 8008ea0:	469e      	mov	lr, r3
 8008ea2:	4770      	bx	lr
