
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007880  08007880  00017880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b8  080078b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080078b8  080078b8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078b8  080078b8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078b8  080078b8  000178b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078bc  080078bc  000178bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080078c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  20000010  080078d0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  080078d0  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016c2f  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039b1  00000000  00000000  00036cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001430  00000000  00000000  0003a668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9f  00000000  00000000  0003ba98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dde6  00000000  00000000  0003ca37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001afe5  00000000  00000000  0005a81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adb46  00000000  00000000  00075802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005304  00000000  00000000  00123348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0012864c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007868 	.word	0x08007868

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08007868 	.word	0x08007868

080001c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001d8:	4b2e      	ldr	r3, [pc, #184]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001da:	4a2f      	ldr	r2, [pc, #188]	; (8000298 <MX_ADC1_Init+0xd0>)
 80001dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001de:	4b2d      	ldr	r3, [pc, #180]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80001e6:	4b2b      	ldr	r3, [pc, #172]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001ec:	4b29      	ldr	r3, [pc, #164]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f2:	4b28      	ldr	r3, [pc, #160]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001f4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80001f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001fa:	4b26      	ldr	r3, [pc, #152]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000200:	4b24      	ldr	r3, [pc, #144]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000202:	2204      	movs	r2, #4
 8000204:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000206:	4823      	ldr	r0, [pc, #140]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000208:	f002 f954 	bl	80024b4 <HAL_ADC_Init>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000212:	f001 fd45 	bl	8001ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000216:	2307      	movs	r3, #7
 8000218:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800021a:	2301      	movs	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800021e:	2307      	movs	r3, #7
 8000220:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4619      	mov	r1, r3
 8000226:	481b      	ldr	r0, [pc, #108]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000228:	f002 faba 	bl	80027a0 <HAL_ADC_ConfigChannel>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000232:	f001 fd35 	bl	8001ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000236:	230e      	movs	r3, #14
 8000238:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800023a:	2302      	movs	r3, #2
 800023c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4619      	mov	r1, r3
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000244:	f002 faac 	bl	80027a0 <HAL_ADC_ConfigChannel>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800024e:	f001 fd27 	bl	8001ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000252:	230f      	movs	r3, #15
 8000254:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000256:	2303      	movs	r3, #3
 8000258:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4619      	mov	r1, r3
 800025e:	480d      	ldr	r0, [pc, #52]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000260:	f002 fa9e 	bl	80027a0 <HAL_ADC_ConfigChannel>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800026a:	f001 fd19 	bl	8001ca0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800026e:	2308      	movs	r3, #8
 8000270:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000272:	2304      	movs	r3, #4
 8000274:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4619      	mov	r1, r3
 800027a:	4806      	ldr	r0, [pc, #24]	; (8000294 <MX_ADC1_Init+0xcc>)
 800027c:	f002 fa90 	bl	80027a0 <HAL_ADC_ConfigChannel>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000286:	f001 fd0b 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800028a:	bf00      	nop
 800028c:	3710      	adds	r7, #16
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	2000002c 	.word	0x2000002c
 8000298:	40012400 	.word	0x40012400

0800029c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08c      	sub	sp, #48	; 0x30
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a4:	f107 031c 	add.w	r3, r7, #28
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a42      	ldr	r2, [pc, #264]	; (80003c4 <HAL_ADC_MspInit+0x128>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d17d      	bne.n	80003ba <HAL_ADC_MspInit+0x11e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002be:	4b42      	ldr	r3, [pc, #264]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a41      	ldr	r2, [pc, #260]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6193      	str	r3, [r2, #24]
 80002ca:	4b3f      	ldr	r3, [pc, #252]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002d2:	61bb      	str	r3, [r7, #24]
 80002d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	4b3c      	ldr	r3, [pc, #240]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a3b      	ldr	r2, [pc, #236]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b39      	ldr	r3, [pc, #228]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ea:	617b      	str	r3, [r7, #20]
 80002ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ee:	4b36      	ldr	r3, [pc, #216]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a35      	ldr	r2, [pc, #212]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b33      	ldr	r3, [pc, #204]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000302:	613b      	str	r3, [r7, #16]
 8000304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000306:	4b30      	ldr	r3, [pc, #192]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a2f      	ldr	r2, [pc, #188]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 800030c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	4b2d      	ldr	r3, [pc, #180]	; (80003c8 <HAL_ADC_MspInit+0x12c>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = FIN_ADC4_Pin;
 800031e:	2380      	movs	r3, #128	; 0x80
 8000320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000322:	2303      	movs	r3, #3
 8000324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FIN_ADC4_GPIO_Port, &GPIO_InitStruct);
 800032a:	f107 031c 	add.w	r3, r7, #28
 800032e:	4619      	mov	r1, r3
 8000330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000334:	f003 f9ec 	bl	8003710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FIN_ADC3_Pin|FIN_ADC2_Pin;
 8000338:	2330      	movs	r3, #48	; 0x30
 800033a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800033c:	2303      	movs	r3, #3
 800033e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000344:	f107 031c 	add.w	r3, r7, #28
 8000348:	4619      	mov	r1, r3
 800034a:	4820      	ldr	r0, [pc, #128]	; (80003cc <HAL_ADC_MspInit+0x130>)
 800034c:	f003 f9e0 	bl	8003710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FIN_ADC4B0_Pin;
 8000350:	2301      	movs	r3, #1
 8000352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000354:	2303      	movs	r3, #3
 8000356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FIN_ADC4B0_GPIO_Port, &GPIO_InitStruct);
 800035c:	f107 031c 	add.w	r3, r7, #28
 8000360:	4619      	mov	r1, r3
 8000362:	481b      	ldr	r0, [pc, #108]	; (80003d0 <HAL_ADC_MspInit+0x134>)
 8000364:	f003 f9d4 	bl	8003710 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <HAL_ADC_MspInit+0x13c>)
 800036c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800036e:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800037a:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 800037c:	2280      	movs	r2, #128	; 0x80
 800037e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000386:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 800038a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800038e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000392:	2220      	movs	r2, #32
 8000394:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 8000398:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800039c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800039e:	480d      	ldr	r0, [pc, #52]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 80003a0:	f002 fdaf 	bl	8002f02 <HAL_DMA_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 80003aa:	f001 fc79 	bl	8001ca0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a08      	ldr	r2, [pc, #32]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 80003b2:	621a      	str	r2, [r3, #32]
 80003b4:	4a07      	ldr	r2, [pc, #28]	; (80003d4 <HAL_ADC_MspInit+0x138>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003ba:	bf00      	nop
 80003bc:	3730      	adds	r7, #48	; 0x30
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40012400 	.word	0x40012400
 80003c8:	40021000 	.word	0x40021000
 80003cc:	48000800 	.word	0x48000800
 80003d0:	48000400 	.word	0x48000400
 80003d4:	2000005c 	.word	0x2000005c
 80003d8:	40020008 	.word	0x40020008

080003dc <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003e0:	4b16      	ldr	r3, [pc, #88]	; (800043c <MX_CAN_Init+0x60>)
 80003e2:	4a17      	ldr	r2, [pc, #92]	; (8000440 <MX_CAN_Init+0x64>)
 80003e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_CAN_Init+0x60>)
 80003e8:	2210      	movs	r2, #16
 80003ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <MX_CAN_Init+0x60>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <MX_CAN_Init+0x60>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80003f8:	4b10      	ldr	r3, [pc, #64]	; (800043c <MX_CAN_Init+0x60>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <MX_CAN_Init+0x60>)
 8000400:	2200      	movs	r2, #0
 8000402:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000404:	4b0d      	ldr	r3, [pc, #52]	; (800043c <MX_CAN_Init+0x60>)
 8000406:	2200      	movs	r2, #0
 8000408:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_CAN_Init+0x60>)
 800040c:	2200      	movs	r2, #0
 800040e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000410:	4b0a      	ldr	r3, [pc, #40]	; (800043c <MX_CAN_Init+0x60>)
 8000412:	2200      	movs	r2, #0
 8000414:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <MX_CAN_Init+0x60>)
 8000418:	2200      	movs	r2, #0
 800041a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800041c:	4b07      	ldr	r3, [pc, #28]	; (800043c <MX_CAN_Init+0x60>)
 800041e:	2200      	movs	r2, #0
 8000420:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000422:	4b06      	ldr	r3, [pc, #24]	; (800043c <MX_CAN_Init+0x60>)
 8000424:	2200      	movs	r2, #0
 8000426:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000428:	4804      	ldr	r0, [pc, #16]	; (800043c <MX_CAN_Init+0x60>)
 800042a:	f002 fb44 	bl	8002ab6 <HAL_CAN_Init>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000434:	f001 fc34 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	200000a0 	.word	0x200000a0
 8000440:	40006400 	.word	0x40006400

08000444 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a17      	ldr	r2, [pc, #92]	; (80004c0 <HAL_CAN_MspInit+0x7c>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d128      	bne.n	80004b8 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000466:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <HAL_CAN_MspInit+0x80>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a16      	ldr	r2, [pc, #88]	; (80004c4 <HAL_CAN_MspInit+0x80>)
 800046c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <HAL_CAN_MspInit+0x80>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <HAL_CAN_MspInit+0x80>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a10      	ldr	r2, [pc, #64]	; (80004c4 <HAL_CAN_MspInit+0x80>)
 8000484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000488:	6153      	str	r3, [r2, #20]
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <HAL_CAN_MspInit+0x80>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000496:	f44f 7340 	mov.w	r3, #768	; 0x300
 800049a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049c:	2302      	movs	r3, #2
 800049e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a4:	2303      	movs	r3, #3
 80004a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80004a8:	2309      	movs	r3, #9
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ac:	f107 0314 	add.w	r3, r7, #20
 80004b0:	4619      	mov	r1, r3
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <HAL_CAN_MspInit+0x84>)
 80004b4:	f003 f92c 	bl	8003710 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80004b8:	bf00      	nop
 80004ba:	3728      	adds	r7, #40	; 0x28
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40006400 	.word	0x40006400
 80004c4:	40021000 	.word	0x40021000
 80004c8:	48000400 	.word	0x48000400

080004cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d2:	4b1a      	ldr	r3, [pc, #104]	; (800053c <MX_DMA_Init+0x70>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a19      	ldr	r2, [pc, #100]	; (800053c <MX_DMA_Init+0x70>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <MX_DMA_Init+0x70>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004ea:	4b14      	ldr	r3, [pc, #80]	; (800053c <MX_DMA_Init+0x70>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a13      	ldr	r2, [pc, #76]	; (800053c <MX_DMA_Init+0x70>)
 80004f0:	f043 0302 	orr.w	r3, r3, #2
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_DMA_Init+0x70>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f003 0302 	and.w	r3, r3, #2
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	200b      	movs	r0, #11
 8000508:	f002 fcc1 	bl	8002e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800050c:	200b      	movs	r0, #11
 800050e:	f002 fcda 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000512:	2200      	movs	r2, #0
 8000514:	2100      	movs	r1, #0
 8000516:	200f      	movs	r0, #15
 8000518:	f002 fcb9 	bl	8002e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800051c:	200f      	movs	r0, #15
 800051e:	f002 fcd2 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2100      	movs	r1, #0
 8000526:	203a      	movs	r0, #58	; 0x3a
 8000528:	f002 fcb1 	bl	8002e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 800052c:	203a      	movs	r0, #58	; 0x3a
 800052e:	f002 fcca 	bl	8002ec6 <HAL_NVIC_EnableIRQ>

}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08c      	sub	sp, #48	; 0x30
 8000544:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 031c 	add.w	r3, r7, #28
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	4b46      	ldr	r3, [pc, #280]	; (8000670 <MX_GPIO_Init+0x130>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a45      	ldr	r2, [pc, #276]	; (8000670 <MX_GPIO_Init+0x130>)
 800055c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b43      	ldr	r3, [pc, #268]	; (8000670 <MX_GPIO_Init+0x130>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800056a:	61bb      	str	r3, [r7, #24]
 800056c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800056e:	4b40      	ldr	r3, [pc, #256]	; (8000670 <MX_GPIO_Init+0x130>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a3f      	ldr	r2, [pc, #252]	; (8000670 <MX_GPIO_Init+0x130>)
 8000574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b3d      	ldr	r3, [pc, #244]	; (8000670 <MX_GPIO_Init+0x130>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000582:	617b      	str	r3, [r7, #20]
 8000584:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b3a      	ldr	r3, [pc, #232]	; (8000670 <MX_GPIO_Init+0x130>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a39      	ldr	r2, [pc, #228]	; (8000670 <MX_GPIO_Init+0x130>)
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b37      	ldr	r3, [pc, #220]	; (8000670 <MX_GPIO_Init+0x130>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b34      	ldr	r3, [pc, #208]	; (8000670 <MX_GPIO_Init+0x130>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a33      	ldr	r2, [pc, #204]	; (8000670 <MX_GPIO_Init+0x130>)
 80005a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b31      	ldr	r3, [pc, #196]	; (8000670 <MX_GPIO_Init+0x130>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005b6:	4b2e      	ldr	r3, [pc, #184]	; (8000670 <MX_GPIO_Init+0x130>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a2d      	ldr	r2, [pc, #180]	; (8000670 <MX_GPIO_Init+0x130>)
 80005bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <MX_GPIO_Init+0x130>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ce:	4b28      	ldr	r3, [pc, #160]	; (8000670 <MX_GPIO_Init+0x130>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a27      	ldr	r2, [pc, #156]	; (8000670 <MX_GPIO_Init+0x130>)
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b25      	ldr	r3, [pc, #148]	; (8000670 <MX_GPIO_Init+0x130>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = BTN_18_Pin|BTN_17_Pin|BTN_23_Pin|BTN_24_Pin
 80005e6:	f64f 73cf 	movw	r3, #65487	; 0xffcf
 80005ea:	61fb      	str	r3, [r7, #28]
                          |BTN_21_Pin|BTN_22_Pin|BTN_07_Pin|BTN_15_Pin
                          |BTN_16_Pin|BTN_13_Pin|BTN_12_Pin|BTN_27_Pin
                          |BTN_28_Pin|BTN_25_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ec:	2300      	movs	r3, #0
 80005ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4619      	mov	r1, r3
 80005fa:	481e      	ldr	r0, [pc, #120]	; (8000674 <MX_GPIO_Init+0x134>)
 80005fc:	f003 f888 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = BTN_08_Pin|BTN_05_Pin|BTN_06_Pin|BTN_03_Pin
 8000600:	f248 137f 	movw	r3, #33151	; 0x817f
 8000604:	61fb      	str	r3, [r7, #28]
                          |BTN_19_Pin|BTN_01_Pin|BTN_02_Pin|BTN_29_Pin
                          |BTN_09_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000606:	2300      	movs	r3, #0
 8000608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	4619      	mov	r1, r3
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f003 f87a 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_04_Pin|BTN_20_Pin|BTN_26_Pin|BTN_32_Pin
 800061c:	f24c 0378 	movw	r3, #49272	; 0xc078
 8000620:	61fb      	str	r3, [r7, #28]
                          |BTN_31_Pin|BTN_30_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000622:	2300      	movs	r3, #0
 8000624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4811      	ldr	r0, [pc, #68]	; (8000678 <MX_GPIO_Init+0x138>)
 8000632:	f003 f86d 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_14_Pin;
 8000636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800063a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063c:	2300      	movs	r3, #0
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_14_GPIO_Port, &GPIO_InitStruct);
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4619      	mov	r1, r3
 800064a:	480c      	ldr	r0, [pc, #48]	; (800067c <MX_GPIO_Init+0x13c>)
 800064c:	f003 f860 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = BTN_11_Pin|BTN_10_Pin;
 8000650:	23c0      	movs	r3, #192	; 0xc0
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4619      	mov	r1, r3
 8000662:	4807      	ldr	r0, [pc, #28]	; (8000680 <MX_GPIO_Init+0x140>)
 8000664:	f003 f854 	bl	8003710 <HAL_GPIO_Init>

}
 8000668:	bf00      	nop
 800066a:	3730      	adds	r7, #48	; 0x30
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000
 8000674:	48000800 	.word	0x48000800
 8000678:	48000400 	.word	0x48000400
 800067c:	48000c00 	.word	0x48000c00
 8000680:	48001400 	.word	0x48001400

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f001 fe8a 	bl	80023a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f844 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f7ff ff56 	bl	8000540 <MX_GPIO_Init>
  MX_DMA_Init();
 8000694:	f7ff ff1a 	bl	80004cc <MX_DMA_Init>
  MX_ADC1_Init();
 8000698:	f7ff fd96 	bl	80001c8 <MX_ADC1_Init>
  MX_CAN_Init();
 800069c:	f7ff fe9e 	bl	80003dc <MX_CAN_Init>
  MX_SDADC1_Init();
 80006a0:	f001 fb04 	bl	8001cac <MX_SDADC1_Init>
  MX_TIM2_Init();
 80006a4:	f001 fcd2 	bl	800204c <MX_TIM2_Init>
  MX_TIM3_Init();
 80006a8:	f001 fd1c 	bl	80020e4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80006ac:	f001 fda8 	bl	8002200 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(1000);
 80006b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b4:	f001 feda 	bl	800246c <HAL_Delay>
	checkBootloader();
 80006b8:	f000 f8e6 	bl	8000888 <checkBootloader>

/*Baslangic için default config data atamasi*/
//writeDefaultConfigPage();
	HAL_TIM_Base_Start_IT(&htim2);
 80006bc:	4810      	ldr	r0, [pc, #64]	; (8000700 <main+0x7c>)
 80006be:	f005 fac9 	bl	8005c54 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80006c2:	4810      	ldr	r0, [pc, #64]	; (8000704 <main+0x80>)
 80006c4:	f005 fac6 	bl	8005c54 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_DMA(&huart1, &rxDataIn, 1);
 80006c8:	2201      	movs	r2, #1
 80006ca:	490f      	ldr	r1, [pc, #60]	; (8000708 <main+0x84>)
 80006cc:	480f      	ldr	r0, [pc, #60]	; (800070c <main+0x88>)
 80006ce:	f005 ffb3 	bl	8006638 <HAL_UART_Receive_DMA>

	//fingerAnalogread start
	HAL_ADCEx_Calibration_Start(&hadc1);
 80006d2:	480f      	ldr	r0, [pc, #60]	; (8000710 <main+0x8c>)
 80006d4:	f001 ffc6 	bl	8002664 <HAL_ADCEx_Calibration_Start>
	HAL_SDADC_CalibrationStart(&hsdadc1, SDADC_CALIBRATION_SEQ_1);
 80006d8:	2100      	movs	r1, #0
 80006da:	480e      	ldr	r0, [pc, #56]	; (8000714 <main+0x90>)
 80006dc:	f005 f842 	bl	8005764 <HAL_SDADC_CalibrationStart>
	HAL_SDADC_PollForCalibEvent(&hsdadc1, 1000);
 80006e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006e4:	480b      	ldr	r0, [pc, #44]	; (8000714 <main+0x90>)
 80006e6:	f005 f87d 	bl	80057e4 <HAL_SDADC_PollForCalibEvent>
	configurationSettings();
 80006ea:	f000 f879 	bl	80007e0 <configurationSettings>
	initDigitalInputs(getDigitalInputs());
 80006ee:	f000 fce5 	bl	80010bc <getDigitalInputs>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fb15 	bl	8000d24 <initDigitalInputs>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mainLoop();
 80006fa:	f000 f891 	bl	8000820 <mainLoop>
 80006fe:	e7fc      	b.n	80006fa <main+0x76>
 8000700:	20000510 	.word	0x20000510
 8000704:	2000055c 	.word	0x2000055c
 8000708:	2000037f 	.word	0x2000037f
 800070c:	200005a8 	.word	0x200005a8
 8000710:	2000002c 	.word	0x2000002c
 8000714:	20000488 	.word	0x20000488

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b09a      	sub	sp, #104	; 0x68
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000722:	2228      	movs	r2, #40	; 0x28
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f007 f871 	bl	800780e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800073c:	463b      	mov	r3, r7
 800073e:	222c      	movs	r2, #44	; 0x2c
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f007 f863 	bl	800780e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000748:	2301      	movs	r3, #1
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800074c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000750:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV3;
 8000752:	2302      	movs	r3, #2
 8000754:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000756:	2301      	movs	r3, #1
 8000758:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075a:	2302      	movs	r3, #2
 800075c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000762:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000764:	2300      	movs	r3, #0
 8000766:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800076c:	4618      	mov	r0, r3
 800076e:	f003 fa25 	bl	8003bbc <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000778:	f001 fa92 	bl	8001ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077c:	230f      	movs	r3, #15
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2302      	movs	r3, #2
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f004 fa4d 	bl	8004c38 <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80007a4:	f001 fa7c 	bl	8001ca0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1
 80007a8:	f640 0381 	movw	r3, #2177	; 0x881
 80007ac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SDADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80007ae:	2301      	movs	r3, #1
 80007b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV4;
 80007b2:	f04f 4308 	mov.w	r3, #2281701376	; 0x88000000
 80007b6:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	4618      	mov	r0, r3
 80007c0:	f004 fc5c 	bl	800507c <HAL_RCCEx_PeriphCLKConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007ca:	f001 fa69 	bl	8001ca0 <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 80007ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007d2:	f003 f92f 	bl	8003a34 <HAL_PWREx_EnableSDADC>
}
 80007d6:	bf00      	nop
 80007d8:	3768      	adds	r7, #104	; 0x68
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <configurationSettings>:

/* USER CODE BEGIN 4 */
void configurationSettings(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	//check for DEFAULT/USER Configuration
	flashReadValue = (*(uint32_t*)CONFIG_DATA_DEFAULT_SELECT);
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <configurationSettings+0x30>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <configurationSettings+0x34>)
 80007ec:	701a      	strb	r2, [r3, #0]
	if(flashReadValue == 0xFF)
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <configurationSettings+0x34>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2bff      	cmp	r3, #255	; 0xff
 80007f4:	d103      	bne.n	80007fe <configurationSettings+0x1e>
	{
		loadDefaultValues(&userTkkConfig);
 80007f6:	4808      	ldr	r0, [pc, #32]	; (8000818 <configurationSettings+0x38>)
 80007f8:	f000 fe90 	bl	800151c <loadDefaultValues>
 80007fc:	e002      	b.n	8000804 <configurationSettings+0x24>
	}
	else
	{
		readFlashUserConf(&userTkkConfig);
 80007fe:	4806      	ldr	r0, [pc, #24]	; (8000818 <configurationSettings+0x38>)
 8000800:	f000 fe34 	bl	800146c <readFlashUserConf>
	}

	calculateJostickBorders(&userTkkConfig, &tkkJoystickBorder);
 8000804:	4905      	ldr	r1, [pc, #20]	; (800081c <configurationSettings+0x3c>)
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <configurationSettings+0x38>)
 8000808:	f000 f9a6 	bl	8000b58 <calculateJostickBorders>
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	0800e000 	.word	0x0800e000
 8000814:	2000046e 	.word	0x2000046e
 8000818:	200003e8 	.word	0x200003e8
 800081c:	20000438 	.word	0x20000438

08000820 <mainLoop>:
void mainLoop(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	if(sampleAnalogInputs == true)
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <mainLoop+0x4c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d014      	beq.n	8000856 <mainLoop+0x36>
		{

			//averageAnalogInputs(&AnADC_Values[0], &AnADC_Read[0], ANALOG_COUNT, AVERAGE_WINDOW);
			averageAnalogInputs(AnADC_Values, AnADC_Read, ANALOG_COUNT, AVERAGE_WINDOW);
 800082c:	2302      	movs	r3, #2
 800082e:	2202      	movs	r2, #2
 8000830:	490f      	ldr	r1, [pc, #60]	; (8000870 <mainLoop+0x50>)
 8000832:	4810      	ldr	r0, [pc, #64]	; (8000874 <mainLoop+0x54>)
 8000834:	f000 f9e7 	bl	8000c06 <averageAnalogInputs>
			calculateAxisData(&tkkJoystickBorder, &AnADC_Values[0], &fittedAnAdc_Values[0], 1);
 8000838:	2301      	movs	r3, #1
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <mainLoop+0x58>)
 800083c:	490d      	ldr	r1, [pc, #52]	; (8000874 <mainLoop+0x54>)
 800083e:	480f      	ldr	r0, [pc, #60]	; (800087c <mainLoop+0x5c>)
 8000840:	f000 f8b0 	bl	80009a4 <calculateAxisData>
			calculateAxisData(&tkkJoystickBorder, &AnADC_Values[1], &fittedAnAdc_Values[1], 0);
 8000844:	2300      	movs	r3, #0
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <mainLoop+0x60>)
 8000848:	490e      	ldr	r1, [pc, #56]	; (8000884 <mainLoop+0x64>)
 800084a:	480c      	ldr	r0, [pc, #48]	; (800087c <mainLoop+0x5c>)
 800084c:	f000 f8aa 	bl	80009a4 <calculateAxisData>
			sampleAnalogInputs = false;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <mainLoop+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
		}
		sampleDigitalInputs(getDigitalInputs());
 8000856:	f000 fc31 	bl	80010bc <getDigitalInputs>
 800085a:	4603      	mov	r3, r0
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fb9f 	bl	8000fa0 <sampleDigitalInputs>
		SDADC_ScanConversion();
 8000862:	f000 fa03 	bl	8000c6c <SDADC_ScanConversion>
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000c8 	.word	0x200000c8
 8000870:	200000cc 	.word	0x200000cc
 8000874:	200000d4 	.word	0x200000d4
 8000878:	200000dc 	.word	0x200000dc
 800087c:	20000438 	.word	0x20000438
 8000880:	200000e0 	.word	0x200000e0
 8000884:	200000d8 	.word	0x200000d8

08000888 <checkBootloader>:

void checkBootloader(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	bootValue = *(uint32_t*)CONFIG_BOOTMODE_INIT_OFFSET;
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <checkBootloader+0x48>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	b29a      	uxth	r2, r3
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <checkBootloader+0x4c>)
 8000894:	801a      	strh	r2, [r3, #0]
	if(bootValue == 0x00CD)
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <checkBootloader+0x4c>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	2bcd      	cmp	r3, #205	; 0xcd
 800089c:	d115      	bne.n	80008ca <checkBootloader+0x42>
	{
			HAL_FLASH_Unlock();
 800089e:	f002 fdcf 	bl	8003440 <HAL_FLASH_Unlock>
			static FLASH_EraseInitTypeDef eraseInit;
			eraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <checkBootloader+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
			eraseInit.PageAddress = CONFIG_BOOTMODE_BASE_ADDR; // düzenlenecek !!!!!!!!!!!!!!!!!!!!*/
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <checkBootloader+0x50>)
 80008aa:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <checkBootloader+0x54>)
 80008ac:	605a      	str	r2, [r3, #4]
			eraseInit.NbPages     = 1;
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <checkBootloader+0x50>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	609a      	str	r2, [r3, #8]

			if (HAL_FLASHEx_Erase(&eraseInit, &PAGEError) != HAL_OK)
 80008b4:	490a      	ldr	r1, [pc, #40]	; (80008e0 <checkBootloader+0x58>)
 80008b6:	4808      	ldr	r0, [pc, #32]	; (80008d8 <checkBootloader+0x50>)
 80008b8:	f002 fe86 	bl	80035c8 <HAL_FLASHEx_Erase>
			{
			}
			HAL_Delay(100);
 80008bc:	2064      	movs	r0, #100	; 0x64
 80008be:	f001 fdd5 	bl	800246c <HAL_Delay>
			HAL_FLASH_Lock();
 80008c2:	f002 fde3 	bl	800348c <HAL_FLASH_Lock>
		bootloaderInit();
 80008c6:	f000 f841 	bl	800094c <bootloaderInit>
	}
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	0800a002 	.word	0x0800a002
 80008d4:	2000046c 	.word	0x2000046c
 80008d8:	20000470 	.word	0x20000470
 80008dc:	0800a000 	.word	0x0800a000
 80008e0:	20000394 	.word	0x20000394

080008e4 <bootloaderCommand>:

void bootloaderCommand(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80008ea:	f002 fda9 	bl	8003440 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInitStruct_BOOT;
	EraseInitStruct_BOOT.TypeErase   = FLASH_TYPEERASE_PAGES;
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
	EraseInitStruct_BOOT.PageAddress = CONFIG_BOOTMODE_BASE_ADDR; // düzenlenecek !!!!!!!!!!!!!!!!!!!!*/
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <bootloaderCommand+0x58>)
 80008f4:	60bb      	str	r3, [r7, #8]
	EraseInitStruct_BOOT.NbPages     = 1;
 80008f6:	2301      	movs	r3, #1
 80008f8:	60fb      	str	r3, [r7, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct_BOOT, &PAGEError) != HAL_OK)
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4910      	ldr	r1, [pc, #64]	; (8000940 <bootloaderCommand+0x5c>)
 80008fe:	4618      	mov	r0, r3
 8000900:	f002 fe62 	bl	80035c8 <HAL_FLASHEx_Erase>
	{
	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_BOOTMODE_INIT_OFFSET, 0x00CD);
 8000904:	f04f 02cd 	mov.w	r2, #205	; 0xcd
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	490d      	ldr	r1, [pc, #52]	; (8000944 <bootloaderCommand+0x60>)
 800090e:	2001      	movs	r0, #1
 8000910:	f002 fd26 	bl	8003360 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8000914:	f002 fdba 	bl	800348c <HAL_FLASH_Lock>
	bootValue = *(uint32_t*)CONFIG_BOOTMODE_INIT_OFFSET;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <bootloaderCommand+0x60>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	b29a      	uxth	r2, r3
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <bootloaderCommand+0x64>)
 8000920:	801a      	strh	r2, [r3, #0]
	if(bootValue == 0x00CD)
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <bootloaderCommand+0x64>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	2bcd      	cmp	r3, #205	; 0xcd
 8000928:	d103      	bne.n	8000932 <bootloaderCommand+0x4e>
	{
		sendAckUart();
 800092a:	f000 fe4f 	bl	80015cc <sendAckUart>
		HAL_NVIC_SystemReset();
 800092e:	f002 fad8 	bl	8002ee2 <HAL_NVIC_SystemReset>
	}
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	0800a000 	.word	0x0800a000
 8000940:	20000394 	.word	0x20000394
 8000944:	0800a002 	.word	0x0800a002
 8000948:	2000046c 	.word	0x2000046c

0800094c <bootloaderInit>:

void bootloaderInit(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
	SysMemBootJump = (void(*)(void)) (*((uint32_t*) (0x1FFFD800 + 4)));
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <bootloaderInit+0x48>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <bootloaderInit+0x4c>)
 800095a:	601a      	str	r2, [r3, #0]

	HAL_RCC_DeInit();
 800095c:	f003 f88a 	bl	8003a74 <HAL_RCC_DeInit>
	SysTick -> CTRL = 0;
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <bootloaderInit+0x50>)
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
	SysTick -> LOAD = 0;
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <bootloaderInit+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
	SysTick -> VAL  = 0;
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <bootloaderInit+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	2301      	movs	r3, #1
 8000974:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	f383 8810 	msr	PRIMASK, r3
}
 800097c:	bf00      	nop
	__set_PRIMASK(1);

	__set_MSP(DEFAULT_MSP_VALUE);
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <bootloaderInit+0x54>)
 8000980:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f383 8808 	msr	MSP, r3
}
 8000988:	bf00      	nop
	SysMemBootJump();
 800098a:	4b03      	ldr	r3, [pc, #12]	; (8000998 <bootloaderInit+0x4c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4798      	blx	r3
	while(1);
 8000990:	e7fe      	b.n	8000990 <bootloaderInit+0x44>
 8000992:	bf00      	nop
 8000994:	1fffd804 	.word	0x1fffd804
 8000998:	20000468 	.word	0x20000468
 800099c:	e000e010 	.word	0xe000e010
 80009a0:	20001258 	.word	0x20001258

080009a4 <calculateAxisData>:
}
void calculateAxisData(joystickBorder* tempJoystickBorder, uint32_t* tempAnADC_Value, int32_t* fittedAnAdc_Values, bool axisData)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b087      	sub	sp, #28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
 80009b0:	70fb      	strb	r3, [r7, #3]
	joystickBorder* joystickBorderPtr;
	joystickBorderPtr = tempJoystickBorder;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	617b      	str	r3, [r7, #20]
	errX = GPIO_PIN_RESET;
 80009b6:	4b65      	ldr	r3, [pc, #404]	; (8000b4c <calculateAxisData+0x1a8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
	errY = GPIO_PIN_RESET;
 80009bc:	4b64      	ldr	r3, [pc, #400]	; (8000b50 <calculateAxisData+0x1ac>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
	//calculate x-Axis
	if(axisData == 1)
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d05e      	beq.n	8000a86 <calculateAxisData+0xe2>
	{
		if(*tempAnADC_Value <= joystickBorderPtr->xLeftLow)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d806      	bhi.n	80009e2 <calculateAxisData+0x3e>
		{
			//*fittedAnAdc_Values = -32766;
			*fittedAnAdc_Values = -2048;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a5f      	ldr	r2, [pc, #380]	; (8000b54 <calculateAxisData+0x1b0>)
 80009d8:	601a      	str	r2, [r3, #0]
			errX = GPIO_PIN_SET;
 80009da:	4b5c      	ldr	r3, [pc, #368]	; (8000b4c <calculateAxisData+0x1a8>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
				*fittedAnAdc_Values = -2048;
			}
		}

	}
}
 80009e0:	e0ae      	b.n	8000b40 <calculateAxisData+0x19c>
		else if(*tempAnADC_Value >= joystickBorderPtr->xRightHigh)
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d307      	bcc.n	80009fe <calculateAxisData+0x5a>
			errX = GPIO_PIN_SET;
 80009ee:	4b57      	ldr	r3, [pc, #348]	; (8000b4c <calculateAxisData+0x1a8>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
			*fittedAnAdc_Values = 2047;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80009fa:	601a      	str	r2, [r3, #0]
}
 80009fc:	e0a0      	b.n	8000b40 <calculateAxisData+0x19c>
		else if(*tempAnADC_Value >= joystickBorderPtr -> xRightLow)
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d31c      	bcc.n	8000a44 <calculateAxisData+0xa0>
			*fittedAnAdc_Values = (((int)((*tempAnADC_Value) - (joystickBorderPtr->xRightLow))) * 2047) / (joystickBorderPtr -> xRightRange);
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	461a      	mov	r2, r3
 8000a16:	4613      	mov	r3, r2
 8000a18:	02db      	lsls	r3, r3, #11
 8000a1a:	1a9b      	subs	r3, r3, r2
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a26:	461a      	mov	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values >= 2047)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8000a34:	4293      	cmp	r3, r2
 8000a36:	f340 8083 	ble.w	8000b40 <calculateAxisData+0x19c>
				*fittedAnAdc_Values = 2047;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a40:	601a      	str	r2, [r3, #0]
}
 8000a42:	e07d      	b.n	8000b40 <calculateAxisData+0x19c>
		else if(*tempAnADC_Value < (joystickBorderPtr -> xLeftHigh))
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d277      	bcs.n	8000b40 <calculateAxisData+0x19c>
			*fittedAnAdc_Values = -((((int)((int)(joystickBorderPtr->xLeftHigh) - (int)(*tempAnADC_Value))) * (int)2047) / (joystickBorderPtr -> xLeftRange));
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	461a      	mov	r2, r3
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	1ad2      	subs	r2, r2, r3
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	02db      	lsls	r3, r3, #11
 8000a60:	1a9b      	subs	r3, r3, r2
 8000a62:	461a      	mov	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6c:	425b      	negs	r3, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values <= -2048)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8000a7c:	dc60      	bgt.n	8000b40 <calculateAxisData+0x19c>
				*fittedAnAdc_Values = -2048;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a34      	ldr	r2, [pc, #208]	; (8000b54 <calculateAxisData+0x1b0>)
 8000a82:	601a      	str	r2, [r3, #0]
}
 8000a84:	e05c      	b.n	8000b40 <calculateAxisData+0x19c>
		if(*tempAnADC_Value <= joystickBorderPtr->yDownLow)
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d806      	bhi.n	8000aa0 <calculateAxisData+0xfc>
			errY = GPIO_PIN_SET;
 8000a92:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <calculateAxisData+0x1ac>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	701a      	strb	r2, [r3, #0]
			*fittedAnAdc_Values = -2048;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a2e      	ldr	r2, [pc, #184]	; (8000b54 <calculateAxisData+0x1b0>)
 8000a9c:	601a      	str	r2, [r3, #0]
}
 8000a9e:	e04f      	b.n	8000b40 <calculateAxisData+0x19c>
		else if(*tempAnADC_Value >= joystickBorderPtr->yUpHigh)
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d307      	bcc.n	8000abc <calculateAxisData+0x118>
			*fittedAnAdc_Values = 2047;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000ab2:	601a      	str	r2, [r3, #0]
			errY = GPIO_PIN_SET;
 8000ab4:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <calculateAxisData+0x1ac>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
}
 8000aba:	e041      	b.n	8000b40 <calculateAxisData+0x19c>
		else if(*tempAnADC_Value >= joystickBorderPtr -> yUpLow)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d31b      	bcc.n	8000b00 <calculateAxisData+0x15c>
			*fittedAnAdc_Values = (((int)((*tempAnADC_Value) - (joystickBorderPtr->yUpLow))) * 2047) / (joystickBorderPtr -> yUpRange);
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	02db      	lsls	r3, r3, #11
 8000ad8:	1a9b      	subs	r3, r3, r2
 8000ada:	461a      	mov	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values >= 2047)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8000af2:	4293      	cmp	r3, r2
 8000af4:	dd24      	ble.n	8000b40 <calculateAxisData+0x19c>
				*fittedAnAdc_Values = 2047;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000afc:	601a      	str	r2, [r3, #0]
}
 8000afe:	e01f      	b.n	8000b40 <calculateAxisData+0x19c>
		else if(*tempAnADC_Value < (joystickBorderPtr -> yDownHigh))
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	69db      	ldr	r3, [r3, #28]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d219      	bcs.n	8000b40 <calculateAxisData+0x19c>
			*fittedAnAdc_Values = -((((int)((int)(joystickBorderPtr->yDownHigh) - (int)(*tempAnADC_Value))) * (int)2047) / (joystickBorderPtr -> yDownRange));
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	69db      	ldr	r3, [r3, #28]
 8000b10:	461a      	mov	r2, r3
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	1ad2      	subs	r2, r2, r3
 8000b18:	4613      	mov	r3, r2
 8000b1a:	02db      	lsls	r3, r3, #11
 8000b1c:	1a9b      	subs	r3, r3, r2
 8000b1e:	461a      	mov	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	6a1b      	ldr	r3, [r3, #32]
 8000b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b28:	425b      	negs	r3, r3
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values <= -2048)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8000b38:	dc02      	bgt.n	8000b40 <calculateAxisData+0x19c>
				*fittedAnAdc_Values = -2048;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <calculateAxisData+0x1b0>)
 8000b3e:	601a      	str	r2, [r3, #0]
}
 8000b40:	bf00      	nop
 8000b42:	371c      	adds	r7, #28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	200000c9 	.word	0x200000c9
 8000b50:	200000ca 	.word	0x200000ca
 8000b54:	fffff800 	.word	0xfffff800

08000b58 <calculateJostickBorders>:
/* calculating joystick borders*/
void calculateJostickBorders(ConfigData* tempConfigData, joystickBorder* tempJoystickBorder)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
	ConfigData* configDataPtr;
	configDataPtr = tempConfigData;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60fb      	str	r3, [r7, #12]

	joystickBorder* joystickBorderPtr;
	joystickBorderPtr = tempJoystickBorder;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	60bb      	str	r3, [r7, #8]

	joystickBorderPtr -> xLeftHigh 		= (configDataPtr -> xMid) - 1;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	88db      	ldrh	r3, [r3, #6]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	461a      	mov	r2, r3
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	605a      	str	r2, [r3, #4]
	joystickBorderPtr -> xLeftLow  		= configDataPtr -> xMin;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	885b      	ldrh	r3, [r3, #2]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	601a      	str	r2, [r3, #0]
	joystickBorderPtr -> xLeftRange 	= (joystickBorderPtr -> xLeftHigh) - (joystickBorderPtr -> xLeftLow);
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	1ad2      	subs	r2, r2, r3
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	609a      	str	r2, [r3, #8]

	joystickBorderPtr -> xRightLow 		= (configDataPtr -> xMid) + 1;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	88db      	ldrh	r3, [r3, #6]
 8000b92:	3301      	adds	r3, #1
 8000b94:	461a      	mov	r2, r3
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	60da      	str	r2, [r3, #12]
	joystickBorderPtr -> xRightHigh  	= configDataPtr -> xMax;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	889b      	ldrh	r3, [r3, #4]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	611a      	str	r2, [r3, #16]
	joystickBorderPtr -> xRightRange 	= (joystickBorderPtr -> xRightHigh) - (joystickBorderPtr -> xRightLow);
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	691a      	ldr	r2, [r3, #16]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	1ad2      	subs	r2, r2, r3
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	615a      	str	r2, [r3, #20]

	joystickBorderPtr -> yUpHigh 		= configDataPtr -> yMax;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	895b      	ldrh	r3, [r3, #10]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
	joystickBorderPtr -> yUpLow  		= (configDataPtr -> yMid) + 1;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	899b      	ldrh	r3, [r3, #12]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	625a      	str	r2, [r3, #36]	; 0x24
	joystickBorderPtr -> yUpRange 		= (joystickBorderPtr -> yUpHigh) - (joystickBorderPtr -> yUpLow);
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd0:	1ad2      	subs	r2, r2, r3
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	62da      	str	r2, [r3, #44]	; 0x2c

	joystickBorderPtr -> yDownLow 		= configDataPtr -> yMin;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	891b      	ldrh	r3, [r3, #8]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	619a      	str	r2, [r3, #24]
	joystickBorderPtr -> yDownHigh  	= (configDataPtr -> yMid) - 1;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	899b      	ldrh	r3, [r3, #12]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	461a      	mov	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	61da      	str	r2, [r3, #28]
	joystickBorderPtr -> yDownRange 	= (joystickBorderPtr -> yDownHigh) - (joystickBorderPtr -> yDownLow);
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	69da      	ldr	r2, [r3, #28]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	1ad2      	subs	r2, r2, r3
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	621a      	str	r2, [r3, #32]

}
 8000bfa:	bf00      	nop
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <averageAnalogInputs>:
		@Param 				: none
		@description	:

*/
void averageAnalogInputs(uint32_t* ADC_BUFFERPtr, uint32_t* ADC_READPtr, uint32_t COUNT, uint32_t AVERAGE_WINDOW)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b089      	sub	sp, #36	; 0x24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	603b      	str	r3, [r7, #0]

	uint32_t i = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
	uint32_t* tempADC_BUFFERPtr = ADC_BUFFERPtr;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	61bb      	str	r3, [r7, #24]
	uint32_t* tempADC_READPtr = ADC_READPtr;
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	617b      	str	r3, [r7, #20]

	for(i = 0; i < COUNT; i++)
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
 8000c24:	e016      	b.n	8000c54 <averageAnalogInputs+0x4e>
	{
		*tempADC_BUFFERPtr = ((*tempADC_BUFFERPtr)*(AVERAGE_WINDOW - 1) + (*tempADC_READPtr))/AVERAGE_WINDOW;
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	3a01      	subs	r2, #1
 8000c2e:	fb03 f202 	mul.w	r2, r3, r2
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	441a      	add	r2, r3
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	601a      	str	r2, [r3, #0]
		tempADC_BUFFERPtr++;
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	3304      	adds	r3, #4
 8000c46:	61bb      	str	r3, [r7, #24]
		tempADC_READPtr++;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	3304      	adds	r3, #4
 8000c4c:	617b      	str	r3, [r7, #20]
	for(i = 0; i < COUNT; i++)
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3301      	adds	r3, #1
 8000c52:	61fb      	str	r3, [r7, #28]
 8000c54:	69fa      	ldr	r2, [r7, #28]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d3e4      	bcc.n	8000c26 <averageAnalogInputs+0x20>
		}
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3724      	adds	r7, #36	; 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <SDADC_ScanConversion>:
		@Param 				: none
		@description	:

*/
void SDADC_ScanConversion(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0


		if(HAL_SDADC_ConfigChannel(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
 8000c70:	2201      	movs	r2, #1
 8000c72:	4927      	ldr	r1, [pc, #156]	; (8000d10 <SDADC_ScanConversion+0xa4>)
 8000c74:	4827      	ldr	r0, [pc, #156]	; (8000d14 <SDADC_ScanConversion+0xa8>)
 8000c76:	f004 fc91 	bl	800559c <HAL_SDADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <SDADC_ScanConversion+0x18>
		{
			Error_Handler();
 8000c80:	f001 f80e 	bl	8001ca0 <Error_Handler>
		}

		HAL_SDADC_Start(&hsdadc1);
 8000c84:	4823      	ldr	r0, [pc, #140]	; (8000d14 <SDADC_ScanConversion+0xa8>)
 8000c86:	f004 fde6 	bl	8005856 <HAL_SDADC_Start>
		if(HAL_SDADC_PollForConversion(&hsdadc1, 1000) != HAL_OK)
 8000c8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c8e:	4821      	ldr	r0, [pc, #132]	; (8000d14 <SDADC_ScanConversion+0xa8>)
 8000c90:	f004 fdfc 	bl	800588c <HAL_SDADC_PollForConversion>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d005      	beq.n	8000ca6 <SDADC_ScanConversion+0x3a>
		{
			 SDADCErrorCounter++;
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <SDADC_ScanConversion+0xac>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	4a1d      	ldr	r2, [pc, #116]	; (8000d18 <SDADC_ScanConversion+0xac>)
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	e008      	b.n	8000cb8 <SDADC_ScanConversion+0x4c>
		}
		else
		{
			AnADC_Read[0] = (HAL_SDADC_GetValue(&hsdadc1) + 0x8000) & 0xFFFF;
 8000ca6:	481b      	ldr	r0, [pc, #108]	; (8000d14 <SDADC_ScanConversion+0xa8>)
 8000ca8:	f004 fe65 	bl	8005976 <HAL_SDADC_GetValue>
 8000cac:	4603      	mov	r3, r0
 8000cae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <SDADC_ScanConversion+0xb0>)
 8000cb6:	6013      	str	r3, [r2, #0]

		}
		HAL_SDADC_Stop(&hsdadc1);
 8000cb8:	4816      	ldr	r0, [pc, #88]	; (8000d14 <SDADC_ScanConversion+0xa8>)
 8000cba:	f004 fe41 	bl	8005940 <HAL_SDADC_Stop>

		if(HAL_SDADC_ConfigChannel(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4917      	ldr	r1, [pc, #92]	; (8000d20 <SDADC_ScanConversion+0xb4>)
 8000cc2:	4814      	ldr	r0, [pc, #80]	; (8000d14 <SDADC_ScanConversion+0xa8>)
 8000cc4:	f004 fc6a 	bl	800559c <HAL_SDADC_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SDADC_ScanConversion+0x66>
		{
			Error_Handler();
 8000cce:	f000 ffe7 	bl	8001ca0 <Error_Handler>
		}

		HAL_SDADC_Start(&hsdadc1);
 8000cd2:	4810      	ldr	r0, [pc, #64]	; (8000d14 <SDADC_ScanConversion+0xa8>)
 8000cd4:	f004 fdbf 	bl	8005856 <HAL_SDADC_Start>
		if(HAL_SDADC_PollForConversion(&hsdadc1, 1000) != HAL_OK)
 8000cd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <SDADC_ScanConversion+0xa8>)
 8000cde:	f004 fdd5 	bl	800588c <HAL_SDADC_PollForConversion>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <SDADC_ScanConversion+0x88>
		{
			 SDADCErrorCounter++;
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <SDADC_ScanConversion+0xac>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <SDADC_ScanConversion+0xac>)
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	e008      	b.n	8000d06 <SDADC_ScanConversion+0x9a>
		}
		else
		{
			AnADC_Read[1] = (HAL_SDADC_GetValue(&hsdadc1) + 0x8000) & 0xFFFF;
 8000cf4:	4807      	ldr	r0, [pc, #28]	; (8000d14 <SDADC_ScanConversion+0xa8>)
 8000cf6:	f004 fe3e 	bl	8005976 <HAL_SDADC_GetValue>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <SDADC_ScanConversion+0xb0>)
 8000d04:	6053      	str	r3, [r2, #4]
		}
		HAL_SDADC_Stop(&hsdadc1);
 8000d06:	4803      	ldr	r0, [pc, #12]	; (8000d14 <SDADC_ScanConversion+0xa8>)
 8000d08:	f004 fe1a 	bl	8005940 <HAL_SDADC_Stop>

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	00040010 	.word	0x00040010
 8000d14:	20000488 	.word	0x20000488
 8000d18:	200000e4 	.word	0x200000e4
 8000d1c:	200000cc 	.word	0x200000cc
 8000d20:	00050020 	.word	0x00050020

08000d24 <initDigitalInputs>:
				readFlag = false;
				readState = GPIO_PIN_RESET;
*/

void initDigitalInputs(digitalInput *digitalInputPtr)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	/****************************************************
	***	CUSTOM VALUES SHOULD BE INITIALIZED MANUALLY	***
	****************************************************/
	tutamakDigitalInputs[0].inputPin 		= BTN_01_Pin;
 8000d2c:	4b97      	ldr	r3, [pc, #604]	; (8000f8c <initDigitalInputs+0x268>)
 8000d2e:	2220      	movs	r2, #32
 8000d30:	805a      	strh	r2, [r3, #2]
	tutamakDigitalInputs[0].inputPort		= BTN_01_GPIO_Port;
 8000d32:	4b96      	ldr	r3, [pc, #600]	; (8000f8c <initDigitalInputs+0x268>)
 8000d34:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d38:	605a      	str	r2, [r3, #4]

	tutamakDigitalInputs[1].inputPin 		= BTN_02_Pin;
 8000d3a:	4b94      	ldr	r3, [pc, #592]	; (8000f8c <initDigitalInputs+0x268>)
 8000d3c:	2240      	movs	r2, #64	; 0x40
 8000d3e:	82da      	strh	r2, [r3, #22]
	tutamakDigitalInputs[1].inputPort		= BTN_02_GPIO_Port;
 8000d40:	4b92      	ldr	r3, [pc, #584]	; (8000f8c <initDigitalInputs+0x268>)
 8000d42:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d46:	619a      	str	r2, [r3, #24]
	tutamakDigitalInputs[2].inputPin 		= BTN_03_Pin;
 8000d48:	4b90      	ldr	r3, [pc, #576]	; (8000f8c <initDigitalInputs+0x268>)
 8000d4a:	2208      	movs	r2, #8
 8000d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
	tutamakDigitalInputs[2].inputPort		= BTN_03_GPIO_Port;
 8000d4e:	4b8f      	ldr	r3, [pc, #572]	; (8000f8c <initDigitalInputs+0x268>)
 8000d50:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
	tutamakDigitalInputs[3].inputPin 		= BTN_04_Pin;
 8000d56:	4b8d      	ldr	r3, [pc, #564]	; (8000f8c <initDigitalInputs+0x268>)
 8000d58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
	tutamakDigitalInputs[3].inputPort		= BTN_04_GPIO_Port;
 8000d5e:	4b8b      	ldr	r3, [pc, #556]	; (8000f8c <initDigitalInputs+0x268>)
 8000d60:	4a8b      	ldr	r2, [pc, #556]	; (8000f90 <initDigitalInputs+0x26c>)
 8000d62:	641a      	str	r2, [r3, #64]	; 0x40
	tutamakDigitalInputs[4].inputPin 		= BTN_05_Pin;
 8000d64:	4b89      	ldr	r3, [pc, #548]	; (8000f8c <initDigitalInputs+0x268>)
 8000d66:	2202      	movs	r2, #2
 8000d68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	tutamakDigitalInputs[4].inputPort		= BTN_05_GPIO_Port;
 8000d6c:	4b87      	ldr	r3, [pc, #540]	; (8000f8c <initDigitalInputs+0x268>)
 8000d6e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d72:	655a      	str	r2, [r3, #84]	; 0x54
	tutamakDigitalInputs[5].inputPin 		= BTN_06_Pin;
 8000d74:	4b85      	ldr	r3, [pc, #532]	; (8000f8c <initDigitalInputs+0x268>)
 8000d76:	2204      	movs	r2, #4
 8000d78:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	tutamakDigitalInputs[5].inputPort		= BTN_06_GPIO_Port;
 8000d7c:	4b83      	ldr	r3, [pc, #524]	; (8000f8c <initDigitalInputs+0x268>)
 8000d7e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000d82:	669a      	str	r2, [r3, #104]	; 0x68
	tutamakDigitalInputs[6].inputPin 		= BTN_07_Pin;
 8000d84:	4b81      	ldr	r3, [pc, #516]	; (8000f8c <initDigitalInputs+0x268>)
 8000d86:	2208      	movs	r2, #8
 8000d88:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	tutamakDigitalInputs[6].inputPort		= BTN_07_GPIO_Port;
 8000d8c:	4b7f      	ldr	r3, [pc, #508]	; (8000f8c <initDigitalInputs+0x268>)
 8000d8e:	4a81      	ldr	r2, [pc, #516]	; (8000f94 <initDigitalInputs+0x270>)
 8000d90:	67da      	str	r2, [r3, #124]	; 0x7c
	tutamakDigitalInputs[7].inputPin 		= BTN_08_Pin;
 8000d92:	4b7e      	ldr	r3, [pc, #504]	; (8000f8c <initDigitalInputs+0x268>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	tutamakDigitalInputs[7].inputPort		= BTN_08_GPIO_Port;
 8000d9a:	4b7c      	ldr	r3, [pc, #496]	; (8000f8c <initDigitalInputs+0x268>)
 8000d9c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000da0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	tutamakDigitalInputs[8].inputPin 		= BTN_09_Pin;
 8000da4:	4b79      	ldr	r3, [pc, #484]	; (8000f8c <initDigitalInputs+0x268>)
 8000da6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000daa:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	tutamakDigitalInputs[8].inputPort		= BTN_09_GPIO_Port;
 8000dae:	4b77      	ldr	r3, [pc, #476]	; (8000f8c <initDigitalInputs+0x268>)
 8000db0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000db4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	tutamakDigitalInputs[9].inputPin 		= BTN_10_Pin;
 8000db8:	4b74      	ldr	r3, [pc, #464]	; (8000f8c <initDigitalInputs+0x268>)
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	tutamakDigitalInputs[9].inputPort		= BTN_10_GPIO_Port;
 8000dc0:	4b72      	ldr	r3, [pc, #456]	; (8000f8c <initDigitalInputs+0x268>)
 8000dc2:	4a75      	ldr	r2, [pc, #468]	; (8000f98 <initDigitalInputs+0x274>)
 8000dc4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	tutamakDigitalInputs[10].inputPin 	= BTN_11_Pin;
 8000dc8:	4b70      	ldr	r3, [pc, #448]	; (8000f8c <initDigitalInputs+0x268>)
 8000dca:	2240      	movs	r2, #64	; 0x40
 8000dcc:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	tutamakDigitalInputs[10].inputPort	= BTN_11_GPIO_Port;
 8000dd0:	4b6e      	ldr	r3, [pc, #440]	; (8000f8c <initDigitalInputs+0x268>)
 8000dd2:	4a71      	ldr	r2, [pc, #452]	; (8000f98 <initDigitalInputs+0x274>)
 8000dd4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	tutamakDigitalInputs[11].inputPin 	= BTN_12_Pin;
 8000dd8:	4b6c      	ldr	r3, [pc, #432]	; (8000f8c <initDigitalInputs+0x268>)
 8000dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dde:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
	tutamakDigitalInputs[11].inputPort	= BTN_12_GPIO_Port;
 8000de2:	4b6a      	ldr	r3, [pc, #424]	; (8000f8c <initDigitalInputs+0x268>)
 8000de4:	4a6b      	ldr	r2, [pc, #428]	; (8000f94 <initDigitalInputs+0x270>)
 8000de6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	tutamakDigitalInputs[12].inputPin 	= BTN_13_Pin;
 8000dea:	4b68      	ldr	r3, [pc, #416]	; (8000f8c <initDigitalInputs+0x268>)
 8000dec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000df0:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
	tutamakDigitalInputs[12].inputPort	= BTN_13_GPIO_Port;
 8000df4:	4b65      	ldr	r3, [pc, #404]	; (8000f8c <initDigitalInputs+0x268>)
 8000df6:	4a67      	ldr	r2, [pc, #412]	; (8000f94 <initDigitalInputs+0x270>)
 8000df8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	tutamakDigitalInputs[13].inputPin 	= BTN_14_Pin;
 8000dfc:	4b63      	ldr	r3, [pc, #396]	; (8000f8c <initDigitalInputs+0x268>)
 8000dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e02:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	tutamakDigitalInputs[13].inputPort	= BTN_14_GPIO_Port;
 8000e06:	4b61      	ldr	r3, [pc, #388]	; (8000f8c <initDigitalInputs+0x268>)
 8000e08:	4a64      	ldr	r2, [pc, #400]	; (8000f9c <initDigitalInputs+0x278>)
 8000e0a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	tutamakDigitalInputs[14].inputPin 	= BTN_15_Pin;
 8000e0e:	4b5f      	ldr	r3, [pc, #380]	; (8000f8c <initDigitalInputs+0x268>)
 8000e10:	2240      	movs	r2, #64	; 0x40
 8000e12:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	tutamakDigitalInputs[14].inputPort	= BTN_15_GPIO_Port;
 8000e16:	4b5d      	ldr	r3, [pc, #372]	; (8000f8c <initDigitalInputs+0x268>)
 8000e18:	4a5e      	ldr	r2, [pc, #376]	; (8000f94 <initDigitalInputs+0x270>)
 8000e1a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	tutamakDigitalInputs[15].inputPin 	= BTN_16_Pin;
 8000e1e:	4b5b      	ldr	r3, [pc, #364]	; (8000f8c <initDigitalInputs+0x268>)
 8000e20:	2280      	movs	r2, #128	; 0x80
 8000e22:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
	tutamakDigitalInputs[15].inputPort	= BTN_16_GPIO_Port;
 8000e26:	4b59      	ldr	r3, [pc, #356]	; (8000f8c <initDigitalInputs+0x268>)
 8000e28:	4a5a      	ldr	r2, [pc, #360]	; (8000f94 <initDigitalInputs+0x270>)
 8000e2a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	tutamakDigitalInputs[16].inputPin 	= BTN_17_Pin;
 8000e2e:	4b57      	ldr	r3, [pc, #348]	; (8000f8c <initDigitalInputs+0x268>)
 8000e30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e34:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
	tutamakDigitalInputs[16].inputPort	= BTN_17_GPIO_Port;
 8000e38:	4b54      	ldr	r3, [pc, #336]	; (8000f8c <initDigitalInputs+0x268>)
 8000e3a:	4a56      	ldr	r2, [pc, #344]	; (8000f94 <initDigitalInputs+0x270>)
 8000e3c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	tutamakDigitalInputs[17].inputPin 	= BTN_18_Pin;
 8000e40:	4b52      	ldr	r3, [pc, #328]	; (8000f8c <initDigitalInputs+0x268>)
 8000e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e46:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
	tutamakDigitalInputs[17].inputPort	= BTN_18_GPIO_Port;
 8000e4a:	4b50      	ldr	r3, [pc, #320]	; (8000f8c <initDigitalInputs+0x268>)
 8000e4c:	4a51      	ldr	r2, [pc, #324]	; (8000f94 <initDigitalInputs+0x270>)
 8000e4e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	tutamakDigitalInputs[18].inputPin 	= BTN_19_Pin;
 8000e52:	4b4e      	ldr	r3, [pc, #312]	; (8000f8c <initDigitalInputs+0x268>)
 8000e54:	2210      	movs	r2, #16
 8000e56:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a
	tutamakDigitalInputs[18].inputPort	= BTN_19_GPIO_Port;
 8000e5a:	4b4c      	ldr	r3, [pc, #304]	; (8000f8c <initDigitalInputs+0x268>)
 8000e5c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e60:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	tutamakDigitalInputs[19].inputPin 	= BTN_20_Pin;
 8000e64:	4b49      	ldr	r3, [pc, #292]	; (8000f8c <initDigitalInputs+0x268>)
 8000e66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e6a:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e
	tutamakDigitalInputs[19].inputPort	= BTN_20_GPIO_Port;
 8000e6e:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <initDigitalInputs+0x268>)
 8000e70:	4a47      	ldr	r2, [pc, #284]	; (8000f90 <initDigitalInputs+0x26c>)
 8000e72:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	tutamakDigitalInputs[20].inputPin 	= BTN_21_Pin;
 8000e76:	4b45      	ldr	r3, [pc, #276]	; (8000f8c <initDigitalInputs+0x268>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
	tutamakDigitalInputs[20].inputPort	= BTN_21_GPIO_Port;
 8000e7e:	4b43      	ldr	r3, [pc, #268]	; (8000f8c <initDigitalInputs+0x268>)
 8000e80:	4a44      	ldr	r2, [pc, #272]	; (8000f94 <initDigitalInputs+0x270>)
 8000e82:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	tutamakDigitalInputs[21].inputPin 	= BTN_22_Pin;
 8000e86:	4b41      	ldr	r3, [pc, #260]	; (8000f8c <initDigitalInputs+0x268>)
 8000e88:	2204      	movs	r2, #4
 8000e8a:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
	tutamakDigitalInputs[21].inputPort	= BTN_22_GPIO_Port;
 8000e8e:	4b3f      	ldr	r3, [pc, #252]	; (8000f8c <initDigitalInputs+0x268>)
 8000e90:	4a40      	ldr	r2, [pc, #256]	; (8000f94 <initDigitalInputs+0x270>)
 8000e92:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	tutamakDigitalInputs[22].inputPin 	= BTN_23_Pin;
 8000e96:	4b3d      	ldr	r3, [pc, #244]	; (8000f8c <initDigitalInputs+0x268>)
 8000e98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e9c:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
	tutamakDigitalInputs[22].inputPort	= BTN_23_GPIO_Port;
 8000ea0:	4b3a      	ldr	r3, [pc, #232]	; (8000f8c <initDigitalInputs+0x268>)
 8000ea2:	4a3c      	ldr	r2, [pc, #240]	; (8000f94 <initDigitalInputs+0x270>)
 8000ea4:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	tutamakDigitalInputs[23].inputPin 	= BTN_24_Pin;
 8000ea8:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <initDigitalInputs+0x268>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
	tutamakDigitalInputs[23].inputPort	= BTN_24_GPIO_Port;
 8000eb0:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <initDigitalInputs+0x268>)
 8000eb2:	4a38      	ldr	r2, [pc, #224]	; (8000f94 <initDigitalInputs+0x270>)
 8000eb4:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	tutamakDigitalInputs[24].inputPin 	= BTN_25_Pin;
 8000eb8:	4b34      	ldr	r3, [pc, #208]	; (8000f8c <initDigitalInputs+0x268>)
 8000eba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ebe:	f8a3 21e2 	strh.w	r2, [r3, #482]	; 0x1e2
	tutamakDigitalInputs[24].inputPort	= BTN_25_GPIO_Port;
 8000ec2:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <initDigitalInputs+0x268>)
 8000ec4:	4a33      	ldr	r2, [pc, #204]	; (8000f94 <initDigitalInputs+0x270>)
 8000ec6:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	tutamakDigitalInputs[25].inputPin 	= BTN_26_Pin;
 8000eca:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <initDigitalInputs+0x268>)
 8000ecc:	2208      	movs	r2, #8
 8000ece:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
	tutamakDigitalInputs[25].inputPort	= BTN_26_GPIO_Port;
 8000ed2:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <initDigitalInputs+0x268>)
 8000ed4:	4a2e      	ldr	r2, [pc, #184]	; (8000f90 <initDigitalInputs+0x26c>)
 8000ed6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	tutamakDigitalInputs[26].inputPin 	= BTN_27_Pin;
 8000eda:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <initDigitalInputs+0x268>)
 8000edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee0:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
	tutamakDigitalInputs[26].inputPort	= BTN_27_GPIO_Port;
 8000ee4:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <initDigitalInputs+0x268>)
 8000ee6:	4a2b      	ldr	r2, [pc, #172]	; (8000f94 <initDigitalInputs+0x270>)
 8000ee8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	tutamakDigitalInputs[27].inputPin 	= BTN_28_Pin;
 8000eec:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <initDigitalInputs+0x268>)
 8000eee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ef2:	f8a3 221e 	strh.w	r2, [r3, #542]	; 0x21e
	tutamakDigitalInputs[27].inputPort	= BTN_28_GPIO_Port;
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <initDigitalInputs+0x268>)
 8000ef8:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <initDigitalInputs+0x270>)
 8000efa:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	tutamakDigitalInputs[28].inputPin 	= BTN_29_Pin;
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <initDigitalInputs+0x268>)
 8000f00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f04:	f8a3 2232 	strh.w	r2, [r3, #562]	; 0x232
	tutamakDigitalInputs[28].inputPort	= BTN_29_GPIO_Port;
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <initDigitalInputs+0x268>)
 8000f0a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f0e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	tutamakDigitalInputs[29].inputPin 	= BTN_30_Pin;
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <initDigitalInputs+0x268>)
 8000f14:	2240      	movs	r2, #64	; 0x40
 8000f16:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
	tutamakDigitalInputs[29].inputPort	= BTN_30_GPIO_Port;
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <initDigitalInputs+0x268>)
 8000f1c:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <initDigitalInputs+0x26c>)
 8000f1e:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	tutamakDigitalInputs[30].inputPin 	= BTN_31_Pin;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <initDigitalInputs+0x268>)
 8000f24:	2220      	movs	r2, #32
 8000f26:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
	tutamakDigitalInputs[30].inputPort	= BTN_31_GPIO_Port;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <initDigitalInputs+0x268>)
 8000f2c:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <initDigitalInputs+0x26c>)
 8000f2e:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	tutamakDigitalInputs[31].inputPin 	= BTN_32_Pin;
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <initDigitalInputs+0x268>)
 8000f34:	2210      	movs	r2, #16
 8000f36:	f8a3 226e 	strh.w	r2, [r3, #622]	; 0x26e
	tutamakDigitalInputs[31].inputPort	= BTN_32_GPIO_Port;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <initDigitalInputs+0x268>)
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <initDigitalInputs+0x26c>)
 8000f3e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	/***************************************************/

		uint32_t i;
		digitalInput* tempDigitalInputPtr = digitalInputPtr;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < BUTTON_COUNT; i++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	e014      	b.n	8000f76 <initDigitalInputs+0x252>
		{
			tempDigitalInputPtr	->	inputVal = GPIO_PIN_RESET;
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
			tempDigitalInputPtr	->	readFlag = false;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	2200      	movs	r2, #0
 8000f56:	705a      	strb	r2, [r3, #1]
			tempDigitalInputPtr ->  readState= GPIO_PIN_RESET;
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	721a      	strb	r2, [r3, #8]
			tempDigitalInputPtr ->  debounceTimer = 0;
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
			//for prototype debounce factor
			tempDigitalInputPtr ->  debounceFactor = 20; /*!!!!!!!!!!!!! config structtan cekilecek !!!!!!!!!!!!!!!!!*/
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	2214      	movs	r2, #20
 8000f68:	611a      	str	r2, [r3, #16]
			tempDigitalInputPtr++;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	3314      	adds	r3, #20
 8000f6e:	60bb      	str	r3, [r7, #8]
		for(i = 0; i < BUTTON_COUNT; i++)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	3301      	adds	r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b1f      	cmp	r3, #31
 8000f7a:	d9e7      	bls.n	8000f4c <initDigitalInputs+0x228>
		}

}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200000e8 	.word	0x200000e8
 8000f90:	48000400 	.word	0x48000400
 8000f94:	48000800 	.word	0x48000800
 8000f98:	48001400 	.word	0x48001400
 8000f9c:	48000c00 	.word	0x48000c00

08000fa0 <sampleDigitalInputs>:
		@description	:

*/

void sampleDigitalInputs(digitalInput *digitalInputPtr)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	digitalInput* tempDigitalInputPtr = digitalInputPtr;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < BUTTON_COUNT; i++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	e053      	b.n	800105a <sampleDigitalInputs+0xba>
	{
		if(tempDigitalInputPtr -> readFlag == true)
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	785b      	ldrb	r3, [r3, #1]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d04c      	beq.n	8001054 <sampleDigitalInputs+0xb4>
		{
			if(tempDigitalInputPtr -> readState == GPIO_PIN_RESET)
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	7a1b      	ldrb	r3, [r3, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d11f      	bne.n	8001002 <sampleDigitalInputs+0x62>
			{
				if(tempDigitalInputPtr -> inputVal == GPIO_PIN_RESET)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d117      	bne.n	8000ffa <sampleDigitalInputs+0x5a>
				{
					if(tempDigitalInputPtr -> debounceTimer < tempDigitalInputPtr -> debounceFactor)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d204      	bcs.n	8000fe0 <sampleDigitalInputs+0x40>
					{
						tempDigitalInputPtr -> debounceTimer++;
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60da      	str	r2, [r3, #12]
					}
					if(tempDigitalInputPtr ->debounceTimer >= tempDigitalInputPtr ->debounceFactor)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d32d      	bcc.n	8001048 <sampleDigitalInputs+0xa8>
					{
						tempDigitalInputPtr -> debounceTimer = 0;
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
						tempDigitalInputPtr -> readState = GPIO_PIN_SET;
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	721a      	strb	r2, [r3, #8]
 8000ff8:	e026      	b.n	8001048 <sampleDigitalInputs+0xa8>
					}
				}
				else
				{
					tempDigitalInputPtr -> debounceTimer = 0;
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	e022      	b.n	8001048 <sampleDigitalInputs+0xa8>
				}
			}

			else if(tempDigitalInputPtr -> readState == GPIO_PIN_SET)
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	7a1b      	ldrb	r3, [r3, #8]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d11e      	bne.n	8001048 <sampleDigitalInputs+0xa8>
			{
				if(tempDigitalInputPtr -> inputVal == GPIO_PIN_SET)
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d117      	bne.n	8001042 <sampleDigitalInputs+0xa2>
				{
					if(tempDigitalInputPtr -> debounceTimer < tempDigitalInputPtr -> debounceFactor)
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	429a      	cmp	r2, r3
 800101c:	d204      	bcs.n	8001028 <sampleDigitalInputs+0x88>
					{
						tempDigitalInputPtr -> debounceTimer++;
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60da      	str	r2, [r3, #12]
					}
					if(tempDigitalInputPtr ->debounceTimer >= tempDigitalInputPtr ->debounceFactor)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d309      	bcc.n	8001048 <sampleDigitalInputs+0xa8>
					{
						tempDigitalInputPtr -> debounceTimer = 0;
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
						tempDigitalInputPtr -> readState = GPIO_PIN_RESET;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	2200      	movs	r2, #0
 800103e:	721a      	strb	r2, [r3, #8]
 8001040:	e002      	b.n	8001048 <sampleDigitalInputs+0xa8>
					}
				}
				else
				{
					tempDigitalInputPtr -> debounceTimer = 0;
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
				}
			}

			tempDigitalInputPtr   ->  readFlag = false;
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	2200      	movs	r2, #0
 800104c:	705a      	strb	r2, [r3, #1]

			tempDigitalInputPtr++;
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	3314      	adds	r3, #20
 8001052:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < BUTTON_COUNT; i++)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b1f      	cmp	r3, #31
 800105e:	d9a8      	bls.n	8000fb2 <sampleDigitalInputs+0x12>
		}
	}
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <readDigitalInputs>:
/** @brief 				: function to read digital inputs sequantially
	* @param 	uint8_t DIN_NUMBER number of digital inputs to read
	* @retval None
	*/
void readDigitalInputs(digitalInput *digitalInputPtr)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
	uint32_t i;
	digitalInput* tempDigitalInputPtr = digitalInputPtr;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60bb      	str	r3, [r7, #8]

	for(i=0;i<BUTTON_COUNT;i++)
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	e014      	b.n	80010aa <readDigitalInputs+0x3c>
	{
		tempDigitalInputPtr		->		inputVal = HAL_GPIO_ReadPin(tempDigitalInputPtr->inputPort, tempDigitalInputPtr->inputPin);
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	885b      	ldrh	r3, [r3, #2]
 8001088:	4619      	mov	r1, r3
 800108a:	4610      	mov	r0, r2
 800108c:	f002 fcba 	bl	8003a04 <HAL_GPIO_ReadPin>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	701a      	strb	r2, [r3, #0]
		tempDigitalInputPtr		->		readFlag = true;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	2201      	movs	r2, #1
 800109c:	705a      	strb	r2, [r3, #1]
		tempDigitalInputPtr++;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	3314      	adds	r3, #20
 80010a2:	60bb      	str	r3, [r7, #8]
	for(i=0;i<BUTTON_COUNT;i++)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3301      	adds	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b1f      	cmp	r3, #31
 80010ae:	d9e7      	bls.n	8001080 <readDigitalInputs+0x12>
	}
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <getDigitalInputs>:
		@description	:

*/

digitalInput* getDigitalInputs(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
		return &tutamakDigitalInputs[0];
 80010c0:	4b02      	ldr	r3, [pc, #8]	; (80010cc <getDigitalInputs+0x10>)
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	200000e8 	.word	0x200000e8

080010d0 <sendUartFrame>:
		@Param 				: ----
		@description	: ----

*/
void sendUartFrame(UART_HandleTypeDef *huart,uint8_t* rs422Frame_, uint16_t Size, uint32_t Timeout, bool* sendFlag)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	4613      	mov	r3, r2
 80010de:	80fb      	strh	r3, [r7, #6]

	unsigned int i;
	if(*sendFlag == true)
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 80ed 	beq.w	80012c4 <sendUartFrame+0x1f4>
	{
			rs422Frame_[0] = RS422_HEADER;
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	22b5      	movs	r2, #181	; 0xb5
 80010ee:	701a      	strb	r2, [r3, #0]


			rs422Frame_[1] = 0x00 |
                       	   ( tutamakDigitalInputs[14].readState << 2) 	|									//SW4-DOWN
 80010f0:	4b76      	ldr	r3, [pc, #472]	; (80012cc <sendUartFrame+0x1fc>)
 80010f2:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
			rs422Frame_[1] = 0x00 |
 80010f6:	009b      	lsls	r3, r3, #2
                       	   ( tutamakDigitalInputs[14].readState << 2) 	|									//SW4-DOWN
 80010f8:	b25a      	sxtb	r2, r3
						   ( tutamakDigitalInputs[12].readState << 3) 	|									//SW4-UP
 80010fa:	4b74      	ldr	r3, [pc, #464]	; (80012cc <sendUartFrame+0x1fc>)
 80010fc:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8001100:	00db      	lsls	r3, r3, #3
                       	   ( tutamakDigitalInputs[14].readState << 2) 	|									//SW4-DOWN
 8001102:	b25b      	sxtb	r3, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	b25a      	sxtb	r2, r3
						   (((~(tutamakDigitalInputs[0].readState)) << 4) & 0x10);							//SW1
 8001108:	4b70      	ldr	r3, [pc, #448]	; (80012cc <sendUartFrame+0x1fc>)
 800110a:	7a1b      	ldrb	r3, [r3, #8]
 800110c:	43db      	mvns	r3, r3
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	b25b      	sxtb	r3, r3
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	b25b      	sxtb	r3, r3
						   ( tutamakDigitalInputs[12].readState << 3) 	|									//SW4-UP
 8001118:	4313      	orrs	r3, r2
 800111a:	b25a      	sxtb	r2, r3
			rs422Frame_[1] = 0x00 |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	3301      	adds	r3, #1
						   ( tutamakDigitalInputs[12].readState << 3) 	|									//SW4-UP
 8001120:	b2d2      	uxtb	r2, r2
			rs422Frame_[1] = 0x00 |
 8001122:	701a      	strb	r2, [r3, #0]

			rs422Frame_[2] = 0x00 |
							(((~(tutamakDigitalInputs[11].readState)) << 0) & 0x01)	| 						//SW7
 8001124:	4b69      	ldr	r3, [pc, #420]	; (80012cc <sendUartFrame+0x1fc>)
 8001126:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 800112a:	f003 0301 	and.w	r3, r3, #1
			rs422Frame_[2] = 0x00 |
 800112e:	2b00      	cmp	r3, #0
 8001130:	bf0c      	ite	eq
 8001132:	2301      	moveq	r3, #1
 8001134:	2300      	movne	r3, #0
 8001136:	b2db      	uxtb	r3, r3
 8001138:	b25a      	sxtb	r2, r3
								(tutamakDigitalInputs[9].readState << 2) 			|						//SW6
 800113a:	4b64      	ldr	r3, [pc, #400]	; (80012cc <sendUartFrame+0x1fc>)
 800113c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001140:	009b      	lsls	r3, r3, #2
							(((~(tutamakDigitalInputs[11].readState)) << 0) & 0x01)	| 						//SW7
 8001142:	b25b      	sxtb	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b25a      	sxtb	r2, r3
								(tutamakDigitalInputs[2].readState << 4);									//SW2
 8001148:	4b60      	ldr	r3, [pc, #384]	; (80012cc <sendUartFrame+0x1fc>)
 800114a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800114e:	011b      	lsls	r3, r3, #4
								(tutamakDigitalInputs[9].readState << 2) 			|						//SW6
 8001150:	b25b      	sxtb	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b25a      	sxtb	r2, r3
			rs422Frame_[2] = 0x00 |
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	3302      	adds	r3, #2
								(tutamakDigitalInputs[9].readState << 2) 			|						//SW6
 800115a:	b2d2      	uxtb	r2, r2
			rs422Frame_[2] = 0x00 |
 800115c:	701a      	strb	r2, [r3, #0]

			rs422Frame_[3] = (tutamakDigitalInputs[7].readState) 		|									//SW5-RIGHT
 800115e:	4b5b      	ldr	r3, [pc, #364]	; (80012cc <sendUartFrame+0x1fc>)
 8001160:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001164:	b25a      	sxtb	r2, r3
		                   	 (tutamakDigitalInputs[5].readState << 1) 	|									//SW5-LEFT
 8001166:	4b59      	ldr	r3, [pc, #356]	; (80012cc <sendUartFrame+0x1fc>)
 8001168:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800116c:	005b      	lsls	r3, r3, #1
			rs422Frame_[3] = (tutamakDigitalInputs[7].readState) 		|									//SW5-RIGHT
 800116e:	b25b      	sxtb	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b25a      	sxtb	r2, r3
							 (tutamakDigitalInputs[3].readState << 2) 	|									//SW5-DOWN
 8001174:	4b55      	ldr	r3, [pc, #340]	; (80012cc <sendUartFrame+0x1fc>)
 8001176:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800117a:	009b      	lsls	r3, r3, #2
		                   	 (tutamakDigitalInputs[5].readState << 1) 	|									//SW5-LEFT
 800117c:	b25b      	sxtb	r3, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	b25a      	sxtb	r2, r3
							 (tutamakDigitalInputs[1].readState << 3) 	|									//SW5-UP
 8001182:	4b52      	ldr	r3, [pc, #328]	; (80012cc <sendUartFrame+0x1fc>)
 8001184:	7f1b      	ldrb	r3, [r3, #28]
 8001186:	00db      	lsls	r3, r3, #3
							 (tutamakDigitalInputs[3].readState << 2) 	|									//SW5-DOWN
 8001188:	b25b      	sxtb	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b25a      	sxtb	r2, r3
							 (tutamakDigitalInputs[10].readState << 4)	|									//SW3-RIGHT
 800118e:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <sendUartFrame+0x1fc>)
 8001190:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8001194:	011b      	lsls	r3, r3, #4
							 (tutamakDigitalInputs[1].readState << 3) 	|									//SW5-UP
 8001196:	b25b      	sxtb	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b25a      	sxtb	r2, r3
							 (tutamakDigitalInputs[8].readState << 5)	|									//SW3-LEFT
 800119c:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <sendUartFrame+0x1fc>)
 800119e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80011a2:	015b      	lsls	r3, r3, #5
							 (tutamakDigitalInputs[10].readState << 4)	|									//SW3-RIGHT
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b25a      	sxtb	r2, r3
							 (tutamakDigitalInputs[6].readState << 6)	|									//SW3-DOWN
 80011aa:	4b48      	ldr	r3, [pc, #288]	; (80012cc <sendUartFrame+0x1fc>)
 80011ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80011b0:	019b      	lsls	r3, r3, #6
							 (tutamakDigitalInputs[8].readState << 5)	|									//SW3-LEFT
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b25a      	sxtb	r2, r3
							 (tutamakDigitalInputs[4].readState << 7);										//SW3-UP
 80011b8:	4b44      	ldr	r3, [pc, #272]	; (80012cc <sendUartFrame+0x1fc>)
 80011ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80011be:	01db      	lsls	r3, r3, #7
							 (tutamakDigitalInputs[6].readState << 6)	|									//SW3-DOWN
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b25a      	sxtb	r2, r3
			rs422Frame_[3] = (tutamakDigitalInputs[7].readState) 		|									//SW5-RIGHT
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	3303      	adds	r3, #3
							 (tutamakDigitalInputs[6].readState << 6)	|									//SW3-DOWN
 80011ca:	b2d2      	uxtb	r2, r2
			rs422Frame_[3] = (tutamakDigitalInputs[7].readState) 		|									//SW5-RIGHT
 80011cc:	701a      	strb	r2, [r3, #0]

			if(remoteMode == 0)
 80011ce:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <sendUartFrame+0x200>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d11a      	bne.n	800120c <sendUartFrame+0x13c>
			{
				//AnADC_Values[0]=( AnADC_Values[0] >> 3) & 0x1FFF;
				//AnADC_Values[1]=( AnADC_Values[1] >> 3) & 0x1FFF;

				rs422Frame_[4] = (AnADC_Values[0] >> 8) & 0xFF;// & 0x1F;			//AN2_7-0
 80011d6:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <sendUartFrame+0x204>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	0a1a      	lsrs	r2, r3, #8
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	3304      	adds	r3, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	701a      	strb	r2, [r3, #0]
				rs422Frame_[5] =  AnADC_Values[0]       & 0xFF; 					//AN2_15-8
 80011e4:	4b3b      	ldr	r3, [pc, #236]	; (80012d4 <sendUartFrame+0x204>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	3305      	adds	r3, #5
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	701a      	strb	r2, [r3, #0]

				rs422Frame_[6] = (AnADC_Values[1] >> 8) & 0xFF;      				//AN3_7-0
 80011f0:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <sendUartFrame+0x204>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	0a1a      	lsrs	r2, r3, #8
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3306      	adds	r3, #6
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]
				rs422Frame_[7] =  AnADC_Values[1]       & 0xFF; 					//AN3_15-8
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <sendUartFrame+0x204>)
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	3307      	adds	r3, #7
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]
 800120a:	e025      	b.n	8001258 <sendUartFrame+0x188>
				//fitted kullaniliyor

				//xAxisData = (AnADC_Values[0] >> 3) & 0x1FFF;
				//yAxisData = (AnADC_Values[1] >> 3) & 0x1FFF;

				rs422Frame_[4] = (fittedAnAdc_Values[0] >> 7) & 0x1F;
 800120c:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <sendUartFrame+0x208>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	11db      	asrs	r3, r3, #7
 8001212:	b2da      	uxtb	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	3304      	adds	r3, #4
 8001218:	f002 021f 	and.w	r2, r2, #31
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	701a      	strb	r2, [r3, #0]
				rs422Frame_[5] =  fittedAnAdc_Values[0]       & 0x7F;
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <sendUartFrame+0x208>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	3305      	adds	r3, #5
 800122a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	701a      	strb	r2, [r3, #0]

				rs422Frame_[6] = (fittedAnAdc_Values[1] >> 7) & 0x1F;
 8001232:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <sendUartFrame+0x208>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	11db      	asrs	r3, r3, #7
 8001238:	b2da      	uxtb	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	3306      	adds	r3, #6
 800123e:	f002 021f 	and.w	r2, r2, #31
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]
				rs422Frame_[7] =  fittedAnAdc_Values[1]       & 0x7F;
 8001246:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <sendUartFrame+0x208>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	3307      	adds	r3, #7
 8001250:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	701a      	strb	r2, [r3, #0]
			}

			rs422Frame_[8] = 0x00;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	3308      	adds	r3, #8
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
			//								errX << 6;//error byte



			/* checksum calculation */
			rs422Frame_[RS422_FRAME_SIZE-1] = 0;
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	3309      	adds	r3, #9
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]
			for(i=1;i<RS422_FRAME_SIZE-1;i++)
 8001268:	2301      	movs	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	e00e      	b.n	800128c <sendUartFrame+0x1bc>
			{
				rs422Frame_[RS422_FRAME_SIZE-1] += rs422Frame_[i];
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	3309      	adds	r3, #9
 8001272:	7819      	ldrb	r1, [r3, #0]
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	4413      	add	r3, r2
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	3309      	adds	r3, #9
 8001280:	440a      	add	r2, r1
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]
			for(i=1;i<RS422_FRAME_SIZE-1;i++)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b08      	cmp	r3, #8
 8001290:	d9ed      	bls.n	800126e <sendUartFrame+0x19e>
			}
			rs422Frame_[RS422_FRAME_SIZE-1] = (255-rs422Frame_[RS422_FRAME_SIZE-1]) + 1;
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	3309      	adds	r3, #9
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	3309      	adds	r3, #9
 800129c:	4252      	negs	r2, r2
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	701a      	strb	r2, [r3, #0]
			rs422Frame_[RS422_FRAME_SIZE -1] = rs422Frame[RS422_FRAME_SIZE - 1] & 0x7F;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <sendUartFrame+0x20c>)
 80012a4:	7a5a      	ldrb	r2, [r3, #9]
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	3309      	adds	r3, #9
 80012aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	701a      	strb	r2, [r3, #0]
			/* transmit frame */
			HAL_UART_Transmit(huart, (uint8_t*)rs422Frame_, 10, Timeout);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	220a      	movs	r2, #10
 80012b6:	68b9      	ldr	r1, [r7, #8]
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f005 f933 	bl	8006524 <HAL_UART_Transmit>
			*sendFlag = false;
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
	}
}
 80012c4:	bf00      	nop
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200000e8 	.word	0x200000e8
 80012d0:	20000000 	.word	0x20000000
 80012d4:	200000d4 	.word	0x200000d4
 80012d8:	200000dc 	.word	0x200000dc
 80012dc:	20000368 	.word	0x20000368

080012e0 <eraseFlashUserConf>:
		@Param 				: none
		@description	:

*/
void eraseFlashUserConf(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80012e4:	f002 f8ac 	bl	8003440 <HAL_FLASH_Unlock>
	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <eraseFlashUserConf+0x34>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
  EraseInitStruct.PageAddress = CONFIG_DATA_BASE_ADDR; // düzenlenecek !!!!!!!!!!!!!!!!!!!!*/
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <eraseFlashUserConf+0x34>)
 80012f0:	4a09      	ldr	r2, [pc, #36]	; (8001318 <eraseFlashUserConf+0x38>)
 80012f2:	605a      	str	r2, [r3, #4]
  EraseInitStruct.NbPages     = 1;
 80012f4:	4b07      	ldr	r3, [pc, #28]	; (8001314 <eraseFlashUserConf+0x34>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	609a      	str	r2, [r3, #8]

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80012fa:	4908      	ldr	r1, [pc, #32]	; (800131c <eraseFlashUserConf+0x3c>)
 80012fc:	4805      	ldr	r0, [pc, #20]	; (8001314 <eraseFlashUserConf+0x34>)
 80012fe:	f002 f963 	bl	80035c8 <HAL_FLASHEx_Erase>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d000      	beq.n	800130a <eraseFlashUserConf+0x2a>
  {
    while (1)
 8001308:	e7fe      	b.n	8001308 <eraseFlashUserConf+0x28>
    {
    }
  }
	HAL_FLASH_Lock();
 800130a:	f002 f8bf 	bl	800348c <HAL_FLASH_Lock>
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000047c 	.word	0x2000047c
 8001318:	0800e000 	.word	0x0800e000
 800131c:	20000394 	.word	0x20000394

08001320 <refreshFlashUserConf>:
		@Param 				: none
		@description	: Page Erase procedure is used before write function

*/
void refreshFlashUserConf(ConfigData *configDataPtr)
{
 8001320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001324:	b08e      	sub	sp, #56	; 0x38
 8001326:	af00      	add	r7, sp, #0
 8001328:	62f8      	str	r0, [r7, #44]	; 0x2c
	volatile uint32_t i = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
	ConfigData* tempConfigDataPtr = configDataPtr;
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
	eraseFlashUserConf();
 8001332:	f7ff ffd5 	bl	80012e0 <eraseFlashUserConf>
	HAL_FLASH_Unlock();
 8001336:	f002 f883 	bl	8003440 <HAL_FLASH_Unlock>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_DEFAULT_SELECT, 0x00 );
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	493f      	ldr	r1, [pc, #252]	; (8001440 <refreshFlashUserConf+0x120>)
 8001344:	2001      	movs	r0, #1
 8001346:	f002 f80b 	bl	8003360 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_INTERFACE_OFFSET, tempConfigDataPtr -> tkkModSelection );
 800134a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	2200      	movs	r2, #0
 8001352:	461c      	mov	r4, r3
 8001354:	4615      	mov	r5, r2
 8001356:	4622      	mov	r2, r4
 8001358:	462b      	mov	r3, r5
 800135a:	493a      	ldr	r1, [pc, #232]	; (8001444 <refreshFlashUserConf+0x124>)
 800135c:	2001      	movs	r0, #1
 800135e:	f001 ffff 	bl	8003360 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_X_MIDDLEPOINT_OFFSET, tempConfigDataPtr ->xMid);
 8001362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001364:	88db      	ldrh	r3, [r3, #6]
 8001366:	b29b      	uxth	r3, r3
 8001368:	2200      	movs	r2, #0
 800136a:	4698      	mov	r8, r3
 800136c:	4691      	mov	r9, r2
 800136e:	4642      	mov	r2, r8
 8001370:	464b      	mov	r3, r9
 8001372:	4935      	ldr	r1, [pc, #212]	; (8001448 <refreshFlashUserConf+0x128>)
 8001374:	2001      	movs	r0, #1
 8001376:	f001 fff3 	bl	8003360 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_X_MINPOINT_OFFSET, tempConfigDataPtr -> xMin);
 800137a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137c:	885b      	ldrh	r3, [r3, #2]
 800137e:	b29b      	uxth	r3, r3
 8001380:	2200      	movs	r2, #0
 8001382:	469a      	mov	sl, r3
 8001384:	4693      	mov	fp, r2
 8001386:	4652      	mov	r2, sl
 8001388:	465b      	mov	r3, fp
 800138a:	4930      	ldr	r1, [pc, #192]	; (800144c <refreshFlashUserConf+0x12c>)
 800138c:	2001      	movs	r0, #1
 800138e:	f001 ffe7 	bl	8003360 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_X_MAXPOINT_OFFSET, tempConfigDataPtr -> xMax);
 8001392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001394:	889b      	ldrh	r3, [r3, #4]
 8001396:	b29b      	uxth	r3, r3
 8001398:	2200      	movs	r2, #0
 800139a:	623b      	str	r3, [r7, #32]
 800139c:	627a      	str	r2, [r7, #36]	; 0x24
 800139e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013a2:	492b      	ldr	r1, [pc, #172]	; (8001450 <refreshFlashUserConf+0x130>)
 80013a4:	2001      	movs	r0, #1
 80013a6:	f001 ffdb 	bl	8003360 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_Y_MIDDLEPOINT_OFFSET, tempConfigDataPtr -> yMid);
 80013aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ac:	899b      	ldrh	r3, [r3, #12]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	2200      	movs	r2, #0
 80013b2:	61bb      	str	r3, [r7, #24]
 80013b4:	61fa      	str	r2, [r7, #28]
 80013b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013ba:	4926      	ldr	r1, [pc, #152]	; (8001454 <refreshFlashUserConf+0x134>)
 80013bc:	2001      	movs	r0, #1
 80013be:	f001 ffcf 	bl	8003360 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_Y_MINPOINT_OFFSET, tempConfigDataPtr -> yMin);
 80013c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c4:	891b      	ldrh	r3, [r3, #8]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	2200      	movs	r2, #0
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	617a      	str	r2, [r7, #20]
 80013ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013d2:	4921      	ldr	r1, [pc, #132]	; (8001458 <refreshFlashUserConf+0x138>)
 80013d4:	2001      	movs	r0, #1
 80013d6:	f001 ffc3 	bl	8003360 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_Y_MAXPOINT_OFFSET, tempConfigDataPtr -> yMax);
 80013da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013dc:	895b      	ldrh	r3, [r3, #10]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	2200      	movs	r2, #0
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	60fa      	str	r2, [r7, #12]
 80013e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013ea:	491c      	ldr	r1, [pc, #112]	; (800145c <refreshFlashUserConf+0x13c>)
 80013ec:	2001      	movs	r0, #1
 80013ee:	f001 ffb7 	bl	8003360 <HAL_FLASH_Program>
	for(i = 0; i < 32; i++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
 80013f6:	e015      	b.n	8001424 <refreshFlashUserConf+0x104>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT, tempTkkConfig.debounceFactor[i]);
 80013f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <refreshFlashUserConf+0x140>)
 80013fc:	4413      	add	r3, r2
 80013fe:	0099      	lsls	r1, r3, #2
 8001400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001402:	4a18      	ldr	r2, [pc, #96]	; (8001464 <refreshFlashUserConf+0x144>)
 8001404:	3304      	adds	r3, #4
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4413      	add	r3, r2
 800140a:	88db      	ldrh	r3, [r3, #6]
 800140c:	b29b      	uxth	r3, r3
 800140e:	2200      	movs	r2, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001418:	2001      	movs	r0, #1
 800141a:	f001 ffa1 	bl	8003360 <HAL_FLASH_Program>
	for(i = 0; i < 32; i++)
 800141e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001420:	3301      	adds	r3, #1
 8001422:	633b      	str	r3, [r7, #48]	; 0x30
 8001424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001426:	2b1f      	cmp	r3, #31
 8001428:	d9e6      	bls.n	80013f8 <refreshFlashUserConf+0xd8>
	}

	HAL_FLASH_Lock();
 800142a:	f002 f82f 	bl	800348c <HAL_FLASH_Lock>
	readFlashUserConf(&userTkkConfig);
 800142e:	480e      	ldr	r0, [pc, #56]	; (8001468 <refreshFlashUserConf+0x148>)
 8001430:	f000 f81c 	bl	800146c <readFlashUserConf>
}
 8001434:	bf00      	nop
 8001436:	3738      	adds	r7, #56	; 0x38
 8001438:	46bd      	mov	sp, r7
 800143a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800143e:	bf00      	nop
 8001440:	0800e000 	.word	0x0800e000
 8001444:	0800e002 	.word	0x0800e002
 8001448:	0800e004 	.word	0x0800e004
 800144c:	0800e006 	.word	0x0800e006
 8001450:	0800e008 	.word	0x0800e008
 8001454:	0800e00a 	.word	0x0800e00a
 8001458:	0800e00c 	.word	0x0800e00c
 800145c:	0800e00e 	.word	0x0800e00e
 8001460:	02003814 	.word	0x02003814
 8001464:	20000398 	.word	0x20000398
 8001468:	200003e8 	.word	0x200003e8

0800146c <readFlashUserConf>:
		@Param 				: none
		@description	:

*/
void readFlashUserConf(ConfigData *configDataPtr)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
	ConfigData* tempConfigDataPtr = configDataPtr;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	60fb      	str	r3, [r7, #12]

	tempConfigDataPtr -> tkkModSelection = (*(uint32_t*)CONFIG_DATA_INTERFACE_OFFSET);
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <readFlashUserConf+0x90>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b29a      	uxth	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	801a      	strh	r2, [r3, #0]

	tempConfigDataPtr -> xMid = (*(uint32_t*)CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <readFlashUserConf+0x94>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29a      	uxth	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	80da      	strh	r2, [r3, #6]
	tempConfigDataPtr -> xMin = (*(uint32_t*)CONFIG_DATA_X_MINPOINT_OFFSET);
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <readFlashUserConf+0x98>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	b29a      	uxth	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	805a      	strh	r2, [r3, #2]
	tempConfigDataPtr -> xMax = (*(uint32_t*)CONFIG_DATA_X_MAXPOINT_OFFSET);
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <readFlashUserConf+0x9c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	b29a      	uxth	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	809a      	strh	r2, [r3, #4]

	tempConfigDataPtr -> yMid = (*(uint32_t*)CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 80014a4:	4b19      	ldr	r3, [pc, #100]	; (800150c <readFlashUserConf+0xa0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	819a      	strh	r2, [r3, #12]
	tempConfigDataPtr -> yMin = (*(uint32_t*)CONFIG_DATA_Y_MINPOINT_OFFSET);
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <readFlashUserConf+0xa4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	811a      	strh	r2, [r3, #8]
	tempConfigDataPtr -> yMax = (*(uint32_t*)CONFIG_DATA_Y_MAXPOINT_OFFSET);
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <readFlashUserConf+0xa8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	815a      	strh	r2, [r3, #10]

	for(i = 0; i < 32; i++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	e00f      	b.n	80014e8 <readFlashUserConf+0x7c>
	{
		tempConfigDataPtr -> debounceFactor [i] = (*(uint32_t*)(CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT));
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <readFlashUserConf+0xac>)
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	b291      	uxth	r1, r2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	3304      	adds	r3, #4
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	460a      	mov	r2, r1
 80014e0:	80da      	strh	r2, [r3, #6]
	for(i = 0; i < 32; i++)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	3301      	adds	r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2b1f      	cmp	r3, #31
 80014ec:	d9ec      	bls.n	80014c8 <readFlashUserConf+0x5c>
	}

}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	0800e002 	.word	0x0800e002
 8001500:	0800e004 	.word	0x0800e004
 8001504:	0800e006 	.word	0x0800e006
 8001508:	0800e008 	.word	0x0800e008
 800150c:	0800e00a 	.word	0x0800e00a
 8001510:	0800e00c 	.word	0x0800e00c
 8001514:	0800e00e 	.word	0x0800e00e
 8001518:	02003814 	.word	0x02003814

0800151c <loadDefaultValues>:
void loadDefaultValues(ConfigData *configDataPtr)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
	ConfigData* tempConfigDataPtr = configDataPtr;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	60fb      	str	r3, [r7, #12]

	tempConfigDataPtr -> tkkModSelection = (*(uint32_t*)DEFAULT_CONFIG_DATA_INTERFACE_OFFSET);
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <loadDefaultValues+0x90>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b29a      	uxth	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	801a      	strh	r2, [r3, #0]

	tempConfigDataPtr -> xMid = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <loadDefaultValues+0x94>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29a      	uxth	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	80da      	strh	r2, [r3, #6]
	tempConfigDataPtr -> xMin = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET);
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <loadDefaultValues+0x98>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	b29a      	uxth	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	805a      	strh	r2, [r3, #2]
	tempConfigDataPtr -> xMax = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET);
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <loadDefaultValues+0x9c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	b29a      	uxth	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	809a      	strh	r2, [r3, #4]

	tempConfigDataPtr -> yMid = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <loadDefaultValues+0xa0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	b29a      	uxth	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	819a      	strh	r2, [r3, #12]
	tempConfigDataPtr -> yMin = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET);
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <loadDefaultValues+0xa4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	b29a      	uxth	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	811a      	strh	r2, [r3, #8]
	tempConfigDataPtr -> yMax = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET);
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <loadDefaultValues+0xa8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	b29a      	uxth	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	815a      	strh	r2, [r3, #10]

	for(i = 0; i < 32; i++)
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	e00f      	b.n	8001598 <loadDefaultValues+0x7c>
	{
		tempConfigDataPtr ->debounceFactor [i] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT));
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	009a      	lsls	r2, r3, #2
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <loadDefaultValues+0xac>)
 800157e:	4413      	add	r3, r2
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	b291      	uxth	r1, r2
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	3304      	adds	r3, #4
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	460a      	mov	r2, r1
 8001590:	80da      	strh	r2, [r3, #6]
	for(i = 0; i < 32; i++)
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	3301      	adds	r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	2b1f      	cmp	r3, #31
 800159c:	d9ec      	bls.n	8001578 <loadDefaultValues+0x5c>
	}


}
 800159e:	bf00      	nop
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	0800f000 	.word	0x0800f000
 80015b0:	0800f002 	.word	0x0800f002
 80015b4:	0800f004 	.word	0x0800f004
 80015b8:	0800f006 	.word	0x0800f006
 80015bc:	0800f008 	.word	0x0800f008
 80015c0:	0800f00a 	.word	0x0800f00a
 80015c4:	0800f00c 	.word	0x0800f00c
 80015c8:	0800f00e 	.word	0x0800f00e

080015cc <sendAckUart>:

void sendAckUart(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
	volatile uint8_t txBufferACK[9];

	txBufferACK[0] = COMMAND_HEADER;
 80015d2:	23a5      	movs	r3, #165	; 0xa5
 80015d4:	713b      	strb	r3, [r7, #4]
	txBufferACK[1] = COMMAND_ACK;
 80015d6:	23ff      	movs	r3, #255	; 0xff
 80015d8:	717b      	strb	r3, [r7, #5]
	txBufferACK[2] = 0x00;
 80015da:	2300      	movs	r3, #0
 80015dc:	71bb      	strb	r3, [r7, #6]
	txBufferACK[3] = 0x00;
 80015de:	2300      	movs	r3, #0
 80015e0:	71fb      	strb	r3, [r7, #7]
	txBufferACK[4] = 0x00;
 80015e2:	2300      	movs	r3, #0
 80015e4:	723b      	strb	r3, [r7, #8]
	txBufferACK[5] = 0x00;
 80015e6:	2300      	movs	r3, #0
 80015e8:	727b      	strb	r3, [r7, #9]
	txBufferACK[6] = 0x00;
 80015ea:	2300      	movs	r3, #0
 80015ec:	72bb      	strb	r3, [r7, #10]
	txBufferACK[7] = 0x00;
 80015ee:	2300      	movs	r3, #0
 80015f0:	72fb      	strb	r3, [r7, #11]
	txBufferACK[8] = CHECKSUM_ACK;
 80015f2:	2301      	movs	r3, #1
 80015f4:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*)txBufferACK, 9, 5000);
 80015f6:	1d39      	adds	r1, r7, #4
 80015f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80015fc:	2209      	movs	r2, #9
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <sendAckUart+0x40>)
 8001600:	f004 ff90 	bl	8006524 <HAL_UART_Transmit>
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200005a8 	.word	0x200005a8

08001610 <checkCommand>:

void checkCommand(uint8_t* rxBuffer)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]

	switch (rxBuffer[1])
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3301      	adds	r3, #1
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2bdd      	cmp	r3, #221	; 0xdd
 8001624:	f300 829d 	bgt.w	8001b62 <checkCommand+0x552>
 8001628:	2bbb      	cmp	r3, #187	; 0xbb
 800162a:	da05      	bge.n	8001638 <checkCommand+0x28>
 800162c:	2b04      	cmp	r3, #4
 800162e:	f300 808f 	bgt.w	8001750 <checkCommand+0x140>
 8001632:	2b00      	cmp	r3, #0
 8001634:	dc7c      	bgt.n	8001730 <checkCommand+0x120>

		case COMMAND_SET_DEFAULT_CONFIG_DATA:

		break;
	}
}
 8001636:	e294      	b.n	8001b62 <checkCommand+0x552>
	switch (rxBuffer[1])
 8001638:	3bbb      	subs	r3, #187	; 0xbb
 800163a:	2b22      	cmp	r3, #34	; 0x22
 800163c:	f200 8291 	bhi.w	8001b62 <checkCommand+0x552>
 8001640:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <checkCommand+0x38>)
 8001642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001646:	bf00      	nop
 8001648:	08001b43 	.word	0x08001b43
 800164c:	08001b63 	.word	0x08001b63
 8001650:	08001b63 	.word	0x08001b63
 8001654:	08001b63 	.word	0x08001b63
 8001658:	08001b63 	.word	0x08001b63
 800165c:	08001b63 	.word	0x08001b63
 8001660:	08001b63 	.word	0x08001b63
 8001664:	08001b63 	.word	0x08001b63
 8001668:	08001b63 	.word	0x08001b63
 800166c:	08001b63 	.word	0x08001b63
 8001670:	08001b27 	.word	0x08001b27
 8001674:	08001b63 	.word	0x08001b63
 8001678:	08001b63 	.word	0x08001b63
 800167c:	08001b63 	.word	0x08001b63
 8001680:	08001b63 	.word	0x08001b63
 8001684:	08001b63 	.word	0x08001b63
 8001688:	08001b63 	.word	0x08001b63
 800168c:	08001b5d 	.word	0x08001b5d
 8001690:	08001b63 	.word	0x08001b63
 8001694:	08001b63 	.word	0x08001b63
 8001698:	08001b63 	.word	0x08001b63
 800169c:	08001b63 	.word	0x08001b63
 80016a0:	08001b63 	.word	0x08001b63
 80016a4:	08001b63 	.word	0x08001b63
 80016a8:	08001b63 	.word	0x08001b63
 80016ac:	08001b63 	.word	0x08001b63
 80016b0:	08001b2d 	.word	0x08001b2d
 80016b4:	08001b63 	.word	0x08001b63
 80016b8:	08001b63 	.word	0x08001b63
 80016bc:	08001b63 	.word	0x08001b63
 80016c0:	08001b63 	.word	0x08001b63
 80016c4:	08001b63 	.word	0x08001b63
 80016c8:	08001b63 	.word	0x08001b63
 80016cc:	08001b63 	.word	0x08001b63
 80016d0:	08001b37 	.word	0x08001b37
 80016d4:	3b71      	subs	r3, #113	; 0x71
 80016d6:	2b12      	cmp	r3, #18
 80016d8:	f200 8243 	bhi.w	8001b62 <checkCommand+0x552>
 80016dc:	a201      	add	r2, pc, #4	; (adr r2, 80016e4 <checkCommand+0xd4>)
 80016de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e2:	bf00      	nop
 80016e4:	08001983 	.word	0x08001983
 80016e8:	08001a2f 	.word	0x08001a2f
 80016ec:	08001aab 	.word	0x08001aab
 80016f0:	08001b63 	.word	0x08001b63
 80016f4:	08001b63 	.word	0x08001b63
 80016f8:	08001b63 	.word	0x08001b63
 80016fc:	08001b63 	.word	0x08001b63
 8001700:	08001b63 	.word	0x08001b63
 8001704:	08001b63 	.word	0x08001b63
 8001708:	08001b63 	.word	0x08001b63
 800170c:	08001b63 	.word	0x08001b63
 8001710:	08001b63 	.word	0x08001b63
 8001714:	08001b63 	.word	0x08001b63
 8001718:	08001b63 	.word	0x08001b63
 800171c:	08001b63 	.word	0x08001b63
 8001720:	08001b63 	.word	0x08001b63
 8001724:	08001823 	.word	0x08001823
 8001728:	0800188b 	.word	0x0800188b
 800172c:	08001907 	.word	0x08001907
 8001730:	3b01      	subs	r3, #1
 8001732:	2b03      	cmp	r3, #3
 8001734:	f200 8215 	bhi.w	8001b62 <checkCommand+0x552>
 8001738:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <checkCommand+0x130>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	0800175d 	.word	0x0800175d
 8001744:	0800176f 	.word	0x0800176f
 8001748:	080017c9 	.word	0x080017c9
 800174c:	08001b61 	.word	0x08001b61
 8001750:	2b83      	cmp	r3, #131	; 0x83
 8001752:	f300 8206 	bgt.w	8001b62 <checkCommand+0x552>
 8001756:	2b71      	cmp	r3, #113	; 0x71
 8001758:	dabc      	bge.n	80016d4 <checkCommand+0xc4>
}
 800175a:	e202      	b.n	8001b62 <checkCommand+0x552>
		tempTkkConfig.tkkModSelection = rxBuffer[2];
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3302      	adds	r3, #2
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b29a      	uxth	r2, r3
 8001764:	4b95      	ldr	r3, [pc, #596]	; (80019bc <checkCommand+0x3ac>)
 8001766:	801a      	strh	r2, [r3, #0]
		sendAckUart();
 8001768:	f7ff ff30 	bl	80015cc <sendAckUart>
		break;
 800176c:	e1f9      	b.n	8001b62 <checkCommand+0x552>
			tempTkkConfig.xMax = rxBuffer[2]<<8 | rxBuffer[3];
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3302      	adds	r3, #2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	b21a      	sxth	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3303      	adds	r3, #3
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b21b      	sxth	r3, r3
 8001780:	4313      	orrs	r3, r2
 8001782:	b21b      	sxth	r3, r3
 8001784:	b29a      	uxth	r2, r3
 8001786:	4b8d      	ldr	r3, [pc, #564]	; (80019bc <checkCommand+0x3ac>)
 8001788:	809a      	strh	r2, [r3, #4]
			tempTkkConfig.xMin = rxBuffer[4]<<8 | rxBuffer[5];
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3304      	adds	r3, #4
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b21a      	sxth	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3305      	adds	r3, #5
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b21b      	sxth	r3, r3
 800179c:	4313      	orrs	r3, r2
 800179e:	b21b      	sxth	r3, r3
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	4b86      	ldr	r3, [pc, #536]	; (80019bc <checkCommand+0x3ac>)
 80017a4:	805a      	strh	r2, [r3, #2]
			tempTkkConfig.xMid = rxBuffer[6]<<8 | rxBuffer[7];
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3306      	adds	r3, #6
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	021b      	lsls	r3, r3, #8
 80017ae:	b21a      	sxth	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3307      	adds	r3, #7
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b21b      	sxth	r3, r3
 80017bc:	b29a      	uxth	r2, r3
 80017be:	4b7f      	ldr	r3, [pc, #508]	; (80019bc <checkCommand+0x3ac>)
 80017c0:	80da      	strh	r2, [r3, #6]
			sendAckUart();
 80017c2:	f7ff ff03 	bl	80015cc <sendAckUart>
		break;
 80017c6:	e1cc      	b.n	8001b62 <checkCommand+0x552>
			tempTkkConfig.yMax = rxBuffer[2]<<8 | rxBuffer[3];
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3302      	adds	r3, #2
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3303      	adds	r3, #3
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b21b      	sxth	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b21b      	sxth	r3, r3
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b76      	ldr	r3, [pc, #472]	; (80019bc <checkCommand+0x3ac>)
 80017e2:	815a      	strh	r2, [r3, #10]
			tempTkkConfig.yMin = rxBuffer[4]<<8 | rxBuffer[5];
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3304      	adds	r3, #4
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3305      	adds	r3, #5
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	4313      	orrs	r3, r2
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b6f      	ldr	r3, [pc, #444]	; (80019bc <checkCommand+0x3ac>)
 80017fe:	811a      	strh	r2, [r3, #8]
			tempTkkConfig.yMid = rxBuffer[6]<<8 | rxBuffer[7];
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3306      	adds	r3, #6
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	b21a      	sxth	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3307      	adds	r3, #7
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	b21b      	sxth	r3, r3
 8001812:	4313      	orrs	r3, r2
 8001814:	b21b      	sxth	r3, r3
 8001816:	b29a      	uxth	r2, r3
 8001818:	4b68      	ldr	r3, [pc, #416]	; (80019bc <checkCommand+0x3ac>)
 800181a:	819a      	strh	r2, [r3, #12]
			sendAckUart();
 800181c:	f7ff fed6 	bl	80015cc <sendAckUart>
		break;
 8001820:	e19f      	b.n	8001b62 <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 8001822:	4b67      	ldr	r3, [pc, #412]	; (80019c0 <checkCommand+0x3b0>)
 8001824:	22a5      	movs	r2, #165	; 0xa5
 8001826:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_MODSEL_READ;
 8001828:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <checkCommand+0x3b0>)
 800182a:	2281      	movs	r2, #129	; 0x81
 800182c:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] = (*(uint32_t*)CONFIG_DATA_INTERFACE_OFFSET);;
 800182e:	4b65      	ldr	r3, [pc, #404]	; (80019c4 <checkCommand+0x3b4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b62      	ldr	r3, [pc, #392]	; (80019c0 <checkCommand+0x3b0>)
 8001836:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] = 0x00;
 8001838:	4b61      	ldr	r3, [pc, #388]	; (80019c0 <checkCommand+0x3b0>)
 800183a:	2200      	movs	r2, #0
 800183c:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = 0x00;
 800183e:	4b60      	ldr	r3, [pc, #384]	; (80019c0 <checkCommand+0x3b0>)
 8001840:	2200      	movs	r2, #0
 8001842:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = 0x00;
 8001844:	4b5e      	ldr	r3, [pc, #376]	; (80019c0 <checkCommand+0x3b0>)
 8001846:	2200      	movs	r2, #0
 8001848:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = 0x00;
 800184a:	4b5d      	ldr	r3, [pc, #372]	; (80019c0 <checkCommand+0x3b0>)
 800184c:	2200      	movs	r2, #0
 800184e:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = 0x00;
 8001850:	4b5b      	ldr	r3, [pc, #364]	; (80019c0 <checkCommand+0x3b0>)
 8001852:	2200      	movs	r2, #0
 8001854:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 8001856:	2301      	movs	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	e00b      	b.n	8001874 <checkCommand+0x264>
				rsSendFormat[8] += rsSendFormat[i];
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4a58      	ldr	r2, [pc, #352]	; (80019c0 <checkCommand+0x3b0>)
 8001860:	5cd2      	ldrb	r2, [r2, r3]
 8001862:	4b57      	ldr	r3, [pc, #348]	; (80019c0 <checkCommand+0x3b0>)
 8001864:	7a1b      	ldrb	r3, [r3, #8]
 8001866:	4413      	add	r3, r2
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4b55      	ldr	r3, [pc, #340]	; (80019c0 <checkCommand+0x3b0>)
 800186c:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3301      	adds	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b07      	cmp	r3, #7
 8001878:	d9f0      	bls.n	800185c <checkCommand+0x24c>
			HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 800187a:	f241 3388 	movw	r3, #5000	; 0x1388
 800187e:	2209      	movs	r2, #9
 8001880:	494f      	ldr	r1, [pc, #316]	; (80019c0 <checkCommand+0x3b0>)
 8001882:	4851      	ldr	r0, [pc, #324]	; (80019c8 <checkCommand+0x3b8>)
 8001884:	f004 fe4e 	bl	8006524 <HAL_UART_Transmit>
		break;
 8001888:	e16b      	b.n	8001b62 <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 800188a:	4b4d      	ldr	r3, [pc, #308]	; (80019c0 <checkCommand+0x3b0>)
 800188c:	22a5      	movs	r2, #165	; 0xa5
 800188e:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_XCALIB_READ;
 8001890:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <checkCommand+0x3b0>)
 8001892:	2282      	movs	r2, #130	; 0x82
 8001894:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] = (*(uint32_t*)(CONFIG_DATA_X_MAXPOINT_OFFSET + 1));
 8001896:	4b4d      	ldr	r3, [pc, #308]	; (80019cc <checkCommand+0x3bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b48      	ldr	r3, [pc, #288]	; (80019c0 <checkCommand+0x3b0>)
 800189e:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] = (*(uint32_t*)CONFIG_DATA_X_MAXPOINT_OFFSET);
 80018a0:	4b4b      	ldr	r3, [pc, #300]	; (80019d0 <checkCommand+0x3c0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4b46      	ldr	r3, [pc, #280]	; (80019c0 <checkCommand+0x3b0>)
 80018a8:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = (*(uint32_t*)(CONFIG_DATA_X_MINPOINT_OFFSET + 1));
 80018aa:	4b4a      	ldr	r3, [pc, #296]	; (80019d4 <checkCommand+0x3c4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <checkCommand+0x3b0>)
 80018b2:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = (*(uint32_t*)CONFIG_DATA_X_MINPOINT_OFFSET);
 80018b4:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <checkCommand+0x3c8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <checkCommand+0x3b0>)
 80018bc:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = (*(uint32_t*)(CONFIG_DATA_X_MIDDLEPOINT_OFFSET + 1));
 80018be:	4b47      	ldr	r3, [pc, #284]	; (80019dc <checkCommand+0x3cc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <checkCommand+0x3b0>)
 80018c6:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = (*(uint32_t*)CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 80018c8:	4b45      	ldr	r3, [pc, #276]	; (80019e0 <checkCommand+0x3d0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b3c      	ldr	r3, [pc, #240]	; (80019c0 <checkCommand+0x3b0>)
 80018d0:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 80018d2:	2301      	movs	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	e00b      	b.n	80018f0 <checkCommand+0x2e0>
				rsSendFormat[8] += rsSendFormat[i];
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4a39      	ldr	r2, [pc, #228]	; (80019c0 <checkCommand+0x3b0>)
 80018dc:	5cd2      	ldrb	r2, [r2, r3]
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <checkCommand+0x3b0>)
 80018e0:	7a1b      	ldrb	r3, [r3, #8]
 80018e2:	4413      	add	r3, r2
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <checkCommand+0x3b0>)
 80018e8:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3301      	adds	r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b07      	cmp	r3, #7
 80018f4:	d9f0      	bls.n	80018d8 <checkCommand+0x2c8>
			HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 80018f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80018fa:	2209      	movs	r2, #9
 80018fc:	4930      	ldr	r1, [pc, #192]	; (80019c0 <checkCommand+0x3b0>)
 80018fe:	4832      	ldr	r0, [pc, #200]	; (80019c8 <checkCommand+0x3b8>)
 8001900:	f004 fe10 	bl	8006524 <HAL_UART_Transmit>
		break;
 8001904:	e12d      	b.n	8001b62 <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 8001906:	4b2e      	ldr	r3, [pc, #184]	; (80019c0 <checkCommand+0x3b0>)
 8001908:	22a5      	movs	r2, #165	; 0xa5
 800190a:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_YCALIB_READ;
 800190c:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <checkCommand+0x3b0>)
 800190e:	2283      	movs	r2, #131	; 0x83
 8001910:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] = (*(uint32_t*)(CONFIG_DATA_Y_MAXPOINT_OFFSET + 1));
 8001912:	4b34      	ldr	r3, [pc, #208]	; (80019e4 <checkCommand+0x3d4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <checkCommand+0x3b0>)
 800191a:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] = (*(uint32_t*)CONFIG_DATA_Y_MAXPOINT_OFFSET);
 800191c:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <checkCommand+0x3d8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <checkCommand+0x3b0>)
 8001924:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = (*(uint32_t*)(CONFIG_DATA_Y_MINPOINT_OFFSET + 1));
 8001926:	4b31      	ldr	r3, [pc, #196]	; (80019ec <checkCommand+0x3dc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <checkCommand+0x3b0>)
 800192e:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = (*(uint32_t*)CONFIG_DATA_Y_MINPOINT_OFFSET);
 8001930:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <checkCommand+0x3e0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <checkCommand+0x3b0>)
 8001938:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = (*(uint32_t*)(CONFIG_DATA_Y_MIDDLEPOINT_OFFSET + 1));
 800193a:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <checkCommand+0x3e4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <checkCommand+0x3b0>)
 8001942:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = (*(uint32_t*)CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 8001944:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <checkCommand+0x3e8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <checkCommand+0x3b0>)
 800194c:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 800194e:	2301      	movs	r3, #1
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	e00b      	b.n	800196c <checkCommand+0x35c>
				rsSendFormat[8] += rsSendFormat[i];
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4a1a      	ldr	r2, [pc, #104]	; (80019c0 <checkCommand+0x3b0>)
 8001958:	5cd2      	ldrb	r2, [r2, r3]
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <checkCommand+0x3b0>)
 800195c:	7a1b      	ldrb	r3, [r3, #8]
 800195e:	4413      	add	r3, r2
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <checkCommand+0x3b0>)
 8001964:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3301      	adds	r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b07      	cmp	r3, #7
 8001970:	d9f0      	bls.n	8001954 <checkCommand+0x344>
			HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001972:	f241 3388 	movw	r3, #5000	; 0x1388
 8001976:	2209      	movs	r2, #9
 8001978:	4911      	ldr	r1, [pc, #68]	; (80019c0 <checkCommand+0x3b0>)
 800197a:	4813      	ldr	r0, [pc, #76]	; (80019c8 <checkCommand+0x3b8>)
 800197c:	f004 fdd2 	bl	8006524 <HAL_UART_Transmit>
		break;
 8001980:	e0ef      	b.n	8001b62 <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <checkCommand+0x3b0>)
 8001984:	22a5      	movs	r2, #165	; 0xa5
 8001986:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_DEFAULT_MODSEL_READ;
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <checkCommand+0x3b0>)
 800198a:	2271      	movs	r2, #113	; 0x71
 800198c:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] = (*(uint32_t*)DEFAULT_CONFIG_DATA_INTERFACE_OFFSET);;
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <checkCommand+0x3ec>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	b2da      	uxtb	r2, r3
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <checkCommand+0x3b0>)
 8001996:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] = 0x00;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <checkCommand+0x3b0>)
 800199a:	2200      	movs	r2, #0
 800199c:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = 0x00;
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <checkCommand+0x3b0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = 0x00;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <checkCommand+0x3b0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = 0x00;
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <checkCommand+0x3b0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = 0x00;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <checkCommand+0x3b0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 80019b6:	2301      	movs	r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	e02d      	b.n	8001a18 <checkCommand+0x408>
 80019bc:	20000398 	.word	0x20000398
 80019c0:	20000374 	.word	0x20000374
 80019c4:	0800e002 	.word	0x0800e002
 80019c8:	200005a8 	.word	0x200005a8
 80019cc:	0800e009 	.word	0x0800e009
 80019d0:	0800e008 	.word	0x0800e008
 80019d4:	0800e007 	.word	0x0800e007
 80019d8:	0800e006 	.word	0x0800e006
 80019dc:	0800e005 	.word	0x0800e005
 80019e0:	0800e004 	.word	0x0800e004
 80019e4:	0800e00f 	.word	0x0800e00f
 80019e8:	0800e00e 	.word	0x0800e00e
 80019ec:	0800e00d 	.word	0x0800e00d
 80019f0:	0800e00c 	.word	0x0800e00c
 80019f4:	0800e00b 	.word	0x0800e00b
 80019f8:	0800e00a 	.word	0x0800e00a
 80019fc:	0800f000 	.word	0x0800f000
				rsSendFormat[8] += rsSendFormat[i];
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a5a      	ldr	r2, [pc, #360]	; (8001b6c <checkCommand+0x55c>)
 8001a04:	5cd2      	ldrb	r2, [r2, r3]
 8001a06:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <checkCommand+0x55c>)
 8001a08:	7a1b      	ldrb	r3, [r3, #8]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b57      	ldr	r3, [pc, #348]	; (8001b6c <checkCommand+0x55c>)
 8001a10:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3301      	adds	r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b07      	cmp	r3, #7
 8001a1c:	d9f0      	bls.n	8001a00 <checkCommand+0x3f0>
			HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001a1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a22:	2209      	movs	r2, #9
 8001a24:	4951      	ldr	r1, [pc, #324]	; (8001b6c <checkCommand+0x55c>)
 8001a26:	4852      	ldr	r0, [pc, #328]	; (8001b70 <checkCommand+0x560>)
 8001a28:	f004 fd7c 	bl	8006524 <HAL_UART_Transmit>
		break;
 8001a2c:	e099      	b.n	8001b62 <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 8001a2e:	4b4f      	ldr	r3, [pc, #316]	; (8001b6c <checkCommand+0x55c>)
 8001a30:	22a5      	movs	r2, #165	; 0xa5
 8001a32:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_DEFAULT_XCALIB_READ;
 8001a34:	4b4d      	ldr	r3, [pc, #308]	; (8001b6c <checkCommand+0x55c>)
 8001a36:	2272      	movs	r2, #114	; 0x72
 8001a38:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET + 1)); //MSB
 8001a3a:	4b4e      	ldr	r3, [pc, #312]	; (8001b74 <checkCommand+0x564>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b4a      	ldr	r3, [pc, #296]	; (8001b6c <checkCommand+0x55c>)
 8001a42:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET);		 //LSB
 8001a44:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <checkCommand+0x568>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4b48      	ldr	r3, [pc, #288]	; (8001b6c <checkCommand+0x55c>)
 8001a4c:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET + 1));
 8001a4e:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <checkCommand+0x56c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	4b45      	ldr	r3, [pc, #276]	; (8001b6c <checkCommand+0x55c>)
 8001a56:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET);
 8001a58:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <checkCommand+0x570>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <checkCommand+0x55c>)
 8001a60:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET + 1));
 8001a62:	4b48      	ldr	r3, [pc, #288]	; (8001b84 <checkCommand+0x574>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	4b40      	ldr	r3, [pc, #256]	; (8001b6c <checkCommand+0x55c>)
 8001a6a:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 8001a6c:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <checkCommand+0x578>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4b3e      	ldr	r3, [pc, #248]	; (8001b6c <checkCommand+0x55c>)
 8001a74:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 8001a76:	2301      	movs	r3, #1
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	e00b      	b.n	8001a94 <checkCommand+0x484>
				rsSendFormat[8] += rsSendFormat[i];
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4a3b      	ldr	r2, [pc, #236]	; (8001b6c <checkCommand+0x55c>)
 8001a80:	5cd2      	ldrb	r2, [r2, r3]
 8001a82:	4b3a      	ldr	r3, [pc, #232]	; (8001b6c <checkCommand+0x55c>)
 8001a84:	7a1b      	ldrb	r3, [r3, #8]
 8001a86:	4413      	add	r3, r2
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <checkCommand+0x55c>)
 8001a8c:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	3301      	adds	r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b07      	cmp	r3, #7
 8001a98:	d9f0      	bls.n	8001a7c <checkCommand+0x46c>
			HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001a9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a9e:	2209      	movs	r2, #9
 8001aa0:	4932      	ldr	r1, [pc, #200]	; (8001b6c <checkCommand+0x55c>)
 8001aa2:	4833      	ldr	r0, [pc, #204]	; (8001b70 <checkCommand+0x560>)
 8001aa4:	f004 fd3e 	bl	8006524 <HAL_UART_Transmit>
		break;
 8001aa8:	e05b      	b.n	8001b62 <checkCommand+0x552>
			rsSendFormat[0] = COMMAND_HEADER;
 8001aaa:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <checkCommand+0x55c>)
 8001aac:	22a5      	movs	r2, #165	; 0xa5
 8001aae:	701a      	strb	r2, [r3, #0]
			rsSendFormat[1] = COMMAND_DEFAULT_YCALIB_READ;
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <checkCommand+0x55c>)
 8001ab2:	2273      	movs	r2, #115	; 0x73
 8001ab4:	705a      	strb	r2, [r3, #1]
			rsSendFormat[2] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET + 1));
 8001ab6:	4b35      	ldr	r3, [pc, #212]	; (8001b8c <checkCommand+0x57c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <checkCommand+0x55c>)
 8001abe:	709a      	strb	r2, [r3, #2]
			rsSendFormat[3] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET);
 8001ac0:	4b33      	ldr	r3, [pc, #204]	; (8001b90 <checkCommand+0x580>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <checkCommand+0x55c>)
 8001ac8:	70da      	strb	r2, [r3, #3]
			rsSendFormat[4] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET + 1));
 8001aca:	4b32      	ldr	r3, [pc, #200]	; (8001b94 <checkCommand+0x584>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <checkCommand+0x55c>)
 8001ad2:	711a      	strb	r2, [r3, #4]
			rsSendFormat[5] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET);
 8001ad4:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <checkCommand+0x588>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <checkCommand+0x55c>)
 8001adc:	715a      	strb	r2, [r3, #5]
			rsSendFormat[6] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET + 1));
 8001ade:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <checkCommand+0x58c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <checkCommand+0x55c>)
 8001ae6:	719a      	strb	r2, [r3, #6]
			rsSendFormat[7] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <checkCommand+0x590>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <checkCommand+0x55c>)
 8001af0:	71da      	strb	r2, [r3, #7]
			for(i = 1; i < 8; i++)
 8001af2:	2301      	movs	r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	e00b      	b.n	8001b10 <checkCommand+0x500>
				rsSendFormat[8] += rsSendFormat[i];
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <checkCommand+0x55c>)
 8001afc:	5cd2      	ldrb	r2, [r2, r3]
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <checkCommand+0x55c>)
 8001b00:	7a1b      	ldrb	r3, [r3, #8]
 8001b02:	4413      	add	r3, r2
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <checkCommand+0x55c>)
 8001b08:	721a      	strb	r2, [r3, #8]
			for(i = 1; i < 8; i++)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b07      	cmp	r3, #7
 8001b14:	d9f0      	bls.n	8001af8 <checkCommand+0x4e8>
			HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001b16:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b1a:	2209      	movs	r2, #9
 8001b1c:	4913      	ldr	r1, [pc, #76]	; (8001b6c <checkCommand+0x55c>)
 8001b1e:	4814      	ldr	r0, [pc, #80]	; (8001b70 <checkCommand+0x560>)
 8001b20:	f004 fd00 	bl	8006524 <HAL_UART_Transmit>
		break;
 8001b24:	e01d      	b.n	8001b62 <checkCommand+0x552>
			bootloaderCommand();
 8001b26:	f7fe fedd 	bl	80008e4 <bootloaderCommand>
		break;
 8001b2a:	e01a      	b.n	8001b62 <checkCommand+0x552>
			sendAckUart();
 8001b2c:	f7ff fd4e 	bl	80015cc <sendAckUart>
			HAL_NVIC_SystemReset();
 8001b30:	f001 f9d7 	bl	8002ee2 <HAL_NVIC_SystemReset>
		break;
 8001b34:	e015      	b.n	8001b62 <checkCommand+0x552>
			remoteMode = 0;
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <checkCommand+0x594>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
			sendAckUart();
 8001b3c:	f7ff fd46 	bl	80015cc <sendAckUart>
		break;
 8001b40:	e00f      	b.n	8001b62 <checkCommand+0x552>
			refreshFlashUserConf(&tempTkkConfig);
 8001b42:	4819      	ldr	r0, [pc, #100]	; (8001ba8 <checkCommand+0x598>)
 8001b44:	f7ff fbec 	bl	8001320 <refreshFlashUserConf>
			calculateJostickBorders(&userTkkConfig, &tkkJoystickBorder);
 8001b48:	4918      	ldr	r1, [pc, #96]	; (8001bac <checkCommand+0x59c>)
 8001b4a:	4819      	ldr	r0, [pc, #100]	; (8001bb0 <checkCommand+0x5a0>)
 8001b4c:	f7ff f804 	bl	8000b58 <calculateJostickBorders>
			remoteMode = 1;
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <checkCommand+0x594>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
			sendAckUart();
 8001b56:	f7ff fd39 	bl	80015cc <sendAckUart>
		break;
 8001b5a:	e002      	b.n	8001b62 <checkCommand+0x552>
		break;
 8001b5c:	bf00      	nop
 8001b5e:	e000      	b.n	8001b62 <checkCommand+0x552>
		break;
 8001b60:	bf00      	nop
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000374 	.word	0x20000374
 8001b70:	200005a8 	.word	0x200005a8
 8001b74:	0800f007 	.word	0x0800f007
 8001b78:	0800f006 	.word	0x0800f006
 8001b7c:	0800f005 	.word	0x0800f005
 8001b80:	0800f004 	.word	0x0800f004
 8001b84:	0800f003 	.word	0x0800f003
 8001b88:	0800f002 	.word	0x0800f002
 8001b8c:	0800f00d 	.word	0x0800f00d
 8001b90:	0800f00c 	.word	0x0800f00c
 8001b94:	0800f00b 	.word	0x0800f00b
 8001b98:	0800f00a 	.word	0x0800f00a
 8001b9c:	0800f009 	.word	0x0800f009
 8001ba0:	0800f008 	.word	0x0800f008
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20000398 	.word	0x20000398
 8001bac:	20000438 	.word	0x20000438
 8001bb0:	200003e8 	.word	0x200003e8

08001bb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

	unsigned int i;
	tempRxDataIn = rxDataIn;
 8001bbc:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <HAL_UART_RxCpltCallback+0xd4>)
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <HAL_UART_RxCpltCallback+0xd8>)
 8001bc2:	701a      	strb	r2, [r3, #0]


	if(rxBufferDataCounter==0 && rxDataIn==0xA5)
 8001bc4:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <HAL_UART_RxCpltCallback+0xdc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10d      	bne.n	8001be8 <HAL_UART_RxCpltCallback+0x34>
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <HAL_UART_RxCpltCallback+0xd4>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2ba5      	cmp	r3, #165	; 0xa5
 8001bd2:	d109      	bne.n	8001be8 <HAL_UART_RxCpltCallback+0x34>
	{
		rxBuffer[0] = rxDataIn;
 8001bd4:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <HAL_UART_RxCpltCallback+0xd4>)
 8001bd6:	781a      	ldrb	r2, [r3, #0]
 8001bd8:	4b2e      	ldr	r3, [pc, #184]	; (8001c94 <HAL_UART_RxCpltCallback+0xe0>)
 8001bda:	701a      	strb	r2, [r3, #0]
		rxBufferDataCounter++;
 8001bdc:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <HAL_UART_RxCpltCallback+0xdc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	4a2b      	ldr	r2, [pc, #172]	; (8001c90 <HAL_UART_RxCpltCallback+0xdc>)
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e04b      	b.n	8001c80 <HAL_UART_RxCpltCallback+0xcc>
	}
	else if(rxBufferDataCounter>0 && rxBufferDataCounter<8)
 8001be8:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <HAL_UART_RxCpltCallback+0xdc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00f      	beq.n	8001c10 <HAL_UART_RxCpltCallback+0x5c>
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <HAL_UART_RxCpltCallback+0xdc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b07      	cmp	r3, #7
 8001bf6:	d80b      	bhi.n	8001c10 <HAL_UART_RxCpltCallback+0x5c>
	{
		rxBuffer[rxBufferDataCounter] = rxDataIn;
 8001bf8:	4b25      	ldr	r3, [pc, #148]	; (8001c90 <HAL_UART_RxCpltCallback+0xdc>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a22      	ldr	r2, [pc, #136]	; (8001c88 <HAL_UART_RxCpltCallback+0xd4>)
 8001bfe:	7811      	ldrb	r1, [r2, #0]
 8001c00:	4a24      	ldr	r2, [pc, #144]	; (8001c94 <HAL_UART_RxCpltCallback+0xe0>)
 8001c02:	54d1      	strb	r1, [r2, r3]
		rxBufferDataCounter++;
 8001c04:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <HAL_UART_RxCpltCallback+0xdc>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <HAL_UART_RxCpltCallback+0xdc>)
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e037      	b.n	8001c80 <HAL_UART_RxCpltCallback+0xcc>
	}
	else if(rxBufferDataCounter==8)
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <HAL_UART_RxCpltCallback+0xdc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d12f      	bne.n	8001c78 <HAL_UART_RxCpltCallback+0xc4>
	{
		/* checksum control */
		rxDataCheksum = 0;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <HAL_UART_RxCpltCallback+0xe4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
		rxBuffer[rxBufferDataCounter] = rxDataIn;
 8001c1e:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <HAL_UART_RxCpltCallback+0xdc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a19      	ldr	r2, [pc, #100]	; (8001c88 <HAL_UART_RxCpltCallback+0xd4>)
 8001c24:	7811      	ldrb	r1, [r2, #0]
 8001c26:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <HAL_UART_RxCpltCallback+0xe0>)
 8001c28:	54d1      	strb	r1, [r2, r3]

		for(i=1;i<9;i++)
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	e00c      	b.n	8001c4a <HAL_UART_RxCpltCallback+0x96>
		{
			rxDataCheksum += rxBuffer[i];
 8001c30:	4a18      	ldr	r2, [pc, #96]	; (8001c94 <HAL_UART_RxCpltCallback+0xe0>)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4413      	add	r3, r2
 8001c36:	781a      	ldrb	r2, [r3, #0]
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_UART_RxCpltCallback+0xe4>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_UART_RxCpltCallback+0xe4>)
 8001c42:	701a      	strb	r2, [r3, #0]
		for(i=1;i<9;i++)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3301      	adds	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d9ef      	bls.n	8001c30 <HAL_UART_RxCpltCallback+0x7c>
		}
		if(rxDataCheksum==0)
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_UART_RxCpltCallback+0xe4>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d106      	bne.n	8001c66 <HAL_UART_RxCpltCallback+0xb2>
		{
			/* checkSum OK, process the command */
			checkCommand(rxBuffer);
 8001c58:	480e      	ldr	r0, [pc, #56]	; (8001c94 <HAL_UART_RxCpltCallback+0xe0>)
 8001c5a:	f7ff fcd9 	bl	8001610 <checkCommand>
			rxBufferDataCounter = 0; /* test breakpoint icin */
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_UART_RxCpltCallback+0xdc>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	e004      	b.n	8001c70 <HAL_UART_RxCpltCallback+0xbc>
		}
		else
		{
			/* error, do nothing*/
			errorCounter++;
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_UART_RxCpltCallback+0xe8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <HAL_UART_RxCpltCallback+0xe8>)
 8001c6e:	6013      	str	r3, [r2, #0]
		}
		rxBufferDataCounter = 0;
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <HAL_UART_RxCpltCallback+0xdc>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
	else
	{
		rxBufferDataCounter = 0;
	}

}
 8001c76:	e003      	b.n	8001c80 <HAL_UART_RxCpltCallback+0xcc>
		rxBufferDataCounter = 0;
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_UART_RxCpltCallback+0xdc>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
}
 8001c7e:	e7ff      	b.n	8001c80 <HAL_UART_RxCpltCallback+0xcc>
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	2000037f 	.word	0x2000037f
 8001c8c:	2000037e 	.word	0x2000037e
 8001c90:	20000380 	.word	0x20000380
 8001c94:	20000384 	.word	0x20000384
 8001c98:	2000038d 	.word	0x2000038d
 8001c9c:	20000390 	.word	0x20000390

08001ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca4:	b672      	cpsid	i
}
 8001ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <Error_Handler+0x8>
	...

08001cac <MX_SDADC1_Init>:
SDADC_HandleTypeDef hsdadc1;
DMA_HandleTypeDef hdma_sdadc1;

/* SDADC1 init function */
void MX_SDADC1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
  /* USER CODE END SDADC1_Init 1 */

  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <MX_SDADC1_Init+0x100>)
 8001cc0:	4a3b      	ldr	r2, [pc, #236]	; (8001db0 <MX_SDADC1_Init+0x104>)
 8001cc2:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001cc4:	4b39      	ldr	r3, [pc, #228]	; (8001dac <MX_SDADC1_Init+0x100>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 8001cca:	4b38      	ldr	r3, [pc, #224]	; (8001dac <MX_SDADC1_Init+0x100>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8001cd0:	4b36      	ldr	r3, [pc, #216]	; (8001dac <MX_SDADC1_Init+0x100>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_EXT;
 8001cd6:	4b35      	ldr	r3, [pc, #212]	; (8001dac <MX_SDADC1_Init+0x100>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  hsdadc1.InjectedTrigger = SDADC_SOFTWARE_TRIGGER;
 8001cdc:	4b33      	ldr	r3, [pc, #204]	; (8001dac <MX_SDADC1_Init+0x100>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8001ce2:	4832      	ldr	r0, [pc, #200]	; (8001dac <MX_SDADC1_Init+0x100>)
 8001ce4:	f003 fb3e 	bl	8005364 <HAL_SDADC_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_SDADC1_Init+0x46>
  {
    Error_Handler();
 8001cee:	f7ff ffd7 	bl	8001ca0 <Error_Handler>
  }

  /** Configure the Injected Mode
  */
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc1, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	482d      	ldr	r0, [pc, #180]	; (8001dac <MX_SDADC1_Init+0x100>)
 8001cf6:	f003 fd01 	bl	80056fc <HAL_SDADC_SelectInjectedDelay>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_SDADC1_Init+0x58>
  {
    Error_Handler();
 8001d00:	f7ff ffce 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 8001d04:	2100      	movs	r1, #0
 8001d06:	4829      	ldr	r0, [pc, #164]	; (8001dac <MX_SDADC1_Init+0x100>)
 8001d08:	f003 fcc8 	bl	800569c <HAL_SDADC_SelectInjectedTrigger>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_SDADC1_Init+0x6a>
  {
    Error_Handler();
 8001d12:	f7ff ffc5 	bl	8001ca0 <Error_Handler>
  }
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc1, SDADC_CHANNEL_7|SDADC_CHANNEL_8
 8001d16:	2200      	movs	r2, #0
 8001d18:	4926      	ldr	r1, [pc, #152]	; (8001db4 <MX_SDADC1_Init+0x108>)
 8001d1a:	4824      	ldr	r0, [pc, #144]	; (8001dac <MX_SDADC1_Init+0x100>)
 8001d1c:	f003 fc82 	bl	8005624 <HAL_SDADC_InjectedConfigChannel>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_SDADC1_Init+0x7e>
                              |SDADC_CHANNEL_4|SDADC_CHANNEL_5, SDADC_CONTINUOUS_CONV_OFF) != HAL_OK)
  {
    Error_Handler();
 8001d26:	f7ff ffbb 	bl	8001ca0 <Error_Handler>
  }

  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_OFFSET;
 8001d2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d2e:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2100      	movs	r1, #0
 8001d42:	481a      	ldr	r0, [pc, #104]	; (8001dac <MX_SDADC1_Init+0x100>)
 8001d44:	f003 fb9e 	bl	8005484 <HAL_SDADC_PrepareChannelConfig>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_SDADC1_Init+0xa6>
  {
    Error_Handler();
 8001d4e:	f7ff ffa7 	bl	8001ca0 <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_7, SDADC_CONF_INDEX_0) != HAL_OK)
 8001d52:	2200      	movs	r2, #0
 8001d54:	4918      	ldr	r1, [pc, #96]	; (8001db8 <MX_SDADC1_Init+0x10c>)
 8001d56:	4815      	ldr	r0, [pc, #84]	; (8001dac <MX_SDADC1_Init+0x100>)
 8001d58:	f003 fbd0 	bl	80054fc <HAL_SDADC_AssociateChannelConfig>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_SDADC1_Init+0xba>
  {
    Error_Handler();
 8001d62:	f7ff ff9d 	bl	8001ca0 <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_8, SDADC_CONF_INDEX_0) != HAL_OK)
 8001d66:	2200      	movs	r2, #0
 8001d68:	4914      	ldr	r1, [pc, #80]	; (8001dbc <MX_SDADC1_Init+0x110>)
 8001d6a:	4810      	ldr	r0, [pc, #64]	; (8001dac <MX_SDADC1_Init+0x100>)
 8001d6c:	f003 fbc6 	bl	80054fc <HAL_SDADC_AssociateChannelConfig>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_SDADC1_Init+0xce>
  {
    Error_Handler();
 8001d76:	f7ff ff93 	bl	8001ca0 <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONF_INDEX_0) != HAL_OK)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4910      	ldr	r1, [pc, #64]	; (8001dc0 <MX_SDADC1_Init+0x114>)
 8001d7e:	480b      	ldr	r0, [pc, #44]	; (8001dac <MX_SDADC1_Init+0x100>)
 8001d80:	f003 fbbc 	bl	80054fc <HAL_SDADC_AssociateChannelConfig>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_SDADC1_Init+0xe2>
  {
    Error_Handler();
 8001d8a:	f7ff ff89 	bl	8001ca0 <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONF_INDEX_0) != HAL_OK)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <MX_SDADC1_Init+0x118>)
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <MX_SDADC1_Init+0x100>)
 8001d94:	f003 fbb2 	bl	80054fc <HAL_SDADC_AssociateChannelConfig>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_SDADC1_Init+0xf6>
  {
    Error_Handler();
 8001d9e:	f7ff ff7f 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000488 	.word	0x20000488
 8001db0:	40016000 	.word	0x40016000
 8001db4:	000f01b0 	.word	0x000f01b0
 8001db8:	00070080 	.word	0x00070080
 8001dbc:	00080100 	.word	0x00080100
 8001dc0:	00040010 	.word	0x00040010
 8001dc4:	00050020 	.word	0x00050020

08001dc8 <HAL_SDADC_MspInit>:

void HAL_SDADC_MspInit(SDADC_HandleTypeDef* sdadcHandle)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(sdadcHandle->Instance==SDADC1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a36      	ldr	r2, [pc, #216]	; (8001ec0 <HAL_SDADC_MspInit+0xf8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d165      	bne.n	8001eb6 <HAL_SDADC_MspInit+0xee>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* SDADC1 clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8001dea:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <HAL_SDADC_MspInit+0xfc>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	4a35      	ldr	r2, [pc, #212]	; (8001ec4 <HAL_SDADC_MspInit+0xfc>)
 8001df0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df4:	6193      	str	r3, [r2, #24]
 8001df6:	4b33      	ldr	r3, [pc, #204]	; (8001ec4 <HAL_SDADC_MspInit+0xfc>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e02:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <HAL_SDADC_MspInit+0xfc>)
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	4a2f      	ldr	r2, [pc, #188]	; (8001ec4 <HAL_SDADC_MspInit+0xfc>)
 8001e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0c:	6153      	str	r3, [r2, #20]
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <HAL_SDADC_MspInit+0xfc>)
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <HAL_SDADC_MspInit+0xfc>)
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	4a29      	ldr	r2, [pc, #164]	; (8001ec4 <HAL_SDADC_MspInit+0xfc>)
 8001e20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e24:	6153      	str	r3, [r2, #20]
 8001e26:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_SDADC_MspInit+0xfc>)
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> SDADC1_AIN5P
    PB2     ------> SDADC1_AIN4P
    PE8     ------> SDADC1_AIN8P
    PE9     ------> SDADC1_AIN7P
    */
    GPIO_InitStruct.Pin = AN_ADC4_Pin|AN_ADC3_Pin;
 8001e32:	2306      	movs	r3, #6
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e36:	2303      	movs	r3, #3
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	4820      	ldr	r0, [pc, #128]	; (8001ec8 <HAL_SDADC_MspInit+0x100>)
 8001e46:	f001 fc63 	bl	8003710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AN_ADC2_Pin|AN_ADC1_Pin;
 8001e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e50:	2303      	movs	r3, #3
 8001e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	481b      	ldr	r0, [pc, #108]	; (8001ecc <HAL_SDADC_MspInit+0x104>)
 8001e60:	f001 fc56 	bl	8003710 <HAL_GPIO_Init>

    /* SDADC1 DMA Init */
    /* SDADC1 Init */
    hdma_sdadc1.Instance = DMA2_Channel3;
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <HAL_SDADC_MspInit+0x108>)
 8001e66:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <HAL_SDADC_MspInit+0x10c>)
 8001e68:	601a      	str	r2, [r3, #0]
    hdma_sdadc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_SDADC_MspInit+0x108>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
    hdma_sdadc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_SDADC_MspInit+0x108>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
    hdma_sdadc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_SDADC_MspInit+0x108>)
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	60da      	str	r2, [r3, #12]
    hdma_sdadc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_SDADC_MspInit+0x108>)
 8001e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e82:	611a      	str	r2, [r3, #16]
    hdma_sdadc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_SDADC_MspInit+0x108>)
 8001e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e8a:	615a      	str	r2, [r3, #20]
    hdma_sdadc1.Init.Mode = DMA_CIRCULAR;
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_SDADC_MspInit+0x108>)
 8001e8e:	2220      	movs	r2, #32
 8001e90:	619a      	str	r2, [r3, #24]
    hdma_sdadc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001e92:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <HAL_SDADC_MspInit+0x108>)
 8001e94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e98:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_sdadc1) != HAL_OK)
 8001e9a:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <HAL_SDADC_MspInit+0x108>)
 8001e9c:	f001 f831 	bl	8002f02 <HAL_DMA_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_SDADC_MspInit+0xe2>
    {
      Error_Handler();
 8001ea6:	f7ff fefb 	bl	8001ca0 <Error_Handler>
    }

    __HAL_LINKDMA(sdadcHandle,hdma,hdma_sdadc1);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <HAL_SDADC_MspInit+0x108>)
 8001eae:	615a      	str	r2, [r3, #20]
 8001eb0:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <HAL_SDADC_MspInit+0x108>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SDADC1_MspInit 1 */

  /* USER CODE END SDADC1_MspInit 1 */
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40016000 	.word	0x40016000
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	48000400 	.word	0x48000400
 8001ecc:	48001000 	.word	0x48001000
 8001ed0:	200004cc 	.word	0x200004cc
 8001ed4:	40020430 	.word	0x40020430

08001ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_MspInit+0x44>)
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <HAL_MspInit+0x44>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6193      	str	r3, [r2, #24]
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_MspInit+0x44>)
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_MspInit+0x44>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <HAL_MspInit+0x44>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f00:	61d3      	str	r3, [r2, #28]
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_MspInit+0x44>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f24:	e7fe      	b.n	8001f24 <NMI_Handler+0x4>

08001f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <HardFault_Handler+0x4>

08001f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <MemManage_Handler+0x4>

08001f32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <BusFault_Handler+0x4>

08001f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <UsageFault_Handler+0x4>

08001f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f6c:	f000 fa5e 	bl	800242c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <DMA1_Channel1_IRQHandler+0x10>)
 8001f7a:	f001 f8e4 	bl	8003146 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	2000005c 	.word	0x2000005c

08001f88 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <DMA1_Channel5_IRQHandler+0x10>)
 8001f8e:	f001 f8da 	bl	8003146 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000630 	.word	0x20000630

08001f9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  sendUartFlag = true;
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <TIM2_IRQHandler+0x2c>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
		sendUartFrame(&huart1, rs422Frame, 10 , 5000, &sendUartFlag);
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <TIM2_IRQHandler+0x2c>)
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fb0:	220a      	movs	r2, #10
 8001fb2:	4906      	ldr	r1, [pc, #24]	; (8001fcc <TIM2_IRQHandler+0x30>)
 8001fb4:	4806      	ldr	r0, [pc, #24]	; (8001fd0 <TIM2_IRQHandler+0x34>)
 8001fb6:	f7ff f88b 	bl	80010d0 <sendUartFrame>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fba:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <TIM2_IRQHandler+0x38>)
 8001fbc:	f003 feb2 	bl	8005d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	2000037d 	.word	0x2000037d
 8001fcc:	20000368 	.word	0x20000368
 8001fd0:	200005a8 	.word	0x200005a8
 8001fd4:	20000510 	.word	0x20000510

08001fd8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	  //analog sample flag
		//SDADC_ScanConversion();
		sampleAnalogInputs = true;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <TIM3_IRQHandler+0x20>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]

		//digital read function
		readDigitalInputs(getDigitalInputs());
 8001fe2:	f7ff f86b 	bl	80010bc <getDigitalInputs>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff f840 	bl	800106e <readDigitalInputs>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fee:	4803      	ldr	r0, [pc, #12]	; (8001ffc <TIM3_IRQHandler+0x24>)
 8001ff0:	f003 fe98 	bl	8005d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	200000c8 	.word	0x200000c8
 8001ffc:	2000055c 	.word	0x2000055c

08002000 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <USART1_IRQHandler+0x10>)
 8002006:	f004 fb5b 	bl	80066c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200005a8 	.word	0x200005a8

08002014 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc1);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <DMA2_Channel3_IRQHandler+0x10>)
 800201a:	f001 f894 	bl	8003146 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200004cc 	.word	0x200004cc

08002028 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <SystemInit+0x20>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	4a05      	ldr	r2, [pc, #20]	; (8002048 <SystemInit+0x20>)
 8002034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002052:	f107 0308 	add.w	r3, r7, #8
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002060:	463b      	mov	r3, r7
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <MX_TIM2_Init+0x94>)
 800206a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800206e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <MX_TIM2_Init+0x94>)
 8002072:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002076:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <MX_TIM2_Init+0x94>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <MX_TIM2_Init+0x94>)
 8002080:	2204      	movs	r2, #4
 8002082:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <MX_TIM2_Init+0x94>)
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <MX_TIM2_Init+0x94>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002090:	4813      	ldr	r0, [pc, #76]	; (80020e0 <MX_TIM2_Init+0x94>)
 8002092:	f003 fd8f 	bl	8005bb4 <HAL_TIM_Base_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800209c:	f7ff fe00 	bl	8001ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	4619      	mov	r1, r3
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <MX_TIM2_Init+0x94>)
 80020ae:	f003 ff29 	bl	8005f04 <HAL_TIM_ConfigClockSource>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020b8:	f7ff fdf2 	bl	8001ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020bc:	2300      	movs	r3, #0
 80020be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020c4:	463b      	mov	r3, r7
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <MX_TIM2_Init+0x94>)
 80020ca:	f004 f955 	bl	8006378 <HAL_TIMEx_MasterConfigSynchronization>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020d4:	f7ff fde4 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020d8:	bf00      	nop
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000510 	.word	0x20000510

080020e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ea:	f107 0308 	add.w	r3, r7, #8
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f8:	463b      	mov	r3, r7
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <MX_TIM3_Init+0x94>)
 8002102:	4a1e      	ldr	r2, [pc, #120]	; (800217c <MX_TIM3_Init+0x98>)
 8002104:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4800;
 8002106:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <MX_TIM3_Init+0x94>)
 8002108:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800210c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <MX_TIM3_Init+0x94>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4;
 8002114:	4b18      	ldr	r3, [pc, #96]	; (8002178 <MX_TIM3_Init+0x94>)
 8002116:	2204      	movs	r2, #4
 8002118:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211a:	4b17      	ldr	r3, [pc, #92]	; (8002178 <MX_TIM3_Init+0x94>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002120:	4b15      	ldr	r3, [pc, #84]	; (8002178 <MX_TIM3_Init+0x94>)
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002126:	4814      	ldr	r0, [pc, #80]	; (8002178 <MX_TIM3_Init+0x94>)
 8002128:	f003 fd44 	bl	8005bb4 <HAL_TIM_Base_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002132:	f7ff fdb5 	bl	8001ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800213c:	f107 0308 	add.w	r3, r7, #8
 8002140:	4619      	mov	r1, r3
 8002142:	480d      	ldr	r0, [pc, #52]	; (8002178 <MX_TIM3_Init+0x94>)
 8002144:	f003 fede 	bl	8005f04 <HAL_TIM_ConfigClockSource>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800214e:	f7ff fda7 	bl	8001ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800215a:	463b      	mov	r3, r7
 800215c:	4619      	mov	r1, r3
 800215e:	4806      	ldr	r0, [pc, #24]	; (8002178 <MX_TIM3_Init+0x94>)
 8002160:	f004 f90a 	bl	8006378 <HAL_TIMEx_MasterConfigSynchronization>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800216a:	f7ff fd99 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	2000055c 	.word	0x2000055c
 800217c:	40000400 	.word	0x40000400

08002180 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002190:	d114      	bne.n	80021bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_TIM_Base_MspInit+0x78>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4a18      	ldr	r2, [pc, #96]	; (80021f8 <HAL_TIM_Base_MspInit+0x78>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	61d3      	str	r3, [r2, #28]
 800219e:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <HAL_TIM_Base_MspInit+0x78>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	201c      	movs	r0, #28
 80021b0:	f000 fe6d 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021b4:	201c      	movs	r0, #28
 80021b6:	f000 fe86 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80021ba:	e018      	b.n	80021ee <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0e      	ldr	r2, [pc, #56]	; (80021fc <HAL_TIM_Base_MspInit+0x7c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d113      	bne.n	80021ee <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021c6:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_TIM_Base_MspInit+0x78>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4a0b      	ldr	r2, [pc, #44]	; (80021f8 <HAL_TIM_Base_MspInit+0x78>)
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	61d3      	str	r3, [r2, #28]
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_TIM_Base_MspInit+0x78>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	201d      	movs	r0, #29
 80021e4:	f000 fe53 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021e8:	201d      	movs	r0, #29
 80021ea:	f000 fe6c 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40000400 	.word	0x40000400

08002200 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002204:	4b14      	ldr	r3, [pc, #80]	; (8002258 <MX_USART1_UART_Init+0x58>)
 8002206:	4a15      	ldr	r2, [pc, #84]	; (800225c <MX_USART1_UART_Init+0x5c>)
 8002208:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800220a:	4b13      	ldr	r3, [pc, #76]	; (8002258 <MX_USART1_UART_Init+0x58>)
 800220c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002210:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <MX_USART1_UART_Init+0x58>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002218:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <MX_USART1_UART_Init+0x58>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <MX_USART1_UART_Init+0x58>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <MX_USART1_UART_Init+0x58>)
 8002226:	220c      	movs	r2, #12
 8002228:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <MX_USART1_UART_Init+0x58>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MX_USART1_UART_Init+0x58>)
 8002232:	2200      	movs	r2, #0
 8002234:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <MX_USART1_UART_Init+0x58>)
 8002238:	2200      	movs	r2, #0
 800223a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <MX_USART1_UART_Init+0x58>)
 800223e:	2200      	movs	r2, #0
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <MX_USART1_UART_Init+0x58>)
 8002244:	f004 f920 	bl	8006488 <HAL_UART_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800224e:	f7ff fd27 	bl	8001ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200005a8 	.word	0x200005a8
 800225c:	40013800 	.word	0x40013800

08002260 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a2f      	ldr	r2, [pc, #188]	; (800233c <HAL_UART_MspInit+0xdc>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d158      	bne.n	8002334 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002282:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <HAL_UART_MspInit+0xe0>)
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	4a2e      	ldr	r2, [pc, #184]	; (8002340 <HAL_UART_MspInit+0xe0>)
 8002288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800228c:	6193      	str	r3, [r2, #24]
 800228e:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <HAL_UART_MspInit+0xe0>)
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	4b29      	ldr	r3, [pc, #164]	; (8002340 <HAL_UART_MspInit+0xe0>)
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	4a28      	ldr	r2, [pc, #160]	; (8002340 <HAL_UART_MspInit+0xe0>)
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	6153      	str	r3, [r2, #20]
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <HAL_UART_MspInit+0xe0>)
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022c0:	2303      	movs	r3, #3
 80022c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022c4:	2307      	movs	r3, #7
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	4619      	mov	r1, r3
 80022ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d2:	f001 fa1d 	bl	8003710 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80022d6:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_UART_MspInit+0xe4>)
 80022d8:	4a1b      	ldr	r2, [pc, #108]	; (8002348 <HAL_UART_MspInit+0xe8>)
 80022da:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_UART_MspInit+0xe4>)
 80022de:	2200      	movs	r2, #0
 80022e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_UART_MspInit+0xe4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022e8:	4b16      	ldr	r3, [pc, #88]	; (8002344 <HAL_UART_MspInit+0xe4>)
 80022ea:	2280      	movs	r2, #128	; 0x80
 80022ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_UART_MspInit+0xe4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022f4:	4b13      	ldr	r3, [pc, #76]	; (8002344 <HAL_UART_MspInit+0xe4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_UART_MspInit+0xe4>)
 80022fc:	2220      	movs	r2, #32
 80022fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002300:	4b10      	ldr	r3, [pc, #64]	; (8002344 <HAL_UART_MspInit+0xe4>)
 8002302:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002306:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002308:	480e      	ldr	r0, [pc, #56]	; (8002344 <HAL_UART_MspInit+0xe4>)
 800230a:	f000 fdfa 	bl	8002f02 <HAL_DMA_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 8002314:	f7ff fcc4 	bl	8001ca0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_UART_MspInit+0xe4>)
 800231c:	675a      	str	r2, [r3, #116]	; 0x74
 800231e:	4a09      	ldr	r2, [pc, #36]	; (8002344 <HAL_UART_MspInit+0xe4>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	2025      	movs	r0, #37	; 0x25
 800232a:	f000 fdb0 	bl	8002e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800232e:	2025      	movs	r0, #37	; 0x25
 8002330:	f000 fdc9 	bl	8002ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002334:	bf00      	nop
 8002336:	3728      	adds	r7, #40	; 0x28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40013800 	.word	0x40013800
 8002340:	40021000 	.word	0x40021000
 8002344:	20000630 	.word	0x20000630
 8002348:	40020058 	.word	0x40020058

0800234c <Reset_Handler>:
 800234c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002384 <LoopForever+0x2>
 8002350:	f7ff fe6a 	bl	8002028 <SystemInit>
 8002354:	480c      	ldr	r0, [pc, #48]	; (8002388 <LoopForever+0x6>)
 8002356:	490d      	ldr	r1, [pc, #52]	; (800238c <LoopForever+0xa>)
 8002358:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <LoopForever+0xe>)
 800235a:	2300      	movs	r3, #0
 800235c:	e002      	b.n	8002364 <LoopCopyDataInit>

0800235e <CopyDataInit>:
 800235e:	58d4      	ldr	r4, [r2, r3]
 8002360:	50c4      	str	r4, [r0, r3]
 8002362:	3304      	adds	r3, #4

08002364 <LoopCopyDataInit>:
 8002364:	18c4      	adds	r4, r0, r3
 8002366:	428c      	cmp	r4, r1
 8002368:	d3f9      	bcc.n	800235e <CopyDataInit>
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <LoopForever+0x12>)
 800236c:	4c0a      	ldr	r4, [pc, #40]	; (8002398 <LoopForever+0x16>)
 800236e:	2300      	movs	r3, #0
 8002370:	e001      	b.n	8002376 <LoopFillZerobss>

08002372 <FillZerobss>:
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	3204      	adds	r2, #4

08002376 <LoopFillZerobss>:
 8002376:	42a2      	cmp	r2, r4
 8002378:	d3fb      	bcc.n	8002372 <FillZerobss>
 800237a:	f005 fa51 	bl	8007820 <__libc_init_array>
 800237e:	f7fe f981 	bl	8000684 <main>

08002382 <LoopForever>:
 8002382:	e7fe      	b.n	8002382 <LoopForever>
 8002384:	20004000 	.word	0x20004000
 8002388:	20000000 	.word	0x20000000
 800238c:	20000010 	.word	0x20000010
 8002390:	080078c0 	.word	0x080078c0
 8002394:	20000010 	.word	0x20000010
 8002398:	20000698 	.word	0x20000698

0800239c <ADC1_IRQHandler>:
 800239c:	e7fe      	b.n	800239c <ADC1_IRQHandler>
	...

080023a0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <HAL_Init+0x28>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <HAL_Init+0x28>)
 80023aa:	f043 0310 	orr.w	r3, r3, #16
 80023ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b0:	2003      	movs	r0, #3
 80023b2:	f000 fd61 	bl	8002e78 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023b6:	2000      	movs	r0, #0
 80023b8:	f000 f808 	bl	80023cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023bc:	f7ff fd8c 	bl	8001ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40022000 	.word	0x40022000

080023cc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023d4:	4b12      	ldr	r3, [pc, #72]	; (8002420 <HAL_InitTick+0x54>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_InitTick+0x58>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fd7d 	bl	8002eea <HAL_SYSTICK_Config>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e00e      	b.n	8002418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b0f      	cmp	r3, #15
 80023fe:	d80a      	bhi.n	8002416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002400:	2200      	movs	r2, #0
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	f04f 30ff 	mov.w	r0, #4294967295
 8002408:	f000 fd41 	bl	8002e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800240c:	4a06      	ldr	r2, [pc, #24]	; (8002428 <HAL_InitTick+0x5c>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	e000      	b.n	8002418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
}
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000004 	.word	0x20000004
 8002424:	2000000c 	.word	0x2000000c
 8002428:	20000008 	.word	0x20000008

0800242c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_IncTick+0x20>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_IncTick+0x24>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4413      	add	r3, r2
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <HAL_IncTick+0x24>)
 800243e:	6013      	str	r3, [r2, #0]
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	2000000c 	.word	0x2000000c
 8002450:	20000674 	.word	0x20000674

08002454 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return uwTick;  
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <HAL_GetTick+0x14>)
 800245a:	681b      	ldr	r3, [r3, #0]
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000674 	.word	0x20000674

0800246c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002474:	f7ff ffee 	bl	8002454 <HAL_GetTick>
 8002478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002484:	d005      	beq.n	8002492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_Delay+0x44>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4413      	add	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002492:	bf00      	nop
 8002494:	f7ff ffde 	bl	8002454 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d8f7      	bhi.n	8002494 <HAL_Delay+0x28>
  {
  }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2000000c 	.word	0x2000000c

080024b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0be      	b.n	8002654 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d109      	bne.n	80024f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fd fed2 	bl	800029c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fa9b 	bl	8002a34 <ADC_ConversionStop_Disable>
 80024fe:	4603      	mov	r3, r0
 8002500:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2b00      	cmp	r3, #0
 800250c:	f040 8099 	bne.w	8002642 <HAL_ADC_Init+0x18e>
 8002510:	7dfb      	ldrb	r3, [r7, #23]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 8095 	bne.w	8002642 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002520:	f023 0302 	bic.w	r3, r3, #2
 8002524:	f043 0202 	orr.w	r2, r3, #2
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8002534:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	7b1b      	ldrb	r3, [r3, #12]
 800253a:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 800253c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	4313      	orrs	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800254c:	d003      	beq.n	8002556 <HAL_ADC_Init+0xa2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d102      	bne.n	800255c <HAL_ADC_Init+0xa8>
 8002556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800255a:	e000      	b.n	800255e <HAL_ADC_Init+0xaa>
 800255c:	2300      	movs	r3, #0
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	7d1b      	ldrb	r3, [r3, #20]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d119      	bne.n	80025a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7b1b      	ldrb	r3, [r3, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	3b01      	subs	r3, #1
 800257a:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	e00b      	b.n	80025a0 <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	f043 0220 	orr.w	r2, r3, #32
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	f043 0201 	orr.w	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	4b28      	ldr	r3, [pc, #160]	; (800265c <HAL_ADC_Init+0x1a8>)
 80025bc:	4013      	ands	r3, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d0:	d003      	beq.n	80025da <HAL_ADC_Init+0x126>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d104      	bne.n	80025e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	3b01      	subs	r3, #1
 80025e0:	051b      	lsls	r3, r3, #20
 80025e2:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	4b18      	ldr	r3, [pc, #96]	; (8002660 <HAL_ADC_Init+0x1ac>)
 8002600:	4013      	ands	r3, r2
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	429a      	cmp	r2, r3
 8002606:	d10b      	bne.n	8002620 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	f023 0303 	bic.w	r3, r3, #3
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800261e:	e018      	b.n	8002652 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	f023 0312 	bic.w	r3, r3, #18
 8002628:	f043 0210 	orr.w	r2, r3, #16
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002640:	e007      	b.n	8002652 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	f043 0210 	orr.w	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002652:	7dfb      	ldrb	r3, [r7, #23]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	ffe1f7fd 	.word	0xffe1f7fd
 8002660:	ff1f0efe 	.word	0xff1f0efe

08002664 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_ADCEx_Calibration_Start+0x1e>
 800267e:	2302      	movs	r3, #2
 8002680:	e08a      	b.n	8002798 <HAL_ADCEx_Calibration_Start+0x134>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f9d2 	bl	8002a34 <ADC_ConversionStop_Disable>
 8002690:	4603      	mov	r3, r0
 8002692:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d179      	bne.n	800278e <HAL_ADCEx_Calibration_Start+0x12a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026a2:	f023 0302 	bic.w	r3, r3, #2
 80026a6:	f043 0202 	orr.w	r2, r3, #2
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Wait two ADC clock cycles */
    while(wait_loop_index < ADC_CYCLE_WORST_CASE_CPU_CYCLES *2U)
 80026ae:	e002      	b.n	80026b6 <HAL_ADCEx_Calibration_Start+0x52>
    {
      wait_loop_index++;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3301      	adds	r3, #1
 80026b4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index < ADC_CYCLE_WORST_CASE_CPU_CYCLES *2U)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2bff      	cmp	r3, #255	; 0xff
 80026ba:	d9f9      	bls.n	80026b0 <HAL_ADCEx_Calibration_Start+0x4c>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f95f 	bl	8002980 <ADC_Enable>
    

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0208 	orr.w	r2, r2, #8
 80026d0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80026d2:	f7ff febf 	bl	8002454 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80026d8:	e01b      	b.n	8002712 <HAL_ADCEx_Calibration_Start+0xae>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80026da:	f7ff febb 	bl	8002454 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b0a      	cmp	r3, #10
 80026e6:	d914      	bls.n	8002712 <HAL_ADCEx_Calibration_Start+0xae>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d10d      	bne.n	8002712 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	f023 0312 	bic.w	r3, r3, #18
 80026fe:	f043 0210 	orr.w	r2, r3, #16
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e042      	b.n	8002798 <HAL_ADCEx_Calibration_Start+0x134>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b08      	cmp	r3, #8
 800271e:	d0dc      	beq.n	80026da <HAL_ADCEx_Calibration_Start+0x76>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0204 	orr.w	r2, r2, #4
 800272e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002730:	f7ff fe90 	bl	8002454 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002736:	e01b      	b.n	8002770 <HAL_ADCEx_Calibration_Start+0x10c>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002738:	f7ff fe8c 	bl	8002454 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b0a      	cmp	r3, #10
 8002744:	d914      	bls.n	8002770 <HAL_ADCEx_Calibration_Start+0x10c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b04      	cmp	r3, #4
 8002752:	d10d      	bne.n	8002770 <HAL_ADCEx_Calibration_Start+0x10c>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	f023 0312 	bic.w	r3, r3, #18
 800275c:	f043 0210 	orr.w	r2, r3, #16
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;            
 800276c:	2301      	movs	r3, #1
 800276e:	e013      	b.n	8002798 <HAL_ADCEx_Calibration_Start+0x134>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b04      	cmp	r3, #4
 800277c:	d0dc      	beq.n	8002738 <HAL_ADCEx_Calibration_Start+0xd4>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	f023 0303 	bic.w	r3, r3, #3
 8002786:	f043 0201 	orr.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002796:	7dfb      	ldrb	r3, [r7, #23]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x20>
 80027bc:	2302      	movs	r3, #2
 80027be:	e0d2      	b.n	8002966 <HAL_ADC_ConfigChannel+0x1c6>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d81c      	bhi.n	800280a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3b05      	subs	r3, #5
 80027e2:	221f      	movs	r2, #31
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	4019      	ands	r1, r3
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	3b05      	subs	r3, #5
 80027fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	635a      	str	r2, [r3, #52]	; 0x34
 8002808:	e03c      	b.n	8002884 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b0c      	cmp	r3, #12
 8002810:	d81c      	bhi.n	800284c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b23      	subs	r3, #35	; 0x23
 8002824:	221f      	movs	r2, #31
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	4019      	ands	r1, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	3b23      	subs	r3, #35	; 0x23
 800283e:	fa00 f203 	lsl.w	r2, r0, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
 800284a:	e01b      	b.n	8002884 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	3b41      	subs	r3, #65	; 0x41
 800285e:	221f      	movs	r2, #31
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	4019      	ands	r1, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	3b41      	subs	r3, #65	; 0x41
 8002878:	fa00 f203 	lsl.w	r2, r0, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b0a      	cmp	r3, #10
 800288a:	d91c      	bls.n	80028c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68d9      	ldr	r1, [r3, #12]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4613      	mov	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	3b1e      	subs	r3, #30
 800289e:	2207      	movs	r2, #7
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	4019      	ands	r1, r3
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	6898      	ldr	r0, [r3, #8]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	3b1e      	subs	r3, #30
 80028b8:	fa00 f203 	lsl.w	r2, r0, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	60da      	str	r2, [r3, #12]
 80028c4:	e019      	b.n	80028fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6919      	ldr	r1, [r3, #16]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	2207      	movs	r2, #7
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	4019      	ands	r1, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6898      	ldr	r0, [r3, #8]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	fa00 f203 	lsl.w	r2, r0, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b10      	cmp	r3, #16
 8002900:	d003      	beq.n	800290a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002906:	2b11      	cmp	r3, #17
 8002908:	d11e      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002918:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b10      	cmp	r3, #16
 8002920:	d11c      	bne.n	800295c <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002922:	4b14      	ldr	r3, [pc, #80]	; (8002974 <HAL_ADC_ConfigChannel+0x1d4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a14      	ldr	r2, [pc, #80]	; (8002978 <HAL_ADC_ConfigChannel+0x1d8>)
 8002928:	fba2 2303 	umull	r2, r3, r2, r3
 800292c:	0c9a      	lsrs	r2, r3, #18
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8002938:	e002      	b.n	8002940 <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	3b01      	subs	r3, #1
 800293e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f9      	bne.n	800293a <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002946:	e009      	b.n	800295c <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b12      	cmp	r3, #18
 800294e:	d105      	bne.n	800295c <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 8002950:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_ADC_ConfigChannel+0x1dc>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a09      	ldr	r2, [pc, #36]	; (800297c <HAL_ADC_ConfigChannel+0x1dc>)
 8002956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295a:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002964:	7bfb      	ldrb	r3, [r7, #15]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000004 	.word	0x20000004
 8002978:	431bde83 	.word	0x431bde83
 800297c:	40010000 	.word	0x40010000

08002980 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b01      	cmp	r3, #1
 800299c:	d040      	beq.n	8002a20 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0201 	orr.w	r2, r2, #1
 80029ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029ae:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <ADC_Enable+0xac>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <ADC_Enable+0xb0>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	0c9b      	lsrs	r3, r3, #18
 80029ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029bc:	e002      	b.n	80029c4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f9      	bne.n	80029be <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029ca:	f7ff fd43 	bl	8002454 <HAL_GetTick>
 80029ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029d0:	e01f      	b.n	8002a12 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029d2:	f7ff fd3f 	bl	8002454 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d918      	bls.n	8002a12 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d011      	beq.n	8002a12 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	f043 0210 	orr.w	r2, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e007      	b.n	8002a22 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d1d8      	bne.n	80029d2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000004 	.word	0x20000004
 8002a30:	431bde83 	.word	0x431bde83

08002a34 <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d12e      	bne.n	8002aac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a5e:	f7ff fcf9 	bl	8002454 <HAL_GetTick>
 8002a62:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a64:	e01b      	b.n	8002a9e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a66:	f7ff fcf5 	bl	8002454 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d914      	bls.n	8002a9e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d10d      	bne.n	8002a9e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	f043 0210 	orr.w	r2, r3, #16
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	f043 0201 	orr.w	r2, r3, #1
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e007      	b.n	8002aae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d0dc      	beq.n	8002a66 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0ed      	b.n	8002ca4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7fd fcb5 	bl	8000444 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aea:	f7ff fcb3 	bl	8002454 <HAL_GetTick>
 8002aee:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002af0:	e012      	b.n	8002b18 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002af2:	f7ff fcaf 	bl	8002454 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b0a      	cmp	r3, #10
 8002afe:	d90b      	bls.n	8002b18 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2205      	movs	r2, #5
 8002b10:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0c5      	b.n	8002ca4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0e5      	beq.n	8002af2 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0202 	bic.w	r2, r2, #2
 8002b34:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b36:	f7ff fc8d 	bl	8002454 <HAL_GetTick>
 8002b3a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b3c:	e012      	b.n	8002b64 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b3e:	f7ff fc89 	bl	8002454 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b0a      	cmp	r3, #10
 8002b4a:	d90b      	bls.n	8002b64 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2205      	movs	r2, #5
 8002b5c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e09f      	b.n	8002ca4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1e5      	bne.n	8002b3e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	7e1b      	ldrb	r3, [r3, #24]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d108      	bne.n	8002b8c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	e007      	b.n	8002b9c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	7e5b      	ldrb	r3, [r3, #25]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d108      	bne.n	8002bb6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	e007      	b.n	8002bc6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	7e9b      	ldrb	r3, [r3, #26]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d108      	bne.n	8002be0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0220 	orr.w	r2, r2, #32
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	e007      	b.n	8002bf0 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0220 	bic.w	r2, r2, #32
 8002bee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	7edb      	ldrb	r3, [r3, #27]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d108      	bne.n	8002c0a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0210 	bic.w	r2, r2, #16
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	e007      	b.n	8002c1a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0210 	orr.w	r2, r2, #16
 8002c18:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	7f1b      	ldrb	r3, [r3, #28]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d108      	bne.n	8002c34 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0208 	orr.w	r2, r2, #8
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e007      	b.n	8002c44 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0208 	bic.w	r2, r2, #8
 8002c42:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	7f5b      	ldrb	r3, [r3, #29]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d108      	bne.n	8002c5e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0204 	orr.w	r2, r2, #4
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	e007      	b.n	8002c6e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0204 	bic.w	r2, r2, #4
 8002c6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	ea42 0103 	orr.w	r1, r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	1e5a      	subs	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cde:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	60d3      	str	r3, [r2, #12]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <__NVIC_GetPriorityGrouping+0x18>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	f003 0307 	and.w	r3, r3, #7
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	db0b      	blt.n	8002d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	f003 021f 	and.w	r2, r3, #31
 8002d28:	4907      	ldr	r1, [pc, #28]	; (8002d48 <__NVIC_EnableIRQ+0x38>)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2001      	movs	r0, #1
 8002d32:	fa00 f202 	lsl.w	r2, r0, r2
 8002d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000e100 	.word	0xe000e100

08002d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	6039      	str	r1, [r7, #0]
 8002d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db0a      	blt.n	8002d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	490c      	ldr	r1, [pc, #48]	; (8002d98 <__NVIC_SetPriority+0x4c>)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d74:	e00a      	b.n	8002d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4908      	ldr	r1, [pc, #32]	; (8002d9c <__NVIC_SetPriority+0x50>)
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	3b04      	subs	r3, #4
 8002d84:	0112      	lsls	r2, r2, #4
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	440b      	add	r3, r1
 8002d8a:	761a      	strb	r2, [r3, #24]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f1c3 0307 	rsb	r3, r3, #7
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	bf28      	it	cs
 8002dbe:	2304      	movcs	r3, #4
 8002dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d902      	bls.n	8002dd0 <NVIC_EncodePriority+0x30>
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3b03      	subs	r3, #3
 8002dce:	e000      	b.n	8002dd2 <NVIC_EncodePriority+0x32>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	401a      	ands	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	4313      	orrs	r3, r2
         );
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	; 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e0c:	f3bf 8f4f 	dsb	sy
}
 8002e10:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <__NVIC_SystemReset+0x24>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002e1a:	4904      	ldr	r1, [pc, #16]	; (8002e2c <__NVIC_SystemReset+0x24>)
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <__NVIC_SystemReset+0x28>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e22:	f3bf 8f4f 	dsb	sy
}
 8002e26:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002e28:	bf00      	nop
 8002e2a:	e7fd      	b.n	8002e28 <__NVIC_SystemReset+0x20>
 8002e2c:	e000ed00 	.word	0xe000ed00
 8002e30:	05fa0004 	.word	0x05fa0004

08002e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e44:	d301      	bcc.n	8002e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e46:	2301      	movs	r3, #1
 8002e48:	e00f      	b.n	8002e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <SysTick_Config+0x40>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e52:	210f      	movs	r1, #15
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	f7ff ff78 	bl	8002d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <SysTick_Config+0x40>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e62:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <SysTick_Config+0x40>)
 8002e64:	2207      	movs	r2, #7
 8002e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	e000e010 	.word	0xe000e010

08002e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff13 	bl	8002cac <__NVIC_SetPriorityGrouping>
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	4603      	mov	r3, r0
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea0:	f7ff ff28 	bl	8002cf4 <__NVIC_GetPriorityGrouping>
 8002ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	6978      	ldr	r0, [r7, #20]
 8002eac:	f7ff ff78 	bl	8002da0 <NVIC_EncodePriority>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff ff47 	bl	8002d4c <__NVIC_SetPriority>
}
 8002ebe:	bf00      	nop
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	4603      	mov	r3, r0
 8002ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff1b 	bl	8002d10 <__NVIC_EnableIRQ>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002ee6:	f7ff ff8f 	bl	8002e08 <__NVIC_SystemReset>

08002eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ff9e 	bl	8002e34 <SysTick_Config>
 8002ef8:	4603      	mov	r3, r0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e037      	b.n	8002f88 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f9bc 	bl	80032e8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_DMA_Start_IT+0x20>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e04a      	b.n	8003046 <HAL_DMA_Start_IT+0xb6>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d13a      	bne.n	8003038 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f950 	bl	800328c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 020e 	orr.w	r2, r2, #14
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e00f      	b.n	8003026 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 020a 	orr.w	r2, r2, #10
 8003014:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0204 	bic.w	r2, r2, #4
 8003024:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	e005      	b.n	8003044 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003040:	2302      	movs	r3, #2
 8003042:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003044:	7dfb      	ldrb	r3, [r7, #23]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e02e      	b.n	80030be <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003066:	2b02      	cmp	r3, #2
 8003068:	d008      	beq.n	800307c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2204      	movs	r2, #4
 800306e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e020      	b.n	80030be <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 020e 	bic.w	r2, r2, #14
 800308a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0201 	bic.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a4:	2101      	movs	r1, #1
 80030a6:	fa01 f202 	lsl.w	r2, r1, r2
 80030aa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d005      	beq.n	80030ec <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2204      	movs	r2, #4
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
 80030ea:	e027      	b.n	800313c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 020e 	bic.w	r2, r2, #14
 80030fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0201 	bic.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	2101      	movs	r1, #1
 8003116:	fa01 f202 	lsl.w	r2, r1, r2
 800311a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
    }
  }
  return status;
 800313c:	7bfb      	ldrb	r3, [r7, #15]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2204      	movs	r2, #4
 8003164:	409a      	lsls	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d024      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x72>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01f      	beq.n	80031b8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d107      	bne.n	8003196 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0204 	bic.w	r2, r2, #4
 8003194:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	2104      	movs	r1, #4
 80031a0:	fa01 f202 	lsl.w	r2, r1, r2
 80031a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d06a      	beq.n	8003284 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031b6:	e065      	b.n	8003284 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	2202      	movs	r2, #2
 80031be:	409a      	lsls	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d02c      	beq.n	8003222 <HAL_DMA_IRQHandler+0xdc>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d027      	beq.n	8003222 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10b      	bne.n	80031f8 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 020a 	bic.w	r2, r2, #10
 80031ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003200:	2102      	movs	r1, #2
 8003202:	fa01 f202 	lsl.w	r2, r1, r2
 8003206:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	2b00      	cmp	r3, #0
 8003216:	d035      	beq.n	8003284 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003220:	e030      	b.n	8003284 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2208      	movs	r2, #8
 8003228:	409a      	lsls	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d028      	beq.n	8003284 <HAL_DMA_IRQHandler+0x13e>
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d023      	beq.n	8003284 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 020e 	bic.w	r2, r2, #14
 800324a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003254:	2101      	movs	r1, #1
 8003256:	fa01 f202 	lsl.w	r2, r1, r2
 800325a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	2b00      	cmp	r3, #0
 8003278:	d004      	beq.n	8003284 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4798      	blx	r3
    }
  }
}
 8003282:	e7ff      	b.n	8003284 <HAL_DMA_IRQHandler+0x13e>
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a2:	2101      	movs	r1, #1
 80032a4:	fa01 f202 	lsl.w	r2, r1, r2
 80032a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d108      	bne.n	80032cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032ca:	e007      	b.n	80032dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	60da      	str	r2, [r3, #12]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <DMA_CalcBaseAndBitshift+0x60>)
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d80f      	bhi.n	800331c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <DMA_CalcBaseAndBitshift+0x64>)
 8003304:	4413      	add	r3, r2
 8003306:	4a12      	ldr	r2, [pc, #72]	; (8003350 <DMA_CalcBaseAndBitshift+0x68>)
 8003308:	fba2 2303 	umull	r2, r3, r2, r3
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	009a      	lsls	r2, r3, #2
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a0f      	ldr	r2, [pc, #60]	; (8003354 <DMA_CalcBaseAndBitshift+0x6c>)
 8003318:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800331a:	e00e      	b.n	800333a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <DMA_CalcBaseAndBitshift+0x70>)
 8003324:	4413      	add	r3, r2
 8003326:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <DMA_CalcBaseAndBitshift+0x68>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	009a      	lsls	r2, r3, #2
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a09      	ldr	r2, [pc, #36]	; (800335c <DMA_CalcBaseAndBitshift+0x74>)
 8003338:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40020407 	.word	0x40020407
 800334c:	bffdfff8 	.word	0xbffdfff8
 8003350:	cccccccd 	.word	0xcccccccd
 8003354:	40020000 	.word	0x40020000
 8003358:	bffdfbf8 	.word	0xbffdfbf8
 800335c:	40020400 	.word	0x40020400

08003360 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800337a:	4b2f      	ldr	r3, [pc, #188]	; (8003438 <HAL_FLASH_Program+0xd8>)
 800337c:	7e1b      	ldrb	r3, [r3, #24]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_FLASH_Program+0x26>
 8003382:	2302      	movs	r3, #2
 8003384:	e054      	b.n	8003430 <HAL_FLASH_Program+0xd0>
 8003386:	4b2c      	ldr	r3, [pc, #176]	; (8003438 <HAL_FLASH_Program+0xd8>)
 8003388:	2201      	movs	r2, #1
 800338a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800338c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003390:	f000 f8a8 	bl	80034e4 <FLASH_WaitForLastOperation>
 8003394:	4603      	mov	r3, r0
 8003396:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003398:	7dfb      	ldrb	r3, [r7, #23]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d144      	bne.n	8003428 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d102      	bne.n	80033aa <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80033a4:	2301      	movs	r3, #1
 80033a6:	757b      	strb	r3, [r7, #21]
 80033a8:	e007      	b.n	80033ba <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d102      	bne.n	80033b6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80033b0:	2302      	movs	r3, #2
 80033b2:	757b      	strb	r3, [r7, #21]
 80033b4:	e001      	b.n	80033ba <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80033b6:	2304      	movs	r3, #4
 80033b8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80033ba:	2300      	movs	r3, #0
 80033bc:	75bb      	strb	r3, [r7, #22]
 80033be:	e02d      	b.n	800341c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80033c0:	7dbb      	ldrb	r3, [r7, #22]
 80033c2:	005a      	lsls	r2, r3, #1
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	eb02 0c03 	add.w	ip, r2, r3
 80033ca:	7dbb      	ldrb	r3, [r7, #22]
 80033cc:	0119      	lsls	r1, r3, #4
 80033ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033d2:	f1c1 0620 	rsb	r6, r1, #32
 80033d6:	f1a1 0020 	sub.w	r0, r1, #32
 80033da:	fa22 f401 	lsr.w	r4, r2, r1
 80033de:	fa03 f606 	lsl.w	r6, r3, r6
 80033e2:	4334      	orrs	r4, r6
 80033e4:	fa23 f000 	lsr.w	r0, r3, r0
 80033e8:	4304      	orrs	r4, r0
 80033ea:	fa23 f501 	lsr.w	r5, r3, r1
 80033ee:	b2a3      	uxth	r3, r4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4660      	mov	r0, ip
 80033f4:	f000 f85a 	bl	80034ac <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80033f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80033fc:	f000 f872 	bl	80034e4 <FLASH_WaitForLastOperation>
 8003400:	4603      	mov	r3, r0
 8003402:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <HAL_FLASH_Program+0xdc>)
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	4a0c      	ldr	r2, [pc, #48]	; (800343c <HAL_FLASH_Program+0xdc>)
 800340a:	f023 0301 	bic.w	r3, r3, #1
 800340e:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8003410:	7dfb      	ldrb	r3, [r7, #23]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d107      	bne.n	8003426 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003416:	7dbb      	ldrb	r3, [r7, #22]
 8003418:	3301      	adds	r3, #1
 800341a:	75bb      	strb	r3, [r7, #22]
 800341c:	7dba      	ldrb	r2, [r7, #22]
 800341e:	7d7b      	ldrb	r3, [r7, #21]
 8003420:	429a      	cmp	r2, r3
 8003422:	d3cd      	bcc.n	80033c0 <HAL_FLASH_Program+0x60>
 8003424:	e000      	b.n	8003428 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003426:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003428:	4b03      	ldr	r3, [pc, #12]	; (8003438 <HAL_FLASH_Program+0xd8>)
 800342a:	2200      	movs	r2, #0
 800342c:	761a      	strb	r2, [r3, #24]

  return status;
 800342e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003430:	4618      	mov	r0, r3
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003438:	20000678 	.word	0x20000678
 800343c:	40022000 	.word	0x40022000

08003440 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800344a:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <HAL_FLASH_Unlock+0x40>)
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_FLASH_Unlock+0x40>)
 8003458:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <HAL_FLASH_Unlock+0x44>)
 800345a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <HAL_FLASH_Unlock+0x40>)
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <HAL_FLASH_Unlock+0x48>)
 8003460:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003462:	4b07      	ldr	r3, [pc, #28]	; (8003480 <HAL_FLASH_Unlock+0x40>)
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003472:	79fb      	ldrb	r3, [r7, #7]
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	40022000 	.word	0x40022000
 8003484:	45670123 	.word	0x45670123
 8003488:	cdef89ab 	.word	0xcdef89ab

0800348c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003490:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <HAL_FLASH_Lock+0x1c>)
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	4a04      	ldr	r2, [pc, #16]	; (80034a8 <HAL_FLASH_Lock+0x1c>)
 8003496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40022000 	.word	0x40022000

080034ac <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80034b8:	4b08      	ldr	r3, [pc, #32]	; (80034dc <FLASH_Program_HalfWord+0x30>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80034be:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <FLASH_Program_HalfWord+0x34>)
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	4a07      	ldr	r2, [pc, #28]	; (80034e0 <FLASH_Program_HalfWord+0x34>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	887a      	ldrh	r2, [r7, #2]
 80034ce:	801a      	strh	r2, [r3, #0]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	20000678 	.word	0x20000678
 80034e0:	40022000 	.word	0x40022000

080034e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80034ec:	f7fe ffb2 	bl	8002454 <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80034f2:	e010      	b.n	8003516 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d00c      	beq.n	8003516 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <FLASH_WaitForLastOperation+0x2e>
 8003502:	f7fe ffa7 	bl	8002454 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	429a      	cmp	r2, r3
 8003510:	d201      	bcs.n	8003516 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e01f      	b.n	8003556 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <FLASH_WaitForLastOperation+0x7c>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	d0e8      	beq.n	80034f4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <FLASH_WaitForLastOperation+0x7c>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b20      	cmp	r3, #32
 800352c:	d102      	bne.n	8003534 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800352e:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <FLASH_WaitForLastOperation+0x7c>)
 8003530:	2220      	movs	r2, #32
 8003532:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003534:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <FLASH_WaitForLastOperation+0x7c>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b10      	cmp	r3, #16
 800353e:	d005      	beq.n	800354c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003540:	4b07      	ldr	r3, [pc, #28]	; (8003560 <FLASH_WaitForLastOperation+0x7c>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003548:	2b04      	cmp	r3, #4
 800354a:	d103      	bne.n	8003554 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800354c:	f000 f80a 	bl	8003564 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40022000 	.word	0x40022000

08003564 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800356e:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <FLASH_SetErrorCode+0x5c>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	2b10      	cmp	r3, #16
 8003578:	d109      	bne.n	800358e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <FLASH_SetErrorCode+0x60>)
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f043 0302 	orr.w	r3, r3, #2
 8003582:	4a10      	ldr	r2, [pc, #64]	; (80035c4 <FLASH_SetErrorCode+0x60>)
 8003584:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f043 0310 	orr.w	r3, r3, #16
 800358c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800358e:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <FLASH_SetErrorCode+0x5c>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b04      	cmp	r3, #4
 8003598:	d109      	bne.n	80035ae <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <FLASH_SetErrorCode+0x60>)
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	4a08      	ldr	r2, [pc, #32]	; (80035c4 <FLASH_SetErrorCode+0x60>)
 80035a4:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f043 0304 	orr.w	r3, r3, #4
 80035ac:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80035ae:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <FLASH_SetErrorCode+0x5c>)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	60d3      	str	r3, [r2, #12]
}  
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	40022000 	.word	0x40022000
 80035c4:	20000678 	.word	0x20000678

080035c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80035da:	4b2e      	ldr	r3, [pc, #184]	; (8003694 <HAL_FLASHEx_Erase+0xcc>)
 80035dc:	7e1b      	ldrb	r3, [r3, #24]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_FLASHEx_Erase+0x1e>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e052      	b.n	800368c <HAL_FLASHEx_Erase+0xc4>
 80035e6:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <HAL_FLASHEx_Erase+0xcc>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d115      	bne.n	8003620 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80035f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035f8:	f7ff ff74 	bl	80034e4 <FLASH_WaitForLastOperation>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d140      	bne.n	8003684 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8003602:	f000 f84b 	bl	800369c <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003606:	f24c 3050 	movw	r0, #50000	; 0xc350
 800360a:	f7ff ff6b 	bl	80034e4 <FLASH_WaitForLastOperation>
 800360e:	4603      	mov	r3, r0
 8003610:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003612:	4b21      	ldr	r3, [pc, #132]	; (8003698 <HAL_FLASHEx_Erase+0xd0>)
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	4a20      	ldr	r2, [pc, #128]	; (8003698 <HAL_FLASHEx_Erase+0xd0>)
 8003618:	f023 0304 	bic.w	r3, r3, #4
 800361c:	6113      	str	r3, [r2, #16]
 800361e:	e031      	b.n	8003684 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003620:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003624:	f7ff ff5e 	bl	80034e4 <FLASH_WaitForLastOperation>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d12a      	bne.n	8003684 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	f04f 32ff 	mov.w	r2, #4294967295
 8003634:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	e019      	b.n	8003672 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800363e:	68b8      	ldr	r0, [r7, #8]
 8003640:	f000 f846 	bl	80036d0 <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003644:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003648:	f7ff ff4c 	bl	80034e4 <FLASH_WaitForLastOperation>
 800364c:	4603      	mov	r3, r0
 800364e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003650:	4b11      	ldr	r3, [pc, #68]	; (8003698 <HAL_FLASHEx_Erase+0xd0>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	4a10      	ldr	r2, [pc, #64]	; (8003698 <HAL_FLASHEx_Erase+0xd0>)
 8003656:	f023 0302 	bic.w	r3, r3, #2
 800365a:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	601a      	str	r2, [r3, #0]
            break;
 8003668:	e00c      	b.n	8003684 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003670:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	02da      	lsls	r2, r3, #11
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4413      	add	r3, r2
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	429a      	cmp	r2, r3
 8003682:	d3dc      	bcc.n	800363e <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <HAL_FLASHEx_Erase+0xcc>)
 8003686:	2200      	movs	r2, #0
 8003688:	761a      	strb	r2, [r3, #24]

  return status;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000678 	.word	0x20000678
 8003698:	40022000 	.word	0x40022000

0800369c <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <FLASH_MassErase+0x2c>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80036a6:	4b09      	ldr	r3, [pc, #36]	; (80036cc <FLASH_MassErase+0x30>)
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	4a08      	ldr	r2, [pc, #32]	; (80036cc <FLASH_MassErase+0x30>)
 80036ac:	f043 0304 	orr.w	r3, r3, #4
 80036b0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <FLASH_MassErase+0x30>)
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	4a05      	ldr	r2, [pc, #20]	; (80036cc <FLASH_MassErase+0x30>)
 80036b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036bc:	6113      	str	r3, [r2, #16]
}
 80036be:	bf00      	nop
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	20000678 	.word	0x20000678
 80036cc:	40022000 	.word	0x40022000

080036d0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <FLASH_PageErase+0x38>)
 80036da:	2200      	movs	r2, #0
 80036dc:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80036de:	4b0b      	ldr	r3, [pc, #44]	; (800370c <FLASH_PageErase+0x3c>)
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	4a0a      	ldr	r2, [pc, #40]	; (800370c <FLASH_PageErase+0x3c>)
 80036e4:	f043 0302 	orr.w	r3, r3, #2
 80036e8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80036ea:	4a08      	ldr	r2, [pc, #32]	; (800370c <FLASH_PageErase+0x3c>)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <FLASH_PageErase+0x3c>)
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	4a05      	ldr	r2, [pc, #20]	; (800370c <FLASH_PageErase+0x3c>)
 80036f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036fa:	6113      	str	r3, [r2, #16]
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	20000678 	.word	0x20000678
 800370c:	40022000 	.word	0x40022000

08003710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800371e:	e154      	b.n	80039ca <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	2101      	movs	r1, #1
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	fa01 f303 	lsl.w	r3, r1, r3
 800372c:	4013      	ands	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8146 	beq.w	80039c4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d005      	beq.n	8003750 <HAL_GPIO_Init+0x40>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d130      	bne.n	80037b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	2203      	movs	r2, #3
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003786:	2201      	movs	r2, #1
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43db      	mvns	r3, r3
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4013      	ands	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	091b      	lsrs	r3, r3, #4
 800379c:	f003 0201 	and.w	r2, r3, #1
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d017      	beq.n	80037ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	2203      	movs	r2, #3
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43db      	mvns	r3, r3
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4013      	ands	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d123      	bne.n	8003842 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	08da      	lsrs	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3208      	adds	r2, #8
 8003802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003806:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	220f      	movs	r2, #15
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4013      	ands	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	08da      	lsrs	r2, r3, #3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3208      	adds	r2, #8
 800383c:	6939      	ldr	r1, [r7, #16]
 800383e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2203      	movs	r2, #3
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 0203 	and.w	r2, r3, #3
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 80a0 	beq.w	80039c4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003884:	4b58      	ldr	r3, [pc, #352]	; (80039e8 <HAL_GPIO_Init+0x2d8>)
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	4a57      	ldr	r2, [pc, #348]	; (80039e8 <HAL_GPIO_Init+0x2d8>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6193      	str	r3, [r2, #24]
 8003890:	4b55      	ldr	r3, [pc, #340]	; (80039e8 <HAL_GPIO_Init+0x2d8>)
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800389c:	4a53      	ldr	r2, [pc, #332]	; (80039ec <HAL_GPIO_Init+0x2dc>)
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	089b      	lsrs	r3, r3, #2
 80038a2:	3302      	adds	r3, #2
 80038a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f003 0303 	and.w	r3, r3, #3
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	220f      	movs	r2, #15
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4013      	ands	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038c6:	d019      	beq.n	80038fc <HAL_GPIO_Init+0x1ec>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a49      	ldr	r2, [pc, #292]	; (80039f0 <HAL_GPIO_Init+0x2e0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d013      	beq.n	80038f8 <HAL_GPIO_Init+0x1e8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a48      	ldr	r2, [pc, #288]	; (80039f4 <HAL_GPIO_Init+0x2e4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00d      	beq.n	80038f4 <HAL_GPIO_Init+0x1e4>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a47      	ldr	r2, [pc, #284]	; (80039f8 <HAL_GPIO_Init+0x2e8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d007      	beq.n	80038f0 <HAL_GPIO_Init+0x1e0>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a46      	ldr	r2, [pc, #280]	; (80039fc <HAL_GPIO_Init+0x2ec>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d101      	bne.n	80038ec <HAL_GPIO_Init+0x1dc>
 80038e8:	2304      	movs	r3, #4
 80038ea:	e008      	b.n	80038fe <HAL_GPIO_Init+0x1ee>
 80038ec:	2305      	movs	r3, #5
 80038ee:	e006      	b.n	80038fe <HAL_GPIO_Init+0x1ee>
 80038f0:	2303      	movs	r3, #3
 80038f2:	e004      	b.n	80038fe <HAL_GPIO_Init+0x1ee>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e002      	b.n	80038fe <HAL_GPIO_Init+0x1ee>
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <HAL_GPIO_Init+0x1ee>
 80038fc:	2300      	movs	r3, #0
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	f002 0203 	and.w	r2, r2, #3
 8003904:	0092      	lsls	r2, r2, #2
 8003906:	4093      	lsls	r3, r2
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800390e:	4937      	ldr	r1, [pc, #220]	; (80039ec <HAL_GPIO_Init+0x2dc>)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	089b      	lsrs	r3, r3, #2
 8003914:	3302      	adds	r3, #2
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800391c:	4b38      	ldr	r3, [pc, #224]	; (8003a00 <HAL_GPIO_Init+0x2f0>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	43db      	mvns	r3, r3
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4013      	ands	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003940:	4a2f      	ldr	r2, [pc, #188]	; (8003a00 <HAL_GPIO_Init+0x2f0>)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003946:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <HAL_GPIO_Init+0x2f0>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	43db      	mvns	r3, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4013      	ands	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800396a:	4a25      	ldr	r2, [pc, #148]	; (8003a00 <HAL_GPIO_Init+0x2f0>)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003970:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <HAL_GPIO_Init+0x2f0>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	43db      	mvns	r3, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003994:	4a1a      	ldr	r2, [pc, #104]	; (8003a00 <HAL_GPIO_Init+0x2f0>)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800399a:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_GPIO_Init+0x2f0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4013      	ands	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039be:	4a10      	ldr	r2, [pc, #64]	; (8003a00 <HAL_GPIO_Init+0x2f0>)
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	3301      	adds	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f47f aea3 	bne.w	8003720 <HAL_GPIO_Init+0x10>
  }
}
 80039da:	bf00      	nop
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40010000 	.word	0x40010000
 80039f0:	48000400 	.word	0x48000400
 80039f4:	48000800 	.word	0x48000800
 80039f8:	48000c00 	.word	0x48000c00
 80039fc:	48001000 	.word	0x48001000
 8003a00:	40010400 	.word	0x40010400

08003a04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	887b      	ldrh	r3, [r7, #2]
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
 8003a20:	e001      	b.n	8003a26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a22:	2300      	movs	r3, #0
 8003a24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <HAL_PWREx_EnableSDADC+0x38>)
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <HAL_PWREx_EnableSDADC+0x38>)
 8003a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a46:	61d3      	str	r3, [r2, #28]
 8003a48:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <HAL_PWREx_EnableSDADC+0x38>)
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_PWREx_EnableSDADC+0x3c>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4905      	ldr	r1, [pc, #20]	; (8003a70 <HAL_PWREx_EnableSDADC+0x3c>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]
}
 8003a60:	bf00      	nop
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40007000 	.word	0x40007000

08003a74 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a7e:	4b49      	ldr	r3, [pc, #292]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a48      	ldr	r2, [pc, #288]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6013      	str	r3, [r2, #0]

  /* Insure HSIRDY bit is set before writing default HSITRIM value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8003a8a:	f7fe fce3 	bl	8002454 <HAL_GetTick>
 8003a8e:	60f8      	str	r0, [r7, #12]

  /* Wait till HSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_DeInit+0x30>
  {
    if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a92:	f7fe fcdf 	bl	8002454 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e07b      	b.n	8003b9c <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003aa4:	4b3f      	ldr	r3, [pc, #252]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM default value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, RCC_CR_HSITRIM_4);
 8003ab0:	4b3c      	ldr	r3, [pc, #240]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003ab8:	4a3a      	ldr	r2, [pc, #232]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003abe:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2 | RCC_CFGR_MCO);
 8003ac0:	4b38      	ldr	r3, [pc, #224]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	4937      	ldr	r1, [pc, #220]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003ac6:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <HAL_RCC_DeInit+0x134>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	604b      	str	r3, [r1, #4]

  /* Insure HSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8003acc:	f7fe fcc2 	bl	8002454 <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_DeInit+0x76>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad4:	f7fe fcbe 	bl	8002454 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_DeInit+0x76>
    {
      return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e058      	b.n	8003b9c <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003aea:	4b2e      	ldr	r3, [pc, #184]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1ee      	bne.n	8003ad4 <HAL_RCC_DeInit+0x60>
    }
  }

  /* Update the SystemCoreClock global variable for HSI as system clock source */
  SystemCoreClock = HSI_VALUE;
 8003af6:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <HAL_RCC_DeInit+0x138>)
 8003af8:	4a2d      	ldr	r2, [pc, #180]	; (8003bb0 <HAL_RCC_DeInit+0x13c>)
 8003afa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003afc:	4b2d      	ldr	r3, [pc, #180]	; (8003bb4 <HAL_RCC_DeInit+0x140>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe fc63 	bl	80023cc <HAL_InitTick>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_DeInit+0x9c>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e045      	b.n	8003b9c <HAL_RCC_DeInit+0x128>
  }

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 8003b10:	4b24      	ldr	r3, [pc, #144]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a23      	ldr	r2, [pc, #140]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003b16:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003b20:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1f      	ldr	r2, [pc, #124]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b2a:	6013      	str	r3, [r2, #0]

  /* Insure PLLRDY is reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8003b2c:	f7fe fc92 	bl	8002454 <HAL_GetTick>
 8003b30:	60f8      	str	r0, [r7, #12]
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_DeInit+0xd2>
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fe fc8e 	bl	8002454 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_DeInit+0xd2>
    {
      return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e02a      	b.n	8003b9c <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_DeInit+0xc0>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 8003b58:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 8003b5e:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003b6a:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003b6e:	6093      	str	r3, [r2, #8]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8003b70:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <HAL_RCC_DeInit+0x130>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	609a      	str	r2, [r3, #8]
 8003b76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b7a:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	fa93 f3a3 	rbit	r3, r3
 8003b82:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b84:	687b      	ldr	r3, [r7, #4]

  /* Reset all CSR flags */
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8003b86:	fab3 f383 	clz	r3, r3
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <HAL_RCC_DeInit+0x144>)
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	461a      	mov	r2, r3
 8003b96:	2301      	movs	r3, #1
 8003b98:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	f8ffc00c 	.word	0xf8ffc00c
 8003bac:	20000004 	.word	0x20000004
 8003bb0:	007a1200 	.word	0x007a1200
 8003bb4:	20000008 	.word	0x20000008
 8003bb8:	10908120 	.word	0x10908120

08003bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bcc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d102      	bne.n	8003be2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f001 b823 	b.w	8004c28 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 817d 	beq.w	8003ef2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bf8:	4bbc      	ldr	r3, [pc, #752]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 030c 	and.w	r3, r3, #12
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d00c      	beq.n	8003c1e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c04:	4bb9      	ldr	r3, [pc, #740]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d15c      	bne.n	8003cca <HAL_RCC_OscConfig+0x10e>
 8003c10:	4bb6      	ldr	r3, [pc, #728]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1c:	d155      	bne.n	8003cca <HAL_RCC_OscConfig+0x10e>
 8003c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c22:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8003c32:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d102      	bne.n	8003c50 <HAL_RCC_OscConfig+0x94>
 8003c4a:	4ba8      	ldr	r3, [pc, #672]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	e015      	b.n	8003c7c <HAL_RCC_OscConfig+0xc0>
 8003c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c54:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c58:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003c5c:	fa93 f3a3 	rbit	r3, r3
 8003c60:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c68:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003c6c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003c78:	4b9c      	ldr	r3, [pc, #624]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c80:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003c84:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003c88:	fa92 f2a2 	rbit	r2, r2
 8003c8c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003c90:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003c94:	fab2 f282 	clz	r2, r2
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	f042 0220 	orr.w	r2, r2, #32
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	f002 021f 	and.w	r2, r2, #31
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 811f 	beq.w	8003ef0 <HAL_RCC_OscConfig+0x334>
 8003cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f040 8116 	bne.w	8003ef0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	f000 bfaf 	b.w	8004c28 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cda:	d106      	bne.n	8003cea <HAL_RCC_OscConfig+0x12e>
 8003cdc:	4b83      	ldr	r3, [pc, #524]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a82      	ldr	r2, [pc, #520]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	e036      	b.n	8003d58 <HAL_RCC_OscConfig+0x19c>
 8003cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x158>
 8003cfa:	4b7c      	ldr	r3, [pc, #496]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a7b      	ldr	r2, [pc, #492]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4b79      	ldr	r3, [pc, #484]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a78      	ldr	r2, [pc, #480]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e021      	b.n	8003d58 <HAL_RCC_OscConfig+0x19c>
 8003d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d24:	d10c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x184>
 8003d26:	4b71      	ldr	r3, [pc, #452]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a70      	ldr	r2, [pc, #448]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	4b6e      	ldr	r3, [pc, #440]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a6d      	ldr	r2, [pc, #436]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e00b      	b.n	8003d58 <HAL_RCC_OscConfig+0x19c>
 8003d40:	4b6a      	ldr	r3, [pc, #424]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a69      	ldr	r2, [pc, #420]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	4b67      	ldr	r3, [pc, #412]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a66      	ldr	r2, [pc, #408]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d56:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d58:	4b64      	ldr	r3, [pc, #400]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	f023 020f 	bic.w	r2, r3, #15
 8003d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	495f      	ldr	r1, [pc, #380]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d059      	beq.n	8003e36 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d82:	f7fe fb67 	bl	8002454 <HAL_GetTick>
 8003d86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8a:	e00a      	b.n	8003da2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d8c:	f7fe fb62 	bl	8002454 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b64      	cmp	r3, #100	; 0x64
 8003d9a:	d902      	bls.n	8003da2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	f000 bf43 	b.w	8004c28 <HAL_RCC_OscConfig+0x106c>
 8003da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003da6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003daa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003dae:	fa93 f3a3 	rbit	r3, r3
 8003db2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003db6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	fab3 f383 	clz	r3, r3
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d102      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x218>
 8003dce:	4b47      	ldr	r3, [pc, #284]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	e015      	b.n	8003e00 <HAL_RCC_OscConfig+0x244>
 8003dd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dd8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003de0:	fa93 f3a3 	rbit	r3, r3
 8003de4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003de8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dec:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003df0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003df4:	fa93 f3a3 	rbit	r3, r3
 8003df8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003dfc:	4b3b      	ldr	r3, [pc, #236]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e04:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003e08:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003e0c:	fa92 f2a2 	rbit	r2, r2
 8003e10:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003e14:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003e18:	fab2 f282 	clz	r2, r2
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	f042 0220 	orr.w	r2, r2, #32
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	f002 021f 	and.w	r2, r2, #31
 8003e28:	2101      	movs	r1, #1
 8003e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ab      	beq.n	8003d8c <HAL_RCC_OscConfig+0x1d0>
 8003e34:	e05d      	b.n	8003ef2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e36:	f7fe fb0d 	bl	8002454 <HAL_GetTick>
 8003e3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e40:	f7fe fb08 	bl	8002454 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b64      	cmp	r3, #100	; 0x64
 8003e4e:	d902      	bls.n	8003e56 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	f000 bee9 	b.w	8004c28 <HAL_RCC_OscConfig+0x106c>
 8003e56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e5a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003e62:	fa93 f3a3 	rbit	r3, r3
 8003e66:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003e6a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6e:	fab3 f383 	clz	r3, r3
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d102      	bne.n	8003e88 <HAL_RCC_OscConfig+0x2cc>
 8003e82:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	e015      	b.n	8003eb4 <HAL_RCC_OscConfig+0x2f8>
 8003e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e8c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003e94:	fa93 f3a3 	rbit	r3, r3
 8003e98:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003e9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ea0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003ea4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003eb0:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <HAL_RCC_OscConfig+0x330>)
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003eb8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003ebc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003ec0:	fa92 f2a2 	rbit	r2, r2
 8003ec4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003ec8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003ecc:	fab2 f282 	clz	r2, r2
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	f042 0220 	orr.w	r2, r2, #32
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	f002 021f 	and.w	r2, r2, #31
 8003edc:	2101      	movs	r1, #1
 8003ede:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1ab      	bne.n	8003e40 <HAL_RCC_OscConfig+0x284>
 8003ee8:	e003      	b.n	8003ef2 <HAL_RCC_OscConfig+0x336>
 8003eea:	bf00      	nop
 8003eec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 817d 	beq.w	8004202 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f08:	4ba6      	ldr	r3, [pc, #664]	; (80041a4 <HAL_RCC_OscConfig+0x5e8>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 030c 	and.w	r3, r3, #12
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f14:	4ba3      	ldr	r3, [pc, #652]	; (80041a4 <HAL_RCC_OscConfig+0x5e8>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 030c 	and.w	r3, r3, #12
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d172      	bne.n	8004006 <HAL_RCC_OscConfig+0x44a>
 8003f20:	4ba0      	ldr	r3, [pc, #640]	; (80041a4 <HAL_RCC_OscConfig+0x5e8>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d16c      	bne.n	8004006 <HAL_RCC_OscConfig+0x44a>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f32:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003f36:	fa93 f3a3 	rbit	r3, r3
 8003f3a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003f3e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f42:	fab3 f383 	clz	r3, r3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d102      	bne.n	8003f5c <HAL_RCC_OscConfig+0x3a0>
 8003f56:	4b93      	ldr	r3, [pc, #588]	; (80041a4 <HAL_RCC_OscConfig+0x5e8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	e013      	b.n	8003f84 <HAL_RCC_OscConfig+0x3c8>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f62:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003f66:	fa93 f3a3 	rbit	r3, r3
 8003f6a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003f6e:	2302      	movs	r3, #2
 8003f70:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003f74:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003f78:	fa93 f3a3 	rbit	r3, r3
 8003f7c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003f80:	4b88      	ldr	r3, [pc, #544]	; (80041a4 <HAL_RCC_OscConfig+0x5e8>)
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	2202      	movs	r2, #2
 8003f86:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003f8a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003f8e:	fa92 f2a2 	rbit	r2, r2
 8003f92:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003f96:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003f9a:	fab2 f282 	clz	r2, r2
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	f042 0220 	orr.w	r2, r2, #32
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	f002 021f 	and.w	r2, r2, #31
 8003faa:	2101      	movs	r1, #1
 8003fac:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCC_OscConfig+0x410>
 8003fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d002      	beq.n	8003fcc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f000 be2e 	b.w	8004c28 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fcc:	4b75      	ldr	r3, [pc, #468]	; (80041a4 <HAL_RCC_OscConfig+0x5e8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	21f8      	movs	r1, #248	; 0xf8
 8003fe2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003fea:	fa91 f1a1 	rbit	r1, r1
 8003fee:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003ff2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003ff6:	fab1 f181 	clz	r1, r1
 8003ffa:	b2c9      	uxtb	r1, r1
 8003ffc:	408b      	lsls	r3, r1
 8003ffe:	4969      	ldr	r1, [pc, #420]	; (80041a4 <HAL_RCC_OscConfig+0x5e8>)
 8004000:	4313      	orrs	r3, r2
 8004002:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004004:	e0fd      	b.n	8004202 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8088 	beq.w	8004128 <HAL_RCC_OscConfig+0x56c>
 8004018:	2301      	movs	r3, #1
 800401a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004022:	fa93 f3a3 	rbit	r3, r3
 8004026:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800402a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004038:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	461a      	mov	r2, r3
 8004040:	2301      	movs	r3, #1
 8004042:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004044:	f7fe fa06 	bl	8002454 <HAL_GetTick>
 8004048:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404c:	e00a      	b.n	8004064 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800404e:	f7fe fa01 	bl	8002454 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d902      	bls.n	8004064 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	f000 bde2 	b.w	8004c28 <HAL_RCC_OscConfig+0x106c>
 8004064:	2302      	movs	r3, #2
 8004066:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800406e:	fa93 f3a3 	rbit	r3, r3
 8004072:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004076:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b01      	cmp	r3, #1
 800408c:	d102      	bne.n	8004094 <HAL_RCC_OscConfig+0x4d8>
 800408e:	4b45      	ldr	r3, [pc, #276]	; (80041a4 <HAL_RCC_OscConfig+0x5e8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	e013      	b.n	80040bc <HAL_RCC_OscConfig+0x500>
 8004094:	2302      	movs	r3, #2
 8004096:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80040a6:	2302      	movs	r3, #2
 80040a8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80040ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80040b0:	fa93 f3a3 	rbit	r3, r3
 80040b4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80040b8:	4b3a      	ldr	r3, [pc, #232]	; (80041a4 <HAL_RCC_OscConfig+0x5e8>)
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	2202      	movs	r2, #2
 80040be:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80040c2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80040c6:	fa92 f2a2 	rbit	r2, r2
 80040ca:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80040ce:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80040d2:	fab2 f282 	clz	r2, r2
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	f042 0220 	orr.w	r2, r2, #32
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	f002 021f 	and.w	r2, r2, #31
 80040e2:	2101      	movs	r1, #1
 80040e4:	fa01 f202 	lsl.w	r2, r1, r2
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0af      	beq.n	800404e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ee:	4b2d      	ldr	r3, [pc, #180]	; (80041a4 <HAL_RCC_OscConfig+0x5e8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	21f8      	movs	r1, #248	; 0xf8
 8004104:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800410c:	fa91 f1a1 	rbit	r1, r1
 8004110:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004114:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004118:	fab1 f181 	clz	r1, r1
 800411c:	b2c9      	uxtb	r1, r1
 800411e:	408b      	lsls	r3, r1
 8004120:	4920      	ldr	r1, [pc, #128]	; (80041a4 <HAL_RCC_OscConfig+0x5e8>)
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]
 8004126:	e06c      	b.n	8004202 <HAL_RCC_OscConfig+0x646>
 8004128:	2301      	movs	r3, #1
 800412a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800413a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004148:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	461a      	mov	r2, r3
 8004150:	2300      	movs	r3, #0
 8004152:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fe f97e 	bl	8002454 <HAL_GetTick>
 8004158:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800415c:	e00a      	b.n	8004174 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800415e:	f7fe f979 	bl	8002454 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d902      	bls.n	8004174 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	f000 bd5a 	b.w	8004c28 <HAL_RCC_OscConfig+0x106c>
 8004174:	2302      	movs	r3, #2
 8004176:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d104      	bne.n	80041a8 <HAL_RCC_OscConfig+0x5ec>
 800419e:	4b01      	ldr	r3, [pc, #4]	; (80041a4 <HAL_RCC_OscConfig+0x5e8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	e015      	b.n	80041d0 <HAL_RCC_OscConfig+0x614>
 80041a4:	40021000 	.word	0x40021000
 80041a8:	2302      	movs	r3, #2
 80041aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041b2:	fa93 f3a3 	rbit	r3, r3
 80041b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80041ba:	2302      	movs	r3, #2
 80041bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80041c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041c4:	fa93 f3a3 	rbit	r3, r3
 80041c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80041cc:	4bc8      	ldr	r3, [pc, #800]	; (80044f0 <HAL_RCC_OscConfig+0x934>)
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	2202      	movs	r2, #2
 80041d2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80041d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80041da:	fa92 f2a2 	rbit	r2, r2
 80041de:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80041e2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80041e6:	fab2 f282 	clz	r2, r2
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	f042 0220 	orr.w	r2, r2, #32
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	f002 021f 	and.w	r2, r2, #31
 80041f6:	2101      	movs	r1, #1
 80041f8:	fa01 f202 	lsl.w	r2, r1, r2
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1ad      	bne.n	800415e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004206:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8110 	beq.w	8004438 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d079      	beq.n	800431c <HAL_RCC_OscConfig+0x760>
 8004228:	2301      	movs	r3, #1
 800422a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004232:	fa93 f3a3 	rbit	r3, r3
 8004236:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800423a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	4bab      	ldr	r3, [pc, #684]	; (80044f4 <HAL_RCC_OscConfig+0x938>)
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	461a      	mov	r2, r3
 800424e:	2301      	movs	r3, #1
 8004250:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004252:	f7fe f8ff 	bl	8002454 <HAL_GetTick>
 8004256:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425a:	e00a      	b.n	8004272 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800425c:	f7fe f8fa 	bl	8002454 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d902      	bls.n	8004272 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	f000 bcdb 	b.w	8004c28 <HAL_RCC_OscConfig+0x106c>
 8004272:	2302      	movs	r3, #2
 8004274:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004278:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800427c:	fa93 f3a3 	rbit	r3, r3
 8004280:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004288:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800428c:	2202      	movs	r2, #2
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004294:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	fa93 f2a3 	rbit	r2, r3
 800429e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042b0:	2202      	movs	r2, #2
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	fa93 f2a3 	rbit	r2, r3
 80042c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042cc:	4b88      	ldr	r3, [pc, #544]	; (80044f0 <HAL_RCC_OscConfig+0x934>)
 80042ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80042d8:	2102      	movs	r1, #2
 80042da:	6019      	str	r1, [r3, #0]
 80042dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	fa93 f1a3 	rbit	r1, r3
 80042ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042f2:	6019      	str	r1, [r3, #0]
  return result;
 80042f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	fab3 f383 	clz	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	2101      	movs	r1, #1
 8004310:	fa01 f303 	lsl.w	r3, r1, r3
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0a0      	beq.n	800425c <HAL_RCC_OscConfig+0x6a0>
 800431a:	e08d      	b.n	8004438 <HAL_RCC_OscConfig+0x87c>
 800431c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004320:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004324:	2201      	movs	r2, #1
 8004326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800432c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	fa93 f2a3 	rbit	r2, r3
 8004336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800433a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800433e:	601a      	str	r2, [r3, #0]
  return result;
 8004340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004344:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004348:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800434a:	fab3 f383 	clz	r3, r3
 800434e:	b2db      	uxtb	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	4b68      	ldr	r3, [pc, #416]	; (80044f4 <HAL_RCC_OscConfig+0x938>)
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	461a      	mov	r2, r3
 800435a:	2300      	movs	r3, #0
 800435c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435e:	f7fe f879 	bl	8002454 <HAL_GetTick>
 8004362:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004366:	e00a      	b.n	800437e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004368:	f7fe f874 	bl	8002454 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d902      	bls.n	800437e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	f000 bc55 	b.w	8004c28 <HAL_RCC_OscConfig+0x106c>
 800437e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004382:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004386:	2202      	movs	r2, #2
 8004388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800438e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	fa93 f2a3 	rbit	r2, r3
 8004398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800439c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043aa:	2202      	movs	r2, #2
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	fa93 f2a3 	rbit	r2, r3
 80043bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043ce:	2202      	movs	r2, #2
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	fa93 f2a3 	rbit	r2, r3
 80043e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80043e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ea:	4b41      	ldr	r3, [pc, #260]	; (80044f0 <HAL_RCC_OscConfig+0x934>)
 80043ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80043f6:	2102      	movs	r1, #2
 80043f8:	6019      	str	r1, [r3, #0]
 80043fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043fe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	fa93 f1a3 	rbit	r1, r3
 8004408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800440c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004410:	6019      	str	r1, [r3, #0]
  return result;
 8004412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004416:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	fab3 f383 	clz	r3, r3
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	2101      	movs	r1, #1
 800442e:	fa01 f303 	lsl.w	r3, r1, r3
 8004432:	4013      	ands	r3, r2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d197      	bne.n	8004368 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800443c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 81a1 	beq.w	8004790 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444e:	2300      	movs	r3, #0
 8004450:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004454:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <HAL_RCC_OscConfig+0x934>)
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d116      	bne.n	800448e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004460:	4b23      	ldr	r3, [pc, #140]	; (80044f0 <HAL_RCC_OscConfig+0x934>)
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	4a22      	ldr	r2, [pc, #136]	; (80044f0 <HAL_RCC_OscConfig+0x934>)
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446a:	61d3      	str	r3, [r2, #28]
 800446c:	4b20      	ldr	r3, [pc, #128]	; (80044f0 <HAL_RCC_OscConfig+0x934>)
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004478:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004482:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004486:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004488:	2301      	movs	r3, #1
 800448a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448e:	4b1a      	ldr	r3, [pc, #104]	; (80044f8 <HAL_RCC_OscConfig+0x93c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004496:	2b00      	cmp	r3, #0
 8004498:	d11a      	bne.n	80044d0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800449a:	4b17      	ldr	r3, [pc, #92]	; (80044f8 <HAL_RCC_OscConfig+0x93c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a16      	ldr	r2, [pc, #88]	; (80044f8 <HAL_RCC_OscConfig+0x93c>)
 80044a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044a6:	f7fd ffd5 	bl	8002454 <HAL_GetTick>
 80044aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ae:	e009      	b.n	80044c4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b0:	f7fd ffd0 	bl	8002454 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b64      	cmp	r3, #100	; 0x64
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e3b1      	b.n	8004c28 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c4:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <HAL_RCC_OscConfig+0x93c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ef      	beq.n	80044b0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d10d      	bne.n	80044fc <HAL_RCC_OscConfig+0x940>
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <HAL_RCC_OscConfig+0x934>)
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	4a02      	ldr	r2, [pc, #8]	; (80044f0 <HAL_RCC_OscConfig+0x934>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	6213      	str	r3, [r2, #32]
 80044ec:	e03c      	b.n	8004568 <HAL_RCC_OscConfig+0x9ac>
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000
 80044f4:	10908120 	.word	0x10908120
 80044f8:	40007000 	.word	0x40007000
 80044fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004500:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10c      	bne.n	8004526 <HAL_RCC_OscConfig+0x96a>
 800450c:	4bc1      	ldr	r3, [pc, #772]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	4ac0      	ldr	r2, [pc, #768]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	6213      	str	r3, [r2, #32]
 8004518:	4bbe      	ldr	r3, [pc, #760]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	4abd      	ldr	r2, [pc, #756]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 800451e:	f023 0304 	bic.w	r3, r3, #4
 8004522:	6213      	str	r3, [r2, #32]
 8004524:	e020      	b.n	8004568 <HAL_RCC_OscConfig+0x9ac>
 8004526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2b05      	cmp	r3, #5
 8004534:	d10c      	bne.n	8004550 <HAL_RCC_OscConfig+0x994>
 8004536:	4bb7      	ldr	r3, [pc, #732]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	4ab6      	ldr	r2, [pc, #728]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 800453c:	f043 0304 	orr.w	r3, r3, #4
 8004540:	6213      	str	r3, [r2, #32]
 8004542:	4bb4      	ldr	r3, [pc, #720]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	4ab3      	ldr	r2, [pc, #716]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	6213      	str	r3, [r2, #32]
 800454e:	e00b      	b.n	8004568 <HAL_RCC_OscConfig+0x9ac>
 8004550:	4bb0      	ldr	r3, [pc, #704]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4aaf      	ldr	r2, [pc, #700]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	6213      	str	r3, [r2, #32]
 800455c:	4bad      	ldr	r3, [pc, #692]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4aac      	ldr	r2, [pc, #688]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 8004562:	f023 0304 	bic.w	r3, r3, #4
 8004566:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800456c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 8081 	beq.w	800467c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457a:	f7fd ff6b 	bl	8002454 <HAL_GetTick>
 800457e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004582:	e00b      	b.n	800459c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004584:	f7fd ff66 	bl	8002454 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	f241 3288 	movw	r2, #5000	; 0x1388
 8004594:	4293      	cmp	r3, r2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e345      	b.n	8004c28 <HAL_RCC_OscConfig+0x106c>
 800459c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80045a4:	2202      	movs	r2, #2
 80045a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ac:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	fa93 f2a3 	rbit	r2, r3
 80045b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80045c8:	2202      	movs	r2, #2
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	fa93 f2a3 	rbit	r2, r3
 80045da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045de:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80045e2:	601a      	str	r2, [r3, #0]
  return result;
 80045e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80045ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ee:	fab3 f383 	clz	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	f043 0302 	orr.w	r3, r3, #2
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d102      	bne.n	8004608 <HAL_RCC_OscConfig+0xa4c>
 8004602:	4b84      	ldr	r3, [pc, #528]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	e013      	b.n	8004630 <HAL_RCC_OscConfig+0xa74>
 8004608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800460c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004610:	2202      	movs	r2, #2
 8004612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004618:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	fa93 f2a3 	rbit	r2, r3
 8004622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004626:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	4b79      	ldr	r3, [pc, #484]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004634:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004638:	2102      	movs	r1, #2
 800463a:	6011      	str	r1, [r2, #0]
 800463c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004640:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	fa92 f1a2 	rbit	r1, r2
 800464a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800464e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004652:	6011      	str	r1, [r2, #0]
  return result;
 8004654:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004658:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	fab2 f282 	clz	r2, r2
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	f002 021f 	and.w	r2, r2, #31
 800466e:	2101      	movs	r1, #1
 8004670:	fa01 f202 	lsl.w	r2, r1, r2
 8004674:	4013      	ands	r3, r2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d084      	beq.n	8004584 <HAL_RCC_OscConfig+0x9c8>
 800467a:	e07f      	b.n	800477c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800467c:	f7fd feea 	bl	8002454 <HAL_GetTick>
 8004680:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004684:	e00b      	b.n	800469e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004686:	f7fd fee5 	bl	8002454 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	; 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e2c4      	b.n	8004c28 <HAL_RCC_OscConfig+0x106c>
 800469e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80046a6:	2202      	movs	r2, #2
 80046a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ae:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	fa93 f2a3 	rbit	r2, r3
 80046b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046bc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80046ca:	2202      	movs	r2, #2
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	fa93 f2a3 	rbit	r2, r3
 80046dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80046e4:	601a      	str	r2, [r3, #0]
  return result;
 80046e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ea:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80046ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f0:	fab3 f383 	clz	r3, r3
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	f043 0302 	orr.w	r3, r3, #2
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d102      	bne.n	800470a <HAL_RCC_OscConfig+0xb4e>
 8004704:	4b43      	ldr	r3, [pc, #268]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	e013      	b.n	8004732 <HAL_RCC_OscConfig+0xb76>
 800470a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004712:	2202      	movs	r2, #2
 8004714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800471a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	fa93 f2a3 	rbit	r2, r3
 8004724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004728:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	4b39      	ldr	r3, [pc, #228]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004736:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800473a:	2102      	movs	r1, #2
 800473c:	6011      	str	r1, [r2, #0]
 800473e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004742:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004746:	6812      	ldr	r2, [r2, #0]
 8004748:	fa92 f1a2 	rbit	r1, r2
 800474c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004750:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004754:	6011      	str	r1, [r2, #0]
  return result;
 8004756:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800475a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	fab2 f282 	clz	r2, r2
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	f002 021f 	and.w	r2, r2, #31
 8004770:	2101      	movs	r1, #1
 8004772:	fa01 f202 	lsl.w	r2, r1, r2
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d184      	bne.n	8004686 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800477c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004780:	2b01      	cmp	r3, #1
 8004782:	d105      	bne.n	8004790 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004784:	4b23      	ldr	r3, [pc, #140]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	4a22      	ldr	r2, [pc, #136]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 800478a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800478e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004794:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 8242 	beq.w	8004c26 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a2:	4b1c      	ldr	r3, [pc, #112]	; (8004814 <HAL_RCC_OscConfig+0xc58>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f003 030c 	and.w	r3, r3, #12
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	f000 8213 	beq.w	8004bd6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	f040 8162 	bne.w	8004a86 <HAL_RCC_OscConfig+0xeca>
 80047c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80047ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	fa93 f2a3 	rbit	r2, r3
 80047de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047e6:	601a      	str	r2, [r3, #0]
  return result;
 80047e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ec:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80047f0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	461a      	mov	r2, r3
 8004804:	2300      	movs	r3, #0
 8004806:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fd fe24 	bl	8002454 <HAL_GetTick>
 800480c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004810:	e00c      	b.n	800482c <HAL_RCC_OscConfig+0xc70>
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004818:	f7fd fe1c 	bl	8002454 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e1fd      	b.n	8004c28 <HAL_RCC_OscConfig+0x106c>
 800482c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004830:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004834:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800483e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	fa93 f2a3 	rbit	r2, r3
 8004848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800484c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004850:	601a      	str	r2, [r3, #0]
  return result;
 8004852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004856:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800485a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800485c:	fab3 f383 	clz	r3, r3
 8004860:	b2db      	uxtb	r3, r3
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	b2db      	uxtb	r3, r3
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	d102      	bne.n	8004876 <HAL_RCC_OscConfig+0xcba>
 8004870:	4bb0      	ldr	r3, [pc, #704]	; (8004b34 <HAL_RCC_OscConfig+0xf78>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	e027      	b.n	80048c6 <HAL_RCC_OscConfig+0xd0a>
 8004876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800487a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800487e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004888:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	fa93 f2a3 	rbit	r2, r3
 8004892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004896:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80048a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ae:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	fa93 f2a3 	rbit	r2, r3
 80048b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048bc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	4b9c      	ldr	r3, [pc, #624]	; (8004b34 <HAL_RCC_OscConfig+0xf78>)
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048ca:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80048ce:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80048d2:	6011      	str	r1, [r2, #0]
 80048d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048d8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80048dc:	6812      	ldr	r2, [r2, #0]
 80048de:	fa92 f1a2 	rbit	r1, r2
 80048e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048e6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80048ea:	6011      	str	r1, [r2, #0]
  return result;
 80048ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048f0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	fab2 f282 	clz	r2, r2
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	f042 0220 	orr.w	r2, r2, #32
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	f002 021f 	and.w	r2, r2, #31
 8004906:	2101      	movs	r1, #1
 8004908:	fa01 f202 	lsl.w	r2, r1, r2
 800490c:	4013      	ands	r3, r2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d182      	bne.n	8004818 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004912:	4b88      	ldr	r3, [pc, #544]	; (8004b34 <HAL_RCC_OscConfig+0xf78>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800491a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800491e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800492a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	430b      	orrs	r3, r1
 8004934:	497f      	ldr	r1, [pc, #508]	; (8004b34 <HAL_RCC_OscConfig+0xf78>)
 8004936:	4313      	orrs	r3, r2
 8004938:	604b      	str	r3, [r1, #4]
 800493a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004942:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800494c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	fa93 f2a3 	rbit	r2, r3
 8004956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800495e:	601a      	str	r2, [r3, #0]
  return result;
 8004960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004964:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004968:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800496a:	fab3 f383 	clz	r3, r3
 800496e:	b2db      	uxtb	r3, r3
 8004970:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004974:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	461a      	mov	r2, r3
 800497c:	2301      	movs	r3, #1
 800497e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fd fd68 	bl	8002454 <HAL_GetTick>
 8004984:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004988:	e009      	b.n	800499e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800498a:	f7fd fd63 	bl	8002454 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e144      	b.n	8004c28 <HAL_RCC_OscConfig+0x106c>
 800499e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80049a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	fa93 f2a3 	rbit	r2, r3
 80049ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049be:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049c2:	601a      	str	r2, [r3, #0]
  return result;
 80049c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049ce:	fab3 f383 	clz	r3, r3
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d102      	bne.n	80049e8 <HAL_RCC_OscConfig+0xe2c>
 80049e2:	4b54      	ldr	r3, [pc, #336]	; (8004b34 <HAL_RCC_OscConfig+0xf78>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	e027      	b.n	8004a38 <HAL_RCC_OscConfig+0xe7c>
 80049e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ec:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80049f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	fa93 f2a3 	rbit	r2, r3
 8004a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a08:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a12:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a20:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	fa93 f2a3 	rbit	r2, r3
 8004a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	4b3f      	ldr	r3, [pc, #252]	; (8004b34 <HAL_RCC_OscConfig+0xf78>)
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a3c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a44:	6011      	str	r1, [r2, #0]
 8004a46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a4a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	fa92 f1a2 	rbit	r1, r2
 8004a54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a58:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a5c:	6011      	str	r1, [r2, #0]
  return result;
 8004a5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a62:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a66:	6812      	ldr	r2, [r2, #0]
 8004a68:	fab2 f282 	clz	r2, r2
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	f042 0220 	orr.w	r2, r2, #32
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	f002 021f 	and.w	r2, r2, #31
 8004a78:	2101      	movs	r1, #1
 8004a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a7e:	4013      	ands	r3, r2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d082      	beq.n	800498a <HAL_RCC_OscConfig+0xdce>
 8004a84:	e0cf      	b.n	8004c26 <HAL_RCC_OscConfig+0x106a>
 8004a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004a8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a98:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	fa93 f2a3 	rbit	r2, r3
 8004aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004aaa:	601a      	str	r2, [r3, #0]
  return result;
 8004aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004ab4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab6:	fab3 f383 	clz	r3, r3
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ac0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	2300      	movs	r3, #0
 8004aca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fd fcc2 	bl	8002454 <HAL_GetTick>
 8004ad0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad4:	e009      	b.n	8004aea <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad6:	f7fd fcbd 	bl	8002454 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e09e      	b.n	8004c28 <HAL_RCC_OscConfig+0x106c>
 8004aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aee:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004af2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004afc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	fa93 f2a3 	rbit	r2, r3
 8004b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b0a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b0e:	601a      	str	r2, [r3, #0]
  return result;
 8004b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b14:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b1a:	fab3 f383 	clz	r3, r3
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f043 0301 	orr.w	r3, r3, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d104      	bne.n	8004b38 <HAL_RCC_OscConfig+0xf7c>
 8004b2e:	4b01      	ldr	r3, [pc, #4]	; (8004b34 <HAL_RCC_OscConfig+0xf78>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	e029      	b.n	8004b88 <HAL_RCC_OscConfig+0xfcc>
 8004b34:	40021000 	.word	0x40021000
 8004b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	fa93 f2a3 	rbit	r2, r3
 8004b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b58:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b62:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b70:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	fa93 f2a3 	rbit	r2, r3
 8004b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b7e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	4b2b      	ldr	r3, [pc, #172]	; (8004c34 <HAL_RCC_OscConfig+0x1078>)
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b8c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004b90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b94:	6011      	str	r1, [r2, #0]
 8004b96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b9a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	fa92 f1a2 	rbit	r1, r2
 8004ba4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ba8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004bac:	6011      	str	r1, [r2, #0]
  return result;
 8004bae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bb2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004bb6:	6812      	ldr	r2, [r2, #0]
 8004bb8:	fab2 f282 	clz	r2, r2
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	f042 0220 	orr.w	r2, r2, #32
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	f002 021f 	and.w	r2, r2, #31
 8004bc8:	2101      	movs	r1, #1
 8004bca:	fa01 f202 	lsl.w	r2, r1, r2
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d180      	bne.n	8004ad6 <HAL_RCC_OscConfig+0xf1a>
 8004bd4:	e027      	b.n	8004c26 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e01e      	b.n	8004c28 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bea:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <HAL_RCC_OscConfig+0x1078>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004bf2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004bf6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d10b      	bne.n	8004c22 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004c0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004c0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d001      	beq.n	8004c26 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e000      	b.n	8004c28 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000

08004c38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b09e      	sub	sp, #120	; 0x78
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e162      	b.n	8004f16 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c50:	4b90      	ldr	r3, [pc, #576]	; (8004e94 <HAL_RCC_ClockConfig+0x25c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d910      	bls.n	8004c80 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5e:	4b8d      	ldr	r3, [pc, #564]	; (8004e94 <HAL_RCC_ClockConfig+0x25c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f023 0207 	bic.w	r2, r3, #7
 8004c66:	498b      	ldr	r1, [pc, #556]	; (8004e94 <HAL_RCC_ClockConfig+0x25c>)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6e:	4b89      	ldr	r3, [pc, #548]	; (8004e94 <HAL_RCC_ClockConfig+0x25c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e14a      	b.n	8004f16 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d008      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c8c:	4b82      	ldr	r3, [pc, #520]	; (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	497f      	ldr	r1, [pc, #508]	; (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 80dc 	beq.w	8004e64 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d13c      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xf6>
 8004cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cb8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cbc:	fa93 f3a3 	rbit	r3, r3
 8004cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc4:	fab3 f383 	clz	r3, r3
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d102      	bne.n	8004cde <HAL_RCC_ClockConfig+0xa6>
 8004cd8:	4b6f      	ldr	r3, [pc, #444]	; (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	e00f      	b.n	8004cfe <HAL_RCC_ClockConfig+0xc6>
 8004cde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ce2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ce6:	fa93 f3a3 	rbit	r3, r3
 8004cea:	667b      	str	r3, [r7, #100]	; 0x64
 8004cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8004cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cf4:	fa93 f3a3 	rbit	r3, r3
 8004cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cfa:	4b67      	ldr	r3, [pc, #412]	; (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d02:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d06:	fa92 f2a2 	rbit	r2, r2
 8004d0a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004d0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d0e:	fab2 f282 	clz	r2, r2
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	f042 0220 	orr.w	r2, r2, #32
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	f002 021f 	and.w	r2, r2, #31
 8004d1e:	2101      	movs	r1, #1
 8004d20:	fa01 f202 	lsl.w	r2, r1, r2
 8004d24:	4013      	ands	r3, r2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d17b      	bne.n	8004e22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e0f3      	b.n	8004f16 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d13c      	bne.n	8004db0 <HAL_RCC_ClockConfig+0x178>
 8004d36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d3e:	fa93 f3a3 	rbit	r3, r3
 8004d42:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d46:	fab3 f383 	clz	r3, r3
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d102      	bne.n	8004d60 <HAL_RCC_ClockConfig+0x128>
 8004d5a:	4b4f      	ldr	r3, [pc, #316]	; (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	e00f      	b.n	8004d80 <HAL_RCC_ClockConfig+0x148>
 8004d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d64:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d68:	fa93 f3a3 	rbit	r3, r3
 8004d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d72:	643b      	str	r3, [r7, #64]	; 0x40
 8004d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d76:	fa93 f3a3 	rbit	r3, r3
 8004d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d7c:	4b46      	ldr	r3, [pc, #280]	; (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d84:	63ba      	str	r2, [r7, #56]	; 0x38
 8004d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d88:	fa92 f2a2 	rbit	r2, r2
 8004d8c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d90:	fab2 f282 	clz	r2, r2
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	f042 0220 	orr.w	r2, r2, #32
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	f002 021f 	and.w	r2, r2, #31
 8004da0:	2101      	movs	r1, #1
 8004da2:	fa01 f202 	lsl.w	r2, r1, r2
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d13a      	bne.n	8004e22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0b2      	b.n	8004f16 <HAL_RCC_ClockConfig+0x2de>
 8004db0:	2302      	movs	r3, #2
 8004db2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	fa93 f3a3 	rbit	r3, r3
 8004dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dbe:	fab3 f383 	clz	r3, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d102      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x1a0>
 8004dd2:	4b31      	ldr	r3, [pc, #196]	; (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	e00d      	b.n	8004df4 <HAL_RCC_ClockConfig+0x1bc>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	fa93 f3a3 	rbit	r3, r3
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
 8004de4:	2302      	movs	r3, #2
 8004de6:	623b      	str	r3, [r7, #32]
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	fa93 f3a3 	rbit	r3, r3
 8004dee:	61fb      	str	r3, [r7, #28]
 8004df0:	4b29      	ldr	r3, [pc, #164]	; (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	2202      	movs	r2, #2
 8004df6:	61ba      	str	r2, [r7, #24]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	fa92 f2a2 	rbit	r2, r2
 8004dfe:	617a      	str	r2, [r7, #20]
  return result;
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	fab2 f282 	clz	r2, r2
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	f042 0220 	orr.w	r2, r2, #32
 8004e0c:	b2d2      	uxtb	r2, r2
 8004e0e:	f002 021f 	and.w	r2, r2, #31
 8004e12:	2101      	movs	r1, #1
 8004e14:	fa01 f202 	lsl.w	r2, r1, r2
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e079      	b.n	8004f16 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e22:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f023 0203 	bic.w	r2, r3, #3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	491a      	ldr	r1, [pc, #104]	; (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e34:	f7fd fb0e 	bl	8002454 <HAL_GetTick>
 8004e38:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3a:	e00a      	b.n	8004e52 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e3c:	f7fd fb0a 	bl	8002454 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e061      	b.n	8004f16 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <HAL_RCC_ClockConfig+0x260>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f003 020c 	and.w	r2, r3, #12
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d1eb      	bne.n	8004e3c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e64:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <HAL_RCC_ClockConfig+0x25c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d214      	bcs.n	8004e9c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e72:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <HAL_RCC_ClockConfig+0x25c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f023 0207 	bic.w	r2, r3, #7
 8004e7a:	4906      	ldr	r1, [pc, #24]	; (8004e94 <HAL_RCC_ClockConfig+0x25c>)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e82:	4b04      	ldr	r3, [pc, #16]	; (8004e94 <HAL_RCC_ClockConfig+0x25c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e040      	b.n	8004f16 <HAL_RCC_ClockConfig+0x2de>
 8004e94:	40022000 	.word	0x40022000
 8004e98:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ea8:	4b1d      	ldr	r3, [pc, #116]	; (8004f20 <HAL_RCC_ClockConfig+0x2e8>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	491a      	ldr	r1, [pc, #104]	; (8004f20 <HAL_RCC_ClockConfig+0x2e8>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d009      	beq.n	8004eda <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ec6:	4b16      	ldr	r3, [pc, #88]	; (8004f20 <HAL_RCC_ClockConfig+0x2e8>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	4912      	ldr	r1, [pc, #72]	; (8004f20 <HAL_RCC_ClockConfig+0x2e8>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004eda:	f000 f829 	bl	8004f30 <HAL_RCC_GetSysClockFreq>
 8004ede:	4601      	mov	r1, r0
 8004ee0:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <HAL_RCC_ClockConfig+0x2e8>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ee8:	22f0      	movs	r2, #240	; 0xf0
 8004eea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	fa92 f2a2 	rbit	r2, r2
 8004ef2:	60fa      	str	r2, [r7, #12]
  return result;
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	fab2 f282 	clz	r2, r2
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	40d3      	lsrs	r3, r2
 8004efe:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <HAL_RCC_ClockConfig+0x2ec>)
 8004f00:	5cd3      	ldrb	r3, [r2, r3]
 8004f02:	fa21 f303 	lsr.w	r3, r1, r3
 8004f06:	4a08      	ldr	r2, [pc, #32]	; (8004f28 <HAL_RCC_ClockConfig+0x2f0>)
 8004f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004f0a:	4b08      	ldr	r3, [pc, #32]	; (8004f2c <HAL_RCC_ClockConfig+0x2f4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fd fa5c 	bl	80023cc <HAL_InitTick>
  
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3778      	adds	r7, #120	; 0x78
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40021000 	.word	0x40021000
 8004f24:	08007880 	.word	0x08007880
 8004f28:	20000004 	.word	0x20000004
 8004f2c:	20000008 	.word	0x20000008

08004f30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60bb      	str	r3, [r7, #8]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	2300      	movs	r3, #0
 8004f44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004f4a:	4b1e      	ldr	r3, [pc, #120]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d002      	beq.n	8004f60 <HAL_RCC_GetSysClockFreq+0x30>
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d003      	beq.n	8004f66 <HAL_RCC_GetSysClockFreq+0x36>
 8004f5e:	e026      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f60:	4b19      	ldr	r3, [pc, #100]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f62:	613b      	str	r3, [r7, #16]
      break;
 8004f64:	e026      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	0c9b      	lsrs	r3, r3, #18
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	4a17      	ldr	r2, [pc, #92]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f70:	5cd3      	ldrb	r3, [r2, r3]
 8004f72:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004f74:	4b13      	ldr	r3, [pc, #76]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	4a14      	ldr	r2, [pc, #80]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f7e:	5cd3      	ldrb	r3, [r2, r3]
 8004f80:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d008      	beq.n	8004f9e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004f8c:	4a0e      	ldr	r2, [pc, #56]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	fb02 f303 	mul.w	r3, r2, r3
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	e004      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a0c      	ldr	r2, [pc, #48]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fa2:	fb02 f303 	mul.w	r3, r2, r3
 8004fa6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	613b      	str	r3, [r7, #16]
      break;
 8004fac:	e002      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fae:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004fb0:	613b      	str	r3, [r7, #16]
      break;
 8004fb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fb4:	693b      	ldr	r3, [r7, #16]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	016e3600 	.word	0x016e3600
 8004fcc:	08007898 	.word	0x08007898
 8004fd0:	080078a8 	.word	0x080078a8
 8004fd4:	003d0900 	.word	0x003d0900
 8004fd8:	007a1200 	.word	0x007a1200

08004fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe0:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000004 	.word	0x20000004

08004ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004ffa:	f7ff ffef 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8004ffe:	4601      	mov	r1, r0
 8005000:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005008:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800500c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	fa92 f2a2 	rbit	r2, r2
 8005014:	603a      	str	r2, [r7, #0]
  return result;
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	fab2 f282 	clz	r2, r2
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	40d3      	lsrs	r3, r2
 8005020:	4a04      	ldr	r2, [pc, #16]	; (8005034 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005022:	5cd3      	ldrb	r3, [r2, r3]
 8005024:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005028:	4618      	mov	r0, r3
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40021000 	.word	0x40021000
 8005034:	08007890 	.word	0x08007890

08005038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800503e:	f7ff ffcd 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8005042:	4601      	mov	r1, r0
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800504c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005050:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	fa92 f2a2 	rbit	r2, r2
 8005058:	603a      	str	r2, [r7, #0]
  return result;
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	fab2 f282 	clz	r2, r2
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	40d3      	lsrs	r3, r2
 8005064:	4a04      	ldr	r2, [pc, #16]	; (8005078 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005066:	5cd3      	ldrb	r3, [r2, r3]
 8005068:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40021000 	.word	0x40021000
 8005078:	08007890 	.word	0x08007890

0800507c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b092      	sub	sp, #72	; 0x48
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005088:	2300      	movs	r3, #0
 800508a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800508c:	2300      	movs	r3, #0
 800508e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 80d4 	beq.w	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050a0:	4b4e      	ldr	r3, [pc, #312]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10e      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ac:	4b4b      	ldr	r3, [pc, #300]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	4a4a      	ldr	r2, [pc, #296]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b6:	61d3      	str	r3, [r2, #28]
 80050b8:	4b48      	ldr	r3, [pc, #288]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ca:	4b45      	ldr	r3, [pc, #276]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d118      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050d6:	4b42      	ldr	r3, [pc, #264]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a41      	ldr	r2, [pc, #260]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050e2:	f7fd f9b7 	bl	8002454 <HAL_GetTick>
 80050e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e8:	e008      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ea:	f7fd f9b3 	bl	8002454 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b64      	cmp	r3, #100	; 0x64
 80050f6:	d901      	bls.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e12d      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fc:	4b38      	ldr	r3, [pc, #224]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f0      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005108:	4b34      	ldr	r3, [pc, #208]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 8084 	beq.w	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005122:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005124:	429a      	cmp	r2, r3
 8005126:	d07c      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005128:	4b2c      	ldr	r3, [pc, #176]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005130:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005132:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005136:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	fa93 f3a3 	rbit	r3, r3
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005142:	fab3 f383 	clz	r3, r3
 8005146:	b2db      	uxtb	r3, r3
 8005148:	461a      	mov	r2, r3
 800514a:	4b26      	ldr	r3, [pc, #152]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	461a      	mov	r2, r3
 8005152:	2301      	movs	r3, #1
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800515a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515e:	fa93 f3a3 	rbit	r3, r3
 8005162:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005166:	fab3 f383 	clz	r3, r3
 800516a:	b2db      	uxtb	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	4b1d      	ldr	r3, [pc, #116]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	461a      	mov	r2, r3
 8005176:	2300      	movs	r3, #0
 8005178:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800517a:	4a18      	ldr	r2, [pc, #96]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800517c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800517e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d04b      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518a:	f7fd f963 	bl	8002454 <HAL_GetTick>
 800518e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005190:	e00a      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005192:	f7fd f95f 	bl	8002454 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e0d7      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80051a8:	2302      	movs	r3, #2
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	fa93 f3a3 	rbit	r3, r3
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
 80051b4:	2302      	movs	r3, #2
 80051b6:	623b      	str	r3, [r7, #32]
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	fa93 f3a3 	rbit	r3, r3
 80051be:	61fb      	str	r3, [r7, #28]
  return result;
 80051c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c2:	fab3 f383 	clz	r3, r3
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f043 0302 	orr.w	r3, r3, #2
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d108      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80051d6:	4b01      	ldr	r3, [pc, #4]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	e00d      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80051dc:	40021000 	.word	0x40021000
 80051e0:	40007000 	.word	0x40007000
 80051e4:	10908100 	.word	0x10908100
 80051e8:	2302      	movs	r3, #2
 80051ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	fa93 f3a3 	rbit	r3, r3
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	4b5a      	ldr	r3, [pc, #360]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	2202      	movs	r2, #2
 80051fa:	613a      	str	r2, [r7, #16]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	fa92 f2a2 	rbit	r2, r2
 8005202:	60fa      	str	r2, [r7, #12]
  return result;
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	fab2 f282 	clz	r2, r2
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	f002 021f 	and.w	r2, r2, #31
 8005216:	2101      	movs	r1, #1
 8005218:	fa01 f202 	lsl.w	r2, r1, r2
 800521c:	4013      	ands	r3, r2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0b7      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005222:	4b4f      	ldr	r3, [pc, #316]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	494c      	ldr	r1, [pc, #304]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005230:	4313      	orrs	r3, r2
 8005232:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005234:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005238:	2b01      	cmp	r3, #1
 800523a:	d105      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800523c:	4b48      	ldr	r3, [pc, #288]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	4a47      	ldr	r2, [pc, #284]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005246:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d008      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005254:	4b42      	ldr	r3, [pc, #264]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	f023 0203 	bic.w	r2, r3, #3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	493f      	ldr	r1, [pc, #252]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005262:	4313      	orrs	r3, r2
 8005264:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d008      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005272:	4b3b      	ldr	r3, [pc, #236]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	4938      	ldr	r1, [pc, #224]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005280:	4313      	orrs	r3, r2
 8005282:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005290:	4b33      	ldr	r3, [pc, #204]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005294:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	4930      	ldr	r1, [pc, #192]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0320 	and.w	r3, r3, #32
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d008      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ae:	4b2c      	ldr	r3, [pc, #176]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	f023 0210 	bic.w	r2, r3, #16
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	4929      	ldr	r1, [pc, #164]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d008      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80052cc:	4b24      	ldr	r3, [pc, #144]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	4921      	ldr	r1, [pc, #132]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d008      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052ea:	4b1d      	ldr	r3, [pc, #116]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	f023 0220 	bic.w	r2, r3, #32
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	491a      	ldr	r1, [pc, #104]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005308:	4b15      	ldr	r3, [pc, #84]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	4912      	ldr	r1, [pc, #72]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005316:	4313      	orrs	r3, r2
 8005318:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005322:	2b00      	cmp	r3, #0
 8005324:	d008      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8005326:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	490b      	ldr	r1, [pc, #44]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005334:	4313      	orrs	r3, r2
 8005336:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005340:	2b00      	cmp	r3, #0
 8005342:	d008      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005344:	4b06      	ldr	r3, [pc, #24]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	4903      	ldr	r1, [pc, #12]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005352:	4313      	orrs	r3, r2
 8005354:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3748      	adds	r7, #72	; 0x48
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40021000 	.word	0x40021000

08005364 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check SDADC handle */
  if(hsdadc == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e07f      	b.n	8005476 <HAL_SDADC_Init+0x112>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));

  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	629a      	str	r2, [r3, #40]	; 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	62da      	str	r2, [r3, #44]	; 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053a0:	631a      	str	r2, [r3, #48]	; 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	635a      	str	r2, [r3, #52]	; 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	639a      	str	r2, [r3, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7fc fd07 	bl	8001dc8 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80053c8:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6819      	ldr	r1, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80053f0:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6859      	ldr	r1, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8005404:	4b1e      	ldr	r3, [pc, #120]	; (8005480 <HAL_SDADC_Init+0x11c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	429a      	cmp	r2, r3
 8005412:	d00f      	beq.n	8005434 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8005414:	4b1a      	ldr	r3, [pc, #104]	; (8005480 <HAL_SDADC_Init+0x11c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a19      	ldr	r2, [pc, #100]	; (8005480 <HAL_SDADC_Init+0x11c>)
 800541a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541e:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8005420:	4b17      	ldr	r3, [pc, #92]	; (8005480 <HAL_SDADC_Init+0x11c>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	4915      	ldr	r1, [pc, #84]	; (8005480 <HAL_SDADC_Init+0x11c>)
 800542a:	4313      	orrs	r3, r2
 800542c:	600b      	str	r3, [r1, #0]

    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 800542e:	2002      	movs	r0, #2
 8005430:	f7fd f81c 	bl	800246c <HAL_Delay>
  }

  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  tickstart = HAL_GetTick();
 8005444:	f7fd f806 	bl	8002454 <HAL_GetTick>
 8005448:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 800544a:	e008      	b.n	800545e <HAL_SDADC_Init+0xfa>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 800544c:	f7fd f802 	bl	8002454 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2bc8      	cmp	r3, #200	; 0xc8
 8005458:	d901      	bls.n	800545e <HAL_SDADC_Init+0xfa>
    {
      return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e00b      	b.n	8005476 <HAL_SDADC_Init+0x112>
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1ef      	bne.n	800544c <HAL_SDADC_Init+0xe8>
    }
  }

  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return HAL status */
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40016000 	.word	0x40016000

08005484 <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d002      	beq.n	80054a4 <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	75fb      	strb	r3, [r7, #23]
 80054a2:	e025      	b.n	80054f0 <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fa7d 	bl	80059a4 <SDADC_EnterInitMode>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d006      	beq.n	80054be <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	22ff      	movs	r2, #255	; 0xff
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	75fb      	strb	r3, [r7, #23]
 80054bc:	e018      	b.n	80054f0 <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80054c8:	4413      	add	r3, r2
 80054ca:	3320      	adds	r3, #32
 80054cc:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80054d6:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 80054dc:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80054e4:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 80054e6:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80054e8:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 fa7d 	bl	80059ea <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005508:	2300      	movs	r3, #0
 800550a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005512:	2b01      	cmp	r3, #1
 8005514:	d002      	beq.n	800551c <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	75fb      	strb	r3, [r7, #23]
 800551a:	e037      	b.n	800558c <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 fa41 	bl	80059a4 <SDADC_EnterInitMode>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d006      	beq.n	8005536 <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	22ff      	movs	r2, #255	; 0xff
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	75fb      	strb	r3, [r7, #23]
 8005534:	e02a      	b.n	800558c <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4a17      	ldr	r2, [pc, #92]	; (8005598 <HAL_SDADC_AssociateChannelConfig+0x9c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d01f      	beq.n	800557e <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	0c1b      	lsrs	r3, r3, #16
 8005542:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	f003 031f 	and.w	r3, r3, #31
 8005552:	2203      	movs	r2, #3
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	43da      	mvns	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	400a      	ands	r2, r1
 8005560:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	f003 031f 	and.w	r3, r3, #31
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	409a      	lsls	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	641a      	str	r2, [r3, #64]	; 0x40
 800557c:	e003      	b.n	8005586 <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	645a      	str	r2, [r3, #68]	; 0x44
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fa2f 	bl	80059ea <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 800558c:	7dfb      	ldrb	r3, [r7, #23]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3718      	adds	r7, #24
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	00080100 	.word	0x00080100

0800559c <HAL_SDADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_ConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                          uint32_t Channel,
                                          uint32_t ContinuousMode)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055a8:	2300      	movs	r3, #0
 80055aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d02a      	beq.n	800560c <HAL_SDADC_ConfigChannel+0x70>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055bc:	2bff      	cmp	r3, #255	; 0xff
 80055be:	d025      	beq.n	800560c <HAL_SDADC_ConfigChannel+0x70>
  {
    /* Set RCH[3:0] and RCONT bits in SDADC_CR2 */
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 029e 	bic.w	r2, r2, #5177344	; 0x4f0000
 80055ce:	605a      	str	r2, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d10c      	bne.n	80055f0 <HAL_SDADC_ConfigChannel+0x54>
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK) | SDADC_CR2_RCONT);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	4b10      	ldr	r3, [pc, #64]	; (8005620 <HAL_SDADC_ConfigChannel+0x84>)
 80055e0:	400b      	ands	r3, r1
 80055e2:	431a      	orrs	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80055ec:	605a      	str	r2, [r3, #4]
 80055ee:	e009      	b.n	8005604 <HAL_SDADC_ConfigChannel+0x68>
    }
    else
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK));
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6859      	ldr	r1, [r3, #4]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	0c1b      	lsrs	r3, r3, #16
 80055fa:	041b      	lsls	r3, r3, #16
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	430b      	orrs	r3, r1
 8005602:	6053      	str	r3, [r2, #4]
    }
    /* Store continuous mode information */
    hsdadc->RegularContMode = ContinuousMode;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	619a      	str	r2, [r3, #24]
 800560a:	e001      	b.n	8005610 <HAL_SDADC_ConfigChannel+0x74>
  }
  else
  {
    status = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8005610:	7dfb      	ldrb	r3, [r7, #23]
}
 8005612:	4618      	mov	r0, r3
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	ffbf0000 	.word	0xffbf0000

08005624 <HAL_SDADC_InjectedConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                                  uint32_t Channel,
                                                  uint32_t ContinuousMode)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d027      	beq.n	800568e <HAL_SDADC_InjectedConfigChannel+0x6a>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005644:	2bff      	cmp	r3, #255	; 0xff
 8005646:	d022      	beq.n	800568e <HAL_SDADC_InjectedConfigChannel+0x6a>
  {
    /* Set JCHG[8:0] bits in SDADC_JCHG */
    hsdadc->Instance->JCHGR = (uint32_t) (Channel & SDADC_LSB_MASK);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	b292      	uxth	r2, r2
 8005650:	615a      	str	r2, [r3, #20]
    /* Set or clear JCONT bit in SDADC_CR2 */
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d108      	bne.n	800566a <HAL_SDADC_InjectedConfigChannel+0x46>
    {
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0220 	orr.w	r2, r2, #32
 8005666:	605a      	str	r2, [r3, #4]
 8005668:	e007      	b.n	800567a <HAL_SDADC_InjectedConfigChannel+0x56>
    }
    else
    {
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0220 	bic.w	r2, r2, #32
 8005678:	605a      	str	r2, [r3, #4]
    }
    /* Store continuous mode information */
    hsdadc->InjectedContMode = ContinuousMode;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	61da      	str	r2, [r3, #28]
    /* Store number of injected channels */
    hsdadc->InjectedChannelsNbr = SDADC_GetInjChannelsNbr(Channel);
 8005680:	68b8      	ldr	r0, [r7, #8]
 8005682:	f000 f9c4 	bl	8005a0e <SDADC_GetInjChannelsNbr>
 8005686:	4602      	mov	r2, r0
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	621a      	str	r2, [r3, #32]
 800568c:	e001      	b.n	8005692 <HAL_SDADC_InjectedConfigChannel+0x6e>
  }
  else
  {
    status = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8005692:	7dfb      	ldrb	r3, [r7, #23]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_SDADC_SelectInjectedTrigger>:
  *            @arg SDADC_SYNCHRONOUS_TRIGGER : Synchronous with SDADC1 (only for SDADC2 and SDADC3).
  *            @arg SDADC_EXTERNAL_TRIGGER : External trigger.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedTrigger(SDADC_HandleTypeDef *hsdadc, uint32_t Trigger)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_TRIGGER(Trigger));

  /* Check parameters compatibility */
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a12      	ldr	r2, [pc, #72]	; (80056f8 <HAL_SDADC_SelectInjectedTrigger+0x5c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d105      	bne.n	80056c0 <HAL_SDADC_SelectInjectedTrigger+0x24>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d102      	bne.n	80056c0 <HAL_SDADC_SelectInjectedTrigger+0x24>
  {
    status = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	73fb      	strb	r3, [r7, #15]
 80056be:	e014      	b.n	80056ea <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d009      	beq.n	80056de <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d004      	beq.n	80056de <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_REG))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d103      	bne.n	80056e6 <HAL_SDADC_SelectInjectedTrigger+0x4a>
  {
    /* Store regular trigger information */
    hsdadc->InjectedTrigger = Trigger;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80056e4:	e001      	b.n	80056ea <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  else
  {
    status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	40016000 	.word	0x40016000

080056fc <HAL_SDADC_SelectInjectedDelay>:
  *         This parameter can be a value of @ref SDADC_InjectedDelay.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedDelay(SDADC_HandleTypeDef *hsdadc,
                                                uint32_t InjectedDelay)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_DELAY(InjectedDelay));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005710:	2b01      	cmp	r3, #1
 8005712:	d120      	bne.n	8005756 <HAL_SDADC_SelectInjectedDelay+0x5a>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f945 	bl	80059a4 <SDADC_EnterInitMode>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d006      	beq.n	800572e <HAL_SDADC_SelectInjectedDelay+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	22ff      	movs	r2, #255	; 0xff
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	73fb      	strb	r3, [r7, #15]
 800572c:	e015      	b.n	800575a <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
    else
    {
      /* Set JDS bit in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JDS);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800573c:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= InjectedDelay;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6859      	ldr	r1, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f94b 	bl	80059ea <SDADC_ExitInitMode>
 8005754:	e001      	b.n	800575a <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 800575a:	7bfb      	ldrb	r3, [r7, #15]
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_SDADC_CalibrationStart>:
  *         This parameter can be a value of @ref SDADC_CalibrationSequence.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_CalibrationStart(SDADC_HandleTypeDef *hsdadc,
                                             uint32_t CalibrationSequence)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_CALIB_SEQUENCE(CalibrationSequence));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d12c      	bne.n	80057d6 <HAL_SDADC_CalibrationStart+0x72>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f911 	bl	80059a4 <SDADC_EnterInitMode>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d006      	beq.n	8005796 <HAL_SDADC_CalibrationStart+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	22ff      	movs	r2, #255	; 0xff
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	73fb      	strb	r3, [r7, #15]
 8005794:	e021      	b.n	80057da <HAL_SDADC_CalibrationStart+0x76>
    }
    else
    {
      /* Set CALIBCNT[1:0] bits in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0206 	bic.w	r2, r2, #6
 80057a4:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6859      	ldr	r1, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f917 	bl	80059ea <SDADC_ExitInitMode>

      /* Set STARTCALIB in SDADC_CR2 */
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0210 	orr.w	r2, r2, #16
 80057ca:	605a      	str	r2, [r3, #4]

      /* Set SDADC in calibration state */
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057d4:	e001      	b.n	80057da <HAL_SDADC_CalibrationStart+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80057da:	7bfb      	ldrb	r3, [r7, #15]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_SDADC_PollForCalibEvent>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForCalibEvent(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d001      	beq.n	80057fc <HAL_SDADC_PollForCalibEvent+0x18>
  {
    /* Return error status */
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e028      	b.n	800584e <HAL_SDADC_PollForCalibEvent+0x6a>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80057fc:	f7fc fe2a 	bl	8002454 <HAL_GetTick>
 8005800:	60f8      	str	r0, [r7, #12]

    /* Wait EOCALF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8005802:	e010      	b.n	8005826 <HAL_SDADC_PollForCalibEvent+0x42>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580a:	d00c      	beq.n	8005826 <HAL_SDADC_PollForCalibEvent+0x42>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 800580c:	f7fc fe22 	bl	8002454 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d302      	bcc.n	8005822 <HAL_SDADC_PollForCalibEvent+0x3e>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_SDADC_PollForCalibEvent+0x42>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e013      	b.n	800584e <HAL_SDADC_PollForCalibEvent+0x6a>
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b01      	cmp	r3, #1
 8005832:	d1e7      	bne.n	8005804 <HAL_SDADC_PollForCalibEvent+0x20>
        }
      }
    }
    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	60da      	str	r2, [r3, #12]

    /* Set SDADC in ready state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return function status */
    return HAL_OK;
 800584c:	2300      	movs	r3, #0
  }
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_SDADC_Start>:
  *         or if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Start(SDADC_HandleTypeDef *hsdadc)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b084      	sub	sp, #16
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005864:	2b01      	cmp	r3, #1
 8005866:	d004      	beq.n	8005872 <HAL_SDADC_Start+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_INJ))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 800586e:	2b04      	cmp	r3, #4
 8005870:	d105      	bne.n	800587e <HAL_SDADC_Start+0x28>
  {
    /* Start regular conversion */
    status = SDADC_RegConvStart(hsdadc);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f8ef 	bl	8005a56 <SDADC_RegConvStart>
 8005878:	4603      	mov	r3, r0
 800587a:	73fb      	strb	r3, [r7, #15]
 800587c:	e001      	b.n	8005882 <HAL_SDADC_Start+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8005882:	7bfb      	ldrb	r3, [r7, #15]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_SDADC_PollForConversion>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForConversion(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589c:	2b03      	cmp	r3, #3
 800589e:	d006      	beq.n	80058ae <HAL_SDADC_PollForConversion+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 80058a6:	2b05      	cmp	r3, #5
 80058a8:	d001      	beq.n	80058ae <HAL_SDADC_PollForConversion+0x22>
  {
    /* Return error status */
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e044      	b.n	8005938 <HAL_SDADC_PollForConversion+0xac>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80058ae:	f7fc fdd1 	bl	8002454 <HAL_GetTick>
 80058b2:	60f8      	str	r0, [r7, #12]

    /* Wait REOCF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 80058b4:	e010      	b.n	80058d8 <HAL_SDADC_PollForConversion+0x4c>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058bc:	d00c      	beq.n	80058d8 <HAL_SDADC_PollForConversion+0x4c>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 80058be:	f7fc fdc9 	bl	8002454 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d302      	bcc.n	80058d4 <HAL_SDADC_PollForConversion+0x48>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_SDADC_PollForConversion+0x4c>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e02f      	b.n	8005938 <HAL_SDADC_PollForConversion+0xac>
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 0308 	and.w	r3, r3, #8
 80058e2:	2b08      	cmp	r3, #8
 80058e4:	d1e7      	bne.n	80058b6 <HAL_SDADC_PollForConversion+0x2a>
        }
      }
    }
    /* Check if overrun occurs */
    if((hsdadc->Instance->ISR & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0310 	and.w	r3, r3, #16
 80058f0:	2b10      	cmp	r3, #16
 80058f2:	d10d      	bne.n	8005910 <HAL_SDADC_PollForConversion+0x84>
    {
      /* Update error code and call error callback */
      hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
      hsdadc->ErrorCallback(hsdadc);
#else
      HAL_SDADC_ErrorCallback(hsdadc);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f848 	bl	8005990 <HAL_SDADC_ErrorCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

      /* Set CLRROVRF bit in SDADC_CLRISR register */
      hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0210 	orr.w	r2, r2, #16
 800590e:	60da      	str	r2, [r3, #12]
    }
    /* Update SDADC state only if not continuous conversion and SW trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10e      	bne.n	8005936 <HAL_SDADC_PollForConversion+0xaa>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10a      	bne.n	8005936 <HAL_SDADC_PollForConversion+0xaa>
    {
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8005926:	2b03      	cmp	r3, #3
 8005928:	d101      	bne.n	800592e <HAL_SDADC_PollForConversion+0xa2>
 800592a:	2201      	movs	r2, #1
 800592c:	e000      	b.n	8005930 <HAL_SDADC_PollForConversion+0xa4>
 800592e:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Return function status */
    return HAL_OK;
 8005936:	2300      	movs	r3, #0
  }
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_SDADC_Stop>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Stop(SDADC_HandleTypeDef *hsdadc)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800594e:	2b03      	cmp	r3, #3
 8005950:	d007      	beq.n	8005962 <HAL_SDADC_Stop+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8005958:	2b05      	cmp	r3, #5
 800595a:	d002      	beq.n	8005962 <HAL_SDADC_Stop+0x22>
  {
    /* Return error status */
    status = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	73fb      	strb	r3, [r7, #15]
 8005960:	e004      	b.n	800596c <HAL_SDADC_Stop+0x2c>
  }
  else
  {
    /* Stop regular conversion */
    status = SDADC_RegConvStop(hsdadc);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f8b5 	bl	8005ad2 <SDADC_RegConvStop>
 8005968:	4603      	mov	r3, r0
 800596a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_SDADC_GetValue>:
  * @brief  This function allows to get regular conversion value.
  * @param  hsdadc SDADC handle.
  * @retval Regular conversion value
  */
uint32_t HAL_SDADC_GetValue(SDADC_HandleTypeDef *hsdadc)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Return regular conversion value */
  return hsdadc->Instance->RDATAR;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80059ba:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 80059bc:	f7fc fd4a 	bl	8002454 <HAL_GetTick>
 80059c0:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 80059c2:	e008      	b.n	80059d6 <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 80059c4:	f7fc fd46 	bl	8002454 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2bc8      	cmp	r3, #200	; 0xc8
 80059d0:	d901      	bls.n	80059d6 <SDADC_EnterInitMode+0x32>
    {
      return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e005      	b.n	80059e2 <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	daf1      	bge.n	80059c4 <SDADC_EnterInitMode+0x20>
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005a00:	601a      	str	r2, [r3, #0]
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <SDADC_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t SDADC_GetInjChannelsNbr(uint32_t Channels)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b087      	sub	sp, #28
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0UL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]
  uint32_t tmp,i;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & SDADC_LSB_MASK);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	e00d      	b.n	8005a42 <SDADC_GetInjChannelsNbr+0x34>
  {
    if((tmp & 0x00000001UL) != 0UL)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <SDADC_GetInjChannelsNbr+0x28>
    {
      nbChannels++;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	3301      	adds	r3, #1
 8005a34:	617b      	str	r3, [r7, #20]
    }
    tmp = (uint32_t) (tmp >> 1UL);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	085b      	lsrs	r3, r3, #1
 8005a3a:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d9ee      	bls.n	8005a26 <SDADC_GetInjChannelsNbr+0x18>
  }
  return nbChannels;
 8005a48:	697b      	ldr	r3, [r7, #20]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <SDADC_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d108      	bne.n	8005a7c <SDADC_RegConvStart+0x26>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005a78:	605a      	str	r2, [r3, #4]
 8005a7a:	e017      	b.n	8005aac <SDADC_RegConvStart+0x56>
  }
  else /* synchronous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff ff91 	bl	80059a4 <SDADC_EnterInitMode>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d006      	beq.n	8005a96 <SDADC_RegConvStart+0x40>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	22ff      	movs	r2, #255	; 0xff
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	73fb      	strb	r3, [r7, #15]
 8005a94:	e00a      	b.n	8005aac <SDADC_RegConvStart+0x56>
    }
    else
    {
      /* Set RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aa4:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff ff9f 	bl	80059ea <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <SDADC_RegConvStart+0x72>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <SDADC_RegConvStart+0x6a>
 8005abc:	2203      	movs	r2, #3
 8005abe:	e000      	b.n	8005ac2 <SDADC_RegConvStart+0x6c>
 8005ac0:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <SDADC_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStop(SDADC_HandleTypeDef* hsdadc)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t dummy_read_for_register_reset;

  /* Check continuous mode */
  if(hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_ON)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d10c      	bne.n	8005afc <SDADC_RegConvStop+0x2a>
  {
    /* Clear REOCF by reading SDADC_RDATAR register */
    dummy_read_for_register_reset = hsdadc->Instance->RDATAR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ae8:	60bb      	str	r3, [r7, #8]
    UNUSED(dummy_read_for_register_reset);
 8005aea:	68bb      	ldr	r3, [r7, #8]

    /* Clear RCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 &= ~(SDADC_CR2_RCONT);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8005afa:	605a      	str	r2, [r3, #4]
  }
  /* Wait for the end of regular conversion */
  tickstart = HAL_GetTick();
 8005afc:	f7fc fcaa 	bl	8002454 <HAL_GetTick>
 8005b00:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_RCIP) != 0UL)
 8005b02:	e00c      	b.n	8005b1e <SDADC_RegConvStop+0x4c>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8005b04:	f7fc fca6 	bl	8002454 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2bc8      	cmp	r3, #200	; 0xc8
 8005b10:	d905      	bls.n	8005b1e <SDADC_RegConvStop+0x4c>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	22ff      	movs	r2, #255	; 0xff
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e046      	b.n	8005bac <SDADC_RegConvStop+0xda>
  while((hsdadc->Instance->ISR & SDADC_ISR_RCIP) != 0UL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1eb      	bne.n	8005b04 <SDADC_RegConvStop+0x32>
    }
  }
  /* Check if trigger is synchronous */
  if(hsdadc->RegularTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d116      	bne.n	8005b62 <SDADC_RegConvStop+0x90>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff ff35 	bl	80059a4 <SDADC_EnterInitMode>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d005      	beq.n	8005b4c <SDADC_RegConvStop+0x7a>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	22ff      	movs	r2, #255	; 0xff
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e02f      	b.n	8005bac <SDADC_RegConvStop+0xda>
    }
    else
    {
      /* Clear RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_RSYNC);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b5a:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff ff44 	bl	80059ea <SDADC_ExitInitMode>
    }
  }
  /* Check if continuous mode */
  if(hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_ON)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d107      	bne.n	8005b7a <SDADC_RegConvStop+0xa8>
  {
    /* Restore RCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RCONT;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005b78:	605a      	str	r2, [r3, #4]
  }
  /* Clear REOCF by reading SDADC_RDATAR register */
  dummy_read_for_register_reset = hsdadc->Instance->RDATAR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b80:	60bb      	str	r3, [r7, #8]
  UNUSED(dummy_read_for_register_reset);
 8005b82:	68bb      	ldr	r3, [r7, #8]

  /* Set CLRROVRF bit in SDADC_CLRISR register */
  hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0210 	orr.w	r2, r2, #16
 8005b92:	60da      	str	r2, [r3, #12]

  /* Update SDADC state */
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                  HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d101      	bne.n	8005ba2 <SDADC_RegConvStop+0xd0>
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	e000      	b.n	8005ba4 <SDADC_RegConvStop+0xd2>
 8005ba2:	2204      	movs	r2, #4
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e041      	b.n	8005c4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fc fad0 	bl	8002180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3304      	adds	r3, #4
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	f000 fa80 	bl	80060f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d001      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e049      	b.n	8005d00 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8c:	d01d      	beq.n	8005cca <HAL_TIM_Base_Start_IT+0x76>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a1e      	ldr	r2, [pc, #120]	; (8005d0c <HAL_TIM_Base_Start_IT+0xb8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d018      	beq.n	8005cca <HAL_TIM_Base_Start_IT+0x76>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a1c      	ldr	r2, [pc, #112]	; (8005d10 <HAL_TIM_Base_Start_IT+0xbc>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d013      	beq.n	8005cca <HAL_TIM_Base_Start_IT+0x76>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a1b      	ldr	r2, [pc, #108]	; (8005d14 <HAL_TIM_Base_Start_IT+0xc0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00e      	beq.n	8005cca <HAL_TIM_Base_Start_IT+0x76>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a19      	ldr	r2, [pc, #100]	; (8005d18 <HAL_TIM_Base_Start_IT+0xc4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d009      	beq.n	8005cca <HAL_TIM_Base_Start_IT+0x76>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a18      	ldr	r2, [pc, #96]	; (8005d1c <HAL_TIM_Base_Start_IT+0xc8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d004      	beq.n	8005cca <HAL_TIM_Base_Start_IT+0x76>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a16      	ldr	r2, [pc, #88]	; (8005d20 <HAL_TIM_Base_Start_IT+0xcc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d111      	bne.n	8005cee <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b06      	cmp	r3, #6
 8005cda:	d010      	beq.n	8005cfe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cec:	e007      	b.n	8005cfe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0201 	orr.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40000400 	.word	0x40000400
 8005d10:	40000800 	.word	0x40000800
 8005d14:	40000c00 	.word	0x40000c00
 8005d18:	40001800 	.word	0x40001800
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	40015c00 	.word	0x40015c00

08005d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d020      	beq.n	8005d88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01b      	beq.n	8005d88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f06f 0202 	mvn.w	r2, #2
 8005d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f9a3 	bl	80060ba <HAL_TIM_IC_CaptureCallback>
 8005d74:	e005      	b.n	8005d82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f995 	bl	80060a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f9a6 	bl	80060ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f003 0304 	and.w	r3, r3, #4
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d020      	beq.n	8005dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d01b      	beq.n	8005dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f06f 0204 	mvn.w	r2, #4
 8005da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2202      	movs	r2, #2
 8005daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f97d 	bl	80060ba <HAL_TIM_IC_CaptureCallback>
 8005dc0:	e005      	b.n	8005dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f96f 	bl	80060a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f980 	bl	80060ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f003 0308 	and.w	r3, r3, #8
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d020      	beq.n	8005e20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01b      	beq.n	8005e20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f06f 0208 	mvn.w	r2, #8
 8005df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2204      	movs	r2, #4
 8005df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	f003 0303 	and.w	r3, r3, #3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f957 	bl	80060ba <HAL_TIM_IC_CaptureCallback>
 8005e0c:	e005      	b.n	8005e1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f949 	bl	80060a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f95a 	bl	80060ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f003 0310 	and.w	r3, r3, #16
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d020      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01b      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0210 	mvn.w	r2, #16
 8005e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2208      	movs	r2, #8
 8005e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f931 	bl	80060ba <HAL_TIM_IC_CaptureCallback>
 8005e58:	e005      	b.n	8005e66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f923 	bl	80060a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f934 	bl	80060ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00c      	beq.n	8005e90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d007      	beq.n	8005e90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0201 	mvn.w	r2, #1
 8005e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f901 	bl	8006092 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00c      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fae0 	bl	8006474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00c      	beq.n	8005ed8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d007      	beq.n	8005ed8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f905 	bl	80060e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00c      	beq.n	8005efc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f003 0320 	and.w	r3, r3, #32
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d007      	beq.n	8005efc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f06f 0220 	mvn.w	r2, #32
 8005ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fab2 	bl	8006460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005efc:	bf00      	nop
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_TIM_ConfigClockSource+0x1c>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e0b4      	b.n	800608a <HAL_TIM_ConfigClockSource+0x186>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f58:	d03e      	beq.n	8005fd8 <HAL_TIM_ConfigClockSource+0xd4>
 8005f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f5e:	f200 8087 	bhi.w	8006070 <HAL_TIM_ConfigClockSource+0x16c>
 8005f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f66:	f000 8086 	beq.w	8006076 <HAL_TIM_ConfigClockSource+0x172>
 8005f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6e:	d87f      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x16c>
 8005f70:	2b70      	cmp	r3, #112	; 0x70
 8005f72:	d01a      	beq.n	8005faa <HAL_TIM_ConfigClockSource+0xa6>
 8005f74:	2b70      	cmp	r3, #112	; 0x70
 8005f76:	d87b      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x16c>
 8005f78:	2b60      	cmp	r3, #96	; 0x60
 8005f7a:	d050      	beq.n	800601e <HAL_TIM_ConfigClockSource+0x11a>
 8005f7c:	2b60      	cmp	r3, #96	; 0x60
 8005f7e:	d877      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x16c>
 8005f80:	2b50      	cmp	r3, #80	; 0x50
 8005f82:	d03c      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0xfa>
 8005f84:	2b50      	cmp	r3, #80	; 0x50
 8005f86:	d873      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x16c>
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	d058      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x13a>
 8005f8c:	2b40      	cmp	r3, #64	; 0x40
 8005f8e:	d86f      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x16c>
 8005f90:	2b30      	cmp	r3, #48	; 0x30
 8005f92:	d064      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x15a>
 8005f94:	2b30      	cmp	r3, #48	; 0x30
 8005f96:	d86b      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x16c>
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	d060      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x15a>
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d867      	bhi.n	8006070 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d05c      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x15a>
 8005fa4:	2b10      	cmp	r3, #16
 8005fa6:	d05a      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x15a>
 8005fa8:	e062      	b.n	8006070 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fba:	f000 f9bd 	bl	8006338 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	609a      	str	r2, [r3, #8]
      break;
 8005fd6:	e04f      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fe8:	f000 f9a6 	bl	8006338 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ffa:	609a      	str	r2, [r3, #8]
      break;
 8005ffc:	e03c      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800600a:	461a      	mov	r2, r3
 800600c:	f000 f91a 	bl	8006244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2150      	movs	r1, #80	; 0x50
 8006016:	4618      	mov	r0, r3
 8006018:	f000 f973 	bl	8006302 <TIM_ITRx_SetConfig>
      break;
 800601c:	e02c      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800602a:	461a      	mov	r2, r3
 800602c:	f000 f939 	bl	80062a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2160      	movs	r1, #96	; 0x60
 8006036:	4618      	mov	r0, r3
 8006038:	f000 f963 	bl	8006302 <TIM_ITRx_SetConfig>
      break;
 800603c:	e01c      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800604a:	461a      	mov	r2, r3
 800604c:	f000 f8fa 	bl	8006244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2140      	movs	r1, #64	; 0x40
 8006056:	4618      	mov	r0, r3
 8006058:	f000 f953 	bl	8006302 <TIM_ITRx_SetConfig>
      break;
 800605c:	e00c      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4619      	mov	r1, r3
 8006068:	4610      	mov	r0, r2
 800606a:	f000 f94a 	bl	8006302 <TIM_ITRx_SetConfig>
      break;
 800606e:	e003      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
      break;
 8006074:	e000      	b.n	8006078 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b083      	sub	sp, #12
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d00f      	beq.n	8006130 <TIM_Base_SetConfig+0x38>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a42      	ldr	r2, [pc, #264]	; (800621c <TIM_Base_SetConfig+0x124>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00b      	beq.n	8006130 <TIM_Base_SetConfig+0x38>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a41      	ldr	r2, [pc, #260]	; (8006220 <TIM_Base_SetConfig+0x128>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d007      	beq.n	8006130 <TIM_Base_SetConfig+0x38>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a40      	ldr	r2, [pc, #256]	; (8006224 <TIM_Base_SetConfig+0x12c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d003      	beq.n	8006130 <TIM_Base_SetConfig+0x38>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a3f      	ldr	r2, [pc, #252]	; (8006228 <TIM_Base_SetConfig+0x130>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d108      	bne.n	8006142 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006148:	d027      	beq.n	800619a <TIM_Base_SetConfig+0xa2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a33      	ldr	r2, [pc, #204]	; (800621c <TIM_Base_SetConfig+0x124>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d023      	beq.n	800619a <TIM_Base_SetConfig+0xa2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a32      	ldr	r2, [pc, #200]	; (8006220 <TIM_Base_SetConfig+0x128>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d01f      	beq.n	800619a <TIM_Base_SetConfig+0xa2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a31      	ldr	r2, [pc, #196]	; (8006224 <TIM_Base_SetConfig+0x12c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d01b      	beq.n	800619a <TIM_Base_SetConfig+0xa2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a31      	ldr	r2, [pc, #196]	; (800622c <TIM_Base_SetConfig+0x134>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d017      	beq.n	800619a <TIM_Base_SetConfig+0xa2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a30      	ldr	r2, [pc, #192]	; (8006230 <TIM_Base_SetConfig+0x138>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d013      	beq.n	800619a <TIM_Base_SetConfig+0xa2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a2f      	ldr	r2, [pc, #188]	; (8006234 <TIM_Base_SetConfig+0x13c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00f      	beq.n	800619a <TIM_Base_SetConfig+0xa2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a2e      	ldr	r2, [pc, #184]	; (8006238 <TIM_Base_SetConfig+0x140>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00b      	beq.n	800619a <TIM_Base_SetConfig+0xa2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a2d      	ldr	r2, [pc, #180]	; (800623c <TIM_Base_SetConfig+0x144>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d007      	beq.n	800619a <TIM_Base_SetConfig+0xa2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a2c      	ldr	r2, [pc, #176]	; (8006240 <TIM_Base_SetConfig+0x148>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d003      	beq.n	800619a <TIM_Base_SetConfig+0xa2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a24      	ldr	r2, [pc, #144]	; (8006228 <TIM_Base_SetConfig+0x130>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d108      	bne.n	80061ac <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a19      	ldr	r2, [pc, #100]	; (8006238 <TIM_Base_SetConfig+0x140>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d007      	beq.n	80061e8 <TIM_Base_SetConfig+0xf0>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a18      	ldr	r2, [pc, #96]	; (800623c <TIM_Base_SetConfig+0x144>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d003      	beq.n	80061e8 <TIM_Base_SetConfig+0xf0>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a17      	ldr	r2, [pc, #92]	; (8006240 <TIM_Base_SetConfig+0x148>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d103      	bne.n	80061f0 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d105      	bne.n	800620e <TIM_Base_SetConfig+0x116>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f023 0201 	bic.w	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	611a      	str	r2, [r3, #16]
  }
}
 800620e:	bf00      	nop
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	40000400 	.word	0x40000400
 8006220:	40000800 	.word	0x40000800
 8006224:	40000c00 	.word	0x40000c00
 8006228:	40015c00 	.word	0x40015c00
 800622c:	40001800 	.word	0x40001800
 8006230:	40001c00 	.word	0x40001c00
 8006234:	40002000 	.word	0x40002000
 8006238:	40014000 	.word	0x40014000
 800623c:	40014400 	.word	0x40014400
 8006240:	40014800 	.word	0x40014800

08006244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	f023 0201 	bic.w	r2, r3, #1
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800626e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4313      	orrs	r3, r2
 8006278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f023 030a 	bic.w	r3, r3, #10
 8006280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	621a      	str	r2, [r3, #32]
}
 8006296:	bf00      	nop
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b087      	sub	sp, #28
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	f023 0210 	bic.w	r2, r3, #16
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	031b      	lsls	r3, r3, #12
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	621a      	str	r2, [r3, #32]
}
 80062f6:	bf00      	nop
 80062f8:	371c      	adds	r7, #28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	f043 0307 	orr.w	r3, r3, #7
 8006324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	609a      	str	r2, [r3, #8]
}
 800632c:	bf00      	nop
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	021a      	lsls	r2, r3, #8
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	431a      	orrs	r2, r3
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4313      	orrs	r3, r2
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	4313      	orrs	r3, r2
 8006364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	609a      	str	r2, [r3, #8]
}
 800636c:	bf00      	nop
 800636e:	371c      	adds	r7, #28
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800638c:	2302      	movs	r3, #2
 800638e:	e055      	b.n	800643c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d2:	d01d      	beq.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a1b      	ldr	r2, [pc, #108]	; (8006448 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d018      	beq.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a1a      	ldr	r2, [pc, #104]	; (800644c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d013      	beq.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a18      	ldr	r2, [pc, #96]	; (8006450 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00e      	beq.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a17      	ldr	r2, [pc, #92]	; (8006454 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d009      	beq.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a15      	ldr	r2, [pc, #84]	; (8006458 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d004      	beq.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a14      	ldr	r2, [pc, #80]	; (800645c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d10c      	bne.n	800642a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006416:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	4313      	orrs	r3, r2
 8006420:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	40000400 	.word	0x40000400
 800644c:	40000800 	.word	0x40000800
 8006450:	40000c00 	.word	0x40000c00
 8006454:	40001800 	.word	0x40001800
 8006458:	40014000 	.word	0x40014000
 800645c:	40015c00 	.word	0x40015c00

08006460 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e040      	b.n	800651c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fb fed8 	bl	8002260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2224      	movs	r2, #36	; 0x24
 80064b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0201 	bic.w	r2, r2, #1
 80064c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d002      	beq.n	80064d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fd80 	bl	8006fd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fc03 	bl	8006ce0 <UART_SetConfig>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e01b      	b.n	800651c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006502:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f042 0201 	orr.w	r2, r2, #1
 8006512:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fdff 	bl	8007118 <UART_CheckIdleState>
 800651a:	4603      	mov	r3, r0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08a      	sub	sp, #40	; 0x28
 8006528:	af02      	add	r7, sp, #8
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	4613      	mov	r3, r2
 8006532:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006538:	2b20      	cmp	r3, #32
 800653a:	d178      	bne.n	800662e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <HAL_UART_Transmit+0x24>
 8006542:	88fb      	ldrh	r3, [r7, #6]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e071      	b.n	8006630 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2221      	movs	r2, #33	; 0x21
 8006558:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800655a:	f7fb ff7b 	bl	8002454 <HAL_GetTick>
 800655e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	88fa      	ldrh	r2, [r7, #6]
 8006564:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	88fa      	ldrh	r2, [r7, #6]
 800656c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006578:	d108      	bne.n	800658c <HAL_UART_Transmit+0x68>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d104      	bne.n	800658c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	61bb      	str	r3, [r7, #24]
 800658a:	e003      	b.n	8006594 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006590:	2300      	movs	r3, #0
 8006592:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006594:	e030      	b.n	80065f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2200      	movs	r2, #0
 800659e:	2180      	movs	r1, #128	; 0x80
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 fe61 	bl	8007268 <UART_WaitOnFlagUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d004      	beq.n	80065b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2220      	movs	r2, #32
 80065b0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e03c      	b.n	8006630 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10b      	bne.n	80065d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	881a      	ldrh	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065c8:	b292      	uxth	r2, r2
 80065ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	3302      	adds	r3, #2
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	e008      	b.n	80065e6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	781a      	ldrb	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	b292      	uxth	r2, r2
 80065de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	3301      	adds	r3, #1
 80065e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	3b01      	subs	r3, #1
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80065fe:	b29b      	uxth	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1c8      	bne.n	8006596 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2200      	movs	r2, #0
 800660c:	2140      	movs	r1, #64	; 0x40
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 fe2a 	bl	8007268 <UART_WaitOnFlagUntilTimeout>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d004      	beq.n	8006624 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2220      	movs	r2, #32
 800661e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e005      	b.n	8006630 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	e000      	b.n	8006630 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800662e:	2302      	movs	r3, #2
  }
}
 8006630:	4618      	mov	r0, r3
 8006632:	3720      	adds	r7, #32
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08a      	sub	sp, #40	; 0x28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	4613      	mov	r3, r2
 8006644:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800664c:	2b20      	cmp	r3, #32
 800664e:	d132      	bne.n	80066b6 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d002      	beq.n	800665c <HAL_UART_Receive_DMA+0x24>
 8006656:	88fb      	ldrh	r3, [r7, #6]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e02b      	b.n	80066b8 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d018      	beq.n	80066a6 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	613b      	str	r3, [r7, #16]
   return(result);
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006688:	627b      	str	r3, [r7, #36]	; 0x24
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	623b      	str	r3, [r7, #32]
 8006694:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	69f9      	ldr	r1, [r7, #28]
 8006698:	6a3a      	ldr	r2, [r7, #32]
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	61bb      	str	r3, [r7, #24]
   return(result);
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e6      	bne.n	8006674 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80066a6:	88fb      	ldrh	r3, [r7, #6]
 80066a8:	461a      	mov	r2, r3
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 fe49 	bl	8007344 <UART_Start_Receive_DMA>
 80066b2:	4603      	mov	r3, r0
 80066b4:	e000      	b.n	80066b8 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80066b6:	2302      	movs	r3, #2
  }
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3728      	adds	r7, #40	; 0x28
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b0ba      	sub	sp, #232	; 0xe8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80066ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80066ee:	4013      	ands	r3, r2
 80066f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80066f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d115      	bne.n	8006728 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80066fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006700:	f003 0320 	and.w	r3, r3, #32
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00f      	beq.n	8006728 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b00      	cmp	r3, #0
 8006712:	d009      	beq.n	8006728 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 82ab 	beq.w	8006c74 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	4798      	blx	r3
      }
      return;
 8006726:	e2a5      	b.n	8006c74 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 8117 	beq.w	8006960 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800673e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006742:	4b85      	ldr	r3, [pc, #532]	; (8006958 <HAL_UART_IRQHandler+0x298>)
 8006744:	4013      	ands	r3, r2
 8006746:	2b00      	cmp	r3, #0
 8006748:	f000 810a 	beq.w	8006960 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800674c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d011      	beq.n	800677c <HAL_UART_IRQHandler+0xbc>
 8006758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800675c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00b      	beq.n	800677c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2201      	movs	r2, #1
 800676a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006772:	f043 0201 	orr.w	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800677c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d011      	beq.n	80067ac <HAL_UART_IRQHandler+0xec>
 8006788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2202      	movs	r2, #2
 800679a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067a2:	f043 0204 	orr.w	r2, r3, #4
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d011      	beq.n	80067dc <HAL_UART_IRQHandler+0x11c>
 80067b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2204      	movs	r2, #4
 80067ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067d2:	f043 0202 	orr.w	r2, r3, #2
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d017      	beq.n	8006818 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ec:	f003 0320 	and.w	r3, r3, #32
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d105      	bne.n	8006800 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80067f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00b      	beq.n	8006818 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2208      	movs	r2, #8
 8006806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800680e:	f043 0208 	orr.w	r2, r3, #8
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006820:	2b00      	cmp	r3, #0
 8006822:	d012      	beq.n	800684a <HAL_UART_IRQHandler+0x18a>
 8006824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00c      	beq.n	800684a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006838:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006840:	f043 0220 	orr.w	r2, r3, #32
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 8211 	beq.w	8006c78 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00d      	beq.n	800687e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d007      	beq.n	800687e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006884:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006892:	2b40      	cmp	r3, #64	; 0x40
 8006894:	d005      	beq.n	80068a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800689a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d04f      	beq.n	8006942 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fe14 	bl	80074d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b2:	2b40      	cmp	r3, #64	; 0x40
 80068b4:	d141      	bne.n	800693a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3308      	adds	r3, #8
 80068bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068c4:	e853 3f00 	ldrex	r3, [r3]
 80068c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3308      	adds	r3, #8
 80068de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1d9      	bne.n	80068b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006906:	2b00      	cmp	r3, #0
 8006908:	d013      	beq.n	8006932 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800690e:	4a13      	ldr	r2, [pc, #76]	; (800695c <HAL_UART_IRQHandler+0x29c>)
 8006910:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006916:	4618      	mov	r0, r3
 8006918:	f7fc fbd7 	bl	80030ca <HAL_DMA_Abort_IT>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d017      	beq.n	8006952 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800692c:	4610      	mov	r0, r2
 800692e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006930:	e00f      	b.n	8006952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f9be 	bl	8006cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006938:	e00b      	b.n	8006952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f9ba 	bl	8006cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006940:	e007      	b.n	8006952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9b6 	bl	8006cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006950:	e192      	b.n	8006c78 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006952:	bf00      	nop
    return;
 8006954:	e190      	b.n	8006c78 <HAL_UART_IRQHandler+0x5b8>
 8006956:	bf00      	nop
 8006958:	04000120 	.word	0x04000120
 800695c:	0800777b 	.word	0x0800777b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006964:	2b01      	cmp	r3, #1
 8006966:	f040 814b 	bne.w	8006c00 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800696a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696e:	f003 0310 	and.w	r3, r3, #16
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 8144 	beq.w	8006c00 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 813d 	beq.w	8006c00 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2210      	movs	r2, #16
 800698c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006998:	2b40      	cmp	r3, #64	; 0x40
 800699a:	f040 80b5 	bne.w	8006b08 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 8164 	beq.w	8006c7c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069be:	429a      	cmp	r2, r3
 80069c0:	f080 815c 	bcs.w	8006c7c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	2b20      	cmp	r3, #32
 80069d6:	f000 8086 	beq.w	8006ae6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a08:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a10:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a14:	e841 2300 	strex	r3, r2, [r1]
 8006a18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1da      	bne.n	80069da <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3308      	adds	r3, #8
 8006a2a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a36:	f023 0301 	bic.w	r3, r3, #1
 8006a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3308      	adds	r3, #8
 8006a44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a48:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a4c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a50:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a54:	e841 2300 	strex	r3, r2, [r1]
 8006a58:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e1      	bne.n	8006a24 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3308      	adds	r3, #8
 8006a66:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a84:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a8c:	e841 2300 	strex	r3, r2, [r1]
 8006a90:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e3      	bne.n	8006a60 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ab6:	f023 0310 	bic.w	r3, r3, #16
 8006aba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ac8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006aca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ace:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ad0:	e841 2300 	strex	r3, r2, [r1]
 8006ad4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e4      	bne.n	8006aa6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fc fab4 	bl	800304e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f8e1 	bl	8006cc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b06:	e0b9      	b.n	8006c7c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 80ab 	beq.w	8006c80 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006b2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 80a6 	beq.w	8006c80 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	461a      	mov	r2, r3
 8006b52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b56:	647b      	str	r3, [r7, #68]	; 0x44
 8006b58:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e4      	bne.n	8006b34 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3308      	adds	r3, #8
 8006b70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	623b      	str	r3, [r7, #32]
   return(result);
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	f023 0301 	bic.w	r3, r3, #1
 8006b80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3308      	adds	r3, #8
 8006b8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b8e:	633a      	str	r2, [r7, #48]	; 0x30
 8006b90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e3      	bne.n	8006b6a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	e853 3f00 	ldrex	r3, [r3]
 8006bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0310 	bic.w	r3, r3, #16
 8006bca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bd8:	61fb      	str	r3, [r7, #28]
 8006bda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	69b9      	ldr	r1, [r7, #24]
 8006bde:	69fa      	ldr	r2, [r7, #28]
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	617b      	str	r3, [r7, #20]
   return(result);
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e4      	bne.n	8006bb6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 f865 	bl	8006cc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bfe:	e03f      	b.n	8006c80 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00e      	beq.n	8006c2a <HAL_UART_IRQHandler+0x56a>
 8006c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d008      	beq.n	8006c2a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fde9 	bl	80077fa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c28:	e02d      	b.n	8006c86 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00e      	beq.n	8006c54 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d008      	beq.n	8006c54 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d01c      	beq.n	8006c84 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	4798      	blx	r3
    }
    return;
 8006c52:	e017      	b.n	8006c84 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d012      	beq.n	8006c86 <HAL_UART_IRQHandler+0x5c6>
 8006c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00c      	beq.n	8006c86 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fd9a 	bl	80077a6 <UART_EndTransmit_IT>
    return;
 8006c72:	e008      	b.n	8006c86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006c74:	bf00      	nop
 8006c76:	e006      	b.n	8006c86 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006c78:	bf00      	nop
 8006c7a:	e004      	b.n	8006c86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006c7c:	bf00      	nop
 8006c7e:	e002      	b.n	8006c86 <HAL_UART_IRQHandler+0x5c6>
      return;
 8006c80:	bf00      	nop
 8006c82:	e000      	b.n	8006c86 <HAL_UART_IRQHandler+0x5c6>
    return;
 8006c84:	bf00      	nop
  }

}
 8006c86:	37e8      	adds	r7, #232	; 0xe8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b088      	sub	sp, #32
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006d0e:	f023 030c 	bic.w	r3, r3, #12
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6812      	ldr	r2, [r2, #0]
 8006d16:	6979      	ldr	r1, [r7, #20]
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a99      	ldr	r2, [pc, #612]	; (8006fc0 <UART_SetConfig+0x2e0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d120      	bne.n	8006da2 <UART_SetConfig+0xc2>
 8006d60:	4b98      	ldr	r3, [pc, #608]	; (8006fc4 <UART_SetConfig+0x2e4>)
 8006d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d64:	f003 0303 	and.w	r3, r3, #3
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	d817      	bhi.n	8006d9c <UART_SetConfig+0xbc>
 8006d6c:	a201      	add	r2, pc, #4	; (adr r2, 8006d74 <UART_SetConfig+0x94>)
 8006d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d72:	bf00      	nop
 8006d74:	08006d85 	.word	0x08006d85
 8006d78:	08006d91 	.word	0x08006d91
 8006d7c:	08006d97 	.word	0x08006d97
 8006d80:	08006d8b 	.word	0x08006d8b
 8006d84:	2301      	movs	r3, #1
 8006d86:	77fb      	strb	r3, [r7, #31]
 8006d88:	e061      	b.n	8006e4e <UART_SetConfig+0x16e>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	77fb      	strb	r3, [r7, #31]
 8006d8e:	e05e      	b.n	8006e4e <UART_SetConfig+0x16e>
 8006d90:	2304      	movs	r3, #4
 8006d92:	77fb      	strb	r3, [r7, #31]
 8006d94:	e05b      	b.n	8006e4e <UART_SetConfig+0x16e>
 8006d96:	2308      	movs	r3, #8
 8006d98:	77fb      	strb	r3, [r7, #31]
 8006d9a:	e058      	b.n	8006e4e <UART_SetConfig+0x16e>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	77fb      	strb	r3, [r7, #31]
 8006da0:	e055      	b.n	8006e4e <UART_SetConfig+0x16e>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a88      	ldr	r2, [pc, #544]	; (8006fc8 <UART_SetConfig+0x2e8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d124      	bne.n	8006df6 <UART_SetConfig+0x116>
 8006dac:	4b85      	ldr	r3, [pc, #532]	; (8006fc4 <UART_SetConfig+0x2e4>)
 8006dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006db4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006db8:	d011      	beq.n	8006dde <UART_SetConfig+0xfe>
 8006dba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dbe:	d817      	bhi.n	8006df0 <UART_SetConfig+0x110>
 8006dc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dc4:	d011      	beq.n	8006dea <UART_SetConfig+0x10a>
 8006dc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dca:	d811      	bhi.n	8006df0 <UART_SetConfig+0x110>
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <UART_SetConfig+0xf8>
 8006dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd4:	d006      	beq.n	8006de4 <UART_SetConfig+0x104>
 8006dd6:	e00b      	b.n	8006df0 <UART_SetConfig+0x110>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	77fb      	strb	r3, [r7, #31]
 8006ddc:	e037      	b.n	8006e4e <UART_SetConfig+0x16e>
 8006dde:	2302      	movs	r3, #2
 8006de0:	77fb      	strb	r3, [r7, #31]
 8006de2:	e034      	b.n	8006e4e <UART_SetConfig+0x16e>
 8006de4:	2304      	movs	r3, #4
 8006de6:	77fb      	strb	r3, [r7, #31]
 8006de8:	e031      	b.n	8006e4e <UART_SetConfig+0x16e>
 8006dea:	2308      	movs	r3, #8
 8006dec:	77fb      	strb	r3, [r7, #31]
 8006dee:	e02e      	b.n	8006e4e <UART_SetConfig+0x16e>
 8006df0:	2310      	movs	r3, #16
 8006df2:	77fb      	strb	r3, [r7, #31]
 8006df4:	e02b      	b.n	8006e4e <UART_SetConfig+0x16e>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a74      	ldr	r2, [pc, #464]	; (8006fcc <UART_SetConfig+0x2ec>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d124      	bne.n	8006e4a <UART_SetConfig+0x16a>
 8006e00:	4b70      	ldr	r3, [pc, #448]	; (8006fc4 <UART_SetConfig+0x2e4>)
 8006e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006e08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e0c:	d011      	beq.n	8006e32 <UART_SetConfig+0x152>
 8006e0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e12:	d817      	bhi.n	8006e44 <UART_SetConfig+0x164>
 8006e14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e18:	d011      	beq.n	8006e3e <UART_SetConfig+0x15e>
 8006e1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e1e:	d811      	bhi.n	8006e44 <UART_SetConfig+0x164>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <UART_SetConfig+0x14c>
 8006e24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e28:	d006      	beq.n	8006e38 <UART_SetConfig+0x158>
 8006e2a:	e00b      	b.n	8006e44 <UART_SetConfig+0x164>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	77fb      	strb	r3, [r7, #31]
 8006e30:	e00d      	b.n	8006e4e <UART_SetConfig+0x16e>
 8006e32:	2302      	movs	r3, #2
 8006e34:	77fb      	strb	r3, [r7, #31]
 8006e36:	e00a      	b.n	8006e4e <UART_SetConfig+0x16e>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	77fb      	strb	r3, [r7, #31]
 8006e3c:	e007      	b.n	8006e4e <UART_SetConfig+0x16e>
 8006e3e:	2308      	movs	r3, #8
 8006e40:	77fb      	strb	r3, [r7, #31]
 8006e42:	e004      	b.n	8006e4e <UART_SetConfig+0x16e>
 8006e44:	2310      	movs	r3, #16
 8006e46:	77fb      	strb	r3, [r7, #31]
 8006e48:	e001      	b.n	8006e4e <UART_SetConfig+0x16e>
 8006e4a:	2310      	movs	r3, #16
 8006e4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e56:	d15a      	bne.n	8006f0e <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 8006e58:	7ffb      	ldrb	r3, [r7, #31]
 8006e5a:	2b08      	cmp	r3, #8
 8006e5c:	d827      	bhi.n	8006eae <UART_SetConfig+0x1ce>
 8006e5e:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <UART_SetConfig+0x184>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006e89 	.word	0x08006e89
 8006e68:	08006e91 	.word	0x08006e91
 8006e6c:	08006e99 	.word	0x08006e99
 8006e70:	08006eaf 	.word	0x08006eaf
 8006e74:	08006e9f 	.word	0x08006e9f
 8006e78:	08006eaf 	.word	0x08006eaf
 8006e7c:	08006eaf 	.word	0x08006eaf
 8006e80:	08006eaf 	.word	0x08006eaf
 8006e84:	08006ea7 	.word	0x08006ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e88:	f7fe f8b4 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 8006e8c:	61b8      	str	r0, [r7, #24]
        break;
 8006e8e:	e013      	b.n	8006eb8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e90:	f7fe f8d2 	bl	8005038 <HAL_RCC_GetPCLK2Freq>
 8006e94:	61b8      	str	r0, [r7, #24]
        break;
 8006e96:	e00f      	b.n	8006eb8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e98:	4b4d      	ldr	r3, [pc, #308]	; (8006fd0 <UART_SetConfig+0x2f0>)
 8006e9a:	61bb      	str	r3, [r7, #24]
        break;
 8006e9c:	e00c      	b.n	8006eb8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e9e:	f7fe f847 	bl	8004f30 <HAL_RCC_GetSysClockFreq>
 8006ea2:	61b8      	str	r0, [r7, #24]
        break;
 8006ea4:	e008      	b.n	8006eb8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eaa:	61bb      	str	r3, [r7, #24]
        break;
 8006eac:	e004      	b.n	8006eb8 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	77bb      	strb	r3, [r7, #30]
        break;
 8006eb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d074      	beq.n	8006fa8 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	005a      	lsls	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	085b      	lsrs	r3, r3, #1
 8006ec8:	441a      	add	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	2b0f      	cmp	r3, #15
 8006ed8:	d916      	bls.n	8006f08 <UART_SetConfig+0x228>
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee0:	d212      	bcs.n	8006f08 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	f023 030f 	bic.w	r3, r3, #15
 8006eea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	085b      	lsrs	r3, r3, #1
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	89fb      	ldrh	r3, [r7, #14]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	89fa      	ldrh	r2, [r7, #14]
 8006f04:	60da      	str	r2, [r3, #12]
 8006f06:	e04f      	b.n	8006fa8 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	77bb      	strb	r3, [r7, #30]
 8006f0c:	e04c      	b.n	8006fa8 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f0e:	7ffb      	ldrb	r3, [r7, #31]
 8006f10:	2b08      	cmp	r3, #8
 8006f12:	d828      	bhi.n	8006f66 <UART_SetConfig+0x286>
 8006f14:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <UART_SetConfig+0x23c>)
 8006f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1a:	bf00      	nop
 8006f1c:	08006f41 	.word	0x08006f41
 8006f20:	08006f49 	.word	0x08006f49
 8006f24:	08006f51 	.word	0x08006f51
 8006f28:	08006f67 	.word	0x08006f67
 8006f2c:	08006f57 	.word	0x08006f57
 8006f30:	08006f67 	.word	0x08006f67
 8006f34:	08006f67 	.word	0x08006f67
 8006f38:	08006f67 	.word	0x08006f67
 8006f3c:	08006f5f 	.word	0x08006f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f40:	f7fe f858 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 8006f44:	61b8      	str	r0, [r7, #24]
        break;
 8006f46:	e013      	b.n	8006f70 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f48:	f7fe f876 	bl	8005038 <HAL_RCC_GetPCLK2Freq>
 8006f4c:	61b8      	str	r0, [r7, #24]
        break;
 8006f4e:	e00f      	b.n	8006f70 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f50:	4b1f      	ldr	r3, [pc, #124]	; (8006fd0 <UART_SetConfig+0x2f0>)
 8006f52:	61bb      	str	r3, [r7, #24]
        break;
 8006f54:	e00c      	b.n	8006f70 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f56:	f7fd ffeb 	bl	8004f30 <HAL_RCC_GetSysClockFreq>
 8006f5a:	61b8      	str	r0, [r7, #24]
        break;
 8006f5c:	e008      	b.n	8006f70 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f62:	61bb      	str	r3, [r7, #24]
        break;
 8006f64:	e004      	b.n	8006f70 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	77bb      	strb	r3, [r7, #30]
        break;
 8006f6e:	bf00      	nop
    }

    if (pclk != 0U)
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d018      	beq.n	8006fa8 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	085a      	lsrs	r2, r3, #1
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	441a      	add	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	2b0f      	cmp	r3, #15
 8006f8e:	d909      	bls.n	8006fa4 <UART_SetConfig+0x2c4>
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f96:	d205      	bcs.n	8006fa4 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	60da      	str	r2, [r3, #12]
 8006fa2:	e001      	b.n	8006fa8 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006fb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3720      	adds	r7, #32
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	40013800 	.word	0x40013800
 8006fc4:	40021000 	.word	0x40021000
 8006fc8:	40004400 	.word	0x40004400
 8006fcc:	40004800 	.word	0x40004800
 8006fd0:	007a1200 	.word	0x007a1200

08006fd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	f003 0308 	and.w	r3, r3, #8
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00a      	beq.n	8006ffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00a      	beq.n	8007042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	f003 0310 	and.w	r3, r3, #16
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00a      	beq.n	8007086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	f003 0320 	and.w	r3, r3, #32
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d01a      	beq.n	80070ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070d2:	d10a      	bne.n	80070ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	605a      	str	r2, [r3, #4]
  }
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b098      	sub	sp, #96	; 0x60
 800711c:	af02      	add	r7, sp, #8
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007128:	f7fb f994 	bl	8002454 <HAL_GetTick>
 800712c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0308 	and.w	r3, r3, #8
 8007138:	2b08      	cmp	r3, #8
 800713a:	d12e      	bne.n	800719a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800713c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007144:	2200      	movs	r2, #0
 8007146:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f88c 	bl	8007268 <UART_WaitOnFlagUntilTimeout>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d021      	beq.n	800719a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	e853 3f00 	ldrex	r3, [r3]
 8007162:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800716a:	653b      	str	r3, [r7, #80]	; 0x50
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	461a      	mov	r2, r3
 8007172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007174:	647b      	str	r3, [r7, #68]	; 0x44
 8007176:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800717a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e6      	bne.n	8007156 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e062      	b.n	8007260 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	d149      	bne.n	800723c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071b0:	2200      	movs	r2, #0
 80071b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f856 	bl	8007268 <UART_WaitOnFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d03c      	beq.n	800723c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	e853 3f00 	ldrex	r3, [r3]
 80071ce:	623b      	str	r3, [r7, #32]
   return(result);
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	461a      	mov	r2, r3
 80071de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e0:	633b      	str	r3, [r7, #48]	; 0x30
 80071e2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071e8:	e841 2300 	strex	r3, r2, [r1]
 80071ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e6      	bne.n	80071c2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3308      	adds	r3, #8
 80071fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	e853 3f00 	ldrex	r3, [r3]
 8007202:	60fb      	str	r3, [r7, #12]
   return(result);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f023 0301 	bic.w	r3, r3, #1
 800720a:	64bb      	str	r3, [r7, #72]	; 0x48
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3308      	adds	r3, #8
 8007212:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007214:	61fa      	str	r2, [r7, #28]
 8007216:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007218:	69b9      	ldr	r1, [r7, #24]
 800721a:	69fa      	ldr	r2, [r7, #28]
 800721c:	e841 2300 	strex	r3, r2, [r1]
 8007220:	617b      	str	r3, [r7, #20]
   return(result);
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1e5      	bne.n	80071f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2220      	movs	r2, #32
 800722c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e011      	b.n	8007260 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2220      	movs	r2, #32
 8007240:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3758      	adds	r7, #88	; 0x58
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	4613      	mov	r3, r2
 8007276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007278:	e04f      	b.n	800731a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d04b      	beq.n	800731a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007282:	f7fb f8e7 	bl	8002454 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	429a      	cmp	r2, r3
 8007290:	d302      	bcc.n	8007298 <UART_WaitOnFlagUntilTimeout+0x30>
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e04e      	b.n	800733a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d037      	beq.n	800731a <UART_WaitOnFlagUntilTimeout+0xb2>
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b80      	cmp	r3, #128	; 0x80
 80072ae:	d034      	beq.n	800731a <UART_WaitOnFlagUntilTimeout+0xb2>
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2b40      	cmp	r3, #64	; 0x40
 80072b4:	d031      	beq.n	800731a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	f003 0308 	and.w	r3, r3, #8
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	d110      	bne.n	80072e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2208      	movs	r2, #8
 80072ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 f8ff 	bl	80074d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2208      	movs	r2, #8
 80072d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e029      	b.n	800733a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072f4:	d111      	bne.n	800731a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 f8e5 	bl	80074d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2220      	movs	r2, #32
 800730a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e00f      	b.n	800733a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69da      	ldr	r2, [r3, #28]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	4013      	ands	r3, r2
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	429a      	cmp	r2, r3
 8007328:	bf0c      	ite	eq
 800732a:	2301      	moveq	r3, #1
 800732c:	2300      	movne	r3, #0
 800732e:	b2db      	uxtb	r3, r3
 8007330:	461a      	mov	r2, r3
 8007332:	79fb      	ldrb	r3, [r7, #7]
 8007334:	429a      	cmp	r2, r3
 8007336:	d0a0      	beq.n	800727a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
	...

08007344 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b096      	sub	sp, #88	; 0x58
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	4613      	mov	r3, r2
 8007350:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	88fa      	ldrh	r2, [r7, #6]
 800735c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2222      	movs	r2, #34	; 0x22
 800736c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007374:	2b00      	cmp	r3, #0
 8007376:	d028      	beq.n	80073ca <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800737c:	4a3e      	ldr	r2, [pc, #248]	; (8007478 <UART_Start_Receive_DMA+0x134>)
 800737e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007384:	4a3d      	ldr	r2, [pc, #244]	; (800747c <UART_Start_Receive_DMA+0x138>)
 8007386:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800738c:	4a3c      	ldr	r2, [pc, #240]	; (8007480 <UART_Start_Receive_DMA+0x13c>)
 800738e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007394:	2200      	movs	r2, #0
 8007396:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3324      	adds	r3, #36	; 0x24
 80073a2:	4619      	mov	r1, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073a8:	461a      	mov	r2, r3
 80073aa:	88fb      	ldrh	r3, [r7, #6]
 80073ac:	f7fb fdf0 	bl	8002f90 <HAL_DMA_Start_IT>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d009      	beq.n	80073ca <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2210      	movs	r2, #16
 80073ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e051      	b.n	800746e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d018      	beq.n	8007404 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073da:	e853 3f00 	ldrex	r3, [r3]
 80073de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073e6:	657b      	str	r3, [r7, #84]	; 0x54
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80073f2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073f8:	e841 2300 	strex	r3, r2, [r1]
 80073fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e6      	bne.n	80073d2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3308      	adds	r3, #8
 800740a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740e:	e853 3f00 	ldrex	r3, [r3]
 8007412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	f043 0301 	orr.w	r3, r3, #1
 800741a:	653b      	str	r3, [r7, #80]	; 0x50
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3308      	adds	r3, #8
 8007422:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007424:	637a      	str	r2, [r7, #52]	; 0x34
 8007426:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800742a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800742c:	e841 2300 	strex	r3, r2, [r1]
 8007430:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e5      	bne.n	8007404 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3308      	adds	r3, #8
 800743e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	e853 3f00 	ldrex	r3, [r3]
 8007446:	613b      	str	r3, [r7, #16]
   return(result);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800744e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3308      	adds	r3, #8
 8007456:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007458:	623a      	str	r2, [r7, #32]
 800745a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	69f9      	ldr	r1, [r7, #28]
 800745e:	6a3a      	ldr	r2, [r7, #32]
 8007460:	e841 2300 	strex	r3, r2, [r1]
 8007464:	61bb      	str	r3, [r7, #24]
   return(result);
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1e5      	bne.n	8007438 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3758      	adds	r7, #88	; 0x58
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	08007599 	.word	0x08007599
 800747c:	080076bf 	.word	0x080076bf
 8007480:	080076fd 	.word	0x080076fd

08007484 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007484:	b480      	push	{r7}
 8007486:	b089      	sub	sp, #36	; 0x24
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	60bb      	str	r3, [r7, #8]
   return(result);
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80074a0:	61fb      	str	r3, [r7, #28]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	61bb      	str	r3, [r7, #24]
 80074ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ae:	6979      	ldr	r1, [r7, #20]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	613b      	str	r3, [r7, #16]
   return(result);
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e6      	bne.n	800748c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2220      	movs	r2, #32
 80074c2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80074c4:	bf00      	nop
 80074c6:	3724      	adds	r7, #36	; 0x24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b095      	sub	sp, #84	; 0x54
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f6:	643b      	str	r3, [r7, #64]	; 0x40
 80074f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e6      	bne.n	80074d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3308      	adds	r3, #8
 8007510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	61fb      	str	r3, [r7, #28]
   return(result);
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	f023 0301 	bic.w	r3, r3, #1
 8007520:	64bb      	str	r3, [r7, #72]	; 0x48
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3308      	adds	r3, #8
 8007528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800752a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800752c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e5      	bne.n	800750a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007542:	2b01      	cmp	r3, #1
 8007544:	d118      	bne.n	8007578 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	e853 3f00 	ldrex	r3, [r3]
 8007552:	60bb      	str	r3, [r7, #8]
   return(result);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	f023 0310 	bic.w	r3, r3, #16
 800755a:	647b      	str	r3, [r7, #68]	; 0x44
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	461a      	mov	r2, r3
 8007562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007564:	61bb      	str	r3, [r7, #24]
 8007566:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007568:	6979      	ldr	r1, [r7, #20]
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	e841 2300 	strex	r3, r2, [r1]
 8007570:	613b      	str	r3, [r7, #16]
   return(result);
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e6      	bne.n	8007546 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2220      	movs	r2, #32
 800757c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800758c:	bf00      	nop
 800758e:	3754      	adds	r7, #84	; 0x54
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b09c      	sub	sp, #112	; 0x70
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	2b20      	cmp	r3, #32
 80075ac:	d071      	beq.n	8007692 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80075ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b0:	2200      	movs	r2, #0
 80075b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80075cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80075d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075dc:	e841 2300 	strex	r3, r2, [r1]
 80075e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e6      	bne.n	80075b6 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3308      	adds	r3, #8
 80075ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fa:	f023 0301 	bic.w	r3, r3, #1
 80075fe:	667b      	str	r3, [r7, #100]	; 0x64
 8007600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3308      	adds	r3, #8
 8007606:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007608:	647a      	str	r2, [r7, #68]	; 0x44
 800760a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800760e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e5      	bne.n	80075e8 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800761c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3308      	adds	r3, #8
 8007622:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	623b      	str	r3, [r7, #32]
   return(result);
 800762c:	6a3b      	ldr	r3, [r7, #32]
 800762e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007632:	663b      	str	r3, [r7, #96]	; 0x60
 8007634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3308      	adds	r3, #8
 800763a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800763c:	633a      	str	r2, [r7, #48]	; 0x30
 800763e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800764a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e5      	bne.n	800761c <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007652:	2220      	movs	r2, #32
 8007654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800765a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800765c:	2b01      	cmp	r3, #1
 800765e:	d118      	bne.n	8007692 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	60fb      	str	r3, [r7, #12]
   return(result);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f023 0310 	bic.w	r3, r3, #16
 8007674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800767e:	61fb      	str	r3, [r7, #28]
 8007680:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	69b9      	ldr	r1, [r7, #24]
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	617b      	str	r3, [r7, #20]
   return(result);
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e6      	bne.n	8007660 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007694:	2200      	movs	r2, #0
 8007696:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800769a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800769c:	2b01      	cmp	r3, #1
 800769e:	d107      	bne.n	80076b0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076a6:	4619      	mov	r1, r3
 80076a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80076aa:	f7ff fb0d 	bl	8006cc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076ae:	e002      	b.n	80076b6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80076b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80076b2:	f7fa fa7f 	bl	8001bb4 <HAL_UART_RxCpltCallback>
}
 80076b6:	bf00      	nop
 80076b8:	3770      	adds	r7, #112	; 0x70
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d109      	bne.n	80076ee <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076e0:	085b      	lsrs	r3, r3, #1
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	4619      	mov	r1, r3
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f7ff faee 	bl	8006cc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076ec:	e002      	b.n	80076f4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f7ff fad6 	bl	8006ca0 <HAL_UART_RxHalfCpltCallback>
}
 80076f4:	bf00      	nop
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800770e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007716:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007722:	2b80      	cmp	r3, #128	; 0x80
 8007724:	d109      	bne.n	800773a <UART_DMAError+0x3e>
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b21      	cmp	r3, #33	; 0x21
 800772a:	d106      	bne.n	800773a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	2200      	movs	r2, #0
 8007730:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007734:	6978      	ldr	r0, [r7, #20]
 8007736:	f7ff fea5 	bl	8007484 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007744:	2b40      	cmp	r3, #64	; 0x40
 8007746:	d109      	bne.n	800775c <UART_DMAError+0x60>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b22      	cmp	r3, #34	; 0x22
 800774c:	d106      	bne.n	800775c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2200      	movs	r2, #0
 8007752:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007756:	6978      	ldr	r0, [r7, #20]
 8007758:	f7ff feba 	bl	80074d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007762:	f043 0210 	orr.w	r2, r3, #16
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800776c:	6978      	ldr	r0, [r7, #20]
 800776e:	f7ff faa1 	bl	8006cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007772:	bf00      	nop
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f7ff fa8b 	bl	8006cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800779e:	bf00      	nop
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b088      	sub	sp, #32
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077c2:	61fb      	str	r3, [r7, #28]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	61bb      	str	r3, [r7, #24]
 80077ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6979      	ldr	r1, [r7, #20]
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	613b      	str	r3, [r7, #16]
   return(result);
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e6      	bne.n	80077ae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7ff fa4d 	bl	8006c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077f2:	bf00      	nop
 80077f4:	3720      	adds	r7, #32
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007802:	bf00      	nop
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <memset>:
 800780e:	4402      	add	r2, r0
 8007810:	4603      	mov	r3, r0
 8007812:	4293      	cmp	r3, r2
 8007814:	d100      	bne.n	8007818 <memset+0xa>
 8007816:	4770      	bx	lr
 8007818:	f803 1b01 	strb.w	r1, [r3], #1
 800781c:	e7f9      	b.n	8007812 <memset+0x4>
	...

08007820 <__libc_init_array>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	4d0d      	ldr	r5, [pc, #52]	; (8007858 <__libc_init_array+0x38>)
 8007824:	4c0d      	ldr	r4, [pc, #52]	; (800785c <__libc_init_array+0x3c>)
 8007826:	1b64      	subs	r4, r4, r5
 8007828:	10a4      	asrs	r4, r4, #2
 800782a:	2600      	movs	r6, #0
 800782c:	42a6      	cmp	r6, r4
 800782e:	d109      	bne.n	8007844 <__libc_init_array+0x24>
 8007830:	4d0b      	ldr	r5, [pc, #44]	; (8007860 <__libc_init_array+0x40>)
 8007832:	4c0c      	ldr	r4, [pc, #48]	; (8007864 <__libc_init_array+0x44>)
 8007834:	f000 f818 	bl	8007868 <_init>
 8007838:	1b64      	subs	r4, r4, r5
 800783a:	10a4      	asrs	r4, r4, #2
 800783c:	2600      	movs	r6, #0
 800783e:	42a6      	cmp	r6, r4
 8007840:	d105      	bne.n	800784e <__libc_init_array+0x2e>
 8007842:	bd70      	pop	{r4, r5, r6, pc}
 8007844:	f855 3b04 	ldr.w	r3, [r5], #4
 8007848:	4798      	blx	r3
 800784a:	3601      	adds	r6, #1
 800784c:	e7ee      	b.n	800782c <__libc_init_array+0xc>
 800784e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007852:	4798      	blx	r3
 8007854:	3601      	adds	r6, #1
 8007856:	e7f2      	b.n	800783e <__libc_init_array+0x1e>
 8007858:	080078b8 	.word	0x080078b8
 800785c:	080078b8 	.word	0x080078b8
 8007860:	080078b8 	.word	0x080078b8
 8007864:	080078bc 	.word	0x080078bc

08007868 <_init>:
 8007868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786a:	bf00      	nop
 800786c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786e:	bc08      	pop	{r3}
 8007870:	469e      	mov	lr, r3
 8007872:	4770      	bx	lr

08007874 <_fini>:
 8007874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007876:	bf00      	nop
 8007878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787a:	bc08      	pop	{r3}
 800787c:	469e      	mov	lr, r3
 800787e:	4770      	bx	lr
