
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d9c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008f24  08008f24  00009f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f5c  08008f5c  0000a010  2**0
                  CONTENTS
  4 .ARM          00000000  08008f5c  08008f5c  0000a010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f5c  08008f5c  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f5c  08008f5c  00009f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f60  08008f60  00009f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008f64  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f0  20000010  08008f74  0000a010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000700  08008f74  0000a700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ab8  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a2f  00000000  00000000  00021af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  00025528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe2  00000000  00000000  00026990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de4a  00000000  00000000  00027972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b016  00000000  00000000  000457bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000add06  00000000  00000000  000607d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e4d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f4  00000000  00000000  0010e51c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00113910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008f0c 	.word	0x08008f0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08008f0c 	.word	0x08008f0c

080001c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000294 <MX_ADC1_Init+0xcc>)
 80001da:	4a2f      	ldr	r2, [pc, #188]	@ (8000298 <MX_ADC1_Init+0xd0>)
 80001dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001de:	4b2d      	ldr	r3, [pc, #180]	@ (8000294 <MX_ADC1_Init+0xcc>)
 80001e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80001e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80001e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000294 <MX_ADC1_Init+0xcc>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001ec:	4b29      	ldr	r3, [pc, #164]	@ (8000294 <MX_ADC1_Init+0xcc>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f2:	4b28      	ldr	r3, [pc, #160]	@ (8000294 <MX_ADC1_Init+0xcc>)
 80001f4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80001f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001fa:	4b26      	ldr	r3, [pc, #152]	@ (8000294 <MX_ADC1_Init+0xcc>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000200:	4b24      	ldr	r3, [pc, #144]	@ (8000294 <MX_ADC1_Init+0xcc>)
 8000202:	2204      	movs	r2, #4
 8000204:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000206:	4823      	ldr	r0, [pc, #140]	@ (8000294 <MX_ADC1_Init+0xcc>)
 8000208:	f002 ff90 	bl	800312c <HAL_ADC_Init>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000212:	f002 fb6f 	bl	80028f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000216:	2307      	movs	r3, #7
 8000218:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800021a:	2301      	movs	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800021e:	2307      	movs	r3, #7
 8000220:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4619      	mov	r1, r3
 8000226:	481b      	ldr	r0, [pc, #108]	@ (8000294 <MX_ADC1_Init+0xcc>)
 8000228:	f003 f8f6 	bl	8003418 <HAL_ADC_ConfigChannel>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000232:	f002 fb5f 	bl	80028f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000236:	230e      	movs	r3, #14
 8000238:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800023a:	2302      	movs	r3, #2
 800023c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4619      	mov	r1, r3
 8000242:	4814      	ldr	r0, [pc, #80]	@ (8000294 <MX_ADC1_Init+0xcc>)
 8000244:	f003 f8e8 	bl	8003418 <HAL_ADC_ConfigChannel>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800024e:	f002 fb51 	bl	80028f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000252:	230f      	movs	r3, #15
 8000254:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000256:	2303      	movs	r3, #3
 8000258:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4619      	mov	r1, r3
 800025e:	480d      	ldr	r0, [pc, #52]	@ (8000294 <MX_ADC1_Init+0xcc>)
 8000260:	f003 f8da 	bl	8003418 <HAL_ADC_ConfigChannel>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800026a:	f002 fb43 	bl	80028f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800026e:	2308      	movs	r3, #8
 8000270:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000272:	2304      	movs	r3, #4
 8000274:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4619      	mov	r1, r3
 800027a:	4806      	ldr	r0, [pc, #24]	@ (8000294 <MX_ADC1_Init+0xcc>)
 800027c:	f003 f8cc 	bl	8003418 <HAL_ADC_ConfigChannel>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000286:	f002 fb35 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800028a:	bf00      	nop
 800028c:	3710      	adds	r7, #16
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	2000002c 	.word	0x2000002c
 8000298:	40012400 	.word	0x40012400

0800029c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08c      	sub	sp, #48	@ 0x30
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a4:	f107 031c 	add.w	r3, r7, #28
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a42      	ldr	r2, [pc, #264]	@ (80003c4 <HAL_ADC_MspInit+0x128>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d17d      	bne.n	80003ba <HAL_ADC_MspInit+0x11e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002be:	4b42      	ldr	r3, [pc, #264]	@ (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a41      	ldr	r2, [pc, #260]	@ (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002c8:	6193      	str	r3, [r2, #24]
 80002ca:	4b3f      	ldr	r3, [pc, #252]	@ (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002d2:	61bb      	str	r3, [r7, #24]
 80002d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	4b3c      	ldr	r3, [pc, #240]	@ (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a3b      	ldr	r2, [pc, #236]	@ (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b39      	ldr	r3, [pc, #228]	@ (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002ea:	617b      	str	r3, [r7, #20]
 80002ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ee:	4b36      	ldr	r3, [pc, #216]	@ (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a35      	ldr	r2, [pc, #212]	@ (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b33      	ldr	r3, [pc, #204]	@ (80003c8 <HAL_ADC_MspInit+0x12c>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000302:	613b      	str	r3, [r7, #16]
 8000304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000306:	4b30      	ldr	r3, [pc, #192]	@ (80003c8 <HAL_ADC_MspInit+0x12c>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a2f      	ldr	r2, [pc, #188]	@ (80003c8 <HAL_ADC_MspInit+0x12c>)
 800030c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	4b2d      	ldr	r3, [pc, #180]	@ (80003c8 <HAL_ADC_MspInit+0x12c>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = FIN_ADC4_Pin;
 800031e:	2380      	movs	r3, #128	@ 0x80
 8000320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000322:	2303      	movs	r3, #3
 8000324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FIN_ADC4_GPIO_Port, &GPIO_InitStruct);
 800032a:	f107 031c 	add.w	r3, r7, #28
 800032e:	4619      	mov	r1, r3
 8000330:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000334:	f004 fd7e 	bl	8004e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FIN_ADC3_Pin|FIN_ADC2_Pin;
 8000338:	2330      	movs	r3, #48	@ 0x30
 800033a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800033c:	2303      	movs	r3, #3
 800033e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000340:	2300      	movs	r3, #0
 8000342:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000344:	f107 031c 	add.w	r3, r7, #28
 8000348:	4619      	mov	r1, r3
 800034a:	4820      	ldr	r0, [pc, #128]	@ (80003cc <HAL_ADC_MspInit+0x130>)
 800034c:	f004 fd72 	bl	8004e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FIN_ADC4B0_Pin;
 8000350:	2301      	movs	r3, #1
 8000352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000354:	2303      	movs	r3, #3
 8000356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FIN_ADC4B0_GPIO_Port, &GPIO_InitStruct);
 800035c:	f107 031c 	add.w	r3, r7, #28
 8000360:	4619      	mov	r1, r3
 8000362:	481b      	ldr	r0, [pc, #108]	@ (80003d0 <HAL_ADC_MspInit+0x134>)
 8000364:	f004 fd66 	bl	8004e34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000368:	4b1a      	ldr	r3, [pc, #104]	@ (80003d4 <HAL_ADC_MspInit+0x138>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	@ (80003d8 <HAL_ADC_MspInit+0x13c>)
 800036c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800036e:	4b19      	ldr	r3, [pc, #100]	@ (80003d4 <HAL_ADC_MspInit+0x138>)
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000374:	4b17      	ldr	r3, [pc, #92]	@ (80003d4 <HAL_ADC_MspInit+0x138>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800037a:	4b16      	ldr	r3, [pc, #88]	@ (80003d4 <HAL_ADC_MspInit+0x138>)
 800037c:	2280      	movs	r2, #128	@ 0x80
 800037e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000380:	4b14      	ldr	r3, [pc, #80]	@ (80003d4 <HAL_ADC_MspInit+0x138>)
 8000382:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000386:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000388:	4b12      	ldr	r3, [pc, #72]	@ (80003d4 <HAL_ADC_MspInit+0x138>)
 800038a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800038e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000390:	4b10      	ldr	r3, [pc, #64]	@ (80003d4 <HAL_ADC_MspInit+0x138>)
 8000392:	2220      	movs	r2, #32
 8000394:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000396:	4b0f      	ldr	r3, [pc, #60]	@ (80003d4 <HAL_ADC_MspInit+0x138>)
 8000398:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800039c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800039e:	480d      	ldr	r0, [pc, #52]	@ (80003d4 <HAL_ADC_MspInit+0x138>)
 80003a0:	f004 f941 	bl	8004626 <HAL_DMA_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 80003aa:	f002 faa3 	bl	80028f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a08      	ldr	r2, [pc, #32]	@ (80003d4 <HAL_ADC_MspInit+0x138>)
 80003b2:	621a      	str	r2, [r3, #32]
 80003b4:	4a07      	ldr	r2, [pc, #28]	@ (80003d4 <HAL_ADC_MspInit+0x138>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003ba:	bf00      	nop
 80003bc:	3730      	adds	r7, #48	@ 0x30
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40012400 	.word	0x40012400
 80003c8:	40021000 	.word	0x40021000
 80003cc:	48000800 	.word	0x48000800
 80003d0:	48000400 	.word	0x48000400
 80003d4:	2000005c 	.word	0x2000005c
 80003d8:	40020008 	.word	0x40020008

080003dc <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003e0:	4b17      	ldr	r3, [pc, #92]	@ (8000440 <MX_CAN_Init+0x64>)
 80003e2:	4a18      	ldr	r2, [pc, #96]	@ (8000444 <MX_CAN_Init+0x68>)
 80003e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 10;
 80003e6:	4b16      	ldr	r3, [pc, #88]	@ (8000440 <MX_CAN_Init+0x64>)
 80003e8:	220a      	movs	r2, #10
 80003ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003ec:	4b14      	ldr	r3, [pc, #80]	@ (8000440 <MX_CAN_Init+0x64>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003f2:	4b13      	ldr	r3, [pc, #76]	@ (8000440 <MX_CAN_Init+0x64>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80003f8:	4b11      	ldr	r3, [pc, #68]	@ (8000440 <MX_CAN_Init+0x64>)
 80003fa:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80003fe:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000400:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <MX_CAN_Init+0x64>)
 8000402:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000406:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000408:	4b0d      	ldr	r3, [pc, #52]	@ (8000440 <MX_CAN_Init+0x64>)
 800040a:	2200      	movs	r2, #0
 800040c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <MX_CAN_Init+0x64>)
 8000410:	2200      	movs	r2, #0
 8000412:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000414:	4b0a      	ldr	r3, [pc, #40]	@ (8000440 <MX_CAN_Init+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <MX_CAN_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000420:	4b07      	ldr	r3, [pc, #28]	@ (8000440 <MX_CAN_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <MX_CAN_Init+0x64>)
 8000428:	2200      	movs	r2, #0
 800042a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800042c:	4804      	ldr	r0, [pc, #16]	@ (8000440 <MX_CAN_Init+0x64>)
 800042e:	f003 f97e 	bl	800372e <HAL_CAN_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000438:	f002 fa5c 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	200000a0 	.word	0x200000a0
 8000444:	40006400 	.word	0x40006400

08000448 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08a      	sub	sp, #40	@ 0x28
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a1b      	ldr	r2, [pc, #108]	@ (80004d4 <HAL_CAN_MspInit+0x8c>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d130      	bne.n	80004cc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800046a:	4b1b      	ldr	r3, [pc, #108]	@ (80004d8 <HAL_CAN_MspInit+0x90>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a1a      	ldr	r2, [pc, #104]	@ (80004d8 <HAL_CAN_MspInit+0x90>)
 8000470:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b18      	ldr	r3, [pc, #96]	@ (80004d8 <HAL_CAN_MspInit+0x90>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800047e:	613b      	str	r3, [r7, #16]
 8000480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000482:	4b15      	ldr	r3, [pc, #84]	@ (80004d8 <HAL_CAN_MspInit+0x90>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a14      	ldr	r2, [pc, #80]	@ (80004d8 <HAL_CAN_MspInit+0x90>)
 8000488:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800048c:	6153      	str	r3, [r2, #20]
 800048e:	4b12      	ldr	r3, [pc, #72]	@ (80004d8 <HAL_CAN_MspInit+0x90>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800049a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800049e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a0:	2302      	movs	r3, #2
 80004a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a8:	2303      	movs	r3, #3
 80004aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80004ac:	2309      	movs	r3, #9
 80004ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	4619      	mov	r1, r3
 80004b6:	4809      	ldr	r0, [pc, #36]	@ (80004dc <HAL_CAN_MspInit+0x94>)
 80004b8:	f004 fcbc 	bl	8004e34 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	2014      	movs	r0, #20
 80004c2:	f004 f876 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80004c6:	2014      	movs	r0, #20
 80004c8:	f004 f88f 	bl	80045ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80004cc:	bf00      	nop
 80004ce:	3728      	adds	r7, #40	@ 0x28
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40006400 	.word	0x40006400
 80004d8:	40021000 	.word	0x40021000
 80004dc:	48000400 	.word	0x48000400

080004e0 <CAN_ConfigFilter>:
//  HAL_CAN_ConfigFilter(&hcan, &f);
//}

/* Tüm standart ID'leri kabul eden basit mask filtre (FIFO0) */
void CAN_ConfigFilter(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	@ 0x28
 80004e4:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef sFilter = {0};
 80004e6:	463b      	mov	r3, r7
 80004e8:	2228      	movs	r2, #40	@ 0x28
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f008 fce0 	bl	8008eb2 <memset>

  sFilter.FilterBank = 0;                          // 0..27 arası
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
  sFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
  sFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80004fa:	2301      	movs	r3, #1
 80004fc:	61fb      	str	r3, [r7, #28]
  sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]

  /* Accept-all: ID=0, MASK=0 */
  sFilter.FilterIdHigh      = 0x0000;
 8000502:	2300      	movs	r3, #0
 8000504:	603b      	str	r3, [r7, #0]
  sFilter.FilterIdLow       = 0x0000;
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
  sFilter.FilterMaskIdHigh  = 0x0000;
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
  sFilter.FilterMaskIdLow   = 0x0000;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]

  sFilter.FilterActivation = ENABLE;
 8000512:	2301      	movs	r3, #1
 8000514:	623b      	str	r3, [r7, #32]

  if (HAL_CAN_ConfigFilter(&hcan, &sFilter) != HAL_OK) {
 8000516:	463b      	mov	r3, r7
 8000518:	4619      	mov	r1, r3
 800051a:	4806      	ldr	r0, [pc, #24]	@ (8000534 <CAN_ConfigFilter+0x54>)
 800051c:	f003 fa02 	bl	8003924 <HAL_CAN_ConfigFilter>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <CAN_ConfigFilter+0x4a>
    Error_Handler();
 8000526:	f002 f9e5 	bl	80028f4 <Error_Handler>
  }
}
 800052a:	bf00      	nop
 800052c:	3728      	adds	r7, #40	@ 0x28
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200000a0 	.word	0x200000a0

08000538 <CAN_StartIT>:

/* CAN'i başlat + RX interrupt'larını aktive et */
void CAN_StartIT(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800053c:	4809      	ldr	r0, [pc, #36]	@ (8000564 <CAN_StartIT+0x2c>)
 800053e:	f003 fabb 	bl	8003ab8 <HAL_CAN_Start>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <CAN_StartIT+0x14>
    Error_Handler();
 8000548:	f002 f9d4 	bl	80028f4 <Error_Handler>
  }

  /* FIFO0'da mesaj gelince kesme, ayrıca TX mailbox boşalması vs. */
  if (HAL_CAN_ActivateNotification(&hcan,
 800054c:	f240 5103 	movw	r1, #1283	@ 0x503
 8000550:	4804      	ldr	r0, [pc, #16]	@ (8000564 <CAN_StartIT+0x2c>)
 8000552:	f003 fce7 	bl	8003f24 <HAL_CAN_ActivateNotification>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <CAN_StartIT+0x28>
      CAN_IT_RX_FIFO0_MSG_PENDING |
      CAN_IT_TX_MAILBOX_EMPTY |
      CAN_IT_ERROR_WARNING |
      CAN_IT_BUSOFF) != HAL_OK)
  {
    Error_Handler();
 800055c:	f002 f9ca 	bl	80028f4 <Error_Handler>
  }
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200000a0 	.word	0x200000a0

08000568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056e:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <MX_DMA_Init+0x70>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a19      	ldr	r2, [pc, #100]	@ (80005d8 <MX_DMA_Init+0x70>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <MX_DMA_Init+0x70>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000586:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <MX_DMA_Init+0x70>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a13      	ldr	r2, [pc, #76]	@ (80005d8 <MX_DMA_Init+0x70>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <MX_DMA_Init+0x70>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	200b      	movs	r0, #11
 80005a4:	f004 f805 	bl	80045b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005a8:	200b      	movs	r0, #11
 80005aa:	f004 f81e 	bl	80045ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2100      	movs	r1, #0
 80005b2:	200f      	movs	r0, #15
 80005b4:	f003 fffd 	bl	80045b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80005b8:	200f      	movs	r0, #15
 80005ba:	f004 f816 	bl	80045ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	203a      	movs	r0, #58	@ 0x3a
 80005c4:	f003 fff5 	bl	80045b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80005c8:	203a      	movs	r0, #58	@ 0x3a
 80005ca:	f004 f80e 	bl	80045ea <HAL_NVIC_EnableIRQ>

}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000

080005dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08c      	sub	sp, #48	@ 0x30
 80005e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b46      	ldr	r3, [pc, #280]	@ (800070c <MX_GPIO_Init+0x130>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a45      	ldr	r2, [pc, #276]	@ (800070c <MX_GPIO_Init+0x130>)
 80005f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b43      	ldr	r3, [pc, #268]	@ (800070c <MX_GPIO_Init+0x130>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000606:	61bb      	str	r3, [r7, #24]
 8000608:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060a:	4b40      	ldr	r3, [pc, #256]	@ (800070c <MX_GPIO_Init+0x130>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a3f      	ldr	r2, [pc, #252]	@ (800070c <MX_GPIO_Init+0x130>)
 8000610:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b3d      	ldr	r3, [pc, #244]	@ (800070c <MX_GPIO_Init+0x130>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800061e:	617b      	str	r3, [r7, #20]
 8000620:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b3a      	ldr	r3, [pc, #232]	@ (800070c <MX_GPIO_Init+0x130>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a39      	ldr	r2, [pc, #228]	@ (800070c <MX_GPIO_Init+0x130>)
 8000628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b37      	ldr	r3, [pc, #220]	@ (800070c <MX_GPIO_Init+0x130>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b34      	ldr	r3, [pc, #208]	@ (800070c <MX_GPIO_Init+0x130>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a33      	ldr	r2, [pc, #204]	@ (800070c <MX_GPIO_Init+0x130>)
 8000640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b31      	ldr	r3, [pc, #196]	@ (800070c <MX_GPIO_Init+0x130>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	4b2e      	ldr	r3, [pc, #184]	@ (800070c <MX_GPIO_Init+0x130>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a2d      	ldr	r2, [pc, #180]	@ (800070c <MX_GPIO_Init+0x130>)
 8000658:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800065c:	6153      	str	r3, [r2, #20]
 800065e:	4b2b      	ldr	r3, [pc, #172]	@ (800070c <MX_GPIO_Init+0x130>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066a:	4b28      	ldr	r3, [pc, #160]	@ (800070c <MX_GPIO_Init+0x130>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a27      	ldr	r2, [pc, #156]	@ (800070c <MX_GPIO_Init+0x130>)
 8000670:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b25      	ldr	r3, [pc, #148]	@ (800070c <MX_GPIO_Init+0x130>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = BTN_18_Pin|BTN_17_Pin|BTN_23_Pin|BTN_24_Pin
 8000682:	f64f 73cf 	movw	r3, #65487	@ 0xffcf
 8000686:	61fb      	str	r3, [r7, #28]
                          |BTN_21_Pin|BTN_22_Pin|BTN_07_Pin|BTN_15_Pin
                          |BTN_16_Pin|BTN_13_Pin|BTN_12_Pin|BTN_27_Pin
                          |BTN_28_Pin|BTN_25_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	481e      	ldr	r0, [pc, #120]	@ (8000710 <MX_GPIO_Init+0x134>)
 8000698:	f004 fbcc 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = BTN_08_Pin|BTN_05_Pin|BTN_06_Pin|BTN_03_Pin
 800069c:	f248 137f 	movw	r3, #33151	@ 0x817f
 80006a0:	61fb      	str	r3, [r7, #28]
                          |BTN_19_Pin|BTN_01_Pin|BTN_02_Pin|BTN_29_Pin
                          |BTN_09_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b4:	f004 fbbe 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_04_Pin|BTN_20_Pin|BTN_26_Pin|BTN_32_Pin
 80006b8:	f24c 0378 	movw	r3, #49272	@ 0xc078
 80006bc:	61fb      	str	r3, [r7, #28]
                          |BTN_31_Pin|BTN_30_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	4619      	mov	r1, r3
 80006cc:	4811      	ldr	r0, [pc, #68]	@ (8000714 <MX_GPIO_Init+0x138>)
 80006ce:	f004 fbb1 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_14_Pin;
 80006d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BTN_14_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	480c      	ldr	r0, [pc, #48]	@ (8000718 <MX_GPIO_Init+0x13c>)
 80006e8:	f004 fba4 	bl	8004e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = BTN_11_Pin|BTN_10_Pin;
 80006ec:	23c0      	movs	r3, #192	@ 0xc0
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4807      	ldr	r0, [pc, #28]	@ (800071c <MX_GPIO_Init+0x140>)
 8000700:	f004 fb98 	bl	8004e34 <HAL_GPIO_Init>

}
 8000704:	bf00      	nop
 8000706:	3730      	adds	r7, #48	@ 0x30
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000
 8000710:	48000800 	.word	0x48000800
 8000714:	48000400 	.word	0x48000400
 8000718:	48000c00 	.word	0x48000c00
 800071c:	48001400 	.word	0x48001400

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000724:	f002 fc78 	bl	8003018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f858 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f7ff ff56 	bl	80005dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000730:	f7ff ff1a 	bl	8000568 <MX_DMA_Init>
  MX_ADC1_Init();
 8000734:	f7ff fd48 	bl	80001c8 <MX_ADC1_Init>
  MX_CAN_Init();
 8000738:	f7ff fe50 	bl	80003dc <MX_CAN_Init>
  MX_SDADC1_Init();
 800073c:	f002 f8e0 	bl	8002900 <MX_SDADC1_Init>
  MX_TIM2_Init();
 8000740:	f002 fabe 	bl	8002cc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000744:	f002 fb08 	bl	8002d58 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000748:	f002 fb94 	bl	8002e74 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(1000);
 800074c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000750:	f002 fcc8 	bl	80030e4 <HAL_Delay>
	checkBootloader();
 8000754:	f000 f8fa 	bl	800094c <checkBootloader>

/*Baslangic için default config data atamasi*/
	firstLoadValue = (*(uint32_t*)DEFAULT_CONFIG_DATA_INTERFACE_OFFSET);
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <main+0x9c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <main+0xa0>)
 8000760:	701a      	strb	r2, [r3, #0]
	if(firstLoadValue == 0xFF)
 8000762:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <main+0xa0>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2bff      	cmp	r3, #255	@ 0xff
 8000768:	d101      	bne.n	800076e <main+0x4e>
	{
		writeDefaultConfigPage();
 800076a:	f001 ffe7 	bl	800273c <writeDefaultConfigPage>
		//sendDebugControl();
	}

	HAL_TIM_Base_Start_IT(&htim2);
 800076e:	4815      	ldr	r0, [pc, #84]	@ (80007c4 <main+0xa4>)
 8000770:	f006 fdc2 	bl	80072f8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000774:	4814      	ldr	r0, [pc, #80]	@ (80007c8 <main+0xa8>)
 8000776:	f006 fdbf 	bl	80072f8 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_DMA(&huart1, &rxDataIn, 1);
 800077a:	2201      	movs	r2, #1
 800077c:	4913      	ldr	r1, [pc, #76]	@ (80007cc <main+0xac>)
 800077e:	4814      	ldr	r0, [pc, #80]	@ (80007d0 <main+0xb0>)
 8000780:	f007 faab 	bl	8007cda <HAL_UART_Receive_DMA>

	CAN_ConfigFilter();       // Tüm ID'leri kabul et (mask filtre)
 8000784:	f7ff feac 	bl	80004e0 <CAN_ConfigFilter>
	CAN_StartIT();            // CAN'i başlat + RX interrupt aç
 8000788:	f7ff fed6 	bl	8000538 <CAN_StartIT>
//	  HAL_CAN_Start(&hcan);                              // CAN’ı başlat
//	  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // FIFO0 RX kesmesi


	//fingerAnalogread start
	HAL_ADCEx_Calibration_Start(&hadc1);
 800078c:	4811      	ldr	r0, [pc, #68]	@ (80007d4 <main+0xb4>)
 800078e:	f002 fda5 	bl	80032dc <HAL_ADCEx_Calibration_Start>
	HAL_SDADC_CalibrationStart(&hsdadc1, SDADC_CALIBRATION_SEQ_1);
 8000792:	2100      	movs	r1, #0
 8000794:	4810      	ldr	r0, [pc, #64]	@ (80007d8 <main+0xb8>)
 8000796:	f006 fb37 	bl	8006e08 <HAL_SDADC_CalibrationStart>
	HAL_SDADC_PollForCalibEvent(&hsdadc1, 1000);
 800079a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800079e:	480e      	ldr	r0, [pc, #56]	@ (80007d8 <main+0xb8>)
 80007a0:	f006 fb72 	bl	8006e88 <HAL_SDADC_PollForCalibEvent>
	configurationSettings();
 80007a4:	f000 f87e 	bl	80008a4 <configurationSettings>
	initDigitalInputs(getDigitalInputs());
 80007a8:	f000 fcf6 	bl	8001198 <getDigitalInputs>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fb26 	bl	8000e00 <initDigitalInputs>
//	    {
//	      can_rx_flag = 0;
//	      //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);    // bir şey alındı -> LED değiştir
//	      // rxh.StdId, rxh.DLC, rxdata[] burada kullanılabilir
//	    }
	  mainLoop();
 80007b4:	f000 f896 	bl	80008e4 <mainLoop>
 80007b8:	e7fc      	b.n	80007b4 <main+0x94>
 80007ba:	bf00      	nop
 80007bc:	0800f000 	.word	0x0800f000
 80007c0:	200004cb 	.word	0x200004cb
 80007c4:	20000578 	.word	0x20000578
 80007c8:	200005c4 	.word	0x200005c4
 80007cc:	2000038a 	.word	0x2000038a
 80007d0:	20000610 	.word	0x20000610
 80007d4:	2000002c 	.word	0x2000002c
 80007d8:	200004f0 	.word	0x200004f0

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b09a      	sub	sp, #104	@ 0x68
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007e6:	2228      	movs	r2, #40	@ 0x28
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f008 fb61 	bl	8008eb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
 80007fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000800:	463b      	mov	r3, r7
 8000802:	222c      	movs	r2, #44	@ 0x2c
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f008 fb53 	bl	8008eb2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080c:	2301      	movs	r3, #1
 800080e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000810:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000814:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV3;
 8000816:	2302      	movs	r3, #2
 8000818:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081a:	2301      	movs	r3, #1
 800081c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000822:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000826:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000828:	2300      	movs	r3, #0
 800082a:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000830:	4618      	mov	r0, r3
 8000832:	f004 fd55 	bl	80052e0 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800083c:	f002 f85a 	bl	80028f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	2302      	movs	r3, #2
 8000846:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000850:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000856:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f005 fd4d 	bl	80062fc <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000868:	f002 f844 	bl	80028f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1
 800086c:	f640 0381 	movw	r3, #2177	@ 0x881
 8000870:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SDADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000872:	2301      	movs	r3, #1
 8000874:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV4;
 8000876:	f04f 4308 	mov.w	r3, #2281701376	@ 0x88000000
 800087a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	4618      	mov	r0, r3
 8000884:	f005 ff4e 	bl	8006724 <HAL_RCCEx_PeriphCLKConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800088e:	f002 f831 	bl	80028f4 <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8000892:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000896:	f004 fc5f 	bl	8005158 <HAL_PWREx_EnableSDADC>
}
 800089a:	bf00      	nop
 800089c:	3768      	adds	r7, #104	@ 0x68
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <configurationSettings>:

/* USER CODE BEGIN 4 */
void configurationSettings(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	//check for DEFAULT/USER Configuration
	flashReadValue = (*(uint32_t*)CONFIG_DATA_DEFAULT_SELECT);
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <configurationSettings+0x30>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <configurationSettings+0x34>)
 80008b0:	701a      	strb	r2, [r3, #0]

	if(flashReadValue == 0xFF)
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <configurationSettings+0x34>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2bff      	cmp	r3, #255	@ 0xff
 80008b8:	d103      	bne.n	80008c2 <configurationSettings+0x1e>
	{
		loadDefaultValues(&userTkkConfig);
 80008ba:	4808      	ldr	r0, [pc, #32]	@ (80008dc <configurationSettings+0x38>)
 80008bc:	f001 f85c 	bl	8001978 <loadDefaultValues>
 80008c0:	e002      	b.n	80008c8 <configurationSettings+0x24>
	}
	else
	{
		readFlashUserConf(&userTkkConfig);
 80008c2:	4806      	ldr	r0, [pc, #24]	@ (80008dc <configurationSettings+0x38>)
 80008c4:	f001 f800 	bl	80018c8 <readFlashUserConf>
	}

	calculateJostickBorders(&userTkkConfig, &tkkJoystickBorder);
 80008c8:	4905      	ldr	r1, [pc, #20]	@ (80008e0 <configurationSettings+0x3c>)
 80008ca:	4804      	ldr	r0, [pc, #16]	@ (80008dc <configurationSettings+0x38>)
 80008cc:	f000 f9b2 	bl	8000c34 <calculateJostickBorders>
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	0800e000 	.word	0x0800e000
 80008d8:	200004ca 	.word	0x200004ca
 80008dc:	200003f4 	.word	0x200003f4
 80008e0:	20000494 	.word	0x20000494

080008e4 <mainLoop>:
void mainLoop(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	if(sampleAnalogInputs == true)
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <mainLoop+0x4c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d014      	beq.n	800091a <mainLoop+0x36>
		{
			//calculateJostickBorders(&userTkkConfig, &tkkJoystickBorder); // kaldırılacak
			//averageAnalogInputs(&AnADC_Values[0], &AnADC_Read[0], ANALOG_COUNT, AVERAGE_WINDOW);
			averageAnalogInputs(AnADC_Values, AnADC_Read, ANALOG_COUNT, AVERAGE_WINDOW);
 80008f0:	2302      	movs	r3, #2
 80008f2:	2202      	movs	r2, #2
 80008f4:	490f      	ldr	r1, [pc, #60]	@ (8000934 <mainLoop+0x50>)
 80008f6:	4810      	ldr	r0, [pc, #64]	@ (8000938 <mainLoop+0x54>)
 80008f8:	f000 f9f3 	bl	8000ce2 <averageAnalogInputs>
			calculateAxisData(&tkkJoystickBorder, &AnADC_Values[0], &fittedAnAdc_Values[0], XAXIS);
 80008fc:	2301      	movs	r3, #1
 80008fe:	4a0f      	ldr	r2, [pc, #60]	@ (800093c <mainLoop+0x58>)
 8000900:	490d      	ldr	r1, [pc, #52]	@ (8000938 <mainLoop+0x54>)
 8000902:	480f      	ldr	r0, [pc, #60]	@ (8000940 <mainLoop+0x5c>)
 8000904:	f000 f8bc 	bl	8000a80 <calculateAxisData>
			calculateAxisData(&tkkJoystickBorder, &AnADC_Values[1], &fittedAnAdc_Values[1], YAXIS);
 8000908:	2300      	movs	r3, #0
 800090a:	4a0e      	ldr	r2, [pc, #56]	@ (8000944 <mainLoop+0x60>)
 800090c:	490e      	ldr	r1, [pc, #56]	@ (8000948 <mainLoop+0x64>)
 800090e:	480c      	ldr	r0, [pc, #48]	@ (8000940 <mainLoop+0x5c>)
 8000910:	f000 f8b6 	bl	8000a80 <calculateAxisData>
			sampleAnalogInputs = false;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <mainLoop+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
		}

		sampleDigitalInputs(getDigitalInputs());
 800091a:	f000 fc3d 	bl	8001198 <getDigitalInputs>
 800091e:	4603      	mov	r3, r0
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fbab 	bl	800107c <sampleDigitalInputs>
		SDADC_ScanConversion();
 8000926:	f000 fa0f 	bl	8000d48 <SDADC_ScanConversion>
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000c8 	.word	0x200000c8
 8000934:	200000cc 	.word	0x200000cc
 8000938:	200000d4 	.word	0x200000d4
 800093c:	200000dc 	.word	0x200000dc
 8000940:	20000494 	.word	0x20000494
 8000944:	200000e0 	.word	0x200000e0
 8000948:	200000d8 	.word	0x200000d8

0800094c <checkBootloader>:

void checkBootloader(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	bootValue = *(uint32_t*)CONFIG_BOOTMODE_INIT_OFFSET;
 8000950:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <checkBootloader+0x48>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <checkBootloader+0x4c>)
 8000958:	801a      	strh	r2, [r3, #0]
	if(bootValue == 0x00CD)
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <checkBootloader+0x4c>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	2bcd      	cmp	r3, #205	@ 0xcd
 8000960:	d115      	bne.n	800098e <checkBootloader+0x42>
	{
			HAL_FLASH_Unlock();
 8000962:	f004 f8ff 	bl	8004b64 <HAL_FLASH_Unlock>
			static FLASH_EraseInitTypeDef eraseInit;
			eraseInit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000966:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <checkBootloader+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
			eraseInit.PageAddress = CONFIG_BOOTMODE_BASE_ADDR; // düzenlenecek !!!!!!!!!!!!!!!!!!!!*/
 800096c:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <checkBootloader+0x50>)
 800096e:	4a0c      	ldr	r2, [pc, #48]	@ (80009a0 <checkBootloader+0x54>)
 8000970:	605a      	str	r2, [r3, #4]
			eraseInit.NbPages     = 1;
 8000972:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <checkBootloader+0x50>)
 8000974:	2201      	movs	r2, #1
 8000976:	609a      	str	r2, [r3, #8]

			if (HAL_FLASHEx_Erase(&eraseInit, &PAGEError) != HAL_OK)
 8000978:	490a      	ldr	r1, [pc, #40]	@ (80009a4 <checkBootloader+0x58>)
 800097a:	4808      	ldr	r0, [pc, #32]	@ (800099c <checkBootloader+0x50>)
 800097c:	f004 f9b6 	bl	8004cec <HAL_FLASHEx_Erase>
			{
			}
			HAL_Delay(100);
 8000980:	2064      	movs	r0, #100	@ 0x64
 8000982:	f002 fbaf 	bl	80030e4 <HAL_Delay>
			HAL_FLASH_Lock();
 8000986:	f004 f913 	bl	8004bb0 <HAL_FLASH_Lock>
		bootloaderInit();
 800098a:	f000 f84d 	bl	8000a28 <bootloaderInit>
	}
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	0800a002 	.word	0x0800a002
 8000998:	200004c8 	.word	0x200004c8
 800099c:	200004cc 	.word	0x200004cc
 80009a0:	0800a000 	.word	0x0800a000
 80009a4:	200003a0 	.word	0x200003a0

080009a8 <bootloaderCommand>:

void bootloaderCommand(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80009ae:	f004 f8d9 	bl	8004b64 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInitStruct_BOOT;
	EraseInitStruct_BOOT.TypeErase   = FLASH_TYPEERASE_PAGES;
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
	EraseInitStruct_BOOT.PageAddress = CONFIG_BOOTMODE_BASE_ADDR; // düzenlenecek !!!!!!!!!!!!!!!!!!!!*/
 80009b6:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <bootloaderCommand+0x6c>)
 80009b8:	60bb      	str	r3, [r7, #8]
	EraseInitStruct_BOOT.NbPages     = 1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	60fb      	str	r3, [r7, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct_BOOT, &PAGEError) != HAL_OK)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4915      	ldr	r1, [pc, #84]	@ (8000a18 <bootloaderCommand+0x70>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	f004 f992 	bl	8004cec <HAL_FLASHEx_Erase>
	{

	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_BOOTMODE_INIT_OFFSET, 0x00CD);
 80009c8:	f04f 02cd 	mov.w	r2, #205	@ 0xcd
 80009cc:	f04f 0300 	mov.w	r3, #0
 80009d0:	4912      	ldr	r1, [pc, #72]	@ (8000a1c <bootloaderCommand+0x74>)
 80009d2:	2001      	movs	r0, #1
 80009d4:	f004 f856 	bl	8004a84 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80009d8:	f004 f8ea 	bl	8004bb0 <HAL_FLASH_Lock>
	bootValue = *(uint32_t*)CONFIG_BOOTMODE_INIT_OFFSET;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <bootloaderCommand+0x74>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <bootloaderCommand+0x78>)
 80009e4:	801a      	strh	r2, [r3, #0]

	if(bootValue == 0x00CD)
 80009e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <bootloaderCommand+0x78>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	2bcd      	cmp	r3, #205	@ 0xcd
 80009ec:	d10e      	bne.n	8000a0c <bootloaderCommand+0x64>
	{
		if(userTkkConfig.tkkModSelection == TKK_MOD_RS422)
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <bootloaderCommand+0x7c>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d102      	bne.n	80009fc <bootloaderCommand+0x54>
		{
			sendAckUart();
 80009f6:	f001 f817 	bl	8001a28 <sendAckUart>
 80009fa:	e005      	b.n	8000a08 <bootloaderCommand+0x60>
		}

		else if(userTkkConfig.tkkModSelection == TKK_MOD_CAN)
 80009fc:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <bootloaderCommand+0x7c>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d101      	bne.n	8000a08 <bootloaderCommand+0x60>
		{
			sendAckCan();
 8000a04:	f001 f832 	bl	8001a6c <sendAckCan>
		}
		HAL_NVIC_SystemReset();
 8000a08:	f003 fdfd 	bl	8004606 <HAL_NVIC_SystemReset>
	}
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	0800a000 	.word	0x0800a000
 8000a18:	200003a0 	.word	0x200003a0
 8000a1c:	0800a002 	.word	0x0800a002
 8000a20:	200004c8 	.word	0x200004c8
 8000a24:	200003f4 	.word	0x200003f4

08000a28 <bootloaderInit>:

void bootloaderInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
	SysMemBootJump = (void(*)(void)) (*((uint32_t*) (0x1FFFD800 + 4)));
 8000a2e:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <bootloaderInit+0x48>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <bootloaderInit+0x4c>)
 8000a36:	601a      	str	r2, [r3, #0]

	HAL_RCC_DeInit();
 8000a38:	f004 fbae 	bl	8005198 <HAL_RCC_DeInit>
	SysTick -> CTRL = 0;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <bootloaderInit+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
	SysTick -> LOAD = 0;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <bootloaderInit+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
	SysTick -> VAL  = 0;
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <bootloaderInit+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	2301      	movs	r3, #1
 8000a50:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	f383 8810 	msr	PRIMASK, r3
}
 8000a58:	bf00      	nop
	__set_PRIMASK(1);

	__set_MSP(DEFAULT_MSP_VALUE);
 8000a5a:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <bootloaderInit+0x54>)
 8000a5c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f383 8808 	msr	MSP, r3
}
 8000a64:	bf00      	nop
	SysMemBootJump();
 8000a66:	4b03      	ldr	r3, [pc, #12]	@ (8000a74 <bootloaderInit+0x4c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4798      	blx	r3
	while(1);
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <bootloaderInit+0x44>
 8000a70:	1fffd804 	.word	0x1fffd804
 8000a74:	200004c4 	.word	0x200004c4
 8000a78:	e000e010 	.word	0xe000e010
 8000a7c:	20001258 	.word	0x20001258

08000a80 <calculateAxisData>:
}
void calculateAxisData(joystickBorder* tempJoystickBorder, uint32_t* tempAnADC_Value, int32_t* fittedAnAdc_Values, bool axisData)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b087      	sub	sp, #28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
 8000a8c:	70fb      	strb	r3, [r7, #3]
	joystickBorder* joystickBorderPtr;
	joystickBorderPtr = tempJoystickBorder;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	617b      	str	r3, [r7, #20]
	errX = GPIO_PIN_RESET;
 8000a92:	4b65      	ldr	r3, [pc, #404]	@ (8000c28 <calculateAxisData+0x1a8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
	errY = GPIO_PIN_RESET;
 8000a98:	4b64      	ldr	r3, [pc, #400]	@ (8000c2c <calculateAxisData+0x1ac>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
	//calculate x-Axis
	if(axisData == 1)
 8000a9e:	78fb      	ldrb	r3, [r7, #3]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d05e      	beq.n	8000b62 <calculateAxisData+0xe2>
	{
		if(*tempAnADC_Value <= joystickBorderPtr->xLeftLow)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d806      	bhi.n	8000abe <calculateAxisData+0x3e>
		{
			//*fittedAnAdc_Values = -32766;
			*fittedAnAdc_Values = -2048;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a5f      	ldr	r2, [pc, #380]	@ (8000c30 <calculateAxisData+0x1b0>)
 8000ab4:	601a      	str	r2, [r3, #0]
			errX = GPIO_PIN_SET;
 8000ab6:	4b5c      	ldr	r3, [pc, #368]	@ (8000c28 <calculateAxisData+0x1a8>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
					*fittedAnAdc_Values = -2048;
				}
		}

	}
}
 8000abc:	e0ae      	b.n	8000c1c <calculateAxisData+0x19c>
		else if(*tempAnADC_Value >= joystickBorderPtr->xRightHigh)
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d307      	bcc.n	8000ada <calculateAxisData+0x5a>
			errX = GPIO_PIN_SET;
 8000aca:	4b57      	ldr	r3, [pc, #348]	@ (8000c28 <calculateAxisData+0x1a8>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
			*fittedAnAdc_Values = 2047;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000ad6:	601a      	str	r2, [r3, #0]
}
 8000ad8:	e0a0      	b.n	8000c1c <calculateAxisData+0x19c>
		else if(*tempAnADC_Value >= joystickBorderPtr -> xRightLow)
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d31c      	bcc.n	8000b20 <calculateAxisData+0xa0>
			*fittedAnAdc_Values = (((int)((*tempAnADC_Value) - (joystickBorderPtr->xRightLow))) * 2047) / (joystickBorderPtr -> xRightRange);
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	4613      	mov	r3, r2
 8000af4:	02db      	lsls	r3, r3, #11
 8000af6:	1a9b      	subs	r3, r3, r2
 8000af8:	461a      	mov	r2, r3
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values >= 2047)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8000b10:	4293      	cmp	r3, r2
 8000b12:	f340 8083 	ble.w	8000c1c <calculateAxisData+0x19c>
				*fittedAnAdc_Values = 2047;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000b1c:	601a      	str	r2, [r3, #0]
}
 8000b1e:	e07d      	b.n	8000c1c <calculateAxisData+0x19c>
		else if(*tempAnADC_Value < (joystickBorderPtr -> xLeftHigh))
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d277      	bcs.n	8000c1c <calculateAxisData+0x19c>
			*fittedAnAdc_Values = -((((int)((int)(joystickBorderPtr->xLeftHigh) - (int)(*tempAnADC_Value))) * (int)2047) / (joystickBorderPtr -> xLeftRange));
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	461a      	mov	r2, r3
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	1ad2      	subs	r2, r2, r3
 8000b38:	4613      	mov	r3, r2
 8000b3a:	02db      	lsls	r3, r3, #11
 8000b3c:	1a9b      	subs	r3, r3, r2
 8000b3e:	461a      	mov	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b48:	425b      	negs	r3, r3
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	601a      	str	r2, [r3, #0]
			if(*fittedAnAdc_Values <= -2048)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 8000b58:	dc60      	bgt.n	8000c1c <calculateAxisData+0x19c>
				*fittedAnAdc_Values = -2048;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a34      	ldr	r2, [pc, #208]	@ (8000c30 <calculateAxisData+0x1b0>)
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	e05c      	b.n	8000c1c <calculateAxisData+0x19c>
				if(*tempAnADC_Value <= joystickBorderPtr->yDownLow)
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d806      	bhi.n	8000b7c <calculateAxisData+0xfc>
				errY = GPIO_PIN_SET;
 8000b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c2c <calculateAxisData+0x1ac>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]
				*fittedAnAdc_Values = -2048;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a2e      	ldr	r2, [pc, #184]	@ (8000c30 <calculateAxisData+0x1b0>)
 8000b78:	601a      	str	r2, [r3, #0]
}
 8000b7a:	e04f      	b.n	8000c1c <calculateAxisData+0x19c>
			else if(*tempAnADC_Value >= joystickBorderPtr->yUpHigh)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d307      	bcc.n	8000b98 <calculateAxisData+0x118>
				*fittedAnAdc_Values = 2047;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000b8e:	601a      	str	r2, [r3, #0]
				errY = GPIO_PIN_SET;
 8000b90:	4b26      	ldr	r3, [pc, #152]	@ (8000c2c <calculateAxisData+0x1ac>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	701a      	strb	r2, [r3, #0]
}
 8000b96:	e041      	b.n	8000c1c <calculateAxisData+0x19c>
			else if(*tempAnADC_Value >= joystickBorderPtr -> yUpLow)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d31b      	bcc.n	8000bdc <calculateAxisData+0x15c>
				*fittedAnAdc_Values = (((int)((*tempAnADC_Value) - (joystickBorderPtr->yUpLow))) * 2047) / (joystickBorderPtr -> yUpRange);
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	02db      	lsls	r3, r3, #11
 8000bb4:	1a9b      	subs	r3, r3, r2
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	601a      	str	r2, [r3, #0]
				if(*fittedAnAdc_Values >= 2047)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	dd24      	ble.n	8000c1c <calculateAxisData+0x19c>
					*fittedAnAdc_Values = 2047;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000bd8:	601a      	str	r2, [r3, #0]
}
 8000bda:	e01f      	b.n	8000c1c <calculateAxisData+0x19c>
			else if(*tempAnADC_Value < (joystickBorderPtr -> yDownHigh))
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	69db      	ldr	r3, [r3, #28]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d219      	bcs.n	8000c1c <calculateAxisData+0x19c>
				*fittedAnAdc_Values = -((((int)((int)(joystickBorderPtr->yDownHigh) - (int)(*tempAnADC_Value))) * (int)2047) / (joystickBorderPtr -> yDownRange));
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	69db      	ldr	r3, [r3, #28]
 8000bec:	461a      	mov	r2, r3
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	1ad2      	subs	r2, r2, r3
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	02db      	lsls	r3, r3, #11
 8000bf8:	1a9b      	subs	r3, r3, r2
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	6a1b      	ldr	r3, [r3, #32]
 8000c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c04:	425b      	negs	r3, r3
 8000c06:	461a      	mov	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	601a      	str	r2, [r3, #0]
				if(*fittedAnAdc_Values <= -2048)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 8000c14:	dc02      	bgt.n	8000c1c <calculateAxisData+0x19c>
					*fittedAnAdc_Values = -2048;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <calculateAxisData+0x1b0>)
 8000c1a:	601a      	str	r2, [r3, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	371c      	adds	r7, #28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	200000c9 	.word	0x200000c9
 8000c2c:	200000ca 	.word	0x200000ca
 8000c30:	fffff800 	.word	0xfffff800

08000c34 <calculateJostickBorders>:
/* calculating joystick borders*/
void calculateJostickBorders(ConfigData* tempConfigData, joystickBorder* tempJoystickBorder)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
	ConfigData* configDataPtr;
	configDataPtr = tempConfigData;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	60fb      	str	r3, [r7, #12]

	joystickBorder* joystickBorderPtr;
	joystickBorderPtr = tempJoystickBorder;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	60bb      	str	r3, [r7, #8]

	joystickBorderPtr -> xLeftHigh 		= (configDataPtr -> xMid) - 1;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	88db      	ldrh	r3, [r3, #6]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	605a      	str	r2, [r3, #4]
	joystickBorderPtr -> xLeftLow  		= configDataPtr -> xMin;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	885b      	ldrh	r3, [r3, #2]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	601a      	str	r2, [r3, #0]
	joystickBorderPtr -> xLeftRange 	= (joystickBorderPtr -> xLeftHigh) - (joystickBorderPtr -> xLeftLow);
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	1ad2      	subs	r2, r2, r3
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	609a      	str	r2, [r3, #8]

	joystickBorderPtr -> xRightLow 		= (configDataPtr -> xMid) + 1;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	88db      	ldrh	r3, [r3, #6]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	461a      	mov	r2, r3
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	60da      	str	r2, [r3, #12]
	joystickBorderPtr -> xRightHigh  	= configDataPtr -> xMax;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	889b      	ldrh	r3, [r3, #4]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	611a      	str	r2, [r3, #16]
	joystickBorderPtr -> xRightRange 	= (joystickBorderPtr -> xRightHigh) - (joystickBorderPtr -> xRightLow);
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	691a      	ldr	r2, [r3, #16]
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	1ad2      	subs	r2, r2, r3
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	615a      	str	r2, [r3, #20]

	joystickBorderPtr -> yUpHigh 		= configDataPtr -> yMax;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	895b      	ldrh	r3, [r3, #10]
 8000c92:	461a      	mov	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	629a      	str	r2, [r3, #40]	@ 0x28
	joystickBorderPtr -> yUpLow  		= (configDataPtr -> yMid) + 1;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	899b      	ldrh	r3, [r3, #12]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	625a      	str	r2, [r3, #36]	@ 0x24
	joystickBorderPtr -> yUpRange 		= (joystickBorderPtr -> yUpHigh) - (joystickBorderPtr -> yUpLow);
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cac:	1ad2      	subs	r2, r2, r3
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	62da      	str	r2, [r3, #44]	@ 0x2c

	joystickBorderPtr -> yDownLow 		= configDataPtr -> yMin;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	891b      	ldrh	r3, [r3, #8]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	619a      	str	r2, [r3, #24]
	joystickBorderPtr -> yDownHigh  	= (configDataPtr -> yMid) - 1;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	899b      	ldrh	r3, [r3, #12]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	61da      	str	r2, [r3, #28]
	joystickBorderPtr -> yDownRange 	= (joystickBorderPtr -> yDownHigh) - (joystickBorderPtr -> yDownLow);
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	69da      	ldr	r2, [r3, #28]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	1ad2      	subs	r2, r2, r3
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	621a      	str	r2, [r3, #32]

}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <averageAnalogInputs>:
		@Param 				: none
		@description	:

*/
void averageAnalogInputs(uint32_t* ADC_BUFFERPtr, uint32_t* ADC_READPtr, uint32_t COUNT, uint32_t AVERAGE_WINDOW)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b089      	sub	sp, #36	@ 0x24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	603b      	str	r3, [r7, #0]
	uint32_t i = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
	uint32_t* tempADC_BUFFERPtr = ADC_BUFFERPtr;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	61bb      	str	r3, [r7, #24]
	uint32_t* tempADC_READPtr = ADC_READPtr;
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	617b      	str	r3, [r7, #20]

	for(i = 0; i < COUNT; i++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
 8000d00:	e016      	b.n	8000d30 <averageAnalogInputs+0x4e>
	{
		*tempADC_BUFFERPtr = ((*tempADC_BUFFERPtr)*(AVERAGE_WINDOW - 1) + (*tempADC_READPtr))/AVERAGE_WINDOW;
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	3a01      	subs	r2, #1
 8000d0a:	fb03 f202 	mul.w	r2, r3, r2
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	441a      	add	r2, r3
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	601a      	str	r2, [r3, #0]
		tempADC_BUFFERPtr++;
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	3304      	adds	r3, #4
 8000d22:	61bb      	str	r3, [r7, #24]
		tempADC_READPtr++;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	3304      	adds	r3, #4
 8000d28:	617b      	str	r3, [r7, #20]
	for(i = 0; i < COUNT; i++)
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	61fb      	str	r3, [r7, #28]
 8000d30:	69fa      	ldr	r2, [r7, #28]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d3e4      	bcc.n	8000d02 <averageAnalogInputs+0x20>
	}
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	3724      	adds	r7, #36	@ 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <SDADC_ScanConversion>:
		@Param 				: none
		@description	:

*/
void SDADC_ScanConversion(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0


		if(HAL_SDADC_ConfigChannel(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4927      	ldr	r1, [pc, #156]	@ (8000dec <SDADC_ScanConversion+0xa4>)
 8000d50:	4827      	ldr	r0, [pc, #156]	@ (8000df0 <SDADC_ScanConversion+0xa8>)
 8000d52:	f005 ff75 	bl	8006c40 <HAL_SDADC_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SDADC_ScanConversion+0x18>
		{
			Error_Handler();
 8000d5c:	f001 fdca 	bl	80028f4 <Error_Handler>
		}

		HAL_SDADC_Start(&hsdadc1);
 8000d60:	4823      	ldr	r0, [pc, #140]	@ (8000df0 <SDADC_ScanConversion+0xa8>)
 8000d62:	f006 f8ca 	bl	8006efa <HAL_SDADC_Start>
		if(HAL_SDADC_PollForConversion(&hsdadc1, 1000) != HAL_OK)
 8000d66:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d6a:	4821      	ldr	r0, [pc, #132]	@ (8000df0 <SDADC_ScanConversion+0xa8>)
 8000d6c:	f006 f8e0 	bl	8006f30 <HAL_SDADC_PollForConversion>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d005      	beq.n	8000d82 <SDADC_ScanConversion+0x3a>
		{
			 SDADCErrorCounter++;
 8000d76:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <SDADC_ScanConversion+0xac>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000df4 <SDADC_ScanConversion+0xac>)
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	e008      	b.n	8000d94 <SDADC_ScanConversion+0x4c>
		}
		else
		{
			AnADC_Read[0] = (HAL_SDADC_GetValue(&hsdadc1) + 0x8000) & 0xFFFF;
 8000d82:	481b      	ldr	r0, [pc, #108]	@ (8000df0 <SDADC_ScanConversion+0xa8>)
 8000d84:	f006 f949 	bl	800701a <HAL_SDADC_GetValue>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4a19      	ldr	r2, [pc, #100]	@ (8000df8 <SDADC_ScanConversion+0xb0>)
 8000d92:	6013      	str	r3, [r2, #0]

		}
		HAL_SDADC_Stop(&hsdadc1);
 8000d94:	4816      	ldr	r0, [pc, #88]	@ (8000df0 <SDADC_ScanConversion+0xa8>)
 8000d96:	f006 f925 	bl	8006fe4 <HAL_SDADC_Stop>

		if(HAL_SDADC_ConfigChannel(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4917      	ldr	r1, [pc, #92]	@ (8000dfc <SDADC_ScanConversion+0xb4>)
 8000d9e:	4814      	ldr	r0, [pc, #80]	@ (8000df0 <SDADC_ScanConversion+0xa8>)
 8000da0:	f005 ff4e 	bl	8006c40 <HAL_SDADC_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SDADC_ScanConversion+0x66>
		{
			Error_Handler();
 8000daa:	f001 fda3 	bl	80028f4 <Error_Handler>
		}

		HAL_SDADC_Start(&hsdadc1);
 8000dae:	4810      	ldr	r0, [pc, #64]	@ (8000df0 <SDADC_ScanConversion+0xa8>)
 8000db0:	f006 f8a3 	bl	8006efa <HAL_SDADC_Start>
		if(HAL_SDADC_PollForConversion(&hsdadc1, 1000) != HAL_OK)
 8000db4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000db8:	480d      	ldr	r0, [pc, #52]	@ (8000df0 <SDADC_ScanConversion+0xa8>)
 8000dba:	f006 f8b9 	bl	8006f30 <HAL_SDADC_PollForConversion>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d005      	beq.n	8000dd0 <SDADC_ScanConversion+0x88>
		{
			 SDADCErrorCounter++;
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <SDADC_ScanConversion+0xac>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <SDADC_ScanConversion+0xac>)
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e008      	b.n	8000de2 <SDADC_ScanConversion+0x9a>
		}
		else
		{
			AnADC_Read[1] = (HAL_SDADC_GetValue(&hsdadc1) + 0x8000) & 0xFFFF;
 8000dd0:	4807      	ldr	r0, [pc, #28]	@ (8000df0 <SDADC_ScanConversion+0xa8>)
 8000dd2:	f006 f922 	bl	800701a <HAL_SDADC_GetValue>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	4a06      	ldr	r2, [pc, #24]	@ (8000df8 <SDADC_ScanConversion+0xb0>)
 8000de0:	6053      	str	r3, [r2, #4]
		}
		HAL_SDADC_Stop(&hsdadc1);
 8000de2:	4803      	ldr	r0, [pc, #12]	@ (8000df0 <SDADC_ScanConversion+0xa8>)
 8000de4:	f006 f8fe 	bl	8006fe4 <HAL_SDADC_Stop>

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	00040010 	.word	0x00040010
 8000df0:	200004f0 	.word	0x200004f0
 8000df4:	200000e4 	.word	0x200000e4
 8000df8:	200000cc 	.word	0x200000cc
 8000dfc:	00050020 	.word	0x00050020

08000e00 <initDigitalInputs>:
				readFlag = false;
				readState = GPIO_PIN_RESET;
*/

void initDigitalInputs(digitalInput *digitalInputPtr)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	/****************************************************
	***	CUSTOM VALUES SHOULD BE INITIALIZED MANUALLY	***
	****************************************************/
	tutamakDigitalInputs[0].inputPin 	= BTN_01_Pin;
 8000e08:	4b97      	ldr	r3, [pc, #604]	@ (8001068 <initDigitalInputs+0x268>)
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	805a      	strh	r2, [r3, #2]
	tutamakDigitalInputs[0].inputPort	= BTN_01_GPIO_Port;
 8000e0e:	4b96      	ldr	r3, [pc, #600]	@ (8001068 <initDigitalInputs+0x268>)
 8000e10:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e14:	605a      	str	r2, [r3, #4]
	tutamakDigitalInputs[1].inputPin 	= BTN_02_Pin;
 8000e16:	4b94      	ldr	r3, [pc, #592]	@ (8001068 <initDigitalInputs+0x268>)
 8000e18:	2240      	movs	r2, #64	@ 0x40
 8000e1a:	82da      	strh	r2, [r3, #22]
	tutamakDigitalInputs[1].inputPort	= BTN_02_GPIO_Port;
 8000e1c:	4b92      	ldr	r3, [pc, #584]	@ (8001068 <initDigitalInputs+0x268>)
 8000e1e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e22:	619a      	str	r2, [r3, #24]
	tutamakDigitalInputs[2].inputPin 	= BTN_03_Pin;
 8000e24:	4b90      	ldr	r3, [pc, #576]	@ (8001068 <initDigitalInputs+0x268>)
 8000e26:	2208      	movs	r2, #8
 8000e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
	tutamakDigitalInputs[2].inputPort	= BTN_03_GPIO_Port;
 8000e2a:	4b8f      	ldr	r3, [pc, #572]	@ (8001068 <initDigitalInputs+0x268>)
 8000e2c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e30:	62da      	str	r2, [r3, #44]	@ 0x2c
	tutamakDigitalInputs[3].inputPin 	= BTN_04_Pin;
 8000e32:	4b8d      	ldr	r3, [pc, #564]	@ (8001068 <initDigitalInputs+0x268>)
 8000e34:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e38:	87da      	strh	r2, [r3, #62]	@ 0x3e
	tutamakDigitalInputs[3].inputPort	= BTN_04_GPIO_Port;
 8000e3a:	4b8b      	ldr	r3, [pc, #556]	@ (8001068 <initDigitalInputs+0x268>)
 8000e3c:	4a8b      	ldr	r2, [pc, #556]	@ (800106c <initDigitalInputs+0x26c>)
 8000e3e:	641a      	str	r2, [r3, #64]	@ 0x40
	tutamakDigitalInputs[4].inputPin 	= BTN_05_Pin;
 8000e40:	4b89      	ldr	r3, [pc, #548]	@ (8001068 <initDigitalInputs+0x268>)
 8000e42:	2202      	movs	r2, #2
 8000e44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	tutamakDigitalInputs[4].inputPort	= BTN_05_GPIO_Port;
 8000e48:	4b87      	ldr	r3, [pc, #540]	@ (8001068 <initDigitalInputs+0x268>)
 8000e4a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e4e:	655a      	str	r2, [r3, #84]	@ 0x54
	tutamakDigitalInputs[5].inputPin 	= BTN_06_Pin;
 8000e50:	4b85      	ldr	r3, [pc, #532]	@ (8001068 <initDigitalInputs+0x268>)
 8000e52:	2204      	movs	r2, #4
 8000e54:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
	tutamakDigitalInputs[5].inputPort	= BTN_06_GPIO_Port;
 8000e58:	4b83      	ldr	r3, [pc, #524]	@ (8001068 <initDigitalInputs+0x268>)
 8000e5a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e5e:	669a      	str	r2, [r3, #104]	@ 0x68
	tutamakDigitalInputs[6].inputPin 	= BTN_07_Pin;
 8000e60:	4b81      	ldr	r3, [pc, #516]	@ (8001068 <initDigitalInputs+0x268>)
 8000e62:	2208      	movs	r2, #8
 8000e64:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
	tutamakDigitalInputs[6].inputPort	= BTN_07_GPIO_Port;
 8000e68:	4b7f      	ldr	r3, [pc, #508]	@ (8001068 <initDigitalInputs+0x268>)
 8000e6a:	4a81      	ldr	r2, [pc, #516]	@ (8001070 <initDigitalInputs+0x270>)
 8000e6c:	67da      	str	r2, [r3, #124]	@ 0x7c
	tutamakDigitalInputs[7].inputPin 	= BTN_08_Pin;
 8000e6e:	4b7e      	ldr	r3, [pc, #504]	@ (8001068 <initDigitalInputs+0x268>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
	tutamakDigitalInputs[7].inputPort	= BTN_08_GPIO_Port;
 8000e76:	4b7c      	ldr	r3, [pc, #496]	@ (8001068 <initDigitalInputs+0x268>)
 8000e78:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	tutamakDigitalInputs[8].inputPin 	= BTN_09_Pin;
 8000e80:	4b79      	ldr	r3, [pc, #484]	@ (8001068 <initDigitalInputs+0x268>)
 8000e82:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e86:	f8a3 20a2 	strh.w	r2, [r3, #162]	@ 0xa2
	tutamakDigitalInputs[8].inputPort	= BTN_09_GPIO_Port;
 8000e8a:	4b77      	ldr	r3, [pc, #476]	@ (8001068 <initDigitalInputs+0x268>)
 8000e8c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000e90:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	tutamakDigitalInputs[9].inputPin 	= BTN_10_Pin;
 8000e94:	4b74      	ldr	r3, [pc, #464]	@ (8001068 <initDigitalInputs+0x268>)
 8000e96:	2280      	movs	r2, #128	@ 0x80
 8000e98:	f8a3 20b6 	strh.w	r2, [r3, #182]	@ 0xb6
	tutamakDigitalInputs[9].inputPort	= BTN_10_GPIO_Port;
 8000e9c:	4b72      	ldr	r3, [pc, #456]	@ (8001068 <initDigitalInputs+0x268>)
 8000e9e:	4a75      	ldr	r2, [pc, #468]	@ (8001074 <initDigitalInputs+0x274>)
 8000ea0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	tutamakDigitalInputs[10].inputPin 	= BTN_11_Pin;
 8000ea4:	4b70      	ldr	r3, [pc, #448]	@ (8001068 <initDigitalInputs+0x268>)
 8000ea6:	2240      	movs	r2, #64	@ 0x40
 8000ea8:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
	tutamakDigitalInputs[10].inputPort	= BTN_11_GPIO_Port;
 8000eac:	4b6e      	ldr	r3, [pc, #440]	@ (8001068 <initDigitalInputs+0x268>)
 8000eae:	4a71      	ldr	r2, [pc, #452]	@ (8001074 <initDigitalInputs+0x274>)
 8000eb0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	tutamakDigitalInputs[11].inputPin 	= BTN_12_Pin;
 8000eb4:	4b6c      	ldr	r3, [pc, #432]	@ (8001068 <initDigitalInputs+0x268>)
 8000eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eba:	f8a3 20de 	strh.w	r2, [r3, #222]	@ 0xde
	tutamakDigitalInputs[11].inputPort	= BTN_12_GPIO_Port;
 8000ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8001068 <initDigitalInputs+0x268>)
 8000ec0:	4a6b      	ldr	r2, [pc, #428]	@ (8001070 <initDigitalInputs+0x270>)
 8000ec2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	tutamakDigitalInputs[12].inputPin 	= BTN_13_Pin;
 8000ec6:	4b68      	ldr	r3, [pc, #416]	@ (8001068 <initDigitalInputs+0x268>)
 8000ec8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ecc:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
	tutamakDigitalInputs[12].inputPort	= BTN_13_GPIO_Port;
 8000ed0:	4b65      	ldr	r3, [pc, #404]	@ (8001068 <initDigitalInputs+0x268>)
 8000ed2:	4a67      	ldr	r2, [pc, #412]	@ (8001070 <initDigitalInputs+0x270>)
 8000ed4:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	tutamakDigitalInputs[13].inputPin 	= BTN_14_Pin;
 8000ed8:	4b63      	ldr	r3, [pc, #396]	@ (8001068 <initDigitalInputs+0x268>)
 8000eda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ede:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
	tutamakDigitalInputs[13].inputPort	= BTN_14_GPIO_Port;
 8000ee2:	4b61      	ldr	r3, [pc, #388]	@ (8001068 <initDigitalInputs+0x268>)
 8000ee4:	4a64      	ldr	r2, [pc, #400]	@ (8001078 <initDigitalInputs+0x278>)
 8000ee6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	tutamakDigitalInputs[14].inputPin 	= BTN_15_Pin;
 8000eea:	4b5f      	ldr	r3, [pc, #380]	@ (8001068 <initDigitalInputs+0x268>)
 8000eec:	2240      	movs	r2, #64	@ 0x40
 8000eee:	f8a3 211a 	strh.w	r2, [r3, #282]	@ 0x11a
	tutamakDigitalInputs[14].inputPort	= BTN_15_GPIO_Port;
 8000ef2:	4b5d      	ldr	r3, [pc, #372]	@ (8001068 <initDigitalInputs+0x268>)
 8000ef4:	4a5e      	ldr	r2, [pc, #376]	@ (8001070 <initDigitalInputs+0x270>)
 8000ef6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
	tutamakDigitalInputs[15].inputPin 	= BTN_16_Pin;
 8000efa:	4b5b      	ldr	r3, [pc, #364]	@ (8001068 <initDigitalInputs+0x268>)
 8000efc:	2280      	movs	r2, #128	@ 0x80
 8000efe:	f8a3 212e 	strh.w	r2, [r3, #302]	@ 0x12e
	tutamakDigitalInputs[15].inputPort	= BTN_16_GPIO_Port;
 8000f02:	4b59      	ldr	r3, [pc, #356]	@ (8001068 <initDigitalInputs+0x268>)
 8000f04:	4a5a      	ldr	r2, [pc, #360]	@ (8001070 <initDigitalInputs+0x270>)
 8000f06:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	tutamakDigitalInputs[16].inputPin 	= BTN_17_Pin;
 8000f0a:	4b57      	ldr	r3, [pc, #348]	@ (8001068 <initDigitalInputs+0x268>)
 8000f0c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f10:	f8a3 2142 	strh.w	r2, [r3, #322]	@ 0x142
	tutamakDigitalInputs[16].inputPort	= BTN_17_GPIO_Port;
 8000f14:	4b54      	ldr	r3, [pc, #336]	@ (8001068 <initDigitalInputs+0x268>)
 8000f16:	4a56      	ldr	r2, [pc, #344]	@ (8001070 <initDigitalInputs+0x270>)
 8000f18:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
	tutamakDigitalInputs[17].inputPin 	= BTN_18_Pin;
 8000f1c:	4b52      	ldr	r3, [pc, #328]	@ (8001068 <initDigitalInputs+0x268>)
 8000f1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f22:	f8a3 2156 	strh.w	r2, [r3, #342]	@ 0x156
	tutamakDigitalInputs[17].inputPort	= BTN_18_GPIO_Port;
 8000f26:	4b50      	ldr	r3, [pc, #320]	@ (8001068 <initDigitalInputs+0x268>)
 8000f28:	4a51      	ldr	r2, [pc, #324]	@ (8001070 <initDigitalInputs+0x270>)
 8000f2a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
	tutamakDigitalInputs[18].inputPin 	= BTN_19_Pin;
 8000f2e:	4b4e      	ldr	r3, [pc, #312]	@ (8001068 <initDigitalInputs+0x268>)
 8000f30:	2210      	movs	r2, #16
 8000f32:	f8a3 216a 	strh.w	r2, [r3, #362]	@ 0x16a
	tutamakDigitalInputs[18].inputPort	= BTN_19_GPIO_Port;
 8000f36:	4b4c      	ldr	r3, [pc, #304]	@ (8001068 <initDigitalInputs+0x268>)
 8000f38:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f3c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
	tutamakDigitalInputs[19].inputPin 	= BTN_20_Pin;
 8000f40:	4b49      	ldr	r3, [pc, #292]	@ (8001068 <initDigitalInputs+0x268>)
 8000f42:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f46:	f8a3 217e 	strh.w	r2, [r3, #382]	@ 0x17e
	tutamakDigitalInputs[19].inputPort	= BTN_20_GPIO_Port;
 8000f4a:	4b47      	ldr	r3, [pc, #284]	@ (8001068 <initDigitalInputs+0x268>)
 8000f4c:	4a47      	ldr	r2, [pc, #284]	@ (800106c <initDigitalInputs+0x26c>)
 8000f4e:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
	tutamakDigitalInputs[20].inputPin 	= BTN_21_Pin;
 8000f52:	4b45      	ldr	r3, [pc, #276]	@ (8001068 <initDigitalInputs+0x268>)
 8000f54:	2202      	movs	r2, #2
 8000f56:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192
	tutamakDigitalInputs[20].inputPort	= BTN_21_GPIO_Port;
 8000f5a:	4b43      	ldr	r3, [pc, #268]	@ (8001068 <initDigitalInputs+0x268>)
 8000f5c:	4a44      	ldr	r2, [pc, #272]	@ (8001070 <initDigitalInputs+0x270>)
 8000f5e:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	tutamakDigitalInputs[21].inputPin 	= BTN_22_Pin;
 8000f62:	4b41      	ldr	r3, [pc, #260]	@ (8001068 <initDigitalInputs+0x268>)
 8000f64:	2204      	movs	r2, #4
 8000f66:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6
	tutamakDigitalInputs[21].inputPort	= BTN_22_GPIO_Port;
 8000f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8001068 <initDigitalInputs+0x268>)
 8000f6c:	4a40      	ldr	r2, [pc, #256]	@ (8001070 <initDigitalInputs+0x270>)
 8000f6e:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
	tutamakDigitalInputs[22].inputPin 	= BTN_23_Pin;
 8000f72:	4b3d      	ldr	r3, [pc, #244]	@ (8001068 <initDigitalInputs+0x268>)
 8000f74:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f78:	f8a3 21ba 	strh.w	r2, [r3, #442]	@ 0x1ba
	tutamakDigitalInputs[22].inputPort	= BTN_23_GPIO_Port;
 8000f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8001068 <initDigitalInputs+0x268>)
 8000f7e:	4a3c      	ldr	r2, [pc, #240]	@ (8001070 <initDigitalInputs+0x270>)
 8000f80:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
	tutamakDigitalInputs[23].inputPin 	= BTN_24_Pin;
 8000f84:	4b38      	ldr	r3, [pc, #224]	@ (8001068 <initDigitalInputs+0x268>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	f8a3 21ce 	strh.w	r2, [r3, #462]	@ 0x1ce
	tutamakDigitalInputs[23].inputPort	= BTN_24_GPIO_Port;
 8000f8c:	4b36      	ldr	r3, [pc, #216]	@ (8001068 <initDigitalInputs+0x268>)
 8000f8e:	4a38      	ldr	r2, [pc, #224]	@ (8001070 <initDigitalInputs+0x270>)
 8000f90:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	tutamakDigitalInputs[24].inputPin 	= BTN_25_Pin;
 8000f94:	4b34      	ldr	r3, [pc, #208]	@ (8001068 <initDigitalInputs+0x268>)
 8000f96:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f9a:	f8a3 21e2 	strh.w	r2, [r3, #482]	@ 0x1e2
	tutamakDigitalInputs[24].inputPort	= BTN_25_GPIO_Port;
 8000f9e:	4b32      	ldr	r3, [pc, #200]	@ (8001068 <initDigitalInputs+0x268>)
 8000fa0:	4a33      	ldr	r2, [pc, #204]	@ (8001070 <initDigitalInputs+0x270>)
 8000fa2:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
	tutamakDigitalInputs[25].inputPin 	= BTN_26_Pin;
 8000fa6:	4b30      	ldr	r3, [pc, #192]	@ (8001068 <initDigitalInputs+0x268>)
 8000fa8:	2208      	movs	r2, #8
 8000faa:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
	tutamakDigitalInputs[25].inputPort	= BTN_26_GPIO_Port;
 8000fae:	4b2e      	ldr	r3, [pc, #184]	@ (8001068 <initDigitalInputs+0x268>)
 8000fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800106c <initDigitalInputs+0x26c>)
 8000fb2:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8
	tutamakDigitalInputs[26].inputPin 	= BTN_27_Pin;
 8000fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001068 <initDigitalInputs+0x268>)
 8000fb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fbc:	f8a3 220a 	strh.w	r2, [r3, #522]	@ 0x20a
	tutamakDigitalInputs[26].inputPort	= BTN_27_GPIO_Port;
 8000fc0:	4b29      	ldr	r3, [pc, #164]	@ (8001068 <initDigitalInputs+0x268>)
 8000fc2:	4a2b      	ldr	r2, [pc, #172]	@ (8001070 <initDigitalInputs+0x270>)
 8000fc4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	tutamakDigitalInputs[27].inputPin 	= BTN_28_Pin;
 8000fc8:	4b27      	ldr	r3, [pc, #156]	@ (8001068 <initDigitalInputs+0x268>)
 8000fca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000fce:	f8a3 221e 	strh.w	r2, [r3, #542]	@ 0x21e
	tutamakDigitalInputs[27].inputPort	= BTN_28_GPIO_Port;
 8000fd2:	4b25      	ldr	r3, [pc, #148]	@ (8001068 <initDigitalInputs+0x268>)
 8000fd4:	4a26      	ldr	r2, [pc, #152]	@ (8001070 <initDigitalInputs+0x270>)
 8000fd6:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	tutamakDigitalInputs[28].inputPin 	= BTN_29_Pin;
 8000fda:	4b23      	ldr	r3, [pc, #140]	@ (8001068 <initDigitalInputs+0x268>)
 8000fdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fe0:	f8a3 2232 	strh.w	r2, [r3, #562]	@ 0x232
	tutamakDigitalInputs[28].inputPort	= BTN_29_GPIO_Port;
 8000fe4:	4b20      	ldr	r3, [pc, #128]	@ (8001068 <initDigitalInputs+0x268>)
 8000fe6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000fea:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	tutamakDigitalInputs[29].inputPin 	= BTN_30_Pin;
 8000fee:	4b1e      	ldr	r3, [pc, #120]	@ (8001068 <initDigitalInputs+0x268>)
 8000ff0:	2240      	movs	r2, #64	@ 0x40
 8000ff2:	f8a3 2246 	strh.w	r2, [r3, #582]	@ 0x246
	tutamakDigitalInputs[29].inputPort	= BTN_30_GPIO_Port;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8001068 <initDigitalInputs+0x268>)
 8000ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800106c <initDigitalInputs+0x26c>)
 8000ffa:	f8c3 2248 	str.w	r2, [r3, #584]	@ 0x248
	tutamakDigitalInputs[30].inputPin 	= BTN_31_Pin;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8001068 <initDigitalInputs+0x268>)
 8001000:	2220      	movs	r2, #32
 8001002:	f8a3 225a 	strh.w	r2, [r3, #602]	@ 0x25a
	tutamakDigitalInputs[30].inputPort	= BTN_31_GPIO_Port;
 8001006:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <initDigitalInputs+0x268>)
 8001008:	4a18      	ldr	r2, [pc, #96]	@ (800106c <initDigitalInputs+0x26c>)
 800100a:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
	tutamakDigitalInputs[31].inputPin 	= BTN_32_Pin;
 800100e:	4b16      	ldr	r3, [pc, #88]	@ (8001068 <initDigitalInputs+0x268>)
 8001010:	2210      	movs	r2, #16
 8001012:	f8a3 226e 	strh.w	r2, [r3, #622]	@ 0x26e
	tutamakDigitalInputs[31].inputPort	= BTN_32_GPIO_Port;
 8001016:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <initDigitalInputs+0x268>)
 8001018:	4a14      	ldr	r2, [pc, #80]	@ (800106c <initDigitalInputs+0x26c>)
 800101a:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270
	/***************************************************/

	uint32_t i;
	digitalInput* tempDigitalInputPtr = digitalInputPtr;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < BUTTON_COUNT; i++)
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e014      	b.n	8001052 <initDigitalInputs+0x252>
	{
		tempDigitalInputPtr	->	inputVal = GPIO_PIN_RESET;
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
		tempDigitalInputPtr	->	readFlag = false;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2200      	movs	r2, #0
 8001032:	705a      	strb	r2, [r3, #1]
		tempDigitalInputPtr ->  readState= GPIO_PIN_RESET;
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2200      	movs	r2, #0
 8001038:	721a      	strb	r2, [r3, #8]
		tempDigitalInputPtr ->  debounceTimer = 0;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
		//for prototype debounce factor
		tempDigitalInputPtr ->  debounceFactor = 20; /*!!!!!!!!!!!!! config structtan cekilecek !!!!!!!!!!!!!!!!!*/
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	2214      	movs	r2, #20
 8001044:	611a      	str	r2, [r3, #16]
		tempDigitalInputPtr++;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	3314      	adds	r3, #20
 800104a:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < BUTTON_COUNT; i++)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3301      	adds	r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2b1f      	cmp	r3, #31
 8001056:	d9e7      	bls.n	8001028 <initDigitalInputs+0x228>
	}

}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200000e8 	.word	0x200000e8
 800106c:	48000400 	.word	0x48000400
 8001070:	48000800 	.word	0x48000800
 8001074:	48001400 	.word	0x48001400
 8001078:	48000c00 	.word	0x48000c00

0800107c <sampleDigitalInputs>:
		@description	:

*/

void sampleDigitalInputs(digitalInput *digitalInputPtr)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	uint32_t i;
	digitalInput* tempDigitalInputPtr = digitalInputPtr;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < BUTTON_COUNT; i++)
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	e053      	b.n	8001136 <sampleDigitalInputs+0xba>
	{
		if(tempDigitalInputPtr -> readFlag == true)
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	785b      	ldrb	r3, [r3, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d04c      	beq.n	8001130 <sampleDigitalInputs+0xb4>
		{
			if(tempDigitalInputPtr -> readState == GPIO_PIN_RESET)
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	7a1b      	ldrb	r3, [r3, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d11f      	bne.n	80010de <sampleDigitalInputs+0x62>
			{
				if(tempDigitalInputPtr -> inputVal == GPIO_PIN_RESET)
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d117      	bne.n	80010d6 <sampleDigitalInputs+0x5a>
				{
					if(tempDigitalInputPtr -> debounceTimer < tempDigitalInputPtr -> debounceFactor)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d204      	bcs.n	80010bc <sampleDigitalInputs+0x40>
					{
						tempDigitalInputPtr -> debounceTimer++;
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60da      	str	r2, [r3, #12]
					}
					if(tempDigitalInputPtr ->debounceTimer >= tempDigitalInputPtr ->debounceFactor)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d32d      	bcc.n	8001124 <sampleDigitalInputs+0xa8>
					{
						tempDigitalInputPtr -> debounceTimer = 0;
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
						tempDigitalInputPtr -> readState = GPIO_PIN_SET;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	2201      	movs	r2, #1
 80010d2:	721a      	strb	r2, [r3, #8]
 80010d4:	e026      	b.n	8001124 <sampleDigitalInputs+0xa8>
					}
				}
				else
				{
					tempDigitalInputPtr -> debounceTimer = 0;
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	e022      	b.n	8001124 <sampleDigitalInputs+0xa8>
				}
			}

			else if(tempDigitalInputPtr -> readState == GPIO_PIN_SET)
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	7a1b      	ldrb	r3, [r3, #8]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d11e      	bne.n	8001124 <sampleDigitalInputs+0xa8>
			{
				if(tempDigitalInputPtr -> inputVal == GPIO_PIN_SET)
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d117      	bne.n	800111e <sampleDigitalInputs+0xa2>
				{
					if(tempDigitalInputPtr -> debounceTimer < tempDigitalInputPtr -> debounceFactor)
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d204      	bcs.n	8001104 <sampleDigitalInputs+0x88>
					{
						tempDigitalInputPtr -> debounceTimer++;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60da      	str	r2, [r3, #12]
					}
					if(tempDigitalInputPtr ->debounceTimer >= tempDigitalInputPtr ->debounceFactor)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d309      	bcc.n	8001124 <sampleDigitalInputs+0xa8>
					{
						tempDigitalInputPtr -> debounceTimer = 0;
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
						tempDigitalInputPtr -> readState = GPIO_PIN_RESET;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	2200      	movs	r2, #0
 800111a:	721a      	strb	r2, [r3, #8]
 800111c:	e002      	b.n	8001124 <sampleDigitalInputs+0xa8>
					}
				}
				else
				{
					tempDigitalInputPtr -> debounceTimer = 0;
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
				}
			}

			tempDigitalInputPtr   ->  readFlag = false;
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	2200      	movs	r2, #0
 8001128:	705a      	strb	r2, [r3, #1]

			tempDigitalInputPtr++;
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	3314      	adds	r3, #20
 800112e:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < BUTTON_COUNT; i++)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3301      	adds	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b1f      	cmp	r3, #31
 800113a:	d9a8      	bls.n	800108e <sampleDigitalInputs+0x12>
		}
	}
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <readDigitalInputs>:
/** @brief 				: function to read digital inputs sequantially
	* @param 	uint8_t DIN_NUMBER number of digital inputs to read
	* @retval None
	*/
void readDigitalInputs(digitalInput *digitalInputPtr)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	uint32_t i;
	digitalInput* tempDigitalInputPtr = digitalInputPtr;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	60bb      	str	r3, [r7, #8]

	for(i=0;i<BUTTON_COUNT;i++)
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	e014      	b.n	8001186 <readDigitalInputs+0x3c>
	{
		tempDigitalInputPtr		->		inputVal = HAL_GPIO_ReadPin(tempDigitalInputPtr->inputPort, tempDigitalInputPtr->inputPin);
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	885b      	ldrh	r3, [r3, #2]
 8001164:	4619      	mov	r1, r3
 8001166:	4610      	mov	r0, r2
 8001168:	f003 ffde 	bl	8005128 <HAL_GPIO_ReadPin>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	701a      	strb	r2, [r3, #0]
		tempDigitalInputPtr		->		readFlag = true;
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	2201      	movs	r2, #1
 8001178:	705a      	strb	r2, [r3, #1]
		tempDigitalInputPtr++;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	3314      	adds	r3, #20
 800117e:	60bb      	str	r3, [r7, #8]
	for(i=0;i<BUTTON_COUNT;i++)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	3301      	adds	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2b1f      	cmp	r3, #31
 800118a:	d9e7      	bls.n	800115c <readDigitalInputs+0x12>
	}
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <getDigitalInputs>:
		@description	:

*/

digitalInput* getDigitalInputs(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
		return &tutamakDigitalInputs[0];
 800119c:	4b02      	ldr	r3, [pc, #8]	@ (80011a8 <getDigitalInputs+0x10>)
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	200000e8 	.word	0x200000e8

080011ac <sendUartFrame>:
		@Param 				: ----
		@description	: ----

*/
void sendUartFrame(UART_HandleTypeDef *huart,uint8_t* rs422Frame_, uint16_t Size, uint32_t Timeout, bool* sendFlag)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08e      	sub	sp, #56	@ 0x38
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	4613      	mov	r3, r2
 80011ba:	80fb      	strh	r3, [r7, #6]
	unsigned int i;
	if(*sendFlag == true && userTkkConfig.tkkModSelection == TKK_MOD_RS422)
 80011bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 810b 	beq.w	80013dc <sendUartFrame+0x230>
 80011c6:	4b7f      	ldr	r3, [pc, #508]	@ (80013c4 <sendUartFrame+0x218>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f040 8106 	bne.w	80013dc <sendUartFrame+0x230>
	{
		rs422Frame_[0] = RS422_HEADER;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	22b5      	movs	r2, #181	@ 0xb5
 80011d4:	701a      	strb	r2, [r3, #0]


		rs422Frame_[1] = 0x00 |
					   ( tutamakDigitalInputs[14].readState << 2) 	|									//SW4-DOWN
 80011d6:	4b7c      	ldr	r3, [pc, #496]	@ (80013c8 <sendUartFrame+0x21c>)
 80011d8:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	b25a      	sxtb	r2, r3
					   ( tutamakDigitalInputs[12].readState << 3) 	|									//SW4-UP
 80011e2:	4b79      	ldr	r3, [pc, #484]	@ (80013c8 <sendUartFrame+0x21c>)
 80011e4:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
					   ( tutamakDigitalInputs[14].readState << 2) 	|									//SW4-DOWN
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b25a      	sxtb	r2, r3
					   (((~(tutamakDigitalInputs[0].readState)) << 4) & 0x10);							//SW1
 80011f2:	4b75      	ldr	r3, [pc, #468]	@ (80013c8 <sendUartFrame+0x21c>)
 80011f4:	7a1b      	ldrb	r3, [r3, #8]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	f003 0310 	and.w	r3, r3, #16
 8001202:	b25b      	sxtb	r3, r3
					   ( tutamakDigitalInputs[12].readState << 3) 	|									//SW4-UP
 8001204:	4313      	orrs	r3, r2
 8001206:	b25a      	sxtb	r2, r3
		rs422Frame_[1] = 0x00 |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	3301      	adds	r3, #1
					   ( tutamakDigitalInputs[12].readState << 3) 	|									//SW4-UP
 800120c:	b2d2      	uxtb	r2, r2
		rs422Frame_[1] = 0x00 |
 800120e:	701a      	strb	r2, [r3, #0]

		rs422Frame_[2] = 0x00 |
						(((~(tutamakDigitalInputs[11].readState)) << 0) & 0x01)	| 						//SW7
 8001210:	4b6d      	ldr	r3, [pc, #436]	@ (80013c8 <sendUartFrame+0x21c>)
 8001212:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 8001216:	f003 0301 	and.w	r3, r3, #1
		rs422Frame_[2] = 0x00 |
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf0c      	ite	eq
 800121e:	2301      	moveq	r3, #1
 8001220:	2300      	movne	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	b25a      	sxtb	r2, r3
							(tutamakDigitalInputs[9].readState << 2) 			|						//SW6
 8001226:	4b68      	ldr	r3, [pc, #416]	@ (80013c8 <sendUartFrame+0x21c>)
 8001228:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
						(((~(tutamakDigitalInputs[11].readState)) << 0) & 0x01)	| 						//SW7
 800122c:	b25b      	sxtb	r3, r3
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	b25b      	sxtb	r3, r3
 8001232:	4313      	orrs	r3, r2
 8001234:	b25a      	sxtb	r2, r3
							(tutamakDigitalInputs[2].readState << 4);									//SW2
 8001236:	4b64      	ldr	r3, [pc, #400]	@ (80013c8 <sendUartFrame+0x21c>)
 8001238:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
							(tutamakDigitalInputs[9].readState << 2) 			|						//SW6
 800123c:	b25b      	sxtb	r3, r3
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	b25b      	sxtb	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b25a      	sxtb	r2, r3
		rs422Frame_[2] = 0x00 |
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	3302      	adds	r3, #2
							(tutamakDigitalInputs[9].readState << 2) 			|						//SW6
 800124a:	b2d2      	uxtb	r2, r2
		rs422Frame_[2] = 0x00 |
 800124c:	701a      	strb	r2, [r3, #0]

		rs422Frame_[3] = (tutamakDigitalInputs[7].readState) 		|									//SW5-RIGHT
 800124e:	4b5e      	ldr	r3, [pc, #376]	@ (80013c8 <sendUartFrame+0x21c>)
 8001250:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8001254:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[5].readState << 1) 	|									//SW5-LEFT
 8001256:	4b5c      	ldr	r3, [pc, #368]	@ (80013c8 <sendUartFrame+0x21c>)
 8001258:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
		rs422Frame_[3] = (tutamakDigitalInputs[7].readState) 		|									//SW5-RIGHT
 800125c:	b25b      	sxtb	r3, r3
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	b25b      	sxtb	r3, r3
 8001262:	4313      	orrs	r3, r2
 8001264:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[3].readState << 2) 	|									//SW5-DOWN
 8001266:	4b58      	ldr	r3, [pc, #352]	@ (80013c8 <sendUartFrame+0x21c>)
 8001268:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
						 (tutamakDigitalInputs[5].readState << 1) 	|									//SW5-LEFT
 800126c:	b25b      	sxtb	r3, r3
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	b25b      	sxtb	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[1].readState << 3) 	|									//SW5-UP
 8001276:	4b54      	ldr	r3, [pc, #336]	@ (80013c8 <sendUartFrame+0x21c>)
 8001278:	7f1b      	ldrb	r3, [r3, #28]
						 (tutamakDigitalInputs[3].readState << 2) 	|									//SW5-DOWN
 800127a:	b25b      	sxtb	r3, r3
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	b25b      	sxtb	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[10].readState << 4)	|									//SW3-RIGHT
 8001284:	4b50      	ldr	r3, [pc, #320]	@ (80013c8 <sendUartFrame+0x21c>)
 8001286:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
						 (tutamakDigitalInputs[1].readState << 3) 	|									//SW5-UP
 800128a:	b25b      	sxtb	r3, r3
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	b25b      	sxtb	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[8].readState << 5)	|									//SW3-LEFT
 8001294:	4b4c      	ldr	r3, [pc, #304]	@ (80013c8 <sendUartFrame+0x21c>)
 8001296:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
						 (tutamakDigitalInputs[10].readState << 4)	|									//SW3-RIGHT
 800129a:	b25b      	sxtb	r3, r3
 800129c:	015b      	lsls	r3, r3, #5
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[6].readState << 6)	|									//SW3-DOWN
 80012a4:	4b48      	ldr	r3, [pc, #288]	@ (80013c8 <sendUartFrame+0x21c>)
 80012a6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
						 (tutamakDigitalInputs[8].readState << 5)	|									//SW3-LEFT
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	019b      	lsls	r3, r3, #6
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b25a      	sxtb	r2, r3
						 (tutamakDigitalInputs[4].readState << 7);										//SW3-UP
 80012b4:	4b44      	ldr	r3, [pc, #272]	@ (80013c8 <sendUartFrame+0x21c>)
 80012b6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
						 (tutamakDigitalInputs[6].readState << 6)	|									//SW3-DOWN
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	01db      	lsls	r3, r3, #7
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b25a      	sxtb	r2, r3
		rs422Frame_[3] = (tutamakDigitalInputs[7].readState) 		|									//SW5-RIGHT
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	3303      	adds	r3, #3
						 (tutamakDigitalInputs[6].readState << 6)	|									//SW3-DOWN
 80012c8:	b2d2      	uxtb	r2, r2
		rs422Frame_[3] = (tutamakDigitalInputs[7].readState) 		|									//SW5-RIGHT
 80012ca:	701a      	strb	r2, [r3, #0]

		if(remoteMode == 0)
 80012cc:	4b3f      	ldr	r3, [pc, #252]	@ (80013cc <sendUartFrame+0x220>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d11a      	bne.n	800130a <sendUartFrame+0x15e>
		{
			//AnADC_Values[0]=( AnADC_Values[0] >> 3) & 0x1FFF;
			//AnADC_Values[1]=( AnADC_Values[1] >> 3) & 0x1FFF;

			rs422Frame_[4] = (AnADC_Values[0] >> 8) & 0xFF;// & 0x1F;			//AN2_7-0
 80012d4:	4b3e      	ldr	r3, [pc, #248]	@ (80013d0 <sendUartFrame+0x224>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	0a1a      	lsrs	r2, r3, #8
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	3304      	adds	r3, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	701a      	strb	r2, [r3, #0]
			rs422Frame_[5] =  AnADC_Values[0]       & 0xFF; 					//AN2_15-8
 80012e2:	4b3b      	ldr	r3, [pc, #236]	@ (80013d0 <sendUartFrame+0x224>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	3305      	adds	r3, #5
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	701a      	strb	r2, [r3, #0]

			rs422Frame_[6] = (AnADC_Values[1] >> 8) & 0xFF;      				//AN3_7-0
 80012ee:	4b38      	ldr	r3, [pc, #224]	@ (80013d0 <sendUartFrame+0x224>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	0a1a      	lsrs	r2, r3, #8
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	3306      	adds	r3, #6
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	701a      	strb	r2, [r3, #0]
			rs422Frame_[7] =  AnADC_Values[1]       & 0xFF; 					//AN3_15-8
 80012fc:	4b34      	ldr	r3, [pc, #208]	@ (80013d0 <sendUartFrame+0x224>)
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3307      	adds	r3, #7
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	e025      	b.n	8001356 <sendUartFrame+0x1aa>
			//fitted kullaniliyor

			//xAxisData = (AnADC_Values[0] >> 3) & 0x1FFF;
			//yAxisData = (AnADC_Values[1] >> 3) & 0x1FFF;

			rs422Frame_[4] = (fittedAnAdc_Values[0] >> 7) & 0x1F;
 800130a:	4b32      	ldr	r3, [pc, #200]	@ (80013d4 <sendUartFrame+0x228>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	11db      	asrs	r3, r3, #7
 8001310:	b2da      	uxtb	r2, r3
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	3304      	adds	r3, #4
 8001316:	f002 021f 	and.w	r2, r2, #31
 800131a:	b2d2      	uxtb	r2, r2
 800131c:	701a      	strb	r2, [r3, #0]
			rs422Frame_[5] =  fittedAnAdc_Values[0]       & 0x7F;
 800131e:	4b2d      	ldr	r3, [pc, #180]	@ (80013d4 <sendUartFrame+0x228>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	3305      	adds	r3, #5
 8001328:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	701a      	strb	r2, [r3, #0]

			rs422Frame_[6] = (fittedAnAdc_Values[1] >> 7) & 0x1F;
 8001330:	4b28      	ldr	r3, [pc, #160]	@ (80013d4 <sendUartFrame+0x228>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	11db      	asrs	r3, r3, #7
 8001336:	b2da      	uxtb	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	3306      	adds	r3, #6
 800133c:	f002 021f 	and.w	r2, r2, #31
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	701a      	strb	r2, [r3, #0]
			rs422Frame_[7] =  fittedAnAdc_Values[1]       & 0x7F;
 8001344:	4b23      	ldr	r3, [pc, #140]	@ (80013d4 <sendUartFrame+0x228>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	3307      	adds	r3, #7
 800134e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	701a      	strb	r2, [r3, #0]
		}

		rs422Frame_[8] = 0x00;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	3308      	adds	r3, #8
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
		//rs422Frame_[8] = 0x00 |
		//								errY << 7 |
		//								errX << 6;//error byte

		/* checksum calculation */
		rs422Frame_[RS422_FRAME_SIZE-1] = 0;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3309      	adds	r3, #9
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
		for(i=1;i<RS422_FRAME_SIZE-1;i++)
 8001366:	2301      	movs	r3, #1
 8001368:	637b      	str	r3, [r7, #52]	@ 0x34
 800136a:	e00e      	b.n	800138a <sendUartFrame+0x1de>
		{
			rs422Frame_[RS422_FRAME_SIZE-1] += rs422Frame_[i];
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	3309      	adds	r3, #9
 8001370:	7819      	ldrb	r1, [r3, #0]
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001376:	4413      	add	r3, r2
 8001378:	781a      	ldrb	r2, [r3, #0]
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	3309      	adds	r3, #9
 800137e:	440a      	add	r2, r1
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	701a      	strb	r2, [r3, #0]
		for(i=1;i<RS422_FRAME_SIZE-1;i++)
 8001384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001386:	3301      	adds	r3, #1
 8001388:	637b      	str	r3, [r7, #52]	@ 0x34
 800138a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800138c:	2b08      	cmp	r3, #8
 800138e:	d9ed      	bls.n	800136c <sendUartFrame+0x1c0>
		}
		rs422Frame_[RS422_FRAME_SIZE-1] = (255-rs422Frame_[RS422_FRAME_SIZE-1]) + 1;
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	3309      	adds	r3, #9
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	3309      	adds	r3, #9
 800139a:	4252      	negs	r2, r2
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	701a      	strb	r2, [r3, #0]
		rs422Frame_[RS422_FRAME_SIZE -1] = rs422Frame[RS422_FRAME_SIZE - 1] & 0x7F;
 80013a0:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <sendUartFrame+0x22c>)
 80013a2:	7a5a      	ldrb	r2, [r3, #9]
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	3309      	adds	r3, #9
 80013a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	701a      	strb	r2, [r3, #0]

		/* transmit frame */
		  HAL_UART_Transmit(huart, (uint8_t*)rs422Frame_, 10, Timeout);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	220a      	movs	r2, #10
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f006 fc06 	bl	8007bc8 <HAL_UART_Transmit>
		*sendFlag = false;
 80013bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	{
	// TX kuyruğu dolu vs. durumunda hata yönetimi
	}
	*sendFlag = false;
	}
}
 80013c2:	e1b2      	b.n	800172a <sendUartFrame+0x57e>
 80013c4:	200003f4 	.word	0x200003f4
 80013c8:	200000e8 	.word	0x200000e8
 80013cc:	20000000 	.word	0x20000000
 80013d0:	200000d4 	.word	0x200000d4
 80013d4:	200000dc 	.word	0x200000dc
 80013d8:	20000368 	.word	0x20000368
	else if(*sendFlag == true && userTkkConfig.tkkModSelection == TKK_MOD_CAN)
 80013dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 81a2 	beq.w	800172a <sendUartFrame+0x57e>
 80013e6:	4b9c      	ldr	r3, [pc, #624]	@ (8001658 <sendUartFrame+0x4ac>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	f040 819d 	bne.w	800172a <sendUartFrame+0x57e>
		rs422Frame_[0] = (((!tutamakDigitalInputs[0].readState))		|
 80013f0:	4b9a      	ldr	r3, [pc, #616]	@ (800165c <sendUartFrame+0x4b0>)
 80013f2:	7a1b      	ldrb	r3, [r3, #8]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bf0c      	ite	eq
 80013f8:	2301      	moveq	r3, #1
 80013fa:	2300      	movne	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[1].readState 	<< 1)	|
 8001400:	4b96      	ldr	r3, [pc, #600]	@ (800165c <sendUartFrame+0x4b0>)
 8001402:	7f1b      	ldrb	r3, [r3, #28]
		rs422Frame_[0] = (((!tutamakDigitalInputs[0].readState))		|
 8001404:	b25b      	sxtb	r3, r3
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	b25b      	sxtb	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[2].readState 	<< 2) 	|
 800140e:	4b93      	ldr	r3, [pc, #588]	@ (800165c <sendUartFrame+0x4b0>)
 8001410:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
						 (   tutamakDigitalInputs[1].readState 	<< 1)	|
 8001414:	b25b      	sxtb	r3, r3
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	b25b      	sxtb	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[3].readState 	<< 3) 	|
 800141e:	4b8f      	ldr	r3, [pc, #572]	@ (800165c <sendUartFrame+0x4b0>)
 8001420:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
						 (   tutamakDigitalInputs[2].readState 	<< 2) 	|
 8001424:	b25b      	sxtb	r3, r3
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	b25b      	sxtb	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[4].readState  << 4) 	|
 800142e:	4b8b      	ldr	r3, [pc, #556]	@ (800165c <sendUartFrame+0x4b0>)
 8001430:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
						 (   tutamakDigitalInputs[3].readState 	<< 3) 	|
 8001434:	b25b      	sxtb	r3, r3
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	b25b      	sxtb	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[5].readState 	<< 5) 	|
 800143e:	4b87      	ldr	r3, [pc, #540]	@ (800165c <sendUartFrame+0x4b0>)
 8001440:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
						 (   tutamakDigitalInputs[4].readState  << 4) 	|
 8001444:	b25b      	sxtb	r3, r3
 8001446:	015b      	lsls	r3, r3, #5
 8001448:	b25b      	sxtb	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[6].readState 	<< 6) 	|
 800144e:	4b83      	ldr	r3, [pc, #524]	@ (800165c <sendUartFrame+0x4b0>)
 8001450:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
						 (   tutamakDigitalInputs[5].readState 	<< 5) 	|
 8001454:	b25b      	sxtb	r3, r3
 8001456:	019b      	lsls	r3, r3, #6
 8001458:	b25b      	sxtb	r3, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	b25a      	sxtb	r2, r3
						 (   tutamakDigitalInputs[7].readState) << 7);
 800145e:	4b7f      	ldr	r3, [pc, #508]	@ (800165c <sendUartFrame+0x4b0>)
 8001460:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
						 (   tutamakDigitalInputs[6].readState 	<< 6) 	|
 8001464:	b25b      	sxtb	r3, r3
 8001466:	01db      	lsls	r3, r3, #7
 8001468:	b25b      	sxtb	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	b25b      	sxtb	r3, r3
 800146e:	b2da      	uxtb	r2, r3
		rs422Frame_[0] = (((!tutamakDigitalInputs[0].readState))		|
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	701a      	strb	r2, [r3, #0]
		rs422Frame_[1] = (((tutamakDigitalInputs[8].readState)			|
 8001474:	4b79      	ldr	r3, [pc, #484]	@ (800165c <sendUartFrame+0x4b0>)
 8001476:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800147a:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[9].readState 	<< 1)	|
 800147c:	4b77      	ldr	r3, [pc, #476]	@ (800165c <sendUartFrame+0x4b0>)
 800147e:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
		rs422Frame_[1] = (((tutamakDigitalInputs[8].readState)			|
 8001482:	b25b      	sxtb	r3, r3
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	b25b      	sxtb	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[10].readState 	<< 2) 	|
 800148c:	4b73      	ldr	r3, [pc, #460]	@ (800165c <sendUartFrame+0x4b0>)
 800148e:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
						 (  tutamakDigitalInputs[9].readState 	<< 1)	|
 8001492:	b25b      	sxtb	r3, r3
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	b25b      	sxtb	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b25b      	sxtb	r3, r3
						 ((!tutamakDigitalInputs[11].readState) << 3) 	|
 800149c:	4a6f      	ldr	r2, [pc, #444]	@ (800165c <sendUartFrame+0x4b0>)
 800149e:	f892 20e4 	ldrb.w	r2, [r2, #228]	@ 0xe4
						 (  tutamakDigitalInputs[10].readState 	<< 2) 	|
 80014a2:	2a00      	cmp	r2, #0
 80014a4:	d101      	bne.n	80014aa <sendUartFrame+0x2fe>
 80014a6:	2208      	movs	r2, #8
 80014a8:	e000      	b.n	80014ac <sendUartFrame+0x300>
 80014aa:	2200      	movs	r2, #0
 80014ac:	4313      	orrs	r3, r2
 80014ae:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[12].readState  << 4) 	|
 80014b0:	4b6a      	ldr	r3, [pc, #424]	@ (800165c <sendUartFrame+0x4b0>)
 80014b2:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
						 ((!tutamakDigitalInputs[11].readState) << 3) 	|
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[13].readState 	<< 5) 	|
 80014c0:	4b66      	ldr	r3, [pc, #408]	@ (800165c <sendUartFrame+0x4b0>)
 80014c2:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
						 (  tutamakDigitalInputs[12].readState  << 4) 	|
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	015b      	lsls	r3, r3, #5
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[14].readState 	<< 6) 	|
 80014d0:	4b62      	ldr	r3, [pc, #392]	@ (800165c <sendUartFrame+0x4b0>)
 80014d2:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
						 (  tutamakDigitalInputs[13].readState 	<< 5) 	|
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	019b      	lsls	r3, r3, #6
 80014da:	b25b      	sxtb	r3, r3
 80014dc:	4313      	orrs	r3, r2
 80014de:	b25a      	sxtb	r2, r3
						 (  tutamakDigitalInputs[15].readState) << 7));
 80014e0:	4b5e      	ldr	r3, [pc, #376]	@ (800165c <sendUartFrame+0x4b0>)
 80014e2:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
						 (  tutamakDigitalInputs[14].readState 	<< 6) 	|
 80014e6:	b25b      	sxtb	r3, r3
 80014e8:	01db      	lsls	r3, r3, #7
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b25a      	sxtb	r2, r3
		rs422Frame_[1] = (((tutamakDigitalInputs[8].readState)			|
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	3301      	adds	r3, #1
						 (  tutamakDigitalInputs[14].readState 	<< 6) 	|
 80014f4:	b2d2      	uxtb	r2, r2
		rs422Frame_[1] = (((tutamakDigitalInputs[8].readState)			|
 80014f6:	701a      	strb	r2, [r3, #0]
		rs422Frame_[2] =((( tutamakDigitalInputs[16].readState)			|
 80014f8:	4b58      	ldr	r3, [pc, #352]	@ (800165c <sendUartFrame+0x4b0>)
 80014fa:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 80014fe:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[17].readState 	<< 1)	|
 8001500:	4b56      	ldr	r3, [pc, #344]	@ (800165c <sendUartFrame+0x4b0>)
 8001502:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
		rs422Frame_[2] =((( tutamakDigitalInputs[16].readState)			|
 8001506:	b25b      	sxtb	r3, r3
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	b25b      	sxtb	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[18].readState 	<< 2) 	|
 8001510:	4b52      	ldr	r3, [pc, #328]	@ (800165c <sendUartFrame+0x4b0>)
 8001512:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
						(   tutamakDigitalInputs[17].readState 	<< 1)	|
 8001516:	b25b      	sxtb	r3, r3
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	b25b      	sxtb	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[19].readState 	<< 3) 	|
 8001520:	4b4e      	ldr	r3, [pc, #312]	@ (800165c <sendUartFrame+0x4b0>)
 8001522:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
						(   tutamakDigitalInputs[18].readState 	<< 2) 	|
 8001526:	b25b      	sxtb	r3, r3
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[20].readState  << 4) 	|
 8001530:	4b4a      	ldr	r3, [pc, #296]	@ (800165c <sendUartFrame+0x4b0>)
 8001532:	f893 3198 	ldrb.w	r3, [r3, #408]	@ 0x198
						(   tutamakDigitalInputs[19].readState 	<< 3) 	|
 8001536:	b25b      	sxtb	r3, r3
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	b25b      	sxtb	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[21].readState 	<< 5) 	|
 8001540:	4b46      	ldr	r3, [pc, #280]	@ (800165c <sendUartFrame+0x4b0>)
 8001542:	f893 31ac 	ldrb.w	r3, [r3, #428]	@ 0x1ac
						(   tutamakDigitalInputs[20].readState  << 4) 	|
 8001546:	b25b      	sxtb	r3, r3
 8001548:	015b      	lsls	r3, r3, #5
 800154a:	b25b      	sxtb	r3, r3
 800154c:	4313      	orrs	r3, r2
 800154e:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[22].readState 	<< 6) 	|
 8001550:	4b42      	ldr	r3, [pc, #264]	@ (800165c <sendUartFrame+0x4b0>)
 8001552:	f893 31c0 	ldrb.w	r3, [r3, #448]	@ 0x1c0
						(   tutamakDigitalInputs[21].readState 	<< 5) 	|
 8001556:	b25b      	sxtb	r3, r3
 8001558:	019b      	lsls	r3, r3, #6
 800155a:	b25b      	sxtb	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[23].readState) << 7));
 8001560:	4b3e      	ldr	r3, [pc, #248]	@ (800165c <sendUartFrame+0x4b0>)
 8001562:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
						(   tutamakDigitalInputs[22].readState 	<< 6) 	|
 8001566:	b25b      	sxtb	r3, r3
 8001568:	01db      	lsls	r3, r3, #7
 800156a:	b25b      	sxtb	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b25a      	sxtb	r2, r3
		rs422Frame_[2] =((( tutamakDigitalInputs[16].readState)			|
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	3302      	adds	r3, #2
						(   tutamakDigitalInputs[22].readState 	<< 6) 	|
 8001574:	b2d2      	uxtb	r2, r2
		rs422Frame_[2] =((( tutamakDigitalInputs[16].readState)			|
 8001576:	701a      	strb	r2, [r3, #0]
		rs422Frame_[3] =((( tutamakDigitalInputs[24].readState)			|
 8001578:	4b38      	ldr	r3, [pc, #224]	@ (800165c <sendUartFrame+0x4b0>)
 800157a:	f893 31e8 	ldrb.w	r3, [r3, #488]	@ 0x1e8
 800157e:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[25].readState 	<< 1)	|
 8001580:	4b36      	ldr	r3, [pc, #216]	@ (800165c <sendUartFrame+0x4b0>)
 8001582:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
		rs422Frame_[3] =((( tutamakDigitalInputs[24].readState)			|
 8001586:	b25b      	sxtb	r3, r3
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	b25b      	sxtb	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[26].readState 	<< 2) 	|
 8001590:	4b32      	ldr	r3, [pc, #200]	@ (800165c <sendUartFrame+0x4b0>)
 8001592:	f893 3210 	ldrb.w	r3, [r3, #528]	@ 0x210
						(   tutamakDigitalInputs[25].readState 	<< 1)	|
 8001596:	b25b      	sxtb	r3, r3
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	b25b      	sxtb	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[27].readState 	<< 3) 	|
 80015a0:	4b2e      	ldr	r3, [pc, #184]	@ (800165c <sendUartFrame+0x4b0>)
 80015a2:	f893 3224 	ldrb.w	r3, [r3, #548]	@ 0x224
						(   tutamakDigitalInputs[26].readState 	<< 2) 	|
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[28].readState  << 4) 	|
 80015b0:	4b2a      	ldr	r3, [pc, #168]	@ (800165c <sendUartFrame+0x4b0>)
 80015b2:	f893 3238 	ldrb.w	r3, [r3, #568]	@ 0x238
						(   tutamakDigitalInputs[27].readState 	<< 3) 	|
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[29].readState 	<< 5) 	|
 80015c0:	4b26      	ldr	r3, [pc, #152]	@ (800165c <sendUartFrame+0x4b0>)
 80015c2:	f893 324c 	ldrb.w	r3, [r3, #588]	@ 0x24c
						(   tutamakDigitalInputs[28].readState  << 4) 	|
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	015b      	lsls	r3, r3, #5
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[30].readState 	<< 6) 	|
 80015d0:	4b22      	ldr	r3, [pc, #136]	@ (800165c <sendUartFrame+0x4b0>)
 80015d2:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
						(   tutamakDigitalInputs[29].readState 	<< 5) 	|
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	019b      	lsls	r3, r3, #6
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	4313      	orrs	r3, r2
 80015de:	b25a      	sxtb	r2, r3
						(   tutamakDigitalInputs[31].readState) << 7));
 80015e0:	4b1e      	ldr	r3, [pc, #120]	@ (800165c <sendUartFrame+0x4b0>)
 80015e2:	f893 3274 	ldrb.w	r3, [r3, #628]	@ 0x274
						(   tutamakDigitalInputs[30].readState 	<< 6) 	|
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	01db      	lsls	r3, r3, #7
 80015ea:	b25b      	sxtb	r3, r3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	b25a      	sxtb	r2, r3
		rs422Frame_[3] =((( tutamakDigitalInputs[24].readState)			|
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	3303      	adds	r3, #3
						(   tutamakDigitalInputs[30].readState 	<< 6) 	|
 80015f4:	b2d2      	uxtb	r2, r2
		rs422Frame_[3] =((( tutamakDigitalInputs[24].readState)			|
 80015f6:	701a      	strb	r2, [r3, #0]
		if(remoteMode == 0)
 80015f8:	4b19      	ldr	r3, [pc, #100]	@ (8001660 <sendUartFrame+0x4b4>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d135      	bne.n	800166c <sendUartFrame+0x4c0>
			rs422Frame_[4] = ((AnADC_Values[0]/100) >> 8) & 0xFF;// & 0x1F;			//AN2_7-0
 8001600:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <sendUartFrame+0x4b8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a18      	ldr	r2, [pc, #96]	@ (8001668 <sendUartFrame+0x4bc>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	0a1a      	lsrs	r2, r3, #8
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	3304      	adds	r3, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]
			rs422Frame_[5] =  (AnADC_Values[0]/100)       & 0xFF; 					//AN2_15-8
 8001616:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <sendUartFrame+0x4b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a13      	ldr	r2, [pc, #76]	@ (8001668 <sendUartFrame+0x4bc>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	095a      	lsrs	r2, r3, #5
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	3305      	adds	r3, #5
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]
			rs422Frame_[6] = ((AnADC_Values[1]/100) >> 8) & 0xFF;      				//AN3_7-0
 800162a:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <sendUartFrame+0x4b8>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4a0e      	ldr	r2, [pc, #56]	@ (8001668 <sendUartFrame+0x4bc>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	095b      	lsrs	r3, r3, #5
 8001636:	0a1a      	lsrs	r2, r3, #8
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	3306      	adds	r3, #6
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	701a      	strb	r2, [r3, #0]
			rs422Frame_[7] =  (AnADC_Values[1]/100)       & 0xFF; 					//AN3_15-8
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <sendUartFrame+0x4b8>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	4a08      	ldr	r2, [pc, #32]	@ (8001668 <sendUartFrame+0x4bc>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	095a      	lsrs	r2, r3, #5
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	3307      	adds	r3, #7
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	e030      	b.n	80016b8 <sendUartFrame+0x50c>
 8001656:	bf00      	nop
 8001658:	200003f4 	.word	0x200003f4
 800165c:	200000e8 	.word	0x200000e8
 8001660:	20000000 	.word	0x20000000
 8001664:	200000d4 	.word	0x200000d4
 8001668:	51eb851f 	.word	0x51eb851f
			rs422Frame_[4] = (fittedAnAdc_Values[0] >> 7) & 0x1F;
 800166c:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <sendUartFrame+0x588>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	11db      	asrs	r3, r3, #7
 8001672:	b2da      	uxtb	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	3304      	adds	r3, #4
 8001678:	f002 021f 	and.w	r2, r2, #31
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	701a      	strb	r2, [r3, #0]
			rs422Frame_[5] =  fittedAnAdc_Values[0]       & 0x7F;
 8001680:	4b2c      	ldr	r3, [pc, #176]	@ (8001734 <sendUartFrame+0x588>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3305      	adds	r3, #5
 800168a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]
			rs422Frame_[6] = (fittedAnAdc_Values[1] >> 7) & 0x1F;
 8001692:	4b28      	ldr	r3, [pc, #160]	@ (8001734 <sendUartFrame+0x588>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	11db      	asrs	r3, r3, #7
 8001698:	b2da      	uxtb	r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	3306      	adds	r3, #6
 800169e:	f002 021f 	and.w	r2, r2, #31
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]
			rs422Frame_[7] =  fittedAnAdc_Values[1]       & 0x7F;
 80016a6:	4b23      	ldr	r3, [pc, #140]	@ (8001734 <sendUartFrame+0x588>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	3307      	adds	r3, #7
 80016b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	701a      	strb	r2, [r3, #0]
	CAN_TxHeaderTypeDef txHeader = {0};
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	615a      	str	r2, [r3, #20]
	txHeader.StdId = 0x242;
 80016ca:	f240 2342 	movw	r3, #578	@ 0x242
 80016ce:	61fb      	str	r3, [r7, #28]
	txHeader.IDE   = CAN_ID_STD;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.RTR   = CAN_RTR_DATA;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.DLC   = 8;
 80016d8:	2308      	movs	r3, #8
 80016da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	txHeader.TransmitGlobalTime = DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	uint8_t data[8] = { rs422Frame_[0],
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	753b      	strb	r3, [r7, #20]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	785b      	ldrb	r3, [r3, #1]
 80016ec:	757b      	strb	r3, [r7, #21]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	789b      	ldrb	r3, [r3, #2]
 80016f2:	75bb      	strb	r3, [r7, #22]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	78db      	ldrb	r3, [r3, #3]
 80016f8:	75fb      	strb	r3, [r7, #23]
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	791b      	ldrb	r3, [r3, #4]
 80016fe:	763b      	strb	r3, [r7, #24]
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	795b      	ldrb	r3, [r3, #5]
 8001704:	767b      	strb	r3, [r7, #25]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	799b      	ldrb	r3, [r3, #6]
 800170a:	76bb      	strb	r3, [r7, #26]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	79db      	ldrb	r3, [r3, #7]
 8001710:	76fb      	strb	r3, [r7, #27]
	if (HAL_CAN_AddTxMessage(&hcan, &txHeader, data, &txMailbox) != HAL_OK)
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	f107 0214 	add.w	r2, r7, #20
 800171a:	f107 011c 	add.w	r1, r7, #28
 800171e:	4806      	ldr	r0, [pc, #24]	@ (8001738 <sendUartFrame+0x58c>)
 8001720:	f002 fa0e 	bl	8003b40 <HAL_CAN_AddTxMessage>
	*sendFlag = false;
 8001724:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
}
 800172a:	bf00      	nop
 800172c:	3738      	adds	r7, #56	@ 0x38
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200000dc 	.word	0x200000dc
 8001738:	200000a0 	.word	0x200000a0

0800173c <eraseFlashUserConf>:
		@Param 			: none
		@description	:
*/

void eraseFlashUserConf(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001740:	f003 fa10 	bl	8004b64 <HAL_FLASH_Unlock>

	static FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001744:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <eraseFlashUserConf+0x34>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = CONFIG_DATA_BASE_ADDR; // düzenlenecek !!!!!!!!!!!!!!!!!!!!*/
 800174a:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <eraseFlashUserConf+0x34>)
 800174c:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <eraseFlashUserConf+0x38>)
 800174e:	605a      	str	r2, [r3, #4]
	EraseInitStruct.NbPages     = 1;
 8001750:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <eraseFlashUserConf+0x34>)
 8001752:	2201      	movs	r2, #1
 8001754:	609a      	str	r2, [r3, #8]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001756:	4908      	ldr	r1, [pc, #32]	@ (8001778 <eraseFlashUserConf+0x3c>)
 8001758:	4805      	ldr	r0, [pc, #20]	@ (8001770 <eraseFlashUserConf+0x34>)
 800175a:	f003 fac7 	bl	8004cec <HAL_FLASHEx_Erase>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <eraseFlashUserConf+0x2c>
	{
		while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <eraseFlashUserConf+0x28>
		{

		}
	}

	HAL_FLASH_Lock();
 8001768:	f003 fa22 	bl	8004bb0 <HAL_FLASH_Lock>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200004d8 	.word	0x200004d8
 8001774:	0800e000 	.word	0x0800e000
 8001778:	200003a0 	.word	0x200003a0

0800177c <refreshFlashUserConf>:
		@Param 				: none
		@description	: Page Erase procedure is used before write function

*/
void refreshFlashUserConf(ConfigData *configDataPtr)
{
 800177c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001780:	b08e      	sub	sp, #56	@ 0x38
 8001782:	af00      	add	r7, sp, #0
 8001784:	62f8      	str	r0, [r7, #44]	@ 0x2c
	volatile uint32_t i = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	633b      	str	r3, [r7, #48]	@ 0x30
	ConfigData* tempConfigDataPtr = configDataPtr;
 800178a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800178c:	637b      	str	r3, [r7, #52]	@ 0x34
	eraseFlashUserConf();
 800178e:	f7ff ffd5 	bl	800173c <eraseFlashUserConf>
	HAL_FLASH_Unlock();
 8001792:	f003 f9e7 	bl	8004b64 <HAL_FLASH_Unlock>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_DEFAULT_SELECT		, 0x00 									);
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	493f      	ldr	r1, [pc, #252]	@ (800189c <refreshFlashUserConf+0x120>)
 80017a0:	2001      	movs	r0, #1
 80017a2:	f003 f96f 	bl	8004a84 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_INTERFACE_OFFSET		, tempConfigDataPtr -> tkkModSelection 	);
 80017a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	2200      	movs	r2, #0
 80017ae:	461c      	mov	r4, r3
 80017b0:	4615      	mov	r5, r2
 80017b2:	4622      	mov	r2, r4
 80017b4:	462b      	mov	r3, r5
 80017b6:	493a      	ldr	r1, [pc, #232]	@ (80018a0 <refreshFlashUserConf+0x124>)
 80017b8:	2001      	movs	r0, #1
 80017ba:	f003 f963 	bl	8004a84 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_X_MIDDLEPOINT_OFFSET	, tempConfigDataPtr -> xMid				);
 80017be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017c0:	88db      	ldrh	r3, [r3, #6]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2200      	movs	r2, #0
 80017c6:	4698      	mov	r8, r3
 80017c8:	4691      	mov	r9, r2
 80017ca:	4642      	mov	r2, r8
 80017cc:	464b      	mov	r3, r9
 80017ce:	4935      	ldr	r1, [pc, #212]	@ (80018a4 <refreshFlashUserConf+0x128>)
 80017d0:	2001      	movs	r0, #1
 80017d2:	f003 f957 	bl	8004a84 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_X_MINPOINT_OFFSET		, tempConfigDataPtr -> xMin				);
 80017d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d8:	885b      	ldrh	r3, [r3, #2]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	2200      	movs	r2, #0
 80017de:	469a      	mov	sl, r3
 80017e0:	4693      	mov	fp, r2
 80017e2:	4652      	mov	r2, sl
 80017e4:	465b      	mov	r3, fp
 80017e6:	4930      	ldr	r1, [pc, #192]	@ (80018a8 <refreshFlashUserConf+0x12c>)
 80017e8:	2001      	movs	r0, #1
 80017ea:	f003 f94b 	bl	8004a84 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_X_MAXPOINT_OFFSET		, tempConfigDataPtr -> xMax				);
 80017ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017f0:	889b      	ldrh	r3, [r3, #4]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	2200      	movs	r2, #0
 80017f6:	623b      	str	r3, [r7, #32]
 80017f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80017fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017fe:	492b      	ldr	r1, [pc, #172]	@ (80018ac <refreshFlashUserConf+0x130>)
 8001800:	2001      	movs	r0, #1
 8001802:	f003 f93f 	bl	8004a84 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_Y_MIDDLEPOINT_OFFSET	, tempConfigDataPtr -> yMid				);
 8001806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001808:	899b      	ldrh	r3, [r3, #12]
 800180a:	b29b      	uxth	r3, r3
 800180c:	2200      	movs	r2, #0
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	61fa      	str	r2, [r7, #28]
 8001812:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001816:	4926      	ldr	r1, [pc, #152]	@ (80018b0 <refreshFlashUserConf+0x134>)
 8001818:	2001      	movs	r0, #1
 800181a:	f003 f933 	bl	8004a84 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_Y_MINPOINT_OFFSET		, tempConfigDataPtr -> yMin				);
 800181e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001820:	891b      	ldrh	r3, [r3, #8]
 8001822:	b29b      	uxth	r3, r3
 8001824:	2200      	movs	r2, #0
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	617a      	str	r2, [r7, #20]
 800182a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800182e:	4921      	ldr	r1, [pc, #132]	@ (80018b4 <refreshFlashUserConf+0x138>)
 8001830:	2001      	movs	r0, #1
 8001832:	f003 f927 	bl	8004a84 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_Y_MAXPOINT_OFFSET		, tempConfigDataPtr -> yMax				);
 8001836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001838:	895b      	ldrh	r3, [r3, #10]
 800183a:	b29b      	uxth	r3, r3
 800183c:	2200      	movs	r2, #0
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	60fa      	str	r2, [r7, #12]
 8001842:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001846:	491c      	ldr	r1, [pc, #112]	@ (80018b8 <refreshFlashUserConf+0x13c>)
 8001848:	2001      	movs	r0, #1
 800184a:	f003 f91b 	bl	8004a84 <HAL_FLASH_Program>

	for(i = 0; i < 32; i++)
 800184e:	2300      	movs	r3, #0
 8001850:	633b      	str	r3, [r7, #48]	@ 0x30
 8001852:	e015      	b.n	8001880 <refreshFlashUserConf+0x104>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT, tempTkkConfig.debounceFactor[i]);
 8001854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001856:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <refreshFlashUserConf+0x140>)
 8001858:	4413      	add	r3, r2
 800185a:	0099      	lsls	r1, r3, #2
 800185c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800185e:	4a18      	ldr	r2, [pc, #96]	@ (80018c0 <refreshFlashUserConf+0x144>)
 8001860:	3304      	adds	r3, #4
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	88db      	ldrh	r3, [r3, #6]
 8001868:	b29b      	uxth	r3, r3
 800186a:	2200      	movs	r2, #0
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001874:	2001      	movs	r0, #1
 8001876:	f003 f905 	bl	8004a84 <HAL_FLASH_Program>
	for(i = 0; i < 32; i++)
 800187a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800187c:	3301      	adds	r3, #1
 800187e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001882:	2b1f      	cmp	r3, #31
 8001884:	d9e6      	bls.n	8001854 <refreshFlashUserConf+0xd8>
	}

	HAL_FLASH_Lock();
 8001886:	f003 f993 	bl	8004bb0 <HAL_FLASH_Lock>

	readFlashUserConf(&userTkkConfig);
 800188a:	480e      	ldr	r0, [pc, #56]	@ (80018c4 <refreshFlashUserConf+0x148>)
 800188c:	f000 f81c 	bl	80018c8 <readFlashUserConf>
}
 8001890:	bf00      	nop
 8001892:	3738      	adds	r7, #56	@ 0x38
 8001894:	46bd      	mov	sp, r7
 8001896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800189a:	bf00      	nop
 800189c:	0800e000 	.word	0x0800e000
 80018a0:	0800e002 	.word	0x0800e002
 80018a4:	0800e004 	.word	0x0800e004
 80018a8:	0800e006 	.word	0x0800e006
 80018ac:	0800e008 	.word	0x0800e008
 80018b0:	0800e00a 	.word	0x0800e00a
 80018b4:	0800e00c 	.word	0x0800e00c
 80018b8:	0800e00e 	.word	0x0800e00e
 80018bc:	02003814 	.word	0x02003814
 80018c0:	200003a4 	.word	0x200003a4
 80018c4:	200003f4 	.word	0x200003f4

080018c8 <readFlashUserConf>:
		@Param 				: none
		@description	:

*/
void readFlashUserConf(ConfigData *configDataPtr)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
	ConfigData* tempConfigDataPtr = configDataPtr;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	60fb      	str	r3, [r7, #12]

	tempConfigDataPtr -> tkkModSelection 	= (*(uint32_t*)CONFIG_DATA_INTERFACE_OFFSET		);
 80018d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <readFlashUserConf+0x90>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	801a      	strh	r2, [r3, #0]

	tempConfigDataPtr -> xMid 				= (*(uint32_t*)CONFIG_DATA_X_MIDDLEPOINT_OFFSET	);
 80018e2:	4b1e      	ldr	r3, [pc, #120]	@ (800195c <readFlashUserConf+0x94>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	80da      	strh	r2, [r3, #6]
	tempConfigDataPtr -> xMin 				= (*(uint32_t*)CONFIG_DATA_X_MINPOINT_OFFSET	);
 80018ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <readFlashUserConf+0x98>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	805a      	strh	r2, [r3, #2]
	tempConfigDataPtr -> xMax 				= (*(uint32_t*)CONFIG_DATA_X_MAXPOINT_OFFSET	);
 80018f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <readFlashUserConf+0x9c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	809a      	strh	r2, [r3, #4]

	tempConfigDataPtr -> yMid 				= (*(uint32_t*)CONFIG_DATA_Y_MIDDLEPOINT_OFFSET	);
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <readFlashUserConf+0xa0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	b29a      	uxth	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	819a      	strh	r2, [r3, #12]
	tempConfigDataPtr -> yMin 				= (*(uint32_t*)CONFIG_DATA_Y_MINPOINT_OFFSET	);
 800190a:	4b18      	ldr	r3, [pc, #96]	@ (800196c <readFlashUserConf+0xa4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	811a      	strh	r2, [r3, #8]
	tempConfigDataPtr -> yMax 				= (*(uint32_t*)CONFIG_DATA_Y_MAXPOINT_OFFSET	);
 8001914:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <readFlashUserConf+0xa8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	815a      	strh	r2, [r3, #10]

	for(i = 0; i < 32; i++)
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	e00f      	b.n	8001944 <readFlashUserConf+0x7c>
	{
		tempConfigDataPtr -> debounceFactor [i] = (*(uint32_t*)(CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT));
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <readFlashUserConf+0xac>)
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	b291      	uxth	r1, r2
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	3304      	adds	r3, #4
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	460a      	mov	r2, r1
 800193c:	80da      	strh	r2, [r3, #6]
	for(i = 0; i < 32; i++)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3301      	adds	r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b1f      	cmp	r3, #31
 8001948:	d9ec      	bls.n	8001924 <readFlashUserConf+0x5c>
	}
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	0800e002 	.word	0x0800e002
 800195c:	0800e004 	.word	0x0800e004
 8001960:	0800e006 	.word	0x0800e006
 8001964:	0800e008 	.word	0x0800e008
 8001968:	0800e00a 	.word	0x0800e00a
 800196c:	0800e00c 	.word	0x0800e00c
 8001970:	0800e00e 	.word	0x0800e00e
 8001974:	02003814 	.word	0x02003814

08001978 <loadDefaultValues>:
void loadDefaultValues(ConfigData *configDataPtr)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
	ConfigData* tempConfigDataPtr = configDataPtr;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	60fb      	str	r3, [r7, #12]

	tempConfigDataPtr -> tkkModSelection 	= (*(uint32_t*)DEFAULT_CONFIG_DATA_INTERFACE_OFFSET		);
 8001988:	4b1f      	ldr	r3, [pc, #124]	@ (8001a08 <loadDefaultValues+0x90>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	b29a      	uxth	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	801a      	strh	r2, [r3, #0]

	tempConfigDataPtr -> xMid 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET	);
 8001992:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <loadDefaultValues+0x94>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	b29a      	uxth	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	80da      	strh	r2, [r3, #6]
	tempConfigDataPtr -> xMin 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET	);
 800199c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a10 <loadDefaultValues+0x98>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	805a      	strh	r2, [r3, #2]
	tempConfigDataPtr -> xMax 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET	);
 80019a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a14 <loadDefaultValues+0x9c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	809a      	strh	r2, [r3, #4]

	tempConfigDataPtr -> yMid 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET	);
 80019b0:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <loadDefaultValues+0xa0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	819a      	strh	r2, [r3, #12]
	tempConfigDataPtr -> yMin 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET	);
 80019ba:	4b18      	ldr	r3, [pc, #96]	@ (8001a1c <loadDefaultValues+0xa4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	811a      	strh	r2, [r3, #8]
	tempConfigDataPtr -> yMax 				= (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET	);
 80019c4:	4b16      	ldr	r3, [pc, #88]	@ (8001a20 <loadDefaultValues+0xa8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	815a      	strh	r2, [r3, #10]

	for(i = 0; i < 32; i++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	e00f      	b.n	80019f4 <loadDefaultValues+0x7c>
	{
		tempConfigDataPtr ->debounceFactor [i] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT));
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	009a      	lsls	r2, r3, #2
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <loadDefaultValues+0xac>)
 80019da:	4413      	add	r3, r2
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	b291      	uxth	r1, r2
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	3304      	adds	r3, #4
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	460a      	mov	r2, r1
 80019ec:	80da      	strh	r2, [r3, #6]
	for(i = 0; i < 32; i++)
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	3301      	adds	r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b1f      	cmp	r3, #31
 80019f8:	d9ec      	bls.n	80019d4 <loadDefaultValues+0x5c>
	}
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	0800f000 	.word	0x0800f000
 8001a0c:	0800f002 	.word	0x0800f002
 8001a10:	0800f004 	.word	0x0800f004
 8001a14:	0800f006 	.word	0x0800f006
 8001a18:	0800f008 	.word	0x0800f008
 8001a1c:	0800f00a 	.word	0x0800f00a
 8001a20:	0800f00c 	.word	0x0800f00c
 8001a24:	0800f00e 	.word	0x0800f00e

08001a28 <sendAckUart>:

void sendAckUart(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
	volatile uint8_t uartACK[9];

	uartACK[0] = COMMAND_HEADER;
 8001a2e:	23a5      	movs	r3, #165	@ 0xa5
 8001a30:	713b      	strb	r3, [r7, #4]
	uartACK[1] = COMMAND_ACK;
 8001a32:	23ff      	movs	r3, #255	@ 0xff
 8001a34:	717b      	strb	r3, [r7, #5]
	uartACK[2] = 0x00;
 8001a36:	2300      	movs	r3, #0
 8001a38:	71bb      	strb	r3, [r7, #6]
	uartACK[3] = 0x00;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	71fb      	strb	r3, [r7, #7]
	uartACK[4] = 0x00;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	723b      	strb	r3, [r7, #8]
	uartACK[5] = 0x00;
 8001a42:	2300      	movs	r3, #0
 8001a44:	727b      	strb	r3, [r7, #9]
	uartACK[6] = 0x00;
 8001a46:	2300      	movs	r3, #0
 8001a48:	72bb      	strb	r3, [r7, #10]
	uartACK[7] = 0x00;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	72fb      	strb	r3, [r7, #11]
	uartACK[8] = CHECKSUM_ACK;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*)uartACK, 9, 5000);
 8001a52:	1d39      	adds	r1, r7, #4
 8001a54:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a58:	2209      	movs	r2, #9
 8001a5a:	4803      	ldr	r0, [pc, #12]	@ (8001a68 <sendAckUart+0x40>)
 8001a5c:	f006 f8b4 	bl	8007bc8 <HAL_UART_Transmit>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000610 	.word	0x20000610

08001a6c <sendAckCan>:

void sendAckCan(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	@ 0x28
 8001a70:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader = {0};
 8001a72:	f107 0310 	add.w	r3, r7, #16
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	615a      	str	r2, [r3, #20]
	uint32_t txMailbox;

	txHeader.StdId = 0x444;
 8001a84:	f240 4344 	movw	r3, #1092	@ 0x444
 8001a88:	613b      	str	r3, [r7, #16]
	txHeader.IDE   = CAN_ID_STD;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
	txHeader.RTR   = CAN_RTR_DATA;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
	txHeader.DLC   = 8;
 8001a92:	2308      	movs	r3, #8
 8001a94:	623b      	str	r3, [r7, #32]
	txHeader.TransmitGlobalTime = DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	uint8_t canACK[9];

	canACK[0] = COMMAND_HEADER;
 8001a9c:	23a5      	movs	r3, #165	@ 0xa5
 8001a9e:	703b      	strb	r3, [r7, #0]
	canACK[1] = COMMAND_ACK;
 8001aa0:	23ff      	movs	r3, #255	@ 0xff
 8001aa2:	707b      	strb	r3, [r7, #1]
	canACK[2] = 0x00;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	70bb      	strb	r3, [r7, #2]
	canACK[3] = 0x00;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	70fb      	strb	r3, [r7, #3]
	canACK[4] = 0x00;
 8001aac:	2300      	movs	r3, #0
 8001aae:	713b      	strb	r3, [r7, #4]
	canACK[5] = 0x00;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	717b      	strb	r3, [r7, #5]
	canACK[6] = 0x00;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	71bb      	strb	r3, [r7, #6]
	canACK[7] = 0x00;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	71fb      	strb	r3, [r7, #7]

	if (HAL_CAN_AddTxMessage(&hcan, &txHeader, canACK, &txMailbox) != HAL_OK)
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	463a      	mov	r2, r7
 8001ac2:	f107 0110 	add.w	r1, r7, #16
 8001ac6:	4803      	ldr	r0, [pc, #12]	@ (8001ad4 <sendAckCan+0x68>)
 8001ac8:	f002 f83a 	bl	8003b40 <HAL_CAN_AddTxMessage>
	{
		// TX kuyruğu dolu vs. durumunda hata yönetimi
	}
}
 8001acc:	bf00      	nop
 8001ace:	3728      	adds	r7, #40	@ 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200000a0 	.word	0x200000a0

08001ad8 <checkCommand>:
	{
		// TX kuyruğu dolu vs. durumunda hata yönetimi
	}
}
void checkCommand(uint8_t* rxBuffer)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	@ 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	volatile uint32_t i = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24

	if(userTkkConfig.tkkModSelection == TKK_MOD_RS422)
 8001ae4:	4ba3      	ldr	r3, [pc, #652]	@ (8001d74 <checkCommand+0x29c>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f040 82cb 	bne.w	8002084 <checkCommand+0x5ac>
	{
		switch (rxBuffer[1])
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3301      	adds	r3, #1
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2bdd      	cmp	r3, #221	@ 0xdd
 8001af6:	f300 851b 	bgt.w	8002530 <checkCommand+0xa58>
 8001afa:	2bbb      	cmp	r3, #187	@ 0xbb
 8001afc:	da06      	bge.n	8001b0c <checkCommand+0x34>
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	f300 8090 	bgt.w	8001c24 <checkCommand+0x14c>
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	dc7d      	bgt.n	8001c04 <checkCommand+0x12c>
					sendAckCan();
				break;
			}
	}

}
 8001b08:	f000 bd12 	b.w	8002530 <checkCommand+0xa58>
		switch (rxBuffer[1])
 8001b0c:	3bbb      	subs	r3, #187	@ 0xbb
 8001b0e:	2b22      	cmp	r3, #34	@ 0x22
 8001b10:	f200 850e 	bhi.w	8002530 <checkCommand+0xa58>
 8001b14:	a201      	add	r2, pc, #4	@ (adr r2, 8001b1c <checkCommand+0x44>)
 8001b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1a:	bf00      	nop
 8001b1c:	0800206b 	.word	0x0800206b
 8001b20:	08002531 	.word	0x08002531
 8001b24:	08002531 	.word	0x08002531
 8001b28:	08002531 	.word	0x08002531
 8001b2c:	08002531 	.word	0x08002531
 8001b30:	08002531 	.word	0x08002531
 8001b34:	08002531 	.word	0x08002531
 8001b38:	08002531 	.word	0x08002531
 8001b3c:	08002531 	.word	0x08002531
 8001b40:	08002531 	.word	0x08002531
 8001b44:	08001fe1 	.word	0x08001fe1
 8001b48:	08002531 	.word	0x08002531
 8001b4c:	08002531 	.word	0x08002531
 8001b50:	08002531 	.word	0x08002531
 8001b54:	08002531 	.word	0x08002531
 8001b58:	08002531 	.word	0x08002531
 8001b5c:	08002531 	.word	0x08002531
 8001b60:	08002523 	.word	0x08002523
 8001b64:	08002531 	.word	0x08002531
 8001b68:	08002531 	.word	0x08002531
 8001b6c:	08002531 	.word	0x08002531
 8001b70:	08002531 	.word	0x08002531
 8001b74:	08002531 	.word	0x08002531
 8001b78:	08002531 	.word	0x08002531
 8001b7c:	08002531 	.word	0x08002531
 8001b80:	08002531 	.word	0x08002531
 8001b84:	08002055 	.word	0x08002055
 8001b88:	08002531 	.word	0x08002531
 8001b8c:	08002531 	.word	0x08002531
 8001b90:	08002531 	.word	0x08002531
 8001b94:	08002531 	.word	0x08002531
 8001b98:	08002531 	.word	0x08002531
 8001b9c:	08002531 	.word	0x08002531
 8001ba0:	08002531 	.word	0x08002531
 8001ba4:	0800205f 	.word	0x0800205f
 8001ba8:	3b71      	subs	r3, #113	@ 0x71
 8001baa:	2b12      	cmp	r3, #18
 8001bac:	f200 84c0 	bhi.w	8002530 <checkCommand+0xa58>
 8001bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8001bb8 <checkCommand+0xe0>)
 8001bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	08001e81 	.word	0x08001e81
 8001bbc:	08001ee9 	.word	0x08001ee9
 8001bc0:	08001f65 	.word	0x08001f65
 8001bc4:	08002531 	.word	0x08002531
 8001bc8:	08002531 	.word	0x08002531
 8001bcc:	08002531 	.word	0x08002531
 8001bd0:	08002531 	.word	0x08002531
 8001bd4:	08002531 	.word	0x08002531
 8001bd8:	08002531 	.word	0x08002531
 8001bdc:	08002531 	.word	0x08002531
 8001be0:	08002531 	.word	0x08002531
 8001be4:	08002531 	.word	0x08002531
 8001be8:	08002531 	.word	0x08002531
 8001bec:	08002531 	.word	0x08002531
 8001bf0:	08002531 	.word	0x08002531
 8001bf4:	08002531 	.word	0x08002531
 8001bf8:	08001d0b 	.word	0x08001d0b
 8001bfc:	08001d89 	.word	0x08001d89
 8001c00:	08001e05 	.word	0x08001e05
 8001c04:	3b01      	subs	r3, #1
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	f200 8492 	bhi.w	8002530 <checkCommand+0xa58>
 8001c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c14 <checkCommand+0x13c>)
 8001c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c12:	bf00      	nop
 8001c14:	08001c33 	.word	0x08001c33
 8001c18:	08001c47 	.word	0x08001c47
 8001c1c:	08001ca9 	.word	0x08001ca9
 8001c20:	08002527 	.word	0x08002527
 8001c24:	2b83      	cmp	r3, #131	@ 0x83
 8001c26:	f300 8483 	bgt.w	8002530 <checkCommand+0xa58>
 8001c2a:	2b71      	cmp	r3, #113	@ 0x71
 8001c2c:	dabc      	bge.n	8001ba8 <checkCommand+0xd0>
}
 8001c2e:	f000 bc7f 	b.w	8002530 <checkCommand+0xa58>
					tempTkkConfig.tkkModSelection = rxBuffer[2];
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3302      	adds	r3, #2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8001d78 <checkCommand+0x2a0>)
 8001c3c:	801a      	strh	r2, [r3, #0]
					sendAckUart();
 8001c3e:	f7ff fef3 	bl	8001a28 <sendAckUart>
				break;
 8001c42:	f000 bc75 	b.w	8002530 <checkCommand+0xa58>
					tempTkkConfig.xMax = rxBuffer[2]<<8 | rxBuffer[3];
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3302      	adds	r3, #2
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	b21a      	sxth	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3303      	adds	r3, #3
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	b21b      	sxth	r3, r3
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b45      	ldr	r3, [pc, #276]	@ (8001d78 <checkCommand+0x2a0>)
 8001c62:	809a      	strh	r2, [r3, #4]
					tempTkkConfig.xMin = rxBuffer[4]<<8 | rxBuffer[5];
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3304      	adds	r3, #4
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3305      	adds	r3, #5
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b21b      	sxth	r3, r3
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d78 <checkCommand+0x2a0>)
 8001c80:	805a      	strh	r2, [r3, #2]
					tempTkkConfig.xMid = rxBuffer[6]<<8 | rxBuffer[7];
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3306      	adds	r3, #6
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b21b      	sxth	r3, r3
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3307      	adds	r3, #7
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b21b      	sxth	r3, r3
 8001c96:	4313      	orrs	r3, r2
 8001c98:	b21b      	sxth	r3, r3
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b36      	ldr	r3, [pc, #216]	@ (8001d78 <checkCommand+0x2a0>)
 8001c9e:	80da      	strh	r2, [r3, #6]
					sendAckUart();
 8001ca0:	f7ff fec2 	bl	8001a28 <sendAckUart>
				break;
 8001ca4:	f000 bc44 	b.w	8002530 <checkCommand+0xa58>
					tempTkkConfig.yMax = rxBuffer[2]<<8 | rxBuffer[3];
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3302      	adds	r3, #2
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3303      	adds	r3, #3
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b21b      	sxth	r3, r3
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d78 <checkCommand+0x2a0>)
 8001cc4:	815a      	strh	r2, [r3, #10]
					tempTkkConfig.yMin = rxBuffer[4]<<8 | rxBuffer[5];
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	b21a      	sxth	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3305      	adds	r3, #5
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b25      	ldr	r3, [pc, #148]	@ (8001d78 <checkCommand+0x2a0>)
 8001ce2:	811a      	strh	r2, [r3, #8]
					tempTkkConfig.yMid = rxBuffer[6]<<8 | rxBuffer[7];
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3306      	adds	r3, #6
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	b21a      	sxth	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3307      	adds	r3, #7
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <checkCommand+0x2a0>)
 8001d00:	819a      	strh	r2, [r3, #12]
					sendAckUart();
 8001d02:	f7ff fe91 	bl	8001a28 <sendAckUart>
				break;
 8001d06:	f000 bc13 	b.w	8002530 <checkCommand+0xa58>
					rsSendFormat[0] = COMMAND_HEADER;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d7c <checkCommand+0x2a4>)
 8001d0c:	22a5      	movs	r2, #165	@ 0xa5
 8001d0e:	701a      	strb	r2, [r3, #0]
					rsSendFormat[1] = COMMAND_MODSEL_READ;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <checkCommand+0x2a4>)
 8001d12:	2281      	movs	r2, #129	@ 0x81
 8001d14:	705a      	strb	r2, [r3, #1]
					rsSendFormat[2] = (*(uint32_t*)CONFIG_DATA_INTERFACE_OFFSET);;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <checkCommand+0x2a8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	4b17      	ldr	r3, [pc, #92]	@ (8001d7c <checkCommand+0x2a4>)
 8001d1e:	709a      	strb	r2, [r3, #2]
					rsSendFormat[3] = 0x00;
 8001d20:	4b16      	ldr	r3, [pc, #88]	@ (8001d7c <checkCommand+0x2a4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	70da      	strb	r2, [r3, #3]
					rsSendFormat[4] = 0x00;
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <checkCommand+0x2a4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	711a      	strb	r2, [r3, #4]
					rsSendFormat[5] = 0x00;
 8001d2c:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <checkCommand+0x2a4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	715a      	strb	r2, [r3, #5]
					rsSendFormat[6] = 0x00;
 8001d32:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <checkCommand+0x2a4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	719a      	strb	r2, [r3, #6]
					rsSendFormat[7] = 0x00;
 8001d38:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <checkCommand+0x2a4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	71da      	strb	r2, [r3, #7]
					for(i = 1; i < 8; i++)
 8001d3e:	2301      	movs	r3, #1
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d42:	e00b      	b.n	8001d5c <checkCommand+0x284>
						rsSendFormat[8] += rsSendFormat[i];
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	4a0d      	ldr	r2, [pc, #52]	@ (8001d7c <checkCommand+0x2a4>)
 8001d48:	5cd2      	ldrb	r2, [r2, r3]
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <checkCommand+0x2a4>)
 8001d4c:	7a1b      	ldrb	r3, [r3, #8]
 8001d4e:	4413      	add	r3, r2
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <checkCommand+0x2a4>)
 8001d54:	721a      	strb	r2, [r3, #8]
					for(i = 1; i < 8; i++)
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	3301      	adds	r3, #1
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	2b07      	cmp	r3, #7
 8001d60:	d9f0      	bls.n	8001d44 <checkCommand+0x26c>
					HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001d62:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001d66:	2209      	movs	r2, #9
 8001d68:	4904      	ldr	r1, [pc, #16]	@ (8001d7c <checkCommand+0x2a4>)
 8001d6a:	4806      	ldr	r0, [pc, #24]	@ (8001d84 <checkCommand+0x2ac>)
 8001d6c:	f005 ff2c 	bl	8007bc8 <HAL_UART_Transmit>
				break;
 8001d70:	e3de      	b.n	8002530 <checkCommand+0xa58>
 8001d72:	bf00      	nop
 8001d74:	200003f4 	.word	0x200003f4
 8001d78:	200003a4 	.word	0x200003a4
 8001d7c:	20000374 	.word	0x20000374
 8001d80:	0800e002 	.word	0x0800e002
 8001d84:	20000610 	.word	0x20000610
					rsSendFormat[0] = COMMAND_HEADER;
 8001d88:	4b97      	ldr	r3, [pc, #604]	@ (8001fe8 <checkCommand+0x510>)
 8001d8a:	22a5      	movs	r2, #165	@ 0xa5
 8001d8c:	701a      	strb	r2, [r3, #0]
					rsSendFormat[1] = COMMAND_XCALIB_READ;
 8001d8e:	4b96      	ldr	r3, [pc, #600]	@ (8001fe8 <checkCommand+0x510>)
 8001d90:	2282      	movs	r2, #130	@ 0x82
 8001d92:	705a      	strb	r2, [r3, #1]
					rsSendFormat[2] = (*(uint32_t*)(CONFIG_DATA_X_MAXPOINT_OFFSET + 1));
 8001d94:	4b95      	ldr	r3, [pc, #596]	@ (8001fec <checkCommand+0x514>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4b93      	ldr	r3, [pc, #588]	@ (8001fe8 <checkCommand+0x510>)
 8001d9c:	709a      	strb	r2, [r3, #2]
					rsSendFormat[3] = (*(uint32_t*)CONFIG_DATA_X_MAXPOINT_OFFSET);
 8001d9e:	4b94      	ldr	r3, [pc, #592]	@ (8001ff0 <checkCommand+0x518>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	4b90      	ldr	r3, [pc, #576]	@ (8001fe8 <checkCommand+0x510>)
 8001da6:	70da      	strb	r2, [r3, #3]
					rsSendFormat[4] = (*(uint32_t*)(CONFIG_DATA_X_MINPOINT_OFFSET + 1));
 8001da8:	4b92      	ldr	r3, [pc, #584]	@ (8001ff4 <checkCommand+0x51c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4b8e      	ldr	r3, [pc, #568]	@ (8001fe8 <checkCommand+0x510>)
 8001db0:	711a      	strb	r2, [r3, #4]
					rsSendFormat[5] = (*(uint32_t*)CONFIG_DATA_X_MINPOINT_OFFSET);
 8001db2:	4b91      	ldr	r3, [pc, #580]	@ (8001ff8 <checkCommand+0x520>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	4b8b      	ldr	r3, [pc, #556]	@ (8001fe8 <checkCommand+0x510>)
 8001dba:	715a      	strb	r2, [r3, #5]
					rsSendFormat[6] = (*(uint32_t*)(CONFIG_DATA_X_MIDDLEPOINT_OFFSET + 1));
 8001dbc:	4b8f      	ldr	r3, [pc, #572]	@ (8001ffc <checkCommand+0x524>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b89      	ldr	r3, [pc, #548]	@ (8001fe8 <checkCommand+0x510>)
 8001dc4:	719a      	strb	r2, [r3, #6]
					rsSendFormat[7] = (*(uint32_t*)CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 8001dc6:	4b8e      	ldr	r3, [pc, #568]	@ (8002000 <checkCommand+0x528>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	4b86      	ldr	r3, [pc, #536]	@ (8001fe8 <checkCommand+0x510>)
 8001dce:	71da      	strb	r2, [r3, #7]
					for(i = 1; i < 8; i++)
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dd4:	e00b      	b.n	8001dee <checkCommand+0x316>
						rsSendFormat[8] += rsSendFormat[i];
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	4a83      	ldr	r2, [pc, #524]	@ (8001fe8 <checkCommand+0x510>)
 8001dda:	5cd2      	ldrb	r2, [r2, r3]
 8001ddc:	4b82      	ldr	r3, [pc, #520]	@ (8001fe8 <checkCommand+0x510>)
 8001dde:	7a1b      	ldrb	r3, [r3, #8]
 8001de0:	4413      	add	r3, r2
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	4b80      	ldr	r3, [pc, #512]	@ (8001fe8 <checkCommand+0x510>)
 8001de6:	721a      	strb	r2, [r3, #8]
					for(i = 1; i < 8; i++)
 8001de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dea:	3301      	adds	r3, #1
 8001dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	2b07      	cmp	r3, #7
 8001df2:	d9f0      	bls.n	8001dd6 <checkCommand+0x2fe>
					HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001df4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001df8:	2209      	movs	r2, #9
 8001dfa:	497b      	ldr	r1, [pc, #492]	@ (8001fe8 <checkCommand+0x510>)
 8001dfc:	4881      	ldr	r0, [pc, #516]	@ (8002004 <checkCommand+0x52c>)
 8001dfe:	f005 fee3 	bl	8007bc8 <HAL_UART_Transmit>
				break;
 8001e02:	e395      	b.n	8002530 <checkCommand+0xa58>
					rsSendFormat[0] = COMMAND_HEADER;
 8001e04:	4b78      	ldr	r3, [pc, #480]	@ (8001fe8 <checkCommand+0x510>)
 8001e06:	22a5      	movs	r2, #165	@ 0xa5
 8001e08:	701a      	strb	r2, [r3, #0]
					rsSendFormat[1] = COMMAND_YCALIB_READ;
 8001e0a:	4b77      	ldr	r3, [pc, #476]	@ (8001fe8 <checkCommand+0x510>)
 8001e0c:	2283      	movs	r2, #131	@ 0x83
 8001e0e:	705a      	strb	r2, [r3, #1]
					rsSendFormat[2] = (*(uint32_t*)(CONFIG_DATA_Y_MAXPOINT_OFFSET + 1));
 8001e10:	4b7d      	ldr	r3, [pc, #500]	@ (8002008 <checkCommand+0x530>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4b74      	ldr	r3, [pc, #464]	@ (8001fe8 <checkCommand+0x510>)
 8001e18:	709a      	strb	r2, [r3, #2]
					rsSendFormat[3] = (*(uint32_t*)CONFIG_DATA_Y_MAXPOINT_OFFSET);
 8001e1a:	4b7c      	ldr	r3, [pc, #496]	@ (800200c <checkCommand+0x534>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	4b71      	ldr	r3, [pc, #452]	@ (8001fe8 <checkCommand+0x510>)
 8001e22:	70da      	strb	r2, [r3, #3]
					rsSendFormat[4] = (*(uint32_t*)(CONFIG_DATA_Y_MINPOINT_OFFSET + 1));
 8001e24:	4b7a      	ldr	r3, [pc, #488]	@ (8002010 <checkCommand+0x538>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4b6f      	ldr	r3, [pc, #444]	@ (8001fe8 <checkCommand+0x510>)
 8001e2c:	711a      	strb	r2, [r3, #4]
					rsSendFormat[5] = (*(uint32_t*)CONFIG_DATA_Y_MINPOINT_OFFSET);
 8001e2e:	4b79      	ldr	r3, [pc, #484]	@ (8002014 <checkCommand+0x53c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe8 <checkCommand+0x510>)
 8001e36:	715a      	strb	r2, [r3, #5]
					rsSendFormat[6] = (*(uint32_t*)(CONFIG_DATA_Y_MIDDLEPOINT_OFFSET + 1));
 8001e38:	4b77      	ldr	r3, [pc, #476]	@ (8002018 <checkCommand+0x540>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8001fe8 <checkCommand+0x510>)
 8001e40:	719a      	strb	r2, [r3, #6]
					rsSendFormat[7] = (*(uint32_t*)CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 8001e42:	4b76      	ldr	r3, [pc, #472]	@ (800201c <checkCommand+0x544>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b67      	ldr	r3, [pc, #412]	@ (8001fe8 <checkCommand+0x510>)
 8001e4a:	71da      	strb	r2, [r3, #7]
					for(i = 1; i < 8; i++)
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e50:	e00b      	b.n	8001e6a <checkCommand+0x392>
						rsSendFormat[8] += rsSendFormat[i];
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	4a64      	ldr	r2, [pc, #400]	@ (8001fe8 <checkCommand+0x510>)
 8001e56:	5cd2      	ldrb	r2, [r2, r3]
 8001e58:	4b63      	ldr	r3, [pc, #396]	@ (8001fe8 <checkCommand+0x510>)
 8001e5a:	7a1b      	ldrb	r3, [r3, #8]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	4b61      	ldr	r3, [pc, #388]	@ (8001fe8 <checkCommand+0x510>)
 8001e62:	721a      	strb	r2, [r3, #8]
					for(i = 1; i < 8; i++)
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	3301      	adds	r3, #1
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	2b07      	cmp	r3, #7
 8001e6e:	d9f0      	bls.n	8001e52 <checkCommand+0x37a>
					HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001e70:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001e74:	2209      	movs	r2, #9
 8001e76:	495c      	ldr	r1, [pc, #368]	@ (8001fe8 <checkCommand+0x510>)
 8001e78:	4862      	ldr	r0, [pc, #392]	@ (8002004 <checkCommand+0x52c>)
 8001e7a:	f005 fea5 	bl	8007bc8 <HAL_UART_Transmit>
				break;
 8001e7e:	e357      	b.n	8002530 <checkCommand+0xa58>
					rsSendFormat[0] = COMMAND_HEADER;
 8001e80:	4b59      	ldr	r3, [pc, #356]	@ (8001fe8 <checkCommand+0x510>)
 8001e82:	22a5      	movs	r2, #165	@ 0xa5
 8001e84:	701a      	strb	r2, [r3, #0]
					rsSendFormat[1] = COMMAND_DEFAULT_MODSEL_READ;
 8001e86:	4b58      	ldr	r3, [pc, #352]	@ (8001fe8 <checkCommand+0x510>)
 8001e88:	2271      	movs	r2, #113	@ 0x71
 8001e8a:	705a      	strb	r2, [r3, #1]
					rsSendFormat[2] = (*(uint32_t*)DEFAULT_CONFIG_DATA_INTERFACE_OFFSET);;
 8001e8c:	4b64      	ldr	r3, [pc, #400]	@ (8002020 <checkCommand+0x548>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4b55      	ldr	r3, [pc, #340]	@ (8001fe8 <checkCommand+0x510>)
 8001e94:	709a      	strb	r2, [r3, #2]
					rsSendFormat[3] = 0x00;
 8001e96:	4b54      	ldr	r3, [pc, #336]	@ (8001fe8 <checkCommand+0x510>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	70da      	strb	r2, [r3, #3]
					rsSendFormat[4] = 0x00;
 8001e9c:	4b52      	ldr	r3, [pc, #328]	@ (8001fe8 <checkCommand+0x510>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	711a      	strb	r2, [r3, #4]
					rsSendFormat[5] = 0x00;
 8001ea2:	4b51      	ldr	r3, [pc, #324]	@ (8001fe8 <checkCommand+0x510>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	715a      	strb	r2, [r3, #5]
					rsSendFormat[6] = 0x00;
 8001ea8:	4b4f      	ldr	r3, [pc, #316]	@ (8001fe8 <checkCommand+0x510>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	719a      	strb	r2, [r3, #6]
					rsSendFormat[7] = 0x00;
 8001eae:	4b4e      	ldr	r3, [pc, #312]	@ (8001fe8 <checkCommand+0x510>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	71da      	strb	r2, [r3, #7]
					for(i = 1; i < 8; i++)
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb8:	e00b      	b.n	8001ed2 <checkCommand+0x3fa>
						rsSendFormat[8] += rsSendFormat[i];
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	4a4a      	ldr	r2, [pc, #296]	@ (8001fe8 <checkCommand+0x510>)
 8001ebe:	5cd2      	ldrb	r2, [r2, r3]
 8001ec0:	4b49      	ldr	r3, [pc, #292]	@ (8001fe8 <checkCommand+0x510>)
 8001ec2:	7a1b      	ldrb	r3, [r3, #8]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	4b47      	ldr	r3, [pc, #284]	@ (8001fe8 <checkCommand+0x510>)
 8001eca:	721a      	strb	r2, [r3, #8]
					for(i = 1; i < 8; i++)
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ece:	3301      	adds	r3, #1
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed4:	2b07      	cmp	r3, #7
 8001ed6:	d9f0      	bls.n	8001eba <checkCommand+0x3e2>
					HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001ed8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001edc:	2209      	movs	r2, #9
 8001ede:	4942      	ldr	r1, [pc, #264]	@ (8001fe8 <checkCommand+0x510>)
 8001ee0:	4848      	ldr	r0, [pc, #288]	@ (8002004 <checkCommand+0x52c>)
 8001ee2:	f005 fe71 	bl	8007bc8 <HAL_UART_Transmit>
				break;
 8001ee6:	e323      	b.n	8002530 <checkCommand+0xa58>
					rsSendFormat[0] = COMMAND_HEADER;
 8001ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8001fe8 <checkCommand+0x510>)
 8001eea:	22a5      	movs	r2, #165	@ 0xa5
 8001eec:	701a      	strb	r2, [r3, #0]
					rsSendFormat[1] = COMMAND_DEFAULT_XCALIB_READ;
 8001eee:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe8 <checkCommand+0x510>)
 8001ef0:	2272      	movs	r2, #114	@ 0x72
 8001ef2:	705a      	strb	r2, [r3, #1]
					rsSendFormat[2] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET + 1)); //MSB
 8001ef4:	4b4b      	ldr	r3, [pc, #300]	@ (8002024 <checkCommand+0x54c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe8 <checkCommand+0x510>)
 8001efc:	709a      	strb	r2, [r3, #2]
					rsSendFormat[3] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET);		 //LSB
 8001efe:	4b4a      	ldr	r3, [pc, #296]	@ (8002028 <checkCommand+0x550>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	4b38      	ldr	r3, [pc, #224]	@ (8001fe8 <checkCommand+0x510>)
 8001f06:	70da      	strb	r2, [r3, #3]
					rsSendFormat[4] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET + 1));
 8001f08:	4b48      	ldr	r3, [pc, #288]	@ (800202c <checkCommand+0x554>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b36      	ldr	r3, [pc, #216]	@ (8001fe8 <checkCommand+0x510>)
 8001f10:	711a      	strb	r2, [r3, #4]
					rsSendFormat[5] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET);
 8001f12:	4b47      	ldr	r3, [pc, #284]	@ (8002030 <checkCommand+0x558>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	4b33      	ldr	r3, [pc, #204]	@ (8001fe8 <checkCommand+0x510>)
 8001f1a:	715a      	strb	r2, [r3, #5]
					rsSendFormat[6] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET + 1));
 8001f1c:	4b45      	ldr	r3, [pc, #276]	@ (8002034 <checkCommand+0x55c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b31      	ldr	r3, [pc, #196]	@ (8001fe8 <checkCommand+0x510>)
 8001f24:	719a      	strb	r2, [r3, #6]
					rsSendFormat[7] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 8001f26:	4b44      	ldr	r3, [pc, #272]	@ (8002038 <checkCommand+0x560>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe8 <checkCommand+0x510>)
 8001f2e:	71da      	strb	r2, [r3, #7]
					for(i = 1; i < 8; i++)
 8001f30:	2301      	movs	r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f34:	e00b      	b.n	8001f4e <checkCommand+0x476>
						rsSendFormat[8] += rsSendFormat[i];
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	4a2b      	ldr	r2, [pc, #172]	@ (8001fe8 <checkCommand+0x510>)
 8001f3a:	5cd2      	ldrb	r2, [r2, r3]
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <checkCommand+0x510>)
 8001f3e:	7a1b      	ldrb	r3, [r3, #8]
 8001f40:	4413      	add	r3, r2
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b28      	ldr	r3, [pc, #160]	@ (8001fe8 <checkCommand+0x510>)
 8001f46:	721a      	strb	r2, [r3, #8]
					for(i = 1; i < 8; i++)
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f50:	2b07      	cmp	r3, #7
 8001f52:	d9f0      	bls.n	8001f36 <checkCommand+0x45e>
					HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001f54:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001f58:	2209      	movs	r2, #9
 8001f5a:	4923      	ldr	r1, [pc, #140]	@ (8001fe8 <checkCommand+0x510>)
 8001f5c:	4829      	ldr	r0, [pc, #164]	@ (8002004 <checkCommand+0x52c>)
 8001f5e:	f005 fe33 	bl	8007bc8 <HAL_UART_Transmit>
				break;
 8001f62:	e2e5      	b.n	8002530 <checkCommand+0xa58>
					rsSendFormat[0] = COMMAND_HEADER;
 8001f64:	4b20      	ldr	r3, [pc, #128]	@ (8001fe8 <checkCommand+0x510>)
 8001f66:	22a5      	movs	r2, #165	@ 0xa5
 8001f68:	701a      	strb	r2, [r3, #0]
					rsSendFormat[1] = COMMAND_DEFAULT_YCALIB_READ;
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe8 <checkCommand+0x510>)
 8001f6c:	2273      	movs	r2, #115	@ 0x73
 8001f6e:	705a      	strb	r2, [r3, #1]
					rsSendFormat[2] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET + 1));
 8001f70:	4b32      	ldr	r3, [pc, #200]	@ (800203c <checkCommand+0x564>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <checkCommand+0x510>)
 8001f78:	709a      	strb	r2, [r3, #2]
					rsSendFormat[3] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET);
 8001f7a:	4b31      	ldr	r3, [pc, #196]	@ (8002040 <checkCommand+0x568>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <checkCommand+0x510>)
 8001f82:	70da      	strb	r2, [r3, #3]
					rsSendFormat[4] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET + 1));
 8001f84:	4b2f      	ldr	r3, [pc, #188]	@ (8002044 <checkCommand+0x56c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4b17      	ldr	r3, [pc, #92]	@ (8001fe8 <checkCommand+0x510>)
 8001f8c:	711a      	strb	r2, [r3, #4]
					rsSendFormat[5] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET);
 8001f8e:	4b2e      	ldr	r3, [pc, #184]	@ (8002048 <checkCommand+0x570>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	4b14      	ldr	r3, [pc, #80]	@ (8001fe8 <checkCommand+0x510>)
 8001f96:	715a      	strb	r2, [r3, #5]
					rsSendFormat[6] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET + 1));
 8001f98:	4b2c      	ldr	r3, [pc, #176]	@ (800204c <checkCommand+0x574>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <checkCommand+0x510>)
 8001fa0:	719a      	strb	r2, [r3, #6]
					rsSendFormat[7] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8002050 <checkCommand+0x578>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <checkCommand+0x510>)
 8001faa:	71da      	strb	r2, [r3, #7]
					for(i = 1; i < 8; i++)
 8001fac:	2301      	movs	r3, #1
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb0:	e00b      	b.n	8001fca <checkCommand+0x4f2>
						rsSendFormat[8] += rsSendFormat[i];
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe8 <checkCommand+0x510>)
 8001fb6:	5cd2      	ldrb	r2, [r2, r3]
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <checkCommand+0x510>)
 8001fba:	7a1b      	ldrb	r3, [r3, #8]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <checkCommand+0x510>)
 8001fc2:	721a      	strb	r2, [r3, #8]
					for(i = 1; i < 8; i++)
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	2b07      	cmp	r3, #7
 8001fce:	d9f0      	bls.n	8001fb2 <checkCommand+0x4da>
					HAL_UART_Transmit(&huart1, (uint8_t*)rsSendFormat, 9, 5000);
 8001fd0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001fd4:	2209      	movs	r2, #9
 8001fd6:	4904      	ldr	r1, [pc, #16]	@ (8001fe8 <checkCommand+0x510>)
 8001fd8:	480a      	ldr	r0, [pc, #40]	@ (8002004 <checkCommand+0x52c>)
 8001fda:	f005 fdf5 	bl	8007bc8 <HAL_UART_Transmit>
				break;
 8001fde:	e2a7      	b.n	8002530 <checkCommand+0xa58>
					bootloaderCommand();
 8001fe0:	f7fe fce2 	bl	80009a8 <bootloaderCommand>
				break;
 8001fe4:	e2a4      	b.n	8002530 <checkCommand+0xa58>
 8001fe6:	bf00      	nop
 8001fe8:	20000374 	.word	0x20000374
 8001fec:	0800e009 	.word	0x0800e009
 8001ff0:	0800e008 	.word	0x0800e008
 8001ff4:	0800e007 	.word	0x0800e007
 8001ff8:	0800e006 	.word	0x0800e006
 8001ffc:	0800e005 	.word	0x0800e005
 8002000:	0800e004 	.word	0x0800e004
 8002004:	20000610 	.word	0x20000610
 8002008:	0800e00f 	.word	0x0800e00f
 800200c:	0800e00e 	.word	0x0800e00e
 8002010:	0800e00d 	.word	0x0800e00d
 8002014:	0800e00c 	.word	0x0800e00c
 8002018:	0800e00b 	.word	0x0800e00b
 800201c:	0800e00a 	.word	0x0800e00a
 8002020:	0800f000 	.word	0x0800f000
 8002024:	0800f007 	.word	0x0800f007
 8002028:	0800f006 	.word	0x0800f006
 800202c:	0800f005 	.word	0x0800f005
 8002030:	0800f004 	.word	0x0800f004
 8002034:	0800f003 	.word	0x0800f003
 8002038:	0800f002 	.word	0x0800f002
 800203c:	0800f00d 	.word	0x0800f00d
 8002040:	0800f00c 	.word	0x0800f00c
 8002044:	0800f00b 	.word	0x0800f00b
 8002048:	0800f00a 	.word	0x0800f00a
 800204c:	0800f009 	.word	0x0800f009
 8002050:	0800f008 	.word	0x0800f008
					sendAckUart();
 8002054:	f7ff fce8 	bl	8001a28 <sendAckUart>
					HAL_NVIC_SystemReset();
 8002058:	f002 fad5 	bl	8004606 <HAL_NVIC_SystemReset>
				break;
 800205c:	e268      	b.n	8002530 <checkCommand+0xa58>
					remoteMode = 0;
 800205e:	4baf      	ldr	r3, [pc, #700]	@ (800231c <checkCommand+0x844>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
					sendAckUart();
 8002064:	f7ff fce0 	bl	8001a28 <sendAckUart>
				break;
 8002068:	e262      	b.n	8002530 <checkCommand+0xa58>
					refreshFlashUserConf(&tempTkkConfig);
 800206a:	48ad      	ldr	r0, [pc, #692]	@ (8002320 <checkCommand+0x848>)
 800206c:	f7ff fb86 	bl	800177c <refreshFlashUserConf>
					calculateJostickBorders(&userTkkConfig, &tkkJoystickBorder);
 8002070:	49ac      	ldr	r1, [pc, #688]	@ (8002324 <checkCommand+0x84c>)
 8002072:	48ad      	ldr	r0, [pc, #692]	@ (8002328 <checkCommand+0x850>)
 8002074:	f7fe fdde 	bl	8000c34 <calculateJostickBorders>
					remoteMode = 1;
 8002078:	4ba8      	ldr	r3, [pc, #672]	@ (800231c <checkCommand+0x844>)
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
					sendAckUart();
 800207e:	f7ff fcd3 	bl	8001a28 <sendAckUart>
				break;
 8002082:	e255      	b.n	8002530 <checkCommand+0xa58>
	else if(userTkkConfig.tkkModSelection == TKK_MOD_CAN)
 8002084:	4ba8      	ldr	r3, [pc, #672]	@ (8002328 <checkCommand+0x850>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	2b02      	cmp	r3, #2
 800208a:	f040 8251 	bne.w	8002530 <checkCommand+0xa58>
		CAN_TxHeaderTypeDef txHeader = {0};
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	611a      	str	r2, [r3, #16]
 800209e:	615a      	str	r2, [r3, #20]
		txHeader.StdId = 0x321;
 80020a0:	f240 3321 	movw	r3, #801	@ 0x321
 80020a4:	60fb      	str	r3, [r7, #12]
		txHeader.IDE   = CAN_ID_STD;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
		txHeader.RTR   = CAN_RTR_DATA;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
		txHeader.DLC   = 8;
 80020ae:	2308      	movs	r3, #8
 80020b0:	61fb      	str	r3, [r7, #28]
		txHeader.TransmitGlobalTime = DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f887 3020 	strb.w	r3, [r7, #32]
		switch (rxBuffer[1])
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3301      	adds	r3, #1
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2bdd      	cmp	r3, #221	@ 0xdd
 80020c0:	f300 8236 	bgt.w	8002530 <checkCommand+0xa58>
 80020c4:	2bbb      	cmp	r3, #187	@ 0xbb
 80020c6:	da05      	bge.n	80020d4 <checkCommand+0x5fc>
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	f300 808f 	bgt.w	80021ec <checkCommand+0x714>
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	dc7c      	bgt.n	80021cc <checkCommand+0x6f4>
}
 80020d2:	e22d      	b.n	8002530 <checkCommand+0xa58>
		switch (rxBuffer[1])
 80020d4:	3bbb      	subs	r3, #187	@ 0xbb
 80020d6:	2b22      	cmp	r3, #34	@ 0x22
 80020d8:	f200 822a 	bhi.w	8002530 <checkCommand+0xa58>
 80020dc:	a201      	add	r2, pc, #4	@ (adr r2, 80020e4 <checkCommand+0x60c>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	08002503 	.word	0x08002503
 80020e8:	08002531 	.word	0x08002531
 80020ec:	08002531 	.word	0x08002531
 80020f0:	08002531 	.word	0x08002531
 80020f4:	08002531 	.word	0x08002531
 80020f8:	08002531 	.word	0x08002531
 80020fc:	08002531 	.word	0x08002531
 8002100:	08002531 	.word	0x08002531
 8002104:	08002531 	.word	0x08002531
 8002108:	08002531 	.word	0x08002531
 800210c:	080024e7 	.word	0x080024e7
 8002110:	08002531 	.word	0x08002531
 8002114:	08002531 	.word	0x08002531
 8002118:	08002531 	.word	0x08002531
 800211c:	08002531 	.word	0x08002531
 8002120:	08002531 	.word	0x08002531
 8002124:	08002531 	.word	0x08002531
 8002128:	0800251d 	.word	0x0800251d
 800212c:	08002531 	.word	0x08002531
 8002130:	08002531 	.word	0x08002531
 8002134:	08002531 	.word	0x08002531
 8002138:	08002531 	.word	0x08002531
 800213c:	08002531 	.word	0x08002531
 8002140:	08002531 	.word	0x08002531
 8002144:	08002531 	.word	0x08002531
 8002148:	08002531 	.word	0x08002531
 800214c:	080024ed 	.word	0x080024ed
 8002150:	08002531 	.word	0x08002531
 8002154:	08002531 	.word	0x08002531
 8002158:	08002531 	.word	0x08002531
 800215c:	08002531 	.word	0x08002531
 8002160:	08002531 	.word	0x08002531
 8002164:	08002531 	.word	0x08002531
 8002168:	08002531 	.word	0x08002531
 800216c:	080024f7 	.word	0x080024f7
 8002170:	3b71      	subs	r3, #113	@ 0x71
 8002172:	2b12      	cmp	r3, #18
 8002174:	f200 81dc 	bhi.w	8002530 <checkCommand+0xa58>
 8002178:	a201      	add	r2, pc, #4	@ (adr r2, 8002180 <checkCommand+0x6a8>)
 800217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217e:	bf00      	nop
 8002180:	080023ed 	.word	0x080023ed
 8002184:	08002433 	.word	0x08002433
 8002188:	0800248d 	.word	0x0800248d
 800218c:	08002531 	.word	0x08002531
 8002190:	08002531 	.word	0x08002531
 8002194:	08002531 	.word	0x08002531
 8002198:	08002531 	.word	0x08002531
 800219c:	08002531 	.word	0x08002531
 80021a0:	08002531 	.word	0x08002531
 80021a4:	08002531 	.word	0x08002531
 80021a8:	08002531 	.word	0x08002531
 80021ac:	08002531 	.word	0x08002531
 80021b0:	08002531 	.word	0x08002531
 80021b4:	08002531 	.word	0x08002531
 80021b8:	08002531 	.word	0x08002531
 80021bc:	08002531 	.word	0x08002531
 80021c0:	080022cb 	.word	0x080022cb
 80021c4:	08002339 	.word	0x08002339
 80021c8:	08002393 	.word	0x08002393
 80021cc:	3b01      	subs	r3, #1
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	f200 81ae 	bhi.w	8002530 <checkCommand+0xa58>
 80021d4:	a201      	add	r2, pc, #4	@ (adr r2, 80021dc <checkCommand+0x704>)
 80021d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021da:	bf00      	nop
 80021dc:	080021f9 	.word	0x080021f9
 80021e0:	0800220b 	.word	0x0800220b
 80021e4:	0800226b 	.word	0x0800226b
 80021e8:	0800252b 	.word	0x0800252b
 80021ec:	2b83      	cmp	r3, #131	@ 0x83
 80021ee:	f300 819f 	bgt.w	8002530 <checkCommand+0xa58>
 80021f2:	2b71      	cmp	r3, #113	@ 0x71
 80021f4:	dabc      	bge.n	8002170 <checkCommand+0x698>
}
 80021f6:	e19b      	b.n	8002530 <checkCommand+0xa58>
					tempTkkConfig.tkkModSelection = rxBuffer[2];
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3302      	adds	r3, #2
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	4b47      	ldr	r3, [pc, #284]	@ (8002320 <checkCommand+0x848>)
 8002202:	801a      	strh	r2, [r3, #0]
					sendAckCan();
 8002204:	f7ff fc32 	bl	8001a6c <sendAckCan>
				break;
 8002208:	e192      	b.n	8002530 <checkCommand+0xa58>
					tempTkkConfig.xMax = rxBuffer[2]<<8 | rxBuffer[3];
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3302      	adds	r3, #2
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b21b      	sxth	r3, r3
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	b21a      	sxth	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3303      	adds	r3, #3
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b21b      	sxth	r3, r3
 800221e:	4313      	orrs	r3, r2
 8002220:	b21b      	sxth	r3, r3
 8002222:	b29a      	uxth	r2, r3
 8002224:	4b3e      	ldr	r3, [pc, #248]	@ (8002320 <checkCommand+0x848>)
 8002226:	809a      	strh	r2, [r3, #4]
					tempTkkConfig.xMin = rxBuffer[4]<<8 | rxBuffer[5];
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3304      	adds	r3, #4
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	b21b      	sxth	r3, r3
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	b21a      	sxth	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3305      	adds	r3, #5
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	b21b      	sxth	r3, r3
 800223c:	4313      	orrs	r3, r2
 800223e:	b21b      	sxth	r3, r3
 8002240:	b29a      	uxth	r2, r3
 8002242:	4b37      	ldr	r3, [pc, #220]	@ (8002320 <checkCommand+0x848>)
 8002244:	805a      	strh	r2, [r3, #2]
					tempTkkConfig.xMid = rxBuffer[6]<<8 | rxBuffer[7];
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3306      	adds	r3, #6
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	b21b      	sxth	r3, r3
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	b21a      	sxth	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3307      	adds	r3, #7
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b21b      	sxth	r3, r3
 800225a:	4313      	orrs	r3, r2
 800225c:	b21b      	sxth	r3, r3
 800225e:	b29a      	uxth	r2, r3
 8002260:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <checkCommand+0x848>)
 8002262:	80da      	strh	r2, [r3, #6]
					sendAckCan();
 8002264:	f7ff fc02 	bl	8001a6c <sendAckCan>
				break;
 8002268:	e162      	b.n	8002530 <checkCommand+0xa58>
					tempTkkConfig.yMax = rxBuffer[2]<<8 | rxBuffer[3];
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3302      	adds	r3, #2
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	b21b      	sxth	r3, r3
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	b21a      	sxth	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3303      	adds	r3, #3
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b21b      	sxth	r3, r3
 800227e:	4313      	orrs	r3, r2
 8002280:	b21b      	sxth	r3, r3
 8002282:	b29a      	uxth	r2, r3
 8002284:	4b26      	ldr	r3, [pc, #152]	@ (8002320 <checkCommand+0x848>)
 8002286:	815a      	strh	r2, [r3, #10]
					tempTkkConfig.yMin = rxBuffer[4]<<8 | rxBuffer[5];
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3304      	adds	r3, #4
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	b21b      	sxth	r3, r3
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	b21a      	sxth	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3305      	adds	r3, #5
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	b21b      	sxth	r3, r3
 800229c:	4313      	orrs	r3, r2
 800229e:	b21b      	sxth	r3, r3
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002320 <checkCommand+0x848>)
 80022a4:	811a      	strh	r2, [r3, #8]
					tempTkkConfig.yMid = rxBuffer[6]<<8 | rxBuffer[7];
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3306      	adds	r3, #6
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3307      	adds	r3, #7
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	4313      	orrs	r3, r2
 80022bc:	b21b      	sxth	r3, r3
 80022be:	b29a      	uxth	r2, r3
 80022c0:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <checkCommand+0x848>)
 80022c2:	819a      	strh	r2, [r3, #12]
					sendAckCan();
 80022c4:	f7ff fbd2 	bl	8001a6c <sendAckCan>
				break;
 80022c8:	e132      	b.n	8002530 <checkCommand+0xa58>
					canSendFormat[0] = COMMAND_HEADER;
 80022ca:	4b18      	ldr	r3, [pc, #96]	@ (800232c <checkCommand+0x854>)
 80022cc:	22a5      	movs	r2, #165	@ 0xa5
 80022ce:	701a      	strb	r2, [r3, #0]
					canSendFormat[1] = COMMAND_MODSEL_READ;
 80022d0:	4b16      	ldr	r3, [pc, #88]	@ (800232c <checkCommand+0x854>)
 80022d2:	2281      	movs	r2, #129	@ 0x81
 80022d4:	705a      	strb	r2, [r3, #1]
					canSendFormat[2] = (*(uint32_t*)CONFIG_DATA_INTERFACE_OFFSET);;
 80022d6:	4b16      	ldr	r3, [pc, #88]	@ (8002330 <checkCommand+0x858>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b13      	ldr	r3, [pc, #76]	@ (800232c <checkCommand+0x854>)
 80022de:	709a      	strb	r2, [r3, #2]
					canSendFormat[3] = 0x00;
 80022e0:	4b12      	ldr	r3, [pc, #72]	@ (800232c <checkCommand+0x854>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	70da      	strb	r2, [r3, #3]
					canSendFormat[4] = 0x00;
 80022e6:	4b11      	ldr	r3, [pc, #68]	@ (800232c <checkCommand+0x854>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	711a      	strb	r2, [r3, #4]
					canSendFormat[5] = 0x00;
 80022ec:	4b0f      	ldr	r3, [pc, #60]	@ (800232c <checkCommand+0x854>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	715a      	strb	r2, [r3, #5]
					canSendFormat[6] = 0x00;
 80022f2:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <checkCommand+0x854>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	719a      	strb	r2, [r3, #6]
					canSendFormat[7] = 0x00;
 80022f8:	4b0c      	ldr	r3, [pc, #48]	@ (800232c <checkCommand+0x854>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	71da      	strb	r2, [r3, #7]
					if (HAL_CAN_AddTxMessage(&hcan, &txHeader, canSendFormat, &txMailbox) != HAL_OK)
 80022fe:	f107 0308 	add.w	r3, r7, #8
 8002302:	f107 010c 	add.w	r1, r7, #12
 8002306:	4a09      	ldr	r2, [pc, #36]	@ (800232c <checkCommand+0x854>)
 8002308:	480a      	ldr	r0, [pc, #40]	@ (8002334 <checkCommand+0x85c>)
 800230a:	f001 fc19 	bl	8003b40 <HAL_CAN_AddTxMessage>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	f040 810c 	bne.w	800252e <checkCommand+0xa56>
						sendAckCan();
 8002316:	f7ff fba9 	bl	8001a6c <sendAckCan>
				break;
 800231a:	e108      	b.n	800252e <checkCommand+0xa56>
 800231c:	20000000 	.word	0x20000000
 8002320:	200003a4 	.word	0x200003a4
 8002324:	20000494 	.word	0x20000494
 8002328:	200003f4 	.word	0x200003f4
 800232c:	20000380 	.word	0x20000380
 8002330:	0800e002 	.word	0x0800e002
 8002334:	200000a0 	.word	0x200000a0
					canSendFormat[0] = COMMAND_HEADER;
 8002338:	4b7f      	ldr	r3, [pc, #508]	@ (8002538 <checkCommand+0xa60>)
 800233a:	22a5      	movs	r2, #165	@ 0xa5
 800233c:	701a      	strb	r2, [r3, #0]
					canSendFormat[1] = COMMAND_XCALIB_READ;
 800233e:	4b7e      	ldr	r3, [pc, #504]	@ (8002538 <checkCommand+0xa60>)
 8002340:	2282      	movs	r2, #130	@ 0x82
 8002342:	705a      	strb	r2, [r3, #1]
					canSendFormat[2] = (*(uint32_t*)(CONFIG_DATA_X_MAXPOINT_OFFSET + 1));
 8002344:	4b7d      	ldr	r3, [pc, #500]	@ (800253c <checkCommand+0xa64>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b7b      	ldr	r3, [pc, #492]	@ (8002538 <checkCommand+0xa60>)
 800234c:	709a      	strb	r2, [r3, #2]
					canSendFormat[3] = (*(uint32_t*)CONFIG_DATA_X_MAXPOINT_OFFSET);
 800234e:	4b7c      	ldr	r3, [pc, #496]	@ (8002540 <checkCommand+0xa68>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	4b78      	ldr	r3, [pc, #480]	@ (8002538 <checkCommand+0xa60>)
 8002356:	70da      	strb	r2, [r3, #3]
					canSendFormat[4] = (*(uint32_t*)(CONFIG_DATA_X_MINPOINT_OFFSET + 1));
 8002358:	4b7a      	ldr	r3, [pc, #488]	@ (8002544 <checkCommand+0xa6c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4b76      	ldr	r3, [pc, #472]	@ (8002538 <checkCommand+0xa60>)
 8002360:	711a      	strb	r2, [r3, #4]
					canSendFormat[5] = (*(uint32_t*)CONFIG_DATA_X_MINPOINT_OFFSET);
 8002362:	4b79      	ldr	r3, [pc, #484]	@ (8002548 <checkCommand+0xa70>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	4b73      	ldr	r3, [pc, #460]	@ (8002538 <checkCommand+0xa60>)
 800236a:	715a      	strb	r2, [r3, #5]
					canSendFormat[6] = (*(uint32_t*)(CONFIG_DATA_X_MIDDLEPOINT_OFFSET + 1));
 800236c:	4b77      	ldr	r3, [pc, #476]	@ (800254c <checkCommand+0xa74>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4b71      	ldr	r3, [pc, #452]	@ (8002538 <checkCommand+0xa60>)
 8002374:	719a      	strb	r2, [r3, #6]
					canSendFormat[7] = (*(uint32_t*)CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 8002376:	4b76      	ldr	r3, [pc, #472]	@ (8002550 <checkCommand+0xa78>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	4b6e      	ldr	r3, [pc, #440]	@ (8002538 <checkCommand+0xa60>)
 800237e:	71da      	strb	r2, [r3, #7]
					if (HAL_CAN_AddTxMessage(&hcan, &txHeader, canSendFormat, &txMailbox) != HAL_OK)
 8002380:	f107 0308 	add.w	r3, r7, #8
 8002384:	f107 010c 	add.w	r1, r7, #12
 8002388:	4a6b      	ldr	r2, [pc, #428]	@ (8002538 <checkCommand+0xa60>)
 800238a:	4872      	ldr	r0, [pc, #456]	@ (8002554 <checkCommand+0xa7c>)
 800238c:	f001 fbd8 	bl	8003b40 <HAL_CAN_AddTxMessage>
				break;
 8002390:	e0ce      	b.n	8002530 <checkCommand+0xa58>
					canSendFormat[0] = COMMAND_HEADER;
 8002392:	4b69      	ldr	r3, [pc, #420]	@ (8002538 <checkCommand+0xa60>)
 8002394:	22a5      	movs	r2, #165	@ 0xa5
 8002396:	701a      	strb	r2, [r3, #0]
					canSendFormat[1] = COMMAND_YCALIB_READ;
 8002398:	4b67      	ldr	r3, [pc, #412]	@ (8002538 <checkCommand+0xa60>)
 800239a:	2283      	movs	r2, #131	@ 0x83
 800239c:	705a      	strb	r2, [r3, #1]
					canSendFormat[2] = (*(uint32_t*)(CONFIG_DATA_Y_MAXPOINT_OFFSET + 1));
 800239e:	4b6e      	ldr	r3, [pc, #440]	@ (8002558 <checkCommand+0xa80>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b64      	ldr	r3, [pc, #400]	@ (8002538 <checkCommand+0xa60>)
 80023a6:	709a      	strb	r2, [r3, #2]
					canSendFormat[3] = (*(uint32_t*)CONFIG_DATA_Y_MAXPOINT_OFFSET);
 80023a8:	4b6c      	ldr	r3, [pc, #432]	@ (800255c <checkCommand+0xa84>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b62      	ldr	r3, [pc, #392]	@ (8002538 <checkCommand+0xa60>)
 80023b0:	70da      	strb	r2, [r3, #3]
					canSendFormat[4] = (*(uint32_t*)(CONFIG_DATA_Y_MINPOINT_OFFSET + 1));
 80023b2:	4b6b      	ldr	r3, [pc, #428]	@ (8002560 <checkCommand+0xa88>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b5f      	ldr	r3, [pc, #380]	@ (8002538 <checkCommand+0xa60>)
 80023ba:	711a      	strb	r2, [r3, #4]
					canSendFormat[5] = (*(uint32_t*)CONFIG_DATA_Y_MINPOINT_OFFSET);
 80023bc:	4b69      	ldr	r3, [pc, #420]	@ (8002564 <checkCommand+0xa8c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002538 <checkCommand+0xa60>)
 80023c4:	715a      	strb	r2, [r3, #5]
					canSendFormat[6] = (*(uint32_t*)(CONFIG_DATA_Y_MIDDLEPOINT_OFFSET + 1));
 80023c6:	4b68      	ldr	r3, [pc, #416]	@ (8002568 <checkCommand+0xa90>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002538 <checkCommand+0xa60>)
 80023ce:	719a      	strb	r2, [r3, #6]
					canSendFormat[7] = (*(uint32_t*)CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 80023d0:	4b66      	ldr	r3, [pc, #408]	@ (800256c <checkCommand+0xa94>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b58      	ldr	r3, [pc, #352]	@ (8002538 <checkCommand+0xa60>)
 80023d8:	71da      	strb	r2, [r3, #7]
					if (HAL_CAN_AddTxMessage(&hcan, &txHeader, canSendFormat, &txMailbox) != HAL_OK)
 80023da:	f107 0308 	add.w	r3, r7, #8
 80023de:	f107 010c 	add.w	r1, r7, #12
 80023e2:	4a55      	ldr	r2, [pc, #340]	@ (8002538 <checkCommand+0xa60>)
 80023e4:	485b      	ldr	r0, [pc, #364]	@ (8002554 <checkCommand+0xa7c>)
 80023e6:	f001 fbab 	bl	8003b40 <HAL_CAN_AddTxMessage>
				break;
 80023ea:	e0a1      	b.n	8002530 <checkCommand+0xa58>
					canSendFormat[0] = COMMAND_HEADER;
 80023ec:	4b52      	ldr	r3, [pc, #328]	@ (8002538 <checkCommand+0xa60>)
 80023ee:	22a5      	movs	r2, #165	@ 0xa5
 80023f0:	701a      	strb	r2, [r3, #0]
					canSendFormat[1] = COMMAND_DEFAULT_MODSEL_READ;
 80023f2:	4b51      	ldr	r3, [pc, #324]	@ (8002538 <checkCommand+0xa60>)
 80023f4:	2271      	movs	r2, #113	@ 0x71
 80023f6:	705a      	strb	r2, [r3, #1]
					canSendFormat[2] = (*(uint32_t*)DEFAULT_CONFIG_DATA_INTERFACE_OFFSET);;
 80023f8:	4b5d      	ldr	r3, [pc, #372]	@ (8002570 <checkCommand+0xa98>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002538 <checkCommand+0xa60>)
 8002400:	709a      	strb	r2, [r3, #2]
					canSendFormat[3] = 0x00;
 8002402:	4b4d      	ldr	r3, [pc, #308]	@ (8002538 <checkCommand+0xa60>)
 8002404:	2200      	movs	r2, #0
 8002406:	70da      	strb	r2, [r3, #3]
					canSendFormat[4] = 0x00;
 8002408:	4b4b      	ldr	r3, [pc, #300]	@ (8002538 <checkCommand+0xa60>)
 800240a:	2200      	movs	r2, #0
 800240c:	711a      	strb	r2, [r3, #4]
					canSendFormat[5] = 0x00;
 800240e:	4b4a      	ldr	r3, [pc, #296]	@ (8002538 <checkCommand+0xa60>)
 8002410:	2200      	movs	r2, #0
 8002412:	715a      	strb	r2, [r3, #5]
					canSendFormat[6] = 0x00;
 8002414:	4b48      	ldr	r3, [pc, #288]	@ (8002538 <checkCommand+0xa60>)
 8002416:	2200      	movs	r2, #0
 8002418:	719a      	strb	r2, [r3, #6]
					canSendFormat[7] = 0x00;
 800241a:	4b47      	ldr	r3, [pc, #284]	@ (8002538 <checkCommand+0xa60>)
 800241c:	2200      	movs	r2, #0
 800241e:	71da      	strb	r2, [r3, #7]
					if (HAL_CAN_AddTxMessage(&hcan, &txHeader, canSendFormat, &txMailbox) != HAL_OK)
 8002420:	f107 0308 	add.w	r3, r7, #8
 8002424:	f107 010c 	add.w	r1, r7, #12
 8002428:	4a43      	ldr	r2, [pc, #268]	@ (8002538 <checkCommand+0xa60>)
 800242a:	484a      	ldr	r0, [pc, #296]	@ (8002554 <checkCommand+0xa7c>)
 800242c:	f001 fb88 	bl	8003b40 <HAL_CAN_AddTxMessage>
				break;
 8002430:	e07e      	b.n	8002530 <checkCommand+0xa58>
					canSendFormat[0] = COMMAND_HEADER;
 8002432:	4b41      	ldr	r3, [pc, #260]	@ (8002538 <checkCommand+0xa60>)
 8002434:	22a5      	movs	r2, #165	@ 0xa5
 8002436:	701a      	strb	r2, [r3, #0]
					canSendFormat[1] = COMMAND_DEFAULT_XCALIB_READ;
 8002438:	4b3f      	ldr	r3, [pc, #252]	@ (8002538 <checkCommand+0xa60>)
 800243a:	2272      	movs	r2, #114	@ 0x72
 800243c:	705a      	strb	r2, [r3, #1]
					canSendFormat[2] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET + 1)); //MSB
 800243e:	4b4d      	ldr	r3, [pc, #308]	@ (8002574 <checkCommand+0xa9c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	4b3c      	ldr	r3, [pc, #240]	@ (8002538 <checkCommand+0xa60>)
 8002446:	709a      	strb	r2, [r3, #2]
					canSendFormat[3] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET);		 //LSB
 8002448:	4b4b      	ldr	r3, [pc, #300]	@ (8002578 <checkCommand+0xaa0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b3a      	ldr	r3, [pc, #232]	@ (8002538 <checkCommand+0xa60>)
 8002450:	70da      	strb	r2, [r3, #3]
					canSendFormat[4] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET + 1));
 8002452:	4b4a      	ldr	r3, [pc, #296]	@ (800257c <checkCommand+0xaa4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	4b37      	ldr	r3, [pc, #220]	@ (8002538 <checkCommand+0xa60>)
 800245a:	711a      	strb	r2, [r3, #4]
					canSendFormat[5] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET);
 800245c:	4b48      	ldr	r3, [pc, #288]	@ (8002580 <checkCommand+0xaa8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4b35      	ldr	r3, [pc, #212]	@ (8002538 <checkCommand+0xa60>)
 8002464:	715a      	strb	r2, [r3, #5]
					canSendFormat[6] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET + 1));
 8002466:	4b47      	ldr	r3, [pc, #284]	@ (8002584 <checkCommand+0xaac>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	b2da      	uxtb	r2, r3
 800246c:	4b32      	ldr	r3, [pc, #200]	@ (8002538 <checkCommand+0xa60>)
 800246e:	719a      	strb	r2, [r3, #6]
					canSendFormat[7] = (*(uint32_t*)DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET);
 8002470:	4b45      	ldr	r3, [pc, #276]	@ (8002588 <checkCommand+0xab0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b30      	ldr	r3, [pc, #192]	@ (8002538 <checkCommand+0xa60>)
 8002478:	71da      	strb	r2, [r3, #7]
					if (HAL_CAN_AddTxMessage(&hcan, &txHeader, canSendFormat, &txMailbox) != HAL_OK)
 800247a:	f107 0308 	add.w	r3, r7, #8
 800247e:	f107 010c 	add.w	r1, r7, #12
 8002482:	4a2d      	ldr	r2, [pc, #180]	@ (8002538 <checkCommand+0xa60>)
 8002484:	4833      	ldr	r0, [pc, #204]	@ (8002554 <checkCommand+0xa7c>)
 8002486:	f001 fb5b 	bl	8003b40 <HAL_CAN_AddTxMessage>
				break;
 800248a:	e051      	b.n	8002530 <checkCommand+0xa58>
					canSendFormat[0] = COMMAND_HEADER;
 800248c:	4b2a      	ldr	r3, [pc, #168]	@ (8002538 <checkCommand+0xa60>)
 800248e:	22a5      	movs	r2, #165	@ 0xa5
 8002490:	701a      	strb	r2, [r3, #0]
					canSendFormat[1] = COMMAND_DEFAULT_YCALIB_READ;
 8002492:	4b29      	ldr	r3, [pc, #164]	@ (8002538 <checkCommand+0xa60>)
 8002494:	2273      	movs	r2, #115	@ 0x73
 8002496:	705a      	strb	r2, [r3, #1]
					canSendFormat[2] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET + 1));
 8002498:	4b3c      	ldr	r3, [pc, #240]	@ (800258c <checkCommand+0xab4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4b26      	ldr	r3, [pc, #152]	@ (8002538 <checkCommand+0xa60>)
 80024a0:	709a      	strb	r2, [r3, #2]
					canSendFormat[3] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET);
 80024a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002590 <checkCommand+0xab8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b23      	ldr	r3, [pc, #140]	@ (8002538 <checkCommand+0xa60>)
 80024aa:	70da      	strb	r2, [r3, #3]
					canSendFormat[4] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET + 1));
 80024ac:	4b39      	ldr	r3, [pc, #228]	@ (8002594 <checkCommand+0xabc>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4b21      	ldr	r3, [pc, #132]	@ (8002538 <checkCommand+0xa60>)
 80024b4:	711a      	strb	r2, [r3, #4]
					canSendFormat[5] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET);
 80024b6:	4b38      	ldr	r3, [pc, #224]	@ (8002598 <checkCommand+0xac0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002538 <checkCommand+0xa60>)
 80024be:	715a      	strb	r2, [r3, #5]
					canSendFormat[6] = (*(uint32_t*)(DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET + 1));
 80024c0:	4b36      	ldr	r3, [pc, #216]	@ (800259c <checkCommand+0xac4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002538 <checkCommand+0xa60>)
 80024c8:	719a      	strb	r2, [r3, #6]
					canSendFormat[7] = (*(uint32_t*)DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET);
 80024ca:	4b35      	ldr	r3, [pc, #212]	@ (80025a0 <checkCommand+0xac8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <checkCommand+0xa60>)
 80024d2:	71da      	strb	r2, [r3, #7]
					if (HAL_CAN_AddTxMessage(&hcan, &txHeader, canSendFormat, &txMailbox) != HAL_OK)
 80024d4:	f107 0308 	add.w	r3, r7, #8
 80024d8:	f107 010c 	add.w	r1, r7, #12
 80024dc:	4a16      	ldr	r2, [pc, #88]	@ (8002538 <checkCommand+0xa60>)
 80024de:	481d      	ldr	r0, [pc, #116]	@ (8002554 <checkCommand+0xa7c>)
 80024e0:	f001 fb2e 	bl	8003b40 <HAL_CAN_AddTxMessage>
				break;
 80024e4:	e024      	b.n	8002530 <checkCommand+0xa58>
					bootloaderCommand();
 80024e6:	f7fe fa5f 	bl	80009a8 <bootloaderCommand>
				break;
 80024ea:	e021      	b.n	8002530 <checkCommand+0xa58>
					sendAckCan();
 80024ec:	f7ff fabe 	bl	8001a6c <sendAckCan>
					HAL_NVIC_SystemReset();
 80024f0:	f002 f889 	bl	8004606 <HAL_NVIC_SystemReset>
				break;
 80024f4:	e01c      	b.n	8002530 <checkCommand+0xa58>
					remoteMode = 0;
 80024f6:	4b2b      	ldr	r3, [pc, #172]	@ (80025a4 <checkCommand+0xacc>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]
					sendAckCan();
 80024fc:	f7ff fab6 	bl	8001a6c <sendAckCan>
				break;
 8002500:	e016      	b.n	8002530 <checkCommand+0xa58>
					refreshFlashUserConf(&tempTkkConfig);
 8002502:	4829      	ldr	r0, [pc, #164]	@ (80025a8 <checkCommand+0xad0>)
 8002504:	f7ff f93a 	bl	800177c <refreshFlashUserConf>
					calculateJostickBorders(&userTkkConfig, &tkkJoystickBorder);
 8002508:	4928      	ldr	r1, [pc, #160]	@ (80025ac <checkCommand+0xad4>)
 800250a:	4829      	ldr	r0, [pc, #164]	@ (80025b0 <checkCommand+0xad8>)
 800250c:	f7fe fb92 	bl	8000c34 <calculateJostickBorders>
					remoteMode = 1;
 8002510:	4b24      	ldr	r3, [pc, #144]	@ (80025a4 <checkCommand+0xacc>)
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
					sendAckCan();
 8002516:	f7ff faa9 	bl	8001a6c <sendAckCan>
				break;
 800251a:	e009      	b.n	8002530 <checkCommand+0xa58>
					sendAckCan();
 800251c:	f7ff faa6 	bl	8001a6c <sendAckCan>
				break;
 8002520:	e006      	b.n	8002530 <checkCommand+0xa58>
				break;
 8002522:	bf00      	nop
 8002524:	e004      	b.n	8002530 <checkCommand+0xa58>
				break;
 8002526:	bf00      	nop
 8002528:	e002      	b.n	8002530 <checkCommand+0xa58>
				break;
 800252a:	bf00      	nop
 800252c:	e000      	b.n	8002530 <checkCommand+0xa58>
				break;
 800252e:	bf00      	nop
}
 8002530:	bf00      	nop
 8002532:	3728      	adds	r7, #40	@ 0x28
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000380 	.word	0x20000380
 800253c:	0800e009 	.word	0x0800e009
 8002540:	0800e008 	.word	0x0800e008
 8002544:	0800e007 	.word	0x0800e007
 8002548:	0800e006 	.word	0x0800e006
 800254c:	0800e005 	.word	0x0800e005
 8002550:	0800e004 	.word	0x0800e004
 8002554:	200000a0 	.word	0x200000a0
 8002558:	0800e00f 	.word	0x0800e00f
 800255c:	0800e00e 	.word	0x0800e00e
 8002560:	0800e00d 	.word	0x0800e00d
 8002564:	0800e00c 	.word	0x0800e00c
 8002568:	0800e00b 	.word	0x0800e00b
 800256c:	0800e00a 	.word	0x0800e00a
 8002570:	0800f000 	.word	0x0800f000
 8002574:	0800f007 	.word	0x0800f007
 8002578:	0800f006 	.word	0x0800f006
 800257c:	0800f005 	.word	0x0800f005
 8002580:	0800f004 	.word	0x0800f004
 8002584:	0800f003 	.word	0x0800f003
 8002588:	0800f002 	.word	0x0800f002
 800258c:	0800f00d 	.word	0x0800f00d
 8002590:	0800f00c 	.word	0x0800f00c
 8002594:	0800f00b 	.word	0x0800f00b
 8002598:	0800f00a 	.word	0x0800f00a
 800259c:	0800f009 	.word	0x0800f009
 80025a0:	0800f008 	.word	0x0800f008
 80025a4:	20000000 	.word	0x20000000
 80025a8:	200003a4 	.word	0x200003a4
 80025ac:	20000494 	.word	0x20000494
 80025b0:	200003f4 	.word	0x200003f4

080025b4 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan_arg)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08c      	sub	sp, #48	@ 0x30
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];

	if (HAL_CAN_GetRxMessage(hcan_arg, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	f107 0214 	add.w	r2, r7, #20
 80025c4:	2100      	movs	r1, #0
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f001 fb8a 	bl	8003ce0 <HAL_CAN_GetRxMessage>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d131      	bne.n	8002636 <HAL_CAN_RxFifo0MsgPendingCallback+0x82>
	{
	  return;
	}

	if (rxHeader.IDE == CAN_ID_STD && rxHeader.RTR == CAN_RTR_DATA)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d12f      	bne.n	8002638 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d12c      	bne.n	8002638 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
	{
	  if(rxHeader.StdId == 0x101)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f240 1201 	movw	r2, #257	@ 0x101
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d105      	bne.n	80025f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
	  {
			checkCommand(rxData);
 80025e8:	f107 030c 	add.w	r3, r7, #12
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fa73 	bl	8001ad8 <checkCommand>
 80025f2:	e021      	b.n	8002638 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
	  }
	  else if(rxHeader.StdId == 0X105)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f240 1205 	movw	r2, #261	@ 0x105
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d11c      	bne.n	8002638 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
	  {
		  if(rxData[0] == 0xDE &&
 80025fe:	7b3b      	ldrb	r3, [r7, #12]
 8002600:	2bde      	cmp	r3, #222	@ 0xde
 8002602:	d119      	bne.n	8002638 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
			 rxData[1] == 0xAD &&
 8002604:	7b7b      	ldrb	r3, [r7, #13]
		  if(rxData[0] == 0xDE &&
 8002606:	2bad      	cmp	r3, #173	@ 0xad
 8002608:	d116      	bne.n	8002638 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
			 rxData[2] == 0x42 &&
 800260a:	7bbb      	ldrb	r3, [r7, #14]
			 rxData[1] == 0xAD &&
 800260c:	2b42      	cmp	r3, #66	@ 0x42
 800260e:	d113      	bne.n	8002638 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
			 rxData[3] == 0x42 &&
 8002610:	7bfb      	ldrb	r3, [r7, #15]
			 rxData[2] == 0x42 &&
 8002612:	2b42      	cmp	r3, #66	@ 0x42
 8002614:	d110      	bne.n	8002638 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
			 rxData[4] == 0x42 &&
 8002616:	7c3b      	ldrb	r3, [r7, #16]
			 rxData[3] == 0x42 &&
 8002618:	2b42      	cmp	r3, #66	@ 0x42
 800261a:	d10d      	bne.n	8002638 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
			 rxData[5] == 0x42 &&
 800261c:	7c7b      	ldrb	r3, [r7, #17]
			 rxData[4] == 0x42 &&
 800261e:	2b42      	cmp	r3, #66	@ 0x42
 8002620:	d10a      	bne.n	8002638 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
			 rxData[6] == 0xDE &&
 8002622:	7cbb      	ldrb	r3, [r7, #18]
			 rxData[5] == 0x42 &&
 8002624:	2bde      	cmp	r3, #222	@ 0xde
 8002626:	d107      	bne.n	8002638 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
			 rxData[7] == 0xAD)
 8002628:	7cfb      	ldrb	r3, [r7, #19]
			 rxData[6] == 0xDE &&
 800262a:	2bad      	cmp	r3, #173	@ 0xad
 800262c:	d104      	bne.n	8002638 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
		  {
			  userTkkConfig.tkkModSelection = TKK_MOD_CAN;
 800262e:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8002630:	2202      	movs	r2, #2
 8002632:	801a      	strh	r2, [r3, #0]
 8002634:	e000      	b.n	8002638 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
	  return;
 8002636:	bf00      	nop
		  }
	  }
	}
}
 8002638:	3730      	adds	r7, #48	@ 0x30
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200003f4 	.word	0x200003f4

08002644 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	unsigned int i;
	tempRxDataIn = rxDataIn;
 800264c:	4b34      	ldr	r3, [pc, #208]	@ (8002720 <HAL_UART_RxCpltCallback+0xdc>)
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	4b34      	ldr	r3, [pc, #208]	@ (8002724 <HAL_UART_RxCpltCallback+0xe0>)
 8002652:	701a      	strb	r2, [r3, #0]

	if(userTkkConfig.tkkModSelection == TKK_MOD_RS422)
 8002654:	4b34      	ldr	r3, [pc, #208]	@ (8002728 <HAL_UART_RxCpltCallback+0xe4>)
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d15d      	bne.n	8002718 <HAL_UART_RxCpltCallback+0xd4>
	{
		if(rxBufferDataCounter==0 && rxDataIn==0xA5)
 800265c:	4b33      	ldr	r3, [pc, #204]	@ (800272c <HAL_UART_RxCpltCallback+0xe8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10d      	bne.n	8002680 <HAL_UART_RxCpltCallback+0x3c>
 8002664:	4b2e      	ldr	r3, [pc, #184]	@ (8002720 <HAL_UART_RxCpltCallback+0xdc>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2ba5      	cmp	r3, #165	@ 0xa5
 800266a:	d109      	bne.n	8002680 <HAL_UART_RxCpltCallback+0x3c>
			{
				rxBuffer[0] = rxDataIn;
 800266c:	4b2c      	ldr	r3, [pc, #176]	@ (8002720 <HAL_UART_RxCpltCallback+0xdc>)
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	4b2f      	ldr	r3, [pc, #188]	@ (8002730 <HAL_UART_RxCpltCallback+0xec>)
 8002672:	701a      	strb	r2, [r3, #0]
				rxBufferDataCounter++;
 8002674:	4b2d      	ldr	r3, [pc, #180]	@ (800272c <HAL_UART_RxCpltCallback+0xe8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3301      	adds	r3, #1
 800267a:	4a2c      	ldr	r2, [pc, #176]	@ (800272c <HAL_UART_RxCpltCallback+0xe8>)
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e04b      	b.n	8002718 <HAL_UART_RxCpltCallback+0xd4>
			}
			else if(rxBufferDataCounter>0 && rxBufferDataCounter<8)
 8002680:	4b2a      	ldr	r3, [pc, #168]	@ (800272c <HAL_UART_RxCpltCallback+0xe8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00f      	beq.n	80026a8 <HAL_UART_RxCpltCallback+0x64>
 8002688:	4b28      	ldr	r3, [pc, #160]	@ (800272c <HAL_UART_RxCpltCallback+0xe8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b07      	cmp	r3, #7
 800268e:	d80b      	bhi.n	80026a8 <HAL_UART_RxCpltCallback+0x64>
			{
				rxBuffer[rxBufferDataCounter] = rxDataIn;
 8002690:	4b26      	ldr	r3, [pc, #152]	@ (800272c <HAL_UART_RxCpltCallback+0xe8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a22      	ldr	r2, [pc, #136]	@ (8002720 <HAL_UART_RxCpltCallback+0xdc>)
 8002696:	7811      	ldrb	r1, [r2, #0]
 8002698:	4a25      	ldr	r2, [pc, #148]	@ (8002730 <HAL_UART_RxCpltCallback+0xec>)
 800269a:	54d1      	strb	r1, [r2, r3]
				rxBufferDataCounter++;
 800269c:	4b23      	ldr	r3, [pc, #140]	@ (800272c <HAL_UART_RxCpltCallback+0xe8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3301      	adds	r3, #1
 80026a2:	4a22      	ldr	r2, [pc, #136]	@ (800272c <HAL_UART_RxCpltCallback+0xe8>)
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e037      	b.n	8002718 <HAL_UART_RxCpltCallback+0xd4>
			}
			else if(rxBufferDataCounter==8)
 80026a8:	4b20      	ldr	r3, [pc, #128]	@ (800272c <HAL_UART_RxCpltCallback+0xe8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d12f      	bne.n	8002710 <HAL_UART_RxCpltCallback+0xcc>
			{
				/* checksum control */
				rxDataCheksum = 0;
 80026b0:	4b20      	ldr	r3, [pc, #128]	@ (8002734 <HAL_UART_RxCpltCallback+0xf0>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
				rxBuffer[rxBufferDataCounter] = rxDataIn;
 80026b6:	4b1d      	ldr	r3, [pc, #116]	@ (800272c <HAL_UART_RxCpltCallback+0xe8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a19      	ldr	r2, [pc, #100]	@ (8002720 <HAL_UART_RxCpltCallback+0xdc>)
 80026bc:	7811      	ldrb	r1, [r2, #0]
 80026be:	4a1c      	ldr	r2, [pc, #112]	@ (8002730 <HAL_UART_RxCpltCallback+0xec>)
 80026c0:	54d1      	strb	r1, [r2, r3]

				for(i=1;i<9;i++)
 80026c2:	2301      	movs	r3, #1
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e00c      	b.n	80026e2 <HAL_UART_RxCpltCallback+0x9e>
				{
					rxDataCheksum += rxBuffer[i];
 80026c8:	4a19      	ldr	r2, [pc, #100]	@ (8002730 <HAL_UART_RxCpltCallback+0xec>)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4413      	add	r3, r2
 80026ce:	781a      	ldrb	r2, [r3, #0]
 80026d0:	4b18      	ldr	r3, [pc, #96]	@ (8002734 <HAL_UART_RxCpltCallback+0xf0>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4413      	add	r3, r2
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	4b16      	ldr	r3, [pc, #88]	@ (8002734 <HAL_UART_RxCpltCallback+0xf0>)
 80026da:	701a      	strb	r2, [r3, #0]
				for(i=1;i<9;i++)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3301      	adds	r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d9ef      	bls.n	80026c8 <HAL_UART_RxCpltCallback+0x84>
				}
				if(rxDataCheksum==0)
 80026e8:	4b12      	ldr	r3, [pc, #72]	@ (8002734 <HAL_UART_RxCpltCallback+0xf0>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d106      	bne.n	80026fe <HAL_UART_RxCpltCallback+0xba>
				{
					/* checkSum OK, process the command */
					checkCommand(rxBuffer);
 80026f0:	480f      	ldr	r0, [pc, #60]	@ (8002730 <HAL_UART_RxCpltCallback+0xec>)
 80026f2:	f7ff f9f1 	bl	8001ad8 <checkCommand>
					rxBufferDataCounter = 0; /* test breakpoint icin */
 80026f6:	4b0d      	ldr	r3, [pc, #52]	@ (800272c <HAL_UART_RxCpltCallback+0xe8>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	e004      	b.n	8002708 <HAL_UART_RxCpltCallback+0xc4>
				}
				else
				{
					/* error, do nothing*/
					errorCounter++;
 80026fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002738 <HAL_UART_RxCpltCallback+0xf4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	4a0c      	ldr	r2, [pc, #48]	@ (8002738 <HAL_UART_RxCpltCallback+0xf4>)
 8002706:	6013      	str	r3, [r2, #0]
				}
				rxBufferDataCounter = 0;
 8002708:	4b08      	ldr	r3, [pc, #32]	@ (800272c <HAL_UART_RxCpltCallback+0xe8>)
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
			else
			{
				rxBufferDataCounter = 0;
			}
	}
}
 800270e:	e003      	b.n	8002718 <HAL_UART_RxCpltCallback+0xd4>
				rxBufferDataCounter = 0;
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_UART_RxCpltCallback+0xe8>)
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
}
 8002716:	e7ff      	b.n	8002718 <HAL_UART_RxCpltCallback+0xd4>
 8002718:	bf00      	nop
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	2000038a 	.word	0x2000038a
 8002724:	20000389 	.word	0x20000389
 8002728:	200003f4 	.word	0x200003f4
 800272c:	2000038c 	.word	0x2000038c
 8002730:	20000390 	.word	0x20000390
 8002734:	20000399 	.word	0x20000399
 8002738:	2000039c 	.word	0x2000039c

0800273c <writeDefaultConfigPage>:

void writeDefaultConfigPage(void)
{
 800273c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002740:	b08c      	sub	sp, #48	@ 0x30
 8002742:	af00      	add	r7, sp, #0
	uint32_t index = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	62fb      	str	r3, [r7, #44]	@ 0x2c

	defaultTkkConfig.tkkModSelection = TKK_MOD_RS422;
 8002748:	4a5f      	ldr	r2, [pc, #380]	@ (80028c8 <writeDefaultConfigPage+0x18c>)
 800274a:	2300      	movs	r3, #0
 800274c:	8013      	strh	r3, [r2, #0]

	defaultTkkConfig.yMin = 32900;
 800274e:	4a5e      	ldr	r2, [pc, #376]	@ (80028c8 <writeDefaultConfigPage+0x18c>)
 8002750:	f248 0384 	movw	r3, #32900	@ 0x8084
 8002754:	8113      	strh	r3, [r2, #8]
	defaultTkkConfig.yMax = 65535;
 8002756:	4a5c      	ldr	r2, [pc, #368]	@ (80028c8 <writeDefaultConfigPage+0x18c>)
 8002758:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800275c:	8153      	strh	r3, [r2, #10]
	defaultTkkConfig.yMid = 49220;
 800275e:	4a5a      	ldr	r2, [pc, #360]	@ (80028c8 <writeDefaultConfigPage+0x18c>)
 8002760:	f24c 0344 	movw	r3, #49220	@ 0xc044
 8002764:	8193      	strh	r3, [r2, #12]

	defaultTkkConfig.xMin = 32900;
 8002766:	4a58      	ldr	r2, [pc, #352]	@ (80028c8 <writeDefaultConfigPage+0x18c>)
 8002768:	f248 0384 	movw	r3, #32900	@ 0x8084
 800276c:	8053      	strh	r3, [r2, #2]
	defaultTkkConfig.xMax = 65535;
 800276e:	4a56      	ldr	r2, [pc, #344]	@ (80028c8 <writeDefaultConfigPage+0x18c>)
 8002770:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002774:	8093      	strh	r3, [r2, #4]
	defaultTkkConfig.xMid = 49220;
 8002776:	4a54      	ldr	r2, [pc, #336]	@ (80028c8 <writeDefaultConfigPage+0x18c>)
 8002778:	f24c 0344 	movw	r3, #49220	@ 0xc044
 800277c:	80d3      	strh	r3, [r2, #6]

	for(index = 0; index < BUTTON_COUNT; index++)
 800277e:	2300      	movs	r3, #0
 8002780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002782:	e009      	b.n	8002798 <writeDefaultConfigPage+0x5c>
	{
		defaultTkkConfig.debounceFactor[index] = 20;
 8002784:	4950      	ldr	r1, [pc, #320]	@ (80028c8 <writeDefaultConfigPage+0x18c>)
 8002786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002788:	3304      	adds	r3, #4
 800278a:	005a      	lsls	r2, r3, #1
 800278c:	440a      	add	r2, r1
 800278e:	2314      	movs	r3, #20
 8002790:	80d3      	strh	r3, [r2, #6]
	for(index = 0; index < BUTTON_COUNT; index++)
 8002792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002794:	3301      	adds	r3, #1
 8002796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279a:	2b1f      	cmp	r3, #31
 800279c:	d9f2      	bls.n	8002784 <writeDefaultConfigPage+0x48>
	}

	volatile uint32_t i = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	62bb      	str	r3, [r7, #40]	@ 0x28

	HAL_FLASH_Unlock();
 80027a2:	f002 f9df 	bl	8004b64 <HAL_FLASH_Unlock>

	static FLASH_EraseInitTypeDef EraseInitStructDefaultPage;
	EraseInitStructDefaultPage.TypeErase = FLASH_TYPEERASE_PAGES;
 80027a6:	4a49      	ldr	r2, [pc, #292]	@ (80028cc <writeDefaultConfigPage+0x190>)
 80027a8:	2300      	movs	r3, #0
 80027aa:	6013      	str	r3, [r2, #0]
	EraseInitStructDefaultPage.PageAddress = DEFAULT_CONFIG_DATA_BASE_ADDR;
 80027ac:	4a47      	ldr	r2, [pc, #284]	@ (80028cc <writeDefaultConfigPage+0x190>)
 80027ae:	4b48      	ldr	r3, [pc, #288]	@ (80028d0 <writeDefaultConfigPage+0x194>)
 80027b0:	6053      	str	r3, [r2, #4]
	EraseInitStructDefaultPage.NbPages = 1;
 80027b2:	4a46      	ldr	r2, [pc, #280]	@ (80028cc <writeDefaultConfigPage+0x190>)
 80027b4:	2301      	movs	r3, #1
 80027b6:	6093      	str	r3, [r2, #8]

	if(HAL_FLASHEx_Erase(&EraseInitStructDefaultPage, &PAGEError) != HAL_OK)
 80027b8:	4946      	ldr	r1, [pc, #280]	@ (80028d4 <writeDefaultConfigPage+0x198>)
 80027ba:	4844      	ldr	r0, [pc, #272]	@ (80028cc <writeDefaultConfigPage+0x190>)
 80027bc:	f002 fa96 	bl	8004cec <HAL_FLASHEx_Erase>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <writeDefaultConfigPage+0x8e>
	{
		Error_Handler();
 80027c6:	f000 f895 	bl	80028f4 <Error_Handler>
	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_INTERFACE_OFFSET		, defaultTkkConfig.tkkModSelection );
 80027ca:	4b3f      	ldr	r3, [pc, #252]	@ (80028c8 <writeDefaultConfigPage+0x18c>)
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2200      	movs	r2, #0
 80027d4:	461c      	mov	r4, r3
 80027d6:	4615      	mov	r5, r2
 80027d8:	4622      	mov	r2, r4
 80027da:	462b      	mov	r3, r5
 80027dc:	493c      	ldr	r1, [pc, #240]	@ (80028d0 <writeDefaultConfigPage+0x194>)
 80027de:	2001      	movs	r0, #1
 80027e0:	f002 f950 	bl	8004a84 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_X_MIDDLEPOINT_OFFSET	, defaultTkkConfig.xMid);
 80027e4:	4b38      	ldr	r3, [pc, #224]	@ (80028c8 <writeDefaultConfigPage+0x18c>)
 80027e6:	88db      	ldrh	r3, [r3, #6]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2200      	movs	r2, #0
 80027ee:	4698      	mov	r8, r3
 80027f0:	4691      	mov	r9, r2
 80027f2:	4642      	mov	r2, r8
 80027f4:	464b      	mov	r3, r9
 80027f6:	4938      	ldr	r1, [pc, #224]	@ (80028d8 <writeDefaultConfigPage+0x19c>)
 80027f8:	2001      	movs	r0, #1
 80027fa:	f002 f943 	bl	8004a84 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_X_MINPOINT_OFFSET		, defaultTkkConfig.xMin);
 80027fe:	4b32      	ldr	r3, [pc, #200]	@ (80028c8 <writeDefaultConfigPage+0x18c>)
 8002800:	885b      	ldrh	r3, [r3, #2]
 8002802:	b29b      	uxth	r3, r3
 8002804:	b29b      	uxth	r3, r3
 8002806:	2200      	movs	r2, #0
 8002808:	469a      	mov	sl, r3
 800280a:	4693      	mov	fp, r2
 800280c:	4652      	mov	r2, sl
 800280e:	465b      	mov	r3, fp
 8002810:	4932      	ldr	r1, [pc, #200]	@ (80028dc <writeDefaultConfigPage+0x1a0>)
 8002812:	2001      	movs	r0, #1
 8002814:	f002 f936 	bl	8004a84 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_X_MAXPOINT_OFFSET		, defaultTkkConfig.xMax);
 8002818:	4b2b      	ldr	r3, [pc, #172]	@ (80028c8 <writeDefaultConfigPage+0x18c>)
 800281a:	889b      	ldrh	r3, [r3, #4]
 800281c:	b29b      	uxth	r3, r3
 800281e:	b29b      	uxth	r3, r3
 8002820:	2200      	movs	r2, #0
 8002822:	623b      	str	r3, [r7, #32]
 8002824:	627a      	str	r2, [r7, #36]	@ 0x24
 8002826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800282a:	492d      	ldr	r1, [pc, #180]	@ (80028e0 <writeDefaultConfigPage+0x1a4>)
 800282c:	2001      	movs	r0, #1
 800282e:	f002 f929 	bl	8004a84 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_Y_MIDDLEPOINT_OFFSET	, defaultTkkConfig.yMid);
 8002832:	4b25      	ldr	r3, [pc, #148]	@ (80028c8 <writeDefaultConfigPage+0x18c>)
 8002834:	899b      	ldrh	r3, [r3, #12]
 8002836:	b29b      	uxth	r3, r3
 8002838:	b29b      	uxth	r3, r3
 800283a:	2200      	movs	r2, #0
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	61fa      	str	r2, [r7, #28]
 8002840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002844:	4927      	ldr	r1, [pc, #156]	@ (80028e4 <writeDefaultConfigPage+0x1a8>)
 8002846:	2001      	movs	r0, #1
 8002848:	f002 f91c 	bl	8004a84 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_Y_MINPOINT_OFFSET		, defaultTkkConfig.yMin);
 800284c:	4b1e      	ldr	r3, [pc, #120]	@ (80028c8 <writeDefaultConfigPage+0x18c>)
 800284e:	891b      	ldrh	r3, [r3, #8]
 8002850:	b29b      	uxth	r3, r3
 8002852:	b29b      	uxth	r3, r3
 8002854:	2200      	movs	r2, #0
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	617a      	str	r2, [r7, #20]
 800285a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800285e:	4922      	ldr	r1, [pc, #136]	@ (80028e8 <writeDefaultConfigPage+0x1ac>)
 8002860:	2001      	movs	r0, #1
 8002862:	f002 f90f 	bl	8004a84 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_Y_MAXPOINT_OFFSET		, defaultTkkConfig.yMax);
 8002866:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <writeDefaultConfigPage+0x18c>)
 8002868:	895b      	ldrh	r3, [r3, #10]
 800286a:	b29b      	uxth	r3, r3
 800286c:	b29b      	uxth	r3, r3
 800286e:	2200      	movs	r2, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	60fa      	str	r2, [r7, #12]
 8002874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002878:	491c      	ldr	r1, [pc, #112]	@ (80028ec <writeDefaultConfigPage+0x1b0>)
 800287a:	2001      	movs	r0, #1
 800287c:	f002 f902 	bl	8004a84 <HAL_FLASH_Program>

	for(i = 0; i < 32; i++)
 8002880:	2300      	movs	r3, #0
 8002882:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002884:	e016      	b.n	80028b4 <writeDefaultConfigPage+0x178>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, DEFAULT_CONFIG_DATA_DEBOUNCEFACTOR_BASE + i*CONFIG_FLASH_ADDR_INCREMENT, defaultTkkConfig.debounceFactor[i]);
 8002886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4919      	ldr	r1, [pc, #100]	@ (80028f0 <writeDefaultConfigPage+0x1b4>)
 800288c:	4419      	add	r1, r3
 800288e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002890:	4a0d      	ldr	r2, [pc, #52]	@ (80028c8 <writeDefaultConfigPage+0x18c>)
 8002892:	3304      	adds	r3, #4
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	88db      	ldrh	r3, [r3, #6]
 800289a:	b29b      	uxth	r3, r3
 800289c:	b29b      	uxth	r3, r3
 800289e:	2200      	movs	r2, #0
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028a8:	2001      	movs	r0, #1
 80028aa:	f002 f8eb 	bl	8004a84 <HAL_FLASH_Program>
	for(i = 0; i < 32; i++)
 80028ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b0:	3301      	adds	r3, #1
 80028b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b6:	2b1f      	cmp	r3, #31
 80028b8:	d9e5      	bls.n	8002886 <writeDefaultConfigPage+0x14a>
	}

	HAL_FLASH_Lock();
 80028ba:	f002 f979 	bl	8004bb0 <HAL_FLASH_Lock>
}
 80028be:	bf00      	nop
 80028c0:	3730      	adds	r7, #48	@ 0x30
 80028c2:	46bd      	mov	sp, r7
 80028c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028c8:	20000444 	.word	0x20000444
 80028cc:	200004e4 	.word	0x200004e4
 80028d0:	0800f000 	.word	0x0800f000
 80028d4:	200003a0 	.word	0x200003a0
 80028d8:	0800f002 	.word	0x0800f002
 80028dc:	0800f004 	.word	0x0800f004
 80028e0:	0800f006 	.word	0x0800f006
 80028e4:	0800f008 	.word	0x0800f008
 80028e8:	0800f00a 	.word	0x0800f00a
 80028ec:	0800f00c 	.word	0x0800f00c
 80028f0:	0800f00e 	.word	0x0800f00e

080028f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028f8:	b672      	cpsid	i
}
 80028fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028fc:	bf00      	nop
 80028fe:	e7fd      	b.n	80028fc <Error_Handler+0x8>

08002900 <MX_SDADC1_Init>:
SDADC_HandleTypeDef hsdadc1;
DMA_HandleTypeDef hdma_sdadc1;

/* SDADC1 init function */
void MX_SDADC1_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8002906:	463b      	mov	r3, r7
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
  /* USER CODE END SDADC1_Init 1 */

  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 8002912:	4b3b      	ldr	r3, [pc, #236]	@ (8002a00 <MX_SDADC1_Init+0x100>)
 8002914:	4a3b      	ldr	r2, [pc, #236]	@ (8002a04 <MX_SDADC1_Init+0x104>)
 8002916:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8002918:	4b39      	ldr	r3, [pc, #228]	@ (8002a00 <MX_SDADC1_Init+0x100>)
 800291a:	2200      	movs	r2, #0
 800291c:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 800291e:	4b38      	ldr	r3, [pc, #224]	@ (8002a00 <MX_SDADC1_Init+0x100>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8002924:	4b36      	ldr	r3, [pc, #216]	@ (8002a00 <MX_SDADC1_Init+0x100>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_VDDA;
 800292a:	4b35      	ldr	r3, [pc, #212]	@ (8002a00 <MX_SDADC1_Init+0x100>)
 800292c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002930:	611a      	str	r2, [r3, #16]
  hsdadc1.InjectedTrigger = SDADC_SOFTWARE_TRIGGER;
 8002932:	4b33      	ldr	r3, [pc, #204]	@ (8002a00 <MX_SDADC1_Init+0x100>)
 8002934:	2200      	movs	r2, #0
 8002936:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8002938:	4831      	ldr	r0, [pc, #196]	@ (8002a00 <MX_SDADC1_Init+0x100>)
 800293a:	f004 f865 	bl	8006a08 <HAL_SDADC_Init>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_SDADC1_Init+0x48>
  {
    Error_Handler();
 8002944:	f7ff ffd6 	bl	80028f4 <Error_Handler>
  }

  /** Configure the Injected Mode
  */
  if (HAL_SDADC_SelectInjectedDelay(&hsdadc1, SDADC_INJECTED_DELAY_NONE) != HAL_OK)
 8002948:	2100      	movs	r1, #0
 800294a:	482d      	ldr	r0, [pc, #180]	@ (8002a00 <MX_SDADC1_Init+0x100>)
 800294c:	f004 fa28 	bl	8006da0 <HAL_SDADC_SelectInjectedDelay>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_SDADC1_Init+0x5a>
  {
    Error_Handler();
 8002956:	f7ff ffcd 	bl	80028f4 <Error_Handler>
  }
  if (HAL_SDADC_SelectInjectedTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 800295a:	2100      	movs	r1, #0
 800295c:	4828      	ldr	r0, [pc, #160]	@ (8002a00 <MX_SDADC1_Init+0x100>)
 800295e:	f004 f9ef 	bl	8006d40 <HAL_SDADC_SelectInjectedTrigger>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_SDADC1_Init+0x6c>
  {
    Error_Handler();
 8002968:	f7ff ffc4 	bl	80028f4 <Error_Handler>
  }
  if (HAL_SDADC_InjectedConfigChannel(&hsdadc1, SDADC_CHANNEL_7|SDADC_CHANNEL_8
 800296c:	2200      	movs	r2, #0
 800296e:	4926      	ldr	r1, [pc, #152]	@ (8002a08 <MX_SDADC1_Init+0x108>)
 8002970:	4823      	ldr	r0, [pc, #140]	@ (8002a00 <MX_SDADC1_Init+0x100>)
 8002972:	f004 f9a9 	bl	8006cc8 <HAL_SDADC_InjectedConfigChannel>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_SDADC1_Init+0x80>
                              |SDADC_CHANNEL_4|SDADC_CHANNEL_5, SDADC_CONTINUOUS_CONV_OFF) != HAL_OK)
  {
    Error_Handler();
 800297c:	f7ff ffba 	bl	80028f4 <Error_Handler>
  }

  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_ZERO_REFERENCE;
 8002980:	f04f 6340 	mov.w	r3, #201326592	@ 0xc000000
 8002984:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1;
 8002986:	2300      	movs	r3, #0
 8002988:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8002992:	463b      	mov	r3, r7
 8002994:	461a      	mov	r2, r3
 8002996:	2100      	movs	r1, #0
 8002998:	4819      	ldr	r0, [pc, #100]	@ (8002a00 <MX_SDADC1_Init+0x100>)
 800299a:	f004 f8c5 	bl	8006b28 <HAL_SDADC_PrepareChannelConfig>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_SDADC1_Init+0xa8>
  {
    Error_Handler();
 80029a4:	f7ff ffa6 	bl	80028f4 <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_7, SDADC_CONF_INDEX_0) != HAL_OK)
 80029a8:	2200      	movs	r2, #0
 80029aa:	4918      	ldr	r1, [pc, #96]	@ (8002a0c <MX_SDADC1_Init+0x10c>)
 80029ac:	4814      	ldr	r0, [pc, #80]	@ (8002a00 <MX_SDADC1_Init+0x100>)
 80029ae:	f004 f8f7 	bl	8006ba0 <HAL_SDADC_AssociateChannelConfig>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_SDADC1_Init+0xbc>
  {
    Error_Handler();
 80029b8:	f7ff ff9c 	bl	80028f4 <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_8, SDADC_CONF_INDEX_0) != HAL_OK)
 80029bc:	2200      	movs	r2, #0
 80029be:	4914      	ldr	r1, [pc, #80]	@ (8002a10 <MX_SDADC1_Init+0x110>)
 80029c0:	480f      	ldr	r0, [pc, #60]	@ (8002a00 <MX_SDADC1_Init+0x100>)
 80029c2:	f004 f8ed 	bl	8006ba0 <HAL_SDADC_AssociateChannelConfig>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_SDADC1_Init+0xd0>
  {
    Error_Handler();
 80029cc:	f7ff ff92 	bl	80028f4 <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_4, SDADC_CONF_INDEX_0) != HAL_OK)
 80029d0:	2200      	movs	r2, #0
 80029d2:	4910      	ldr	r1, [pc, #64]	@ (8002a14 <MX_SDADC1_Init+0x114>)
 80029d4:	480a      	ldr	r0, [pc, #40]	@ (8002a00 <MX_SDADC1_Init+0x100>)
 80029d6:	f004 f8e3 	bl	8006ba0 <HAL_SDADC_AssociateChannelConfig>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_SDADC1_Init+0xe4>
  {
    Error_Handler();
 80029e0:	f7ff ff88 	bl	80028f4 <Error_Handler>
  }

  /** Configure the Injected Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_5, SDADC_CONF_INDEX_0) != HAL_OK)
 80029e4:	2200      	movs	r2, #0
 80029e6:	490c      	ldr	r1, [pc, #48]	@ (8002a18 <MX_SDADC1_Init+0x118>)
 80029e8:	4805      	ldr	r0, [pc, #20]	@ (8002a00 <MX_SDADC1_Init+0x100>)
 80029ea:	f004 f8d9 	bl	8006ba0 <HAL_SDADC_AssociateChannelConfig>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_SDADC1_Init+0xf8>
  {
    Error_Handler();
 80029f4:	f7ff ff7e 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200004f0 	.word	0x200004f0
 8002a04:	40016000 	.word	0x40016000
 8002a08:	000f01b0 	.word	0x000f01b0
 8002a0c:	00070080 	.word	0x00070080
 8002a10:	00080100 	.word	0x00080100
 8002a14:	00040010 	.word	0x00040010
 8002a18:	00050020 	.word	0x00050020

08002a1c <HAL_SDADC_MspInit>:

void HAL_SDADC_MspInit(SDADC_HandleTypeDef* sdadcHandle)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	@ 0x28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  if(sdadcHandle->Instance==SDADC1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a36      	ldr	r2, [pc, #216]	@ (8002b14 <HAL_SDADC_MspInit+0xf8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d165      	bne.n	8002b0a <HAL_SDADC_MspInit+0xee>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* SDADC1 clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8002a3e:	4b36      	ldr	r3, [pc, #216]	@ (8002b18 <HAL_SDADC_MspInit+0xfc>)
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	4a35      	ldr	r2, [pc, #212]	@ (8002b18 <HAL_SDADC_MspInit+0xfc>)
 8002a44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a48:	6193      	str	r3, [r2, #24]
 8002a4a:	4b33      	ldr	r3, [pc, #204]	@ (8002b18 <HAL_SDADC_MspInit+0xfc>)
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a56:	4b30      	ldr	r3, [pc, #192]	@ (8002b18 <HAL_SDADC_MspInit+0xfc>)
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002b18 <HAL_SDADC_MspInit+0xfc>)
 8002a5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a60:	6153      	str	r3, [r2, #20]
 8002a62:	4b2d      	ldr	r3, [pc, #180]	@ (8002b18 <HAL_SDADC_MspInit+0xfc>)
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b18 <HAL_SDADC_MspInit+0xfc>)
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	4a29      	ldr	r2, [pc, #164]	@ (8002b18 <HAL_SDADC_MspInit+0xfc>)
 8002a74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a78:	6153      	str	r3, [r2, #20]
 8002a7a:	4b27      	ldr	r3, [pc, #156]	@ (8002b18 <HAL_SDADC_MspInit+0xfc>)
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> SDADC1_AIN5P
    PB2     ------> SDADC1_AIN4P
    PE8     ------> SDADC1_AIN8P
    PE9     ------> SDADC1_AIN7P
    */
    GPIO_InitStruct.Pin = AN_ADC4_Pin|AN_ADC3_Pin;
 8002a86:	2306      	movs	r3, #6
 8002a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a92:	f107 0314 	add.w	r3, r7, #20
 8002a96:	4619      	mov	r1, r3
 8002a98:	4820      	ldr	r0, [pc, #128]	@ (8002b1c <HAL_SDADC_MspInit+0x100>)
 8002a9a:	f002 f9cb 	bl	8004e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AN_ADC2_Pin|AN_ADC1_Pin;
 8002a9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aac:	f107 0314 	add.w	r3, r7, #20
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	481b      	ldr	r0, [pc, #108]	@ (8002b20 <HAL_SDADC_MspInit+0x104>)
 8002ab4:	f002 f9be 	bl	8004e34 <HAL_GPIO_Init>

    /* SDADC1 DMA Init */
    /* SDADC1 Init */
    hdma_sdadc1.Instance = DMA2_Channel3;
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b24 <HAL_SDADC_MspInit+0x108>)
 8002aba:	4a1b      	ldr	r2, [pc, #108]	@ (8002b28 <HAL_SDADC_MspInit+0x10c>)
 8002abc:	601a      	str	r2, [r3, #0]
    hdma_sdadc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002abe:	4b19      	ldr	r3, [pc, #100]	@ (8002b24 <HAL_SDADC_MspInit+0x108>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	605a      	str	r2, [r3, #4]
    hdma_sdadc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac4:	4b17      	ldr	r3, [pc, #92]	@ (8002b24 <HAL_SDADC_MspInit+0x108>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	609a      	str	r2, [r3, #8]
    hdma_sdadc1.Init.MemInc = DMA_MINC_ENABLE;
 8002aca:	4b16      	ldr	r3, [pc, #88]	@ (8002b24 <HAL_SDADC_MspInit+0x108>)
 8002acc:	2280      	movs	r2, #128	@ 0x80
 8002ace:	60da      	str	r2, [r3, #12]
    hdma_sdadc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ad0:	4b14      	ldr	r3, [pc, #80]	@ (8002b24 <HAL_SDADC_MspInit+0x108>)
 8002ad2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ad6:	611a      	str	r2, [r3, #16]
    hdma_sdadc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ad8:	4b12      	ldr	r3, [pc, #72]	@ (8002b24 <HAL_SDADC_MspInit+0x108>)
 8002ada:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ade:	615a      	str	r2, [r3, #20]
    hdma_sdadc1.Init.Mode = DMA_CIRCULAR;
 8002ae0:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <HAL_SDADC_MspInit+0x108>)
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	619a      	str	r2, [r3, #24]
    hdma_sdadc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b24 <HAL_SDADC_MspInit+0x108>)
 8002ae8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002aec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_sdadc1) != HAL_OK)
 8002aee:	480d      	ldr	r0, [pc, #52]	@ (8002b24 <HAL_SDADC_MspInit+0x108>)
 8002af0:	f001 fd99 	bl	8004626 <HAL_DMA_Init>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_SDADC_MspInit+0xe2>
    {
      Error_Handler();
 8002afa:	f7ff fefb 	bl	80028f4 <Error_Handler>
    }

    __HAL_LINKDMA(sdadcHandle,hdma,hdma_sdadc1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a08      	ldr	r2, [pc, #32]	@ (8002b24 <HAL_SDADC_MspInit+0x108>)
 8002b02:	615a      	str	r2, [r3, #20]
 8002b04:	4a07      	ldr	r2, [pc, #28]	@ (8002b24 <HAL_SDADC_MspInit+0x108>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN SDADC1_MspInit 1 */

  /* USER CODE END SDADC1_MspInit 1 */
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	3728      	adds	r7, #40	@ 0x28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40016000 	.word	0x40016000
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	48000400 	.word	0x48000400
 8002b20:	48001000 	.word	0x48001000
 8002b24:	20000534 	.word	0x20000534
 8002b28:	40020430 	.word	0x40020430

08002b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b32:	4b0f      	ldr	r3, [pc, #60]	@ (8002b70 <HAL_MspInit+0x44>)
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	4a0e      	ldr	r2, [pc, #56]	@ (8002b70 <HAL_MspInit+0x44>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6193      	str	r3, [r2, #24]
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b70 <HAL_MspInit+0x44>)
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b4a:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <HAL_MspInit+0x44>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	4a08      	ldr	r2, [pc, #32]	@ (8002b70 <HAL_MspInit+0x44>)
 8002b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b54:	61d3      	str	r3, [r2, #28]
 8002b56:	4b06      	ldr	r3, [pc, #24]	@ (8002b70 <HAL_MspInit+0x44>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000

08002b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b78:	bf00      	nop
 8002b7a:	e7fd      	b.n	8002b78 <NMI_Handler+0x4>

08002b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b80:	bf00      	nop
 8002b82:	e7fd      	b.n	8002b80 <HardFault_Handler+0x4>

08002b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <MemManage_Handler+0x4>

08002b8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <BusFault_Handler+0x4>

08002b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b98:	bf00      	nop
 8002b9a:	e7fd      	b.n	8002b98 <UsageFault_Handler+0x4>

08002b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bca:	f000 fa6b 	bl	80030a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bd8:	4802      	ldr	r0, [pc, #8]	@ (8002be4 <DMA1_Channel1_IRQHandler+0x10>)
 8002bda:	f001 fe46 	bl	800486a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	2000005c 	.word	0x2000005c

08002be8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002bec:	4802      	ldr	r0, [pc, #8]	@ (8002bf8 <DMA1_Channel5_IRQHandler+0x10>)
 8002bee:	f001 fe3c 	bl	800486a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000698 	.word	0x20000698

08002bfc <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002c00:	4802      	ldr	r0, [pc, #8]	@ (8002c0c <CAN_RX0_IRQHandler+0x10>)
 8002c02:	f001 f9b5 	bl	8003f70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200000a0 	.word	0x200000a0

08002c10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  sendUartFlag = true;
 8002c16:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <TIM2_IRQHandler+0x2c>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
		sendUartFrame(&huart1, rs422Frame, 10 , 5000, &sendUartFlag);
 8002c1c:	4b07      	ldr	r3, [pc, #28]	@ (8002c3c <TIM2_IRQHandler+0x2c>)
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002c24:	220a      	movs	r2, #10
 8002c26:	4906      	ldr	r1, [pc, #24]	@ (8002c40 <TIM2_IRQHandler+0x30>)
 8002c28:	4806      	ldr	r0, [pc, #24]	@ (8002c44 <TIM2_IRQHandler+0x34>)
 8002c2a:	f7fe fabf 	bl	80011ac <sendUartFrame>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c2e:	4806      	ldr	r0, [pc, #24]	@ (8002c48 <TIM2_IRQHandler+0x38>)
 8002c30:	f004 fbca 	bl	80073c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000388 	.word	0x20000388
 8002c40:	20000368 	.word	0x20000368
 8002c44:	20000610 	.word	0x20000610
 8002c48:	20000578 	.word	0x20000578

08002c4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	  //analog sample flag
		//SDADC_ScanConversion();
		sampleAnalogInputs = true;
 8002c50:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <TIM3_IRQHandler+0x20>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]

		//digital read function
		readDigitalInputs(getDigitalInputs());
 8002c56:	f7fe fa9f 	bl	8001198 <getDigitalInputs>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe fa74 	bl	800114a <readDigitalInputs>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c62:	4803      	ldr	r0, [pc, #12]	@ (8002c70 <TIM3_IRQHandler+0x24>)
 8002c64:	f004 fbb0 	bl	80073c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	200000c8 	.word	0x200000c8
 8002c70:	200005c4 	.word	0x200005c4

08002c74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c78:	4802      	ldr	r0, [pc, #8]	@ (8002c84 <USART1_IRQHandler+0x10>)
 8002c7a:	f005 f873 	bl	8007d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000610 	.word	0x20000610

08002c88 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc1);
 8002c8c:	4802      	ldr	r0, [pc, #8]	@ (8002c98 <DMA2_Channel3_IRQHandler+0x10>)
 8002c8e:	f001 fdec 	bl	800486a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000534 	.word	0x20000534

08002c9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ca0:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <SystemInit+0x20>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca6:	4a05      	ldr	r2, [pc, #20]	@ (8002cbc <SystemInit+0x20>)
 8002ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cc6:	f107 0308 	add.w	r3, r7, #8
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	605a      	str	r2, [r3, #4]
 8002cd0:	609a      	str	r2, [r3, #8]
 8002cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd4:	463b      	mov	r3, r7
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d54 <MX_TIM2_Init+0x94>)
 8002cde:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ce2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d54 <MX_TIM2_Init+0x94>)
 8002ce6:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002cea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cec:	4b19      	ldr	r3, [pc, #100]	@ (8002d54 <MX_TIM2_Init+0x94>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4;
 8002cf2:	4b18      	ldr	r3, [pc, #96]	@ (8002d54 <MX_TIM2_Init+0x94>)
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cf8:	4b16      	ldr	r3, [pc, #88]	@ (8002d54 <MX_TIM2_Init+0x94>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cfe:	4b15      	ldr	r3, [pc, #84]	@ (8002d54 <MX_TIM2_Init+0x94>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d04:	4813      	ldr	r0, [pc, #76]	@ (8002d54 <MX_TIM2_Init+0x94>)
 8002d06:	f004 faa7 	bl	8007258 <HAL_TIM_Base_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d10:	f7ff fdf0 	bl	80028f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d1a:	f107 0308 	add.w	r3, r7, #8
 8002d1e:	4619      	mov	r1, r3
 8002d20:	480c      	ldr	r0, [pc, #48]	@ (8002d54 <MX_TIM2_Init+0x94>)
 8002d22:	f004 fc41 	bl	80075a8 <HAL_TIM_ConfigClockSource>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d2c:	f7ff fde2 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d30:	2300      	movs	r3, #0
 8002d32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d34:	2300      	movs	r3, #0
 8002d36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d38:	463b      	mov	r3, r7
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4805      	ldr	r0, [pc, #20]	@ (8002d54 <MX_TIM2_Init+0x94>)
 8002d3e:	f004 fe6d 	bl	8007a1c <HAL_TIMEx_MasterConfigSynchronization>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002d48:	f7ff fdd4 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d4c:	bf00      	nop
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000578 	.word	0x20000578

08002d58 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d5e:	f107 0308 	add.w	r3, r7, #8
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d6c:	463b      	mov	r3, r7
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d74:	4b1d      	ldr	r3, [pc, #116]	@ (8002dec <MX_TIM3_Init+0x94>)
 8002d76:	4a1e      	ldr	r2, [pc, #120]	@ (8002df0 <MX_TIM3_Init+0x98>)
 8002d78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4800;
 8002d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dec <MX_TIM3_Init+0x94>)
 8002d7c:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8002d80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d82:	4b1a      	ldr	r3, [pc, #104]	@ (8002dec <MX_TIM3_Init+0x94>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4;
 8002d88:	4b18      	ldr	r3, [pc, #96]	@ (8002dec <MX_TIM3_Init+0x94>)
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d8e:	4b17      	ldr	r3, [pc, #92]	@ (8002dec <MX_TIM3_Init+0x94>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d94:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <MX_TIM3_Init+0x94>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d9a:	4814      	ldr	r0, [pc, #80]	@ (8002dec <MX_TIM3_Init+0x94>)
 8002d9c:	f004 fa5c 	bl	8007258 <HAL_TIM_Base_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002da6:	f7ff fda5 	bl	80028f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002daa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002db0:	f107 0308 	add.w	r3, r7, #8
 8002db4:	4619      	mov	r1, r3
 8002db6:	480d      	ldr	r0, [pc, #52]	@ (8002dec <MX_TIM3_Init+0x94>)
 8002db8:	f004 fbf6 	bl	80075a8 <HAL_TIM_ConfigClockSource>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002dc2:	f7ff fd97 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dce:	463b      	mov	r3, r7
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4806      	ldr	r0, [pc, #24]	@ (8002dec <MX_TIM3_Init+0x94>)
 8002dd4:	f004 fe22 	bl	8007a1c <HAL_TIMEx_MasterConfigSynchronization>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002dde:	f7ff fd89 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	200005c4 	.word	0x200005c4
 8002df0:	40000400 	.word	0x40000400

08002df4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e04:	d114      	bne.n	8002e30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e06:	4b19      	ldr	r3, [pc, #100]	@ (8002e6c <HAL_TIM_Base_MspInit+0x78>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	4a18      	ldr	r2, [pc, #96]	@ (8002e6c <HAL_TIM_Base_MspInit+0x78>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	61d3      	str	r3, [r2, #28]
 8002e12:	4b16      	ldr	r3, [pc, #88]	@ (8002e6c <HAL_TIM_Base_MspInit+0x78>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2100      	movs	r1, #0
 8002e22:	201c      	movs	r0, #28
 8002e24:	f001 fbc5 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e28:	201c      	movs	r0, #28
 8002e2a:	f001 fbde 	bl	80045ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002e2e:	e018      	b.n	8002e62 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a0e      	ldr	r2, [pc, #56]	@ (8002e70 <HAL_TIM_Base_MspInit+0x7c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d113      	bne.n	8002e62 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e6c <HAL_TIM_Base_MspInit+0x78>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e6c <HAL_TIM_Base_MspInit+0x78>)
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	61d3      	str	r3, [r2, #28]
 8002e46:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <HAL_TIM_Base_MspInit+0x78>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	2100      	movs	r1, #0
 8002e56:	201d      	movs	r0, #29
 8002e58:	f001 fbab 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e5c:	201d      	movs	r0, #29
 8002e5e:	f001 fbc4 	bl	80045ea <HAL_NVIC_EnableIRQ>
}
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40000400 	.word	0x40000400

08002e74 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e78:	4b14      	ldr	r3, [pc, #80]	@ (8002ecc <MX_USART1_UART_Init+0x58>)
 8002e7a:	4a15      	ldr	r2, [pc, #84]	@ (8002ed0 <MX_USART1_UART_Init+0x5c>)
 8002e7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e7e:	4b13      	ldr	r3, [pc, #76]	@ (8002ecc <MX_USART1_UART_Init+0x58>)
 8002e80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e86:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <MX_USART1_UART_Init+0x58>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ecc <MX_USART1_UART_Init+0x58>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <MX_USART1_UART_Init+0x58>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e98:	4b0c      	ldr	r3, [pc, #48]	@ (8002ecc <MX_USART1_UART_Init+0x58>)
 8002e9a:	220c      	movs	r2, #12
 8002e9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <MX_USART1_UART_Init+0x58>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea4:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <MX_USART1_UART_Init+0x58>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eaa:	4b08      	ldr	r3, [pc, #32]	@ (8002ecc <MX_USART1_UART_Init+0x58>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <MX_USART1_UART_Init+0x58>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002eb6:	4805      	ldr	r0, [pc, #20]	@ (8002ecc <MX_USART1_UART_Init+0x58>)
 8002eb8:	f004 fe38 	bl	8007b2c <HAL_UART_Init>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002ec2:	f7ff fd17 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000610 	.word	0x20000610
 8002ed0:	40013800 	.word	0x40013800

08002ed4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	@ 0x28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002edc:	f107 0314 	add.w	r3, r7, #20
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a30      	ldr	r2, [pc, #192]	@ (8002fb4 <HAL_UART_MspInit+0xe0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d15a      	bne.n	8002fac <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ef6:	4b30      	ldr	r3, [pc, #192]	@ (8002fb8 <HAL_UART_MspInit+0xe4>)
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	4a2f      	ldr	r2, [pc, #188]	@ (8002fb8 <HAL_UART_MspInit+0xe4>)
 8002efc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f00:	6193      	str	r3, [r2, #24]
 8002f02:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb8 <HAL_UART_MspInit+0xe4>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002fb8 <HAL_UART_MspInit+0xe4>)
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	4a29      	ldr	r2, [pc, #164]	@ (8002fb8 <HAL_UART_MspInit+0xe4>)
 8002f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f18:	6153      	str	r3, [r2, #20]
 8002f1a:	4b27      	ldr	r3, [pc, #156]	@ (8002fb8 <HAL_UART_MspInit+0xe4>)
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f34:	2303      	movs	r3, #3
 8002f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f38:	2307      	movs	r3, #7
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3c:	f107 0314 	add.w	r3, r7, #20
 8002f40:	4619      	mov	r1, r3
 8002f42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f46:	f001 ff75 	bl	8004e34 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fbc <HAL_UART_MspInit+0xe8>)
 8002f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc0 <HAL_UART_MspInit+0xec>)
 8002f4e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f50:	4b1a      	ldr	r3, [pc, #104]	@ (8002fbc <HAL_UART_MspInit+0xe8>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f56:	4b19      	ldr	r3, [pc, #100]	@ (8002fbc <HAL_UART_MspInit+0xe8>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f5c:	4b17      	ldr	r3, [pc, #92]	@ (8002fbc <HAL_UART_MspInit+0xe8>)
 8002f5e:	2280      	movs	r2, #128	@ 0x80
 8002f60:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f62:	4b16      	ldr	r3, [pc, #88]	@ (8002fbc <HAL_UART_MspInit+0xe8>)
 8002f64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f68:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f6a:	4b14      	ldr	r3, [pc, #80]	@ (8002fbc <HAL_UART_MspInit+0xe8>)
 8002f6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f70:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002f72:	4b12      	ldr	r3, [pc, #72]	@ (8002fbc <HAL_UART_MspInit+0xe8>)
 8002f74:	2220      	movs	r2, #32
 8002f76:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f78:	4b10      	ldr	r3, [pc, #64]	@ (8002fbc <HAL_UART_MspInit+0xe8>)
 8002f7a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002f7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f80:	480e      	ldr	r0, [pc, #56]	@ (8002fbc <HAL_UART_MspInit+0xe8>)
 8002f82:	f001 fb50 	bl	8004626 <HAL_DMA_Init>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8002f8c:	f7ff fcb2 	bl	80028f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a0a      	ldr	r2, [pc, #40]	@ (8002fbc <HAL_UART_MspInit+0xe8>)
 8002f94:	675a      	str	r2, [r3, #116]	@ 0x74
 8002f96:	4a09      	ldr	r2, [pc, #36]	@ (8002fbc <HAL_UART_MspInit+0xe8>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	2025      	movs	r0, #37	@ 0x25
 8002fa2:	f001 fb06 	bl	80045b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fa6:	2025      	movs	r0, #37	@ 0x25
 8002fa8:	f001 fb1f 	bl	80045ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002fac:	bf00      	nop
 8002fae:	3728      	adds	r7, #40	@ 0x28
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40013800 	.word	0x40013800
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	20000698 	.word	0x20000698
 8002fc0:	40020058 	.word	0x40020058

08002fc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002fc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ffc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fc8:	f7ff fe68 	bl	8002c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fcc:	480c      	ldr	r0, [pc, #48]	@ (8003000 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fce:	490d      	ldr	r1, [pc, #52]	@ (8003004 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8003008 <LoopForever+0xe>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd4:	e002      	b.n	8002fdc <LoopCopyDataInit>

08002fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fda:	3304      	adds	r3, #4

08002fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe0:	d3f9      	bcc.n	8002fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800300c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8003010 <LoopForever+0x16>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe8:	e001      	b.n	8002fee <LoopFillZerobss>

08002fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fec:	3204      	adds	r2, #4

08002fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff0:	d3fb      	bcc.n	8002fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ff2:	f005 ff67 	bl	8008ec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ff6:	f7fd fb93 	bl	8000720 <main>

08002ffa <LoopForever>:

LoopForever:
    b LoopForever
 8002ffa:	e7fe      	b.n	8002ffa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ffc:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003004:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003008:	08008f64 	.word	0x08008f64
  ldr r2, =_sbss
 800300c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003010:	20000700 	.word	0x20000700

08003014 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003014:	e7fe      	b.n	8003014 <ADC1_IRQHandler>
	...

08003018 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800301c:	4b08      	ldr	r3, [pc, #32]	@ (8003040 <HAL_Init+0x28>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a07      	ldr	r2, [pc, #28]	@ (8003040 <HAL_Init+0x28>)
 8003022:	f043 0310 	orr.w	r3, r3, #16
 8003026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003028:	2003      	movs	r0, #3
 800302a:	f001 fab7 	bl	800459c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800302e:	2000      	movs	r0, #0
 8003030:	f000 f808 	bl	8003044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003034:	f7ff fd7a 	bl	8002b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40022000 	.word	0x40022000

08003044 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800304c:	4b12      	ldr	r3, [pc, #72]	@ (8003098 <HAL_InitTick+0x54>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4b12      	ldr	r3, [pc, #72]	@ (800309c <HAL_InitTick+0x58>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	4619      	mov	r1, r3
 8003056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800305a:	fbb3 f3f1 	udiv	r3, r3, r1
 800305e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003062:	4618      	mov	r0, r3
 8003064:	f001 fad3 	bl	800460e <HAL_SYSTICK_Config>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e00e      	b.n	8003090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b0f      	cmp	r3, #15
 8003076:	d80a      	bhi.n	800308e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003078:	2200      	movs	r2, #0
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	f04f 30ff 	mov.w	r0, #4294967295
 8003080:	f001 fa97 	bl	80045b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003084:	4a06      	ldr	r2, [pc, #24]	@ (80030a0 <HAL_InitTick+0x5c>)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	e000      	b.n	8003090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
}
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000004 	.word	0x20000004
 800309c:	2000000c 	.word	0x2000000c
 80030a0:	20000008 	.word	0x20000008

080030a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030a8:	4b06      	ldr	r3, [pc, #24]	@ (80030c4 <HAL_IncTick+0x20>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b06      	ldr	r3, [pc, #24]	@ (80030c8 <HAL_IncTick+0x24>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4413      	add	r3, r2
 80030b4:	4a04      	ldr	r2, [pc, #16]	@ (80030c8 <HAL_IncTick+0x24>)
 80030b6:	6013      	str	r3, [r2, #0]
}
 80030b8:	bf00      	nop
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	2000000c 	.word	0x2000000c
 80030c8:	200006dc 	.word	0x200006dc

080030cc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return uwTick;  
 80030d0:	4b03      	ldr	r3, [pc, #12]	@ (80030e0 <HAL_GetTick+0x14>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	200006dc 	.word	0x200006dc

080030e4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030ec:	f7ff ffee 	bl	80030cc <HAL_GetTick>
 80030f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d005      	beq.n	800310a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003128 <HAL_Delay+0x44>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800310a:	bf00      	nop
 800310c:	f7ff ffde 	bl	80030cc <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	429a      	cmp	r2, r3
 800311a:	d8f7      	bhi.n	800310c <HAL_Delay+0x28>
  {
  }
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	2000000c 	.word	0x2000000c

0800312c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e0be      	b.n	80032cc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	d109      	bne.n	8003170 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fd f896 	bl	800029c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fa9b 	bl	80036ac <ADC_ConversionStop_Disable>
 8003176:	4603      	mov	r3, r0
 8003178:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	f040 8099 	bne.w	80032ba <HAL_ADC_Init+0x18e>
 8003188:	7dfb      	ldrb	r3, [r7, #23]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 8095 	bne.w	80032ba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003194:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003198:	f023 0302 	bic.w	r3, r3, #2
 800319c:	f043 0202 	orr.w	r2, r3, #2
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 80031ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	7b1b      	ldrb	r3, [r3, #12]
 80031b2:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 80031b4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031c4:	d003      	beq.n	80031ce <HAL_ADC_Init+0xa2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d102      	bne.n	80031d4 <HAL_ADC_Init+0xa8>
 80031ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031d2:	e000      	b.n	80031d6 <HAL_ADC_Init+0xaa>
 80031d4:	2300      	movs	r3, #0
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	7d1b      	ldrb	r3, [r3, #20]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d119      	bne.n	8003218 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	7b1b      	ldrb	r3, [r3, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	e00b      	b.n	8003218 <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003204:	f043 0220 	orr.w	r2, r3, #32
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003210:	f043 0201 	orr.w	r2, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	430a      	orrs	r2, r1
 800322a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	4b28      	ldr	r3, [pc, #160]	@ (80032d4 <HAL_ADC_Init+0x1a8>)
 8003234:	4013      	ands	r3, r2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	68b9      	ldr	r1, [r7, #8]
 800323c:	430b      	orrs	r3, r1
 800323e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003248:	d003      	beq.n	8003252 <HAL_ADC_Init+0x126>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d104      	bne.n	800325c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	3b01      	subs	r3, #1
 8003258:	051b      	lsls	r3, r3, #20
 800325a:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003262:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	430a      	orrs	r2, r1
 800326e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	4b18      	ldr	r3, [pc, #96]	@ (80032d8 <HAL_ADC_Init+0x1ac>)
 8003278:	4013      	ands	r3, r2
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	429a      	cmp	r2, r3
 800327e:	d10b      	bne.n	8003298 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	f043 0201 	orr.w	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003296:	e018      	b.n	80032ca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329c:	f023 0312 	bic.w	r3, r3, #18
 80032a0:	f043 0210 	orr.w	r2, r3, #16
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ac:	f043 0201 	orr.w	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032b8:	e007      	b.n	80032ca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032be:	f043 0210 	orr.w	r2, r3, #16
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	ffe1f7fd 	.word	0xffe1f7fd
 80032d8:	ff1f0efe 	.word	0xff1f0efe

080032dc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_ADCEx_Calibration_Start+0x1e>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e08a      	b.n	8003410 <HAL_ADCEx_Calibration_Start+0x134>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f9d2 	bl	80036ac <ADC_ConversionStop_Disable>
 8003308:	4603      	mov	r3, r0
 800330a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800330c:	7dfb      	ldrb	r3, [r7, #23]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d179      	bne.n	8003406 <HAL_ADCEx_Calibration_Start+0x12a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003316:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800331a:	f023 0302 	bic.w	r3, r3, #2
 800331e:	f043 0202 	orr.w	r2, r3, #2
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Wait two ADC clock cycles */
    while(wait_loop_index < ADC_CYCLE_WORST_CASE_CPU_CYCLES *2U)
 8003326:	e002      	b.n	800332e <HAL_ADCEx_Calibration_Start+0x52>
    {
      wait_loop_index++;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	3301      	adds	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index < ADC_CYCLE_WORST_CASE_CPU_CYCLES *2U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2bff      	cmp	r3, #255	@ 0xff
 8003332:	d9f9      	bls.n	8003328 <HAL_ADCEx_Calibration_Start+0x4c>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f95f 	bl	80035f8 <ADC_Enable>
    

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 0208 	orr.w	r2, r2, #8
 8003348:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800334a:	f7ff febf 	bl	80030cc <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003350:	e01b      	b.n	800338a <HAL_ADCEx_Calibration_Start+0xae>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003352:	f7ff febb 	bl	80030cc <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b0a      	cmp	r3, #10
 800335e:	d914      	bls.n	800338a <HAL_ADCEx_Calibration_Start+0xae>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b08      	cmp	r3, #8
 800336c:	d10d      	bne.n	800338a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003372:	f023 0312 	bic.w	r3, r3, #18
 8003376:	f043 0210 	orr.w	r2, r3, #16
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e042      	b.n	8003410 <HAL_ADCEx_Calibration_Start+0x134>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b08      	cmp	r3, #8
 8003396:	d0dc      	beq.n	8003352 <HAL_ADCEx_Calibration_Start+0x76>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0204 	orr.w	r2, r2, #4
 80033a6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80033a8:	f7ff fe90 	bl	80030cc <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80033ae:	e01b      	b.n	80033e8 <HAL_ADCEx_Calibration_Start+0x10c>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80033b0:	f7ff fe8c 	bl	80030cc <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b0a      	cmp	r3, #10
 80033bc:	d914      	bls.n	80033e8 <HAL_ADCEx_Calibration_Start+0x10c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d10d      	bne.n	80033e8 <HAL_ADCEx_Calibration_Start+0x10c>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d0:	f023 0312 	bic.w	r3, r3, #18
 80033d4:	f043 0210 	orr.w	r2, r3, #16
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;            
 80033e4:	2301      	movs	r3, #1
 80033e6:	e013      	b.n	8003410 <HAL_ADCEx_Calibration_Start+0x134>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d0dc      	beq.n	80033b0 <HAL_ADCEx_Calibration_Start+0xd4>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fa:	f023 0303 	bic.w	r3, r3, #3
 80033fe:	f043 0201 	orr.w	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800340e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x20>
 8003434:	2302      	movs	r3, #2
 8003436:	e0d2      	b.n	80035de <HAL_ADC_ConfigChannel+0x1c6>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b06      	cmp	r3, #6
 8003446:	d81c      	bhi.n	8003482 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	3b05      	subs	r3, #5
 800345a:	221f      	movs	r2, #31
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	4019      	ands	r1, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	3b05      	subs	r3, #5
 8003474:	fa00 f203 	lsl.w	r2, r0, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003480:	e03c      	b.n	80034fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b0c      	cmp	r3, #12
 8003488:	d81c      	bhi.n	80034c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	3b23      	subs	r3, #35	@ 0x23
 800349c:	221f      	movs	r2, #31
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	4019      	ands	r1, r3
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	3b23      	subs	r3, #35	@ 0x23
 80034b6:	fa00 f203 	lsl.w	r2, r0, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80034c2:	e01b      	b.n	80034fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	3b41      	subs	r3, #65	@ 0x41
 80034d6:	221f      	movs	r2, #31
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	4019      	ands	r1, r3
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	3b41      	subs	r3, #65	@ 0x41
 80034f0:	fa00 f203 	lsl.w	r2, r0, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b0a      	cmp	r3, #10
 8003502:	d91c      	bls.n	800353e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68d9      	ldr	r1, [r3, #12]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	3b1e      	subs	r3, #30
 8003516:	2207      	movs	r2, #7
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	4019      	ands	r1, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	6898      	ldr	r0, [r3, #8]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4613      	mov	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	4413      	add	r3, r2
 800352e:	3b1e      	subs	r3, #30
 8003530:	fa00 f203 	lsl.w	r2, r0, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	60da      	str	r2, [r3, #12]
 800353c:	e019      	b.n	8003572 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6919      	ldr	r1, [r3, #16]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	2207      	movs	r2, #7
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	4019      	ands	r1, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6898      	ldr	r0, [r3, #8]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	fa00 f203 	lsl.w	r2, r0, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b10      	cmp	r3, #16
 8003578:	d003      	beq.n	8003582 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800357e:	2b11      	cmp	r3, #17
 8003580:	d11e      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003590:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b10      	cmp	r3, #16
 8003598:	d11c      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800359a:	4b14      	ldr	r3, [pc, #80]	@ (80035ec <HAL_ADC_ConfigChannel+0x1d4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a14      	ldr	r2, [pc, #80]	@ (80035f0 <HAL_ADC_ConfigChannel+0x1d8>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	0c9a      	lsrs	r2, r3, #18
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 80035b0:	e002      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f9      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80035be:	e009      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b12      	cmp	r3, #18
 80035c6:	d105      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 80035c8:	4b0a      	ldr	r3, [pc, #40]	@ (80035f4 <HAL_ADC_ConfigChannel+0x1dc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a09      	ldr	r2, [pc, #36]	@ (80035f4 <HAL_ADC_ConfigChannel+0x1dc>)
 80035ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035d2:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000004 	.word	0x20000004
 80035f0:	431bde83 	.word	0x431bde83
 80035f4:	40010000 	.word	0x40010000

080035f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b01      	cmp	r3, #1
 8003614:	d040      	beq.n	8003698 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003626:	4b1f      	ldr	r3, [pc, #124]	@ (80036a4 <ADC_Enable+0xac>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1f      	ldr	r2, [pc, #124]	@ (80036a8 <ADC_Enable+0xb0>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	0c9b      	lsrs	r3, r3, #18
 8003632:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003634:	e002      	b.n	800363c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3b01      	subs	r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f9      	bne.n	8003636 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003642:	f7ff fd43 	bl	80030cc <HAL_GetTick>
 8003646:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003648:	e01f      	b.n	800368a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800364a:	f7ff fd3f 	bl	80030cc <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d918      	bls.n	800368a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b01      	cmp	r3, #1
 8003664:	d011      	beq.n	800368a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	f043 0210 	orr.w	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003676:	f043 0201 	orr.w	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e007      	b.n	800369a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d1d8      	bne.n	800364a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000004 	.word	0x20000004
 80036a8:	431bde83 	.word	0x431bde83

080036ac <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d12e      	bne.n	8003724 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036d6:	f7ff fcf9 	bl	80030cc <HAL_GetTick>
 80036da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036dc:	e01b      	b.n	8003716 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036de:	f7ff fcf5 	bl	80030cc <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d914      	bls.n	8003716 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d10d      	bne.n	8003716 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fe:	f043 0210 	orr.w	r2, r3, #16
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370a:	f043 0201 	orr.w	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e007      	b.n	8003726 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b01      	cmp	r3, #1
 8003722:	d0dc      	beq.n	80036de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0ed      	b.n	800391c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7fc fe7b 	bl	8000448 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003762:	f7ff fcb3 	bl	80030cc <HAL_GetTick>
 8003766:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003768:	e012      	b.n	8003790 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800376a:	f7ff fcaf 	bl	80030cc <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b0a      	cmp	r3, #10
 8003776:	d90b      	bls.n	8003790 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2205      	movs	r2, #5
 8003788:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0c5      	b.n	800391c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0e5      	beq.n	800376a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0202 	bic.w	r2, r2, #2
 80037ac:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037ae:	f7ff fc8d 	bl	80030cc <HAL_GetTick>
 80037b2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037b4:	e012      	b.n	80037dc <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037b6:	f7ff fc89 	bl	80030cc <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b0a      	cmp	r3, #10
 80037c2:	d90b      	bls.n	80037dc <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2205      	movs	r2, #5
 80037d4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e09f      	b.n	800391c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e5      	bne.n	80037b6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	7e1b      	ldrb	r3, [r3, #24]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d108      	bne.n	8003804 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e007      	b.n	8003814 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003812:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	7e5b      	ldrb	r3, [r3, #25]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d108      	bne.n	800382e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e007      	b.n	800383e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800383c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	7e9b      	ldrb	r3, [r3, #26]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d108      	bne.n	8003858 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0220 	orr.w	r2, r2, #32
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e007      	b.n	8003868 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0220 	bic.w	r2, r2, #32
 8003866:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	7edb      	ldrb	r3, [r3, #27]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d108      	bne.n	8003882 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0210 	bic.w	r2, r2, #16
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	e007      	b.n	8003892 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0210 	orr.w	r2, r2, #16
 8003890:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	7f1b      	ldrb	r3, [r3, #28]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d108      	bne.n	80038ac <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0208 	orr.w	r2, r2, #8
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e007      	b.n	80038bc <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0208 	bic.w	r2, r2, #8
 80038ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	7f5b      	ldrb	r3, [r3, #29]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d108      	bne.n	80038d6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0204 	orr.w	r2, r2, #4
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e007      	b.n	80038e6 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0204 	bic.w	r2, r2, #4
 80038e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	ea42 0103 	orr.w	r1, r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	1e5a      	subs	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800393a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d003      	beq.n	800394a <HAL_CAN_ConfigFilter+0x26>
 8003942:	7cfb      	ldrb	r3, [r7, #19]
 8003944:	2b02      	cmp	r3, #2
 8003946:	f040 80aa 	bne.w	8003a9e <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003950:	f043 0201 	orr.w	r2, r3, #1
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	2201      	movs	r2, #1
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	43db      	mvns	r3, r3
 8003974:	401a      	ands	r2, r3
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d123      	bne.n	80039cc <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	43db      	mvns	r3, r3
 800398e:	401a      	ands	r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80039a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	3248      	adds	r2, #72	@ 0x48
 80039ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039c2:	6979      	ldr	r1, [r7, #20]
 80039c4:	3348      	adds	r3, #72	@ 0x48
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	440b      	add	r3, r1
 80039ca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d122      	bne.n	8003a1a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	431a      	orrs	r2, r3
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80039f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	3248      	adds	r2, #72	@ 0x48
 80039fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a0e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a10:	6979      	ldr	r1, [r7, #20]
 8003a12:	3348      	adds	r3, #72	@ 0x48
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	440b      	add	r3, r1
 8003a18:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	401a      	ands	r2, r3
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003a34:	e007      	b.n	8003a46 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	401a      	ands	r2, r3
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003a60:	e007      	b.n	8003a72 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d107      	bne.n	8003a8a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003a90:	f023 0201 	bic.w	r2, r3, #1
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	e006      	b.n	8003aac <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
  }
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d12e      	bne.n	8003b2a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0201 	bic.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ae4:	f7ff faf2 	bl	80030cc <HAL_GetTick>
 8003ae8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003aea:	e012      	b.n	8003b12 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003aec:	f7ff faee 	bl	80030cc <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b0a      	cmp	r3, #10
 8003af8:	d90b      	bls.n	8003b12 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2205      	movs	r2, #5
 8003b0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e012      	b.n	8003b38 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e5      	bne.n	8003aec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e006      	b.n	8003b38 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
  }
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b089      	sub	sp, #36	@ 0x24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b54:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b5e:	7ffb      	ldrb	r3, [r7, #31]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d003      	beq.n	8003b6c <HAL_CAN_AddTxMessage+0x2c>
 8003b64:	7ffb      	ldrb	r3, [r7, #31]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	f040 80ad 	bne.w	8003cc6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10a      	bne.n	8003b8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8095 	beq.w	8003cb6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	0e1b      	lsrs	r3, r3, #24
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003b96:	2201      	movs	r2, #1
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10d      	bne.n	8003bc4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003bb2:	68f9      	ldr	r1, [r7, #12]
 8003bb4:	6809      	ldr	r1, [r1, #0]
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	3318      	adds	r3, #24
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	440b      	add	r3, r1
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e00f      	b.n	8003be4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003bce:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003bd4:	68f9      	ldr	r1, [r7, #12]
 8003bd6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003bd8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	3318      	adds	r3, #24
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	440b      	add	r3, r1
 8003be2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6819      	ldr	r1, [r3, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	3318      	adds	r3, #24
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	440b      	add	r3, r1
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	7d1b      	ldrb	r3, [r3, #20]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d111      	bne.n	8003c24 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	3318      	adds	r3, #24
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	6811      	ldr	r1, [r2, #0]
 8003c14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	3318      	adds	r3, #24
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	440b      	add	r3, r1
 8003c20:	3304      	adds	r3, #4
 8003c22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3307      	adds	r3, #7
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	061a      	lsls	r2, r3, #24
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3306      	adds	r3, #6
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	041b      	lsls	r3, r3, #16
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3305      	adds	r3, #5
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	021b      	lsls	r3, r3, #8
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	3204      	adds	r2, #4
 8003c44:	7812      	ldrb	r2, [r2, #0]
 8003c46:	4610      	mov	r0, r2
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	6811      	ldr	r1, [r2, #0]
 8003c4c:	ea43 0200 	orr.w	r2, r3, r0
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	440b      	add	r3, r1
 8003c56:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003c5a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3303      	adds	r3, #3
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	061a      	lsls	r2, r3, #24
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3302      	adds	r3, #2
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	041b      	lsls	r3, r3, #16
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3301      	adds	r3, #1
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	4313      	orrs	r3, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	7812      	ldrb	r2, [r2, #0]
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	6811      	ldr	r1, [r2, #0]
 8003c82:	ea43 0200 	orr.w	r2, r3, r0
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	440b      	add	r3, r1
 8003c8c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003c90:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	3318      	adds	r3, #24
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	4413      	add	r3, r2
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	6811      	ldr	r1, [r2, #0]
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	3318      	adds	r3, #24
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	440b      	add	r3, r1
 8003cb0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e00e      	b.n	8003cd4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e006      	b.n	8003cd4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
  }
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3724      	adds	r7, #36	@ 0x24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cf4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d003      	beq.n	8003d04 <HAL_CAN_GetRxMessage+0x24>
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	f040 8103 	bne.w	8003f0a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10e      	bne.n	8003d28 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d116      	bne.n	8003d46 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0f7      	b.n	8003f18 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d107      	bne.n	8003d46 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e0e8      	b.n	8003f18 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	331b      	adds	r3, #27
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	4413      	add	r3, r2
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0204 	and.w	r2, r3, #4
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10c      	bne.n	8003d7e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	331b      	adds	r3, #27
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	4413      	add	r3, r2
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	0d5b      	lsrs	r3, r3, #21
 8003d74:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	e00b      	b.n	8003d96 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	331b      	adds	r3, #27
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	4413      	add	r3, r2
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	08db      	lsrs	r3, r3, #3
 8003d8e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	331b      	adds	r3, #27
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	4413      	add	r3, r2
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0202 	and.w	r2, r3, #2
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	331b      	adds	r3, #27
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	4413      	add	r3, r2
 8003db8:	3304      	adds	r3, #4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	611a      	str	r2, [r3, #16]
 8003dca:	e00b      	b.n	8003de4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	331b      	adds	r3, #27
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3304      	adds	r3, #4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 020f 	and.w	r2, r3, #15
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	331b      	adds	r3, #27
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	4413      	add	r3, r2
 8003df0:	3304      	adds	r3, #4
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	331b      	adds	r3, #27
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	4413      	add	r3, r2
 8003e08:	3304      	adds	r3, #4
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	0c1b      	lsrs	r3, r3, #16
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	0a1a      	lsrs	r2, r3, #8
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	0c1a      	lsrs	r2, r3, #16
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	3302      	adds	r3, #2
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	0e1a      	lsrs	r2, r3, #24
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	3303      	adds	r3, #3
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	0a1a      	lsrs	r2, r3, #8
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	3305      	adds	r3, #5
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	0c1a      	lsrs	r2, r3, #16
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	3306      	adds	r3, #6
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	0e1a      	lsrs	r2, r3, #24
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	3307      	adds	r3, #7
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d108      	bne.n	8003ef6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0220 	orr.w	r2, r2, #32
 8003ef2:	60da      	str	r2, [r3, #12]
 8003ef4:	e007      	b.n	8003f06 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0220 	orr.w	r2, r2, #32
 8003f04:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e006      	b.n	8003f18 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
  }
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f34:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d002      	beq.n	8003f42 <HAL_CAN_ActivateNotification+0x1e>
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d109      	bne.n	8003f56 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6959      	ldr	r1, [r3, #20]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e006      	b.n	8003f64 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
  }
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	@ 0x28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d07c      	beq.n	80040b0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d023      	beq.n	8004008 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f983 	bl	80042de <HAL_CAN_TxMailbox0CompleteCallback>
 8003fd8:	e016      	b.n	8004008 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d004      	beq.n	8003fee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fec:	e00c      	b.n	8004008 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d004      	beq.n	8004002 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004000:	e002      	b.n	8004008 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f989 	bl	800431a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400e:	2b00      	cmp	r3, #0
 8004010:	d024      	beq.n	800405c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800401a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f963 	bl	80042f2 <HAL_CAN_TxMailbox1CompleteCallback>
 800402c:	e016      	b.n	800405c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004034:	2b00      	cmp	r3, #0
 8004036:	d004      	beq.n	8004042 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004040:	e00c      	b.n	800405c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004048:	2b00      	cmp	r3, #0
 800404a:	d004      	beq.n	8004056 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
 8004054:	e002      	b.n	800405c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f969 	bl	800432e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d024      	beq.n	80040b0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800406e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f943 	bl	8004306 <HAL_CAN_TxMailbox2CompleteCallback>
 8004080:	e016      	b.n	80040b0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d004      	beq.n	8004096 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004092:	627b      	str	r3, [r7, #36]	@ 0x24
 8004094:	e00c      	b.n	80040b0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d004      	beq.n	80040aa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a8:	e002      	b.n	80040b0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f949 	bl	8004342 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00c      	beq.n	80040d4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d007      	beq.n	80040d4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040ca:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2210      	movs	r2, #16
 80040d2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d006      	beq.n	80040f6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2208      	movs	r2, #8
 80040ee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f930 	bl	8004356 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d009      	beq.n	8004114 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fe fa50 	bl	80025b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00c      	beq.n	8004138 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800412e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2210      	movs	r2, #16
 8004136:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00b      	beq.n	800415a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d006      	beq.n	800415a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2208      	movs	r2, #8
 8004152:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f912 	bl	800437e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	f003 0310 	and.w	r3, r3, #16
 8004160:	2b00      	cmp	r3, #0
 8004162:	d009      	beq.n	8004178 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f8f9 	bl	800436a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00b      	beq.n	800419a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d006      	beq.n	800419a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2210      	movs	r2, #16
 8004192:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f8fc 	bl	8004392 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00b      	beq.n	80041bc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d006      	beq.n	80041bc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2208      	movs	r2, #8
 80041b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f8f5 	bl	80043a6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d07b      	beq.n	80042be <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d072      	beq.n	80042b6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d008      	beq.n	80041ec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	f043 0302 	orr.w	r3, r3, #2
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800421c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421e:	f043 0304 	orr.w	r3, r3, #4
 8004222:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800422a:	2b00      	cmp	r3, #0
 800422c:	d043      	beq.n	80042b6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004234:	2b00      	cmp	r3, #0
 8004236:	d03e      	beq.n	80042b6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800423e:	2b60      	cmp	r3, #96	@ 0x60
 8004240:	d02b      	beq.n	800429a <HAL_CAN_IRQHandler+0x32a>
 8004242:	2b60      	cmp	r3, #96	@ 0x60
 8004244:	d82e      	bhi.n	80042a4 <HAL_CAN_IRQHandler+0x334>
 8004246:	2b50      	cmp	r3, #80	@ 0x50
 8004248:	d022      	beq.n	8004290 <HAL_CAN_IRQHandler+0x320>
 800424a:	2b50      	cmp	r3, #80	@ 0x50
 800424c:	d82a      	bhi.n	80042a4 <HAL_CAN_IRQHandler+0x334>
 800424e:	2b40      	cmp	r3, #64	@ 0x40
 8004250:	d019      	beq.n	8004286 <HAL_CAN_IRQHandler+0x316>
 8004252:	2b40      	cmp	r3, #64	@ 0x40
 8004254:	d826      	bhi.n	80042a4 <HAL_CAN_IRQHandler+0x334>
 8004256:	2b30      	cmp	r3, #48	@ 0x30
 8004258:	d010      	beq.n	800427c <HAL_CAN_IRQHandler+0x30c>
 800425a:	2b30      	cmp	r3, #48	@ 0x30
 800425c:	d822      	bhi.n	80042a4 <HAL_CAN_IRQHandler+0x334>
 800425e:	2b10      	cmp	r3, #16
 8004260:	d002      	beq.n	8004268 <HAL_CAN_IRQHandler+0x2f8>
 8004262:	2b20      	cmp	r3, #32
 8004264:	d005      	beq.n	8004272 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004266:	e01d      	b.n	80042a4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	f043 0308 	orr.w	r3, r3, #8
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004270:	e019      	b.n	80042a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	f043 0310 	orr.w	r3, r3, #16
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800427a:	e014      	b.n	80042a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	f043 0320 	orr.w	r3, r3, #32
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004284:	e00f      	b.n	80042a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800428c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800428e:	e00a      	b.n	80042a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004296:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004298:	e005      	b.n	80042a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80042a2:	e000      	b.n	80042a6 <HAL_CAN_IRQHandler+0x336>
            break;
 80042a4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699a      	ldr	r2, [r3, #24]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80042b4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2204      	movs	r2, #4
 80042bc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f872 	bl	80043ba <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80042d6:	bf00      	nop
 80042d8:	3728      	adds	r7, #40	@ 0x28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004414 <__NVIC_SetPriorityGrouping+0x44>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043ec:	4013      	ands	r3, r2
 80043ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004402:	4a04      	ldr	r2, [pc, #16]	@ (8004414 <__NVIC_SetPriorityGrouping+0x44>)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	60d3      	str	r3, [r2, #12]
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	e000ed00 	.word	0xe000ed00

08004418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800441c:	4b04      	ldr	r3, [pc, #16]	@ (8004430 <__NVIC_GetPriorityGrouping+0x18>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	0a1b      	lsrs	r3, r3, #8
 8004422:	f003 0307 	and.w	r3, r3, #7
}
 8004426:	4618      	mov	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800443e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004442:	2b00      	cmp	r3, #0
 8004444:	db0b      	blt.n	800445e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	f003 021f 	and.w	r2, r3, #31
 800444c:	4907      	ldr	r1, [pc, #28]	@ (800446c <__NVIC_EnableIRQ+0x38>)
 800444e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	2001      	movs	r0, #1
 8004456:	fa00 f202 	lsl.w	r2, r0, r2
 800445a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	e000e100 	.word	0xe000e100

08004470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	6039      	str	r1, [r7, #0]
 800447a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800447c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004480:	2b00      	cmp	r3, #0
 8004482:	db0a      	blt.n	800449a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	b2da      	uxtb	r2, r3
 8004488:	490c      	ldr	r1, [pc, #48]	@ (80044bc <__NVIC_SetPriority+0x4c>)
 800448a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448e:	0112      	lsls	r2, r2, #4
 8004490:	b2d2      	uxtb	r2, r2
 8004492:	440b      	add	r3, r1
 8004494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004498:	e00a      	b.n	80044b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4908      	ldr	r1, [pc, #32]	@ (80044c0 <__NVIC_SetPriority+0x50>)
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	3b04      	subs	r3, #4
 80044a8:	0112      	lsls	r2, r2, #4
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	440b      	add	r3, r1
 80044ae:	761a      	strb	r2, [r3, #24]
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	e000e100 	.word	0xe000e100
 80044c0:	e000ed00 	.word	0xe000ed00

080044c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b089      	sub	sp, #36	@ 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f1c3 0307 	rsb	r3, r3, #7
 80044de:	2b04      	cmp	r3, #4
 80044e0:	bf28      	it	cs
 80044e2:	2304      	movcs	r3, #4
 80044e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	3304      	adds	r3, #4
 80044ea:	2b06      	cmp	r3, #6
 80044ec:	d902      	bls.n	80044f4 <NVIC_EncodePriority+0x30>
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3b03      	subs	r3, #3
 80044f2:	e000      	b.n	80044f6 <NVIC_EncodePriority+0x32>
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f8:	f04f 32ff 	mov.w	r2, #4294967295
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43da      	mvns	r2, r3
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	401a      	ands	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800450c:	f04f 31ff 	mov.w	r1, #4294967295
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	fa01 f303 	lsl.w	r3, r1, r3
 8004516:	43d9      	mvns	r1, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800451c:	4313      	orrs	r3, r2
         );
}
 800451e:	4618      	mov	r0, r3
 8004520:	3724      	adds	r7, #36	@ 0x24
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004530:	f3bf 8f4f 	dsb	sy
}
 8004534:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004536:	4b06      	ldr	r3, [pc, #24]	@ (8004550 <__NVIC_SystemReset+0x24>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800453e:	4904      	ldr	r1, [pc, #16]	@ (8004550 <__NVIC_SystemReset+0x24>)
 8004540:	4b04      	ldr	r3, [pc, #16]	@ (8004554 <__NVIC_SystemReset+0x28>)
 8004542:	4313      	orrs	r3, r2
 8004544:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004546:	f3bf 8f4f 	dsb	sy
}
 800454a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800454c:	bf00      	nop
 800454e:	e7fd      	b.n	800454c <__NVIC_SystemReset+0x20>
 8004550:	e000ed00 	.word	0xe000ed00
 8004554:	05fa0004 	.word	0x05fa0004

08004558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3b01      	subs	r3, #1
 8004564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004568:	d301      	bcc.n	800456e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800456a:	2301      	movs	r3, #1
 800456c:	e00f      	b.n	800458e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800456e:	4a0a      	ldr	r2, [pc, #40]	@ (8004598 <SysTick_Config+0x40>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3b01      	subs	r3, #1
 8004574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004576:	210f      	movs	r1, #15
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	f7ff ff78 	bl	8004470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004580:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <SysTick_Config+0x40>)
 8004582:	2200      	movs	r2, #0
 8004584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004586:	4b04      	ldr	r3, [pc, #16]	@ (8004598 <SysTick_Config+0x40>)
 8004588:	2207      	movs	r2, #7
 800458a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	e000e010 	.word	0xe000e010

0800459c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff ff13 	bl	80043d0 <__NVIC_SetPriorityGrouping>
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b086      	sub	sp, #24
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	4603      	mov	r3, r0
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045c4:	f7ff ff28 	bl	8004418 <__NVIC_GetPriorityGrouping>
 80045c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	6978      	ldr	r0, [r7, #20]
 80045d0:	f7ff ff78 	bl	80044c4 <NVIC_EncodePriority>
 80045d4:	4602      	mov	r2, r0
 80045d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045da:	4611      	mov	r1, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff ff47 	bl	8004470 <__NVIC_SetPriority>
}
 80045e2:	bf00      	nop
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	4603      	mov	r3, r0
 80045f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff ff1b 	bl	8004434 <__NVIC_EnableIRQ>
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800460a:	f7ff ff8f 	bl	800452c <__NVIC_SystemReset>

0800460e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7ff ff9e 	bl	8004558 <SysTick_Config>
 800461c:	4603      	mov	r3, r0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b084      	sub	sp, #16
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e037      	b.n	80046ac <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004652:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004656:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004660:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800466c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004678:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f9bc 	bl	8004a0c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_DMA_Start_IT+0x20>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e04a      	b.n	800476a <HAL_DMA_Start_IT+0xb6>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d13a      	bne.n	800475c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2202      	movs	r2, #2
 80046ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 f950 	bl	80049b0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 020e 	orr.w	r2, r2, #14
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	e00f      	b.n	800474a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 020a 	orr.w	r2, r2, #10
 8004738:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0204 	bic.w	r2, r2, #4
 8004748:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0201 	orr.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	e005      	b.n	8004768 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004764:	2302      	movs	r3, #2
 8004766:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004768:	7dfb      	ldrb	r3, [r7, #23]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e02e      	b.n	80047e2 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800478a:	2b02      	cmp	r3, #2
 800478c:	d008      	beq.n	80047a0 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2204      	movs	r2, #4
 8004792:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e020      	b.n	80047e2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 020e 	bic.w	r2, r2, #14
 80047ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c8:	2101      	movs	r1, #1
 80047ca:	fa01 f202 	lsl.w	r2, r1, r2
 80047ce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004800:	2b02      	cmp	r3, #2
 8004802:	d005      	beq.n	8004810 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2204      	movs	r2, #4
 8004808:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	73fb      	strb	r3, [r7, #15]
 800480e:	e027      	b.n	8004860 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 020e 	bic.w	r2, r2, #14
 800481e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004838:	2101      	movs	r1, #1
 800483a:	fa01 f202 	lsl.w	r2, r1, r2
 800483e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
    }
  }
  return status;
 8004860:	7bfb      	ldrb	r3, [r7, #15]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	2204      	movs	r2, #4
 8004888:	409a      	lsls	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4013      	ands	r3, r2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d024      	beq.n	80048dc <HAL_DMA_IRQHandler+0x72>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01f      	beq.n	80048dc <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d107      	bne.n	80048ba <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0204 	bic.w	r2, r2, #4
 80048b8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c2:	2104      	movs	r1, #4
 80048c4:	fa01 f202 	lsl.w	r2, r1, r2
 80048c8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d06a      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80048da:	e065      	b.n	80049a8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	2202      	movs	r2, #2
 80048e2:	409a      	lsls	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d02c      	beq.n	8004946 <HAL_DMA_IRQHandler+0xdc>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d027      	beq.n	8004946 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0320 	and.w	r3, r3, #32
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10b      	bne.n	800491c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 020a 	bic.w	r2, r2, #10
 8004912:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004924:	2102      	movs	r1, #2
 8004926:	fa01 f202 	lsl.w	r2, r1, r2
 800492a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004938:	2b00      	cmp	r3, #0
 800493a:	d035      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004944:	e030      	b.n	80049a8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	2208      	movs	r2, #8
 800494c:	409a      	lsls	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d028      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x13e>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d023      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 020e 	bic.w	r2, r2, #14
 800496e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004978:	2101      	movs	r1, #1
 800497a:	fa01 f202 	lsl.w	r2, r1, r2
 800497e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499a:	2b00      	cmp	r3, #0
 800499c:	d004      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	4798      	blx	r3
    }
  }
}
 80049a6:	e7ff      	b.n	80049a8 <HAL_DMA_IRQHandler+0x13e>
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c6:	2101      	movs	r1, #1
 80049c8:	fa01 f202 	lsl.w	r2, r1, r2
 80049cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d108      	bne.n	80049f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80049ee:	e007      	b.n	8004a00 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	60da      	str	r2, [r3, #12]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4b14      	ldr	r3, [pc, #80]	@ (8004a6c <DMA_CalcBaseAndBitshift+0x60>)
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d80f      	bhi.n	8004a40 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	4b12      	ldr	r3, [pc, #72]	@ (8004a70 <DMA_CalcBaseAndBitshift+0x64>)
 8004a28:	4413      	add	r3, r2
 8004a2a:	4a12      	ldr	r2, [pc, #72]	@ (8004a74 <DMA_CalcBaseAndBitshift+0x68>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	009a      	lsls	r2, r3, #2
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a0f      	ldr	r2, [pc, #60]	@ (8004a78 <DMA_CalcBaseAndBitshift+0x6c>)
 8004a3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004a3e:	e00e      	b.n	8004a5e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	4b0d      	ldr	r3, [pc, #52]	@ (8004a7c <DMA_CalcBaseAndBitshift+0x70>)
 8004a48:	4413      	add	r3, r2
 8004a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a74 <DMA_CalcBaseAndBitshift+0x68>)
 8004a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	009a      	lsls	r2, r3, #2
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a09      	ldr	r2, [pc, #36]	@ (8004a80 <DMA_CalcBaseAndBitshift+0x74>)
 8004a5c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40020407 	.word	0x40020407
 8004a70:	bffdfff8 	.word	0xbffdfff8
 8004a74:	cccccccd 	.word	0xcccccccd
 8004a78:	40020000 	.word	0x40020000
 8004a7c:	bffdfbf8 	.word	0xbffdfbf8
 8004a80:	40020400 	.word	0x40020400

08004a84 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8004b5c <HAL_FLASH_Program+0xd8>)
 8004aa0:	7e1b      	ldrb	r3, [r3, #24]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_FLASH_Program+0x26>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e054      	b.n	8004b54 <HAL_FLASH_Program+0xd0>
 8004aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8004b5c <HAL_FLASH_Program+0xd8>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ab0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004ab4:	f000 f8a8 	bl	8004c08 <FLASH_WaitForLastOperation>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d144      	bne.n	8004b4c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d102      	bne.n	8004ace <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	757b      	strb	r3, [r7, #21]
 8004acc:	e007      	b.n	8004ade <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d102      	bne.n	8004ada <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	757b      	strb	r3, [r7, #21]
 8004ad8:	e001      	b.n	8004ade <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8004ada:	2304      	movs	r3, #4
 8004adc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004ade:	2300      	movs	r3, #0
 8004ae0:	75bb      	strb	r3, [r7, #22]
 8004ae2:	e02d      	b.n	8004b40 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004ae4:	7dbb      	ldrb	r3, [r7, #22]
 8004ae6:	005a      	lsls	r2, r3, #1
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	eb02 0c03 	add.w	ip, r2, r3
 8004aee:	7dbb      	ldrb	r3, [r7, #22]
 8004af0:	0119      	lsls	r1, r3, #4
 8004af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004af6:	f1c1 0620 	rsb	r6, r1, #32
 8004afa:	f1a1 0020 	sub.w	r0, r1, #32
 8004afe:	fa22 f401 	lsr.w	r4, r2, r1
 8004b02:	fa03 f606 	lsl.w	r6, r3, r6
 8004b06:	4334      	orrs	r4, r6
 8004b08:	fa23 f000 	lsr.w	r0, r3, r0
 8004b0c:	4304      	orrs	r4, r0
 8004b0e:	fa23 f501 	lsr.w	r5, r3, r1
 8004b12:	b2a3      	uxth	r3, r4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4660      	mov	r0, ip
 8004b18:	f000 f85a 	bl	8004bd0 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b1c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004b20:	f000 f872 	bl	8004c08 <FLASH_WaitForLastOperation>
 8004b24:	4603      	mov	r3, r0
 8004b26:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004b28:	4b0d      	ldr	r3, [pc, #52]	@ (8004b60 <HAL_FLASH_Program+0xdc>)
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8004b60 <HAL_FLASH_Program+0xdc>)
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8004b34:	7dfb      	ldrb	r3, [r7, #23]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d107      	bne.n	8004b4a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004b3a:	7dbb      	ldrb	r3, [r7, #22]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	75bb      	strb	r3, [r7, #22]
 8004b40:	7dba      	ldrb	r2, [r7, #22]
 8004b42:	7d7b      	ldrb	r3, [r7, #21]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d3cd      	bcc.n	8004ae4 <HAL_FLASH_Program+0x60>
 8004b48:	e000      	b.n	8004b4c <HAL_FLASH_Program+0xc8>
      {
        break;
 8004b4a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004b4c:	4b03      	ldr	r3, [pc, #12]	@ (8004b5c <HAL_FLASH_Program+0xd8>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	761a      	strb	r2, [r3, #24]

  return status;
 8004b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	371c      	adds	r7, #28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b5c:	200006e0 	.word	0x200006e0
 8004b60:	40022000 	.word	0x40022000

08004b64 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba4 <HAL_FLASH_Unlock+0x40>)
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00d      	beq.n	8004b96 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba4 <HAL_FLASH_Unlock+0x40>)
 8004b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8004ba8 <HAL_FLASH_Unlock+0x44>)
 8004b7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b80:	4b08      	ldr	r3, [pc, #32]	@ (8004ba4 <HAL_FLASH_Unlock+0x40>)
 8004b82:	4a0a      	ldr	r2, [pc, #40]	@ (8004bac <HAL_FLASH_Unlock+0x48>)
 8004b84:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b86:	4b07      	ldr	r3, [pc, #28]	@ (8004ba4 <HAL_FLASH_Unlock+0x40>)
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004b96:	79fb      	ldrb	r3, [r7, #7]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	40022000 	.word	0x40022000
 8004ba8:	45670123 	.word	0x45670123
 8004bac:	cdef89ab 	.word	0xcdef89ab

08004bb0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004bb4:	4b05      	ldr	r3, [pc, #20]	@ (8004bcc <HAL_FLASH_Lock+0x1c>)
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	4a04      	ldr	r2, [pc, #16]	@ (8004bcc <HAL_FLASH_Lock+0x1c>)
 8004bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bbe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	40022000 	.word	0x40022000

08004bd0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004bdc:	4b08      	ldr	r3, [pc, #32]	@ (8004c00 <FLASH_Program_HalfWord+0x30>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004be2:	4b08      	ldr	r3, [pc, #32]	@ (8004c04 <FLASH_Program_HalfWord+0x34>)
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	4a07      	ldr	r2, [pc, #28]	@ (8004c04 <FLASH_Program_HalfWord+0x34>)
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	887a      	ldrh	r2, [r7, #2]
 8004bf2:	801a      	strh	r2, [r3, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	200006e0 	.word	0x200006e0
 8004c04:	40022000 	.word	0x40022000

08004c08 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004c10:	f7fe fa5c 	bl	80030cc <HAL_GetTick>
 8004c14:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004c16:	e010      	b.n	8004c3a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1e:	d00c      	beq.n	8004c3a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <FLASH_WaitForLastOperation+0x2e>
 8004c26:	f7fe fa51 	bl	80030cc <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d201      	bcs.n	8004c3a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e01f      	b.n	8004c7a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004c3a:	4b12      	ldr	r3, [pc, #72]	@ (8004c84 <FLASH_WaitForLastOperation+0x7c>)
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d0e8      	beq.n	8004c18 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004c46:	4b0f      	ldr	r3, [pc, #60]	@ (8004c84 <FLASH_WaitForLastOperation+0x7c>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	d102      	bne.n	8004c58 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004c52:	4b0c      	ldr	r3, [pc, #48]	@ (8004c84 <FLASH_WaitForLastOperation+0x7c>)
 8004c54:	2220      	movs	r2, #32
 8004c56:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004c58:	4b0a      	ldr	r3, [pc, #40]	@ (8004c84 <FLASH_WaitForLastOperation+0x7c>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	2b10      	cmp	r3, #16
 8004c62:	d005      	beq.n	8004c70 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004c64:	4b07      	ldr	r3, [pc, #28]	@ (8004c84 <FLASH_WaitForLastOperation+0x7c>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d103      	bne.n	8004c78 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004c70:	f000 f80a 	bl	8004c88 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40022000 	.word	0x40022000

08004c88 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004c92:	4b14      	ldr	r3, [pc, #80]	@ (8004ce4 <FLASH_SetErrorCode+0x5c>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d109      	bne.n	8004cb2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004c9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ce8 <FLASH_SetErrorCode+0x60>)
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f043 0302 	orr.w	r3, r3, #2
 8004ca6:	4a10      	ldr	r2, [pc, #64]	@ (8004ce8 <FLASH_SetErrorCode+0x60>)
 8004ca8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f043 0310 	orr.w	r3, r3, #16
 8004cb0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce4 <FLASH_SetErrorCode+0x5c>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d109      	bne.n	8004cd2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce8 <FLASH_SetErrorCode+0x60>)
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	4a08      	ldr	r2, [pc, #32]	@ (8004ce8 <FLASH_SetErrorCode+0x60>)
 8004cc8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f043 0304 	orr.w	r3, r3, #4
 8004cd0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004cd2:	4a04      	ldr	r2, [pc, #16]	@ (8004ce4 <FLASH_SetErrorCode+0x5c>)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	60d3      	str	r3, [r2, #12]
}  
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	40022000 	.word	0x40022000
 8004ce8:	200006e0 	.word	0x200006e0

08004cec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8004db8 <HAL_FLASHEx_Erase+0xcc>)
 8004d00:	7e1b      	ldrb	r3, [r3, #24]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <HAL_FLASHEx_Erase+0x1e>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e052      	b.n	8004db0 <HAL_FLASHEx_Erase+0xc4>
 8004d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8004db8 <HAL_FLASHEx_Erase+0xcc>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d115      	bne.n	8004d44 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004d18:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004d1c:	f7ff ff74 	bl	8004c08 <FLASH_WaitForLastOperation>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d140      	bne.n	8004da8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8004d26:	f000 f84b 	bl	8004dc0 <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d2a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004d2e:	f7ff ff6b 	bl	8004c08 <FLASH_WaitForLastOperation>
 8004d32:	4603      	mov	r3, r0
 8004d34:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004d36:	4b21      	ldr	r3, [pc, #132]	@ (8004dbc <HAL_FLASHEx_Erase+0xd0>)
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	4a20      	ldr	r2, [pc, #128]	@ (8004dbc <HAL_FLASHEx_Erase+0xd0>)
 8004d3c:	f023 0304 	bic.w	r3, r3, #4
 8004d40:	6113      	str	r3, [r2, #16]
 8004d42:	e031      	b.n	8004da8 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004d44:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004d48:	f7ff ff5e 	bl	8004c08 <FLASH_WaitForLastOperation>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d12a      	bne.n	8004da8 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	f04f 32ff 	mov.w	r2, #4294967295
 8004d58:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	60bb      	str	r3, [r7, #8]
 8004d60:	e019      	b.n	8004d96 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004d62:	68b8      	ldr	r0, [r7, #8]
 8004d64:	f000 f846 	bl	8004df4 <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d68:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004d6c:	f7ff ff4c 	bl	8004c08 <FLASH_WaitForLastOperation>
 8004d70:	4603      	mov	r3, r0
 8004d72:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004d74:	4b11      	ldr	r3, [pc, #68]	@ (8004dbc <HAL_FLASHEx_Erase+0xd0>)
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	4a10      	ldr	r2, [pc, #64]	@ (8004dbc <HAL_FLASHEx_Erase+0xd0>)
 8004d7a:	f023 0302 	bic.w	r3, r3, #2
 8004d7e:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	601a      	str	r2, [r3, #0]
            break;
 8004d8c:	e00c      	b.n	8004da8 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d94:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	02da      	lsls	r2, r3, #11
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	4413      	add	r3, r2
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d3dc      	bcc.n	8004d62 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004da8:	4b03      	ldr	r3, [pc, #12]	@ (8004db8 <HAL_FLASHEx_Erase+0xcc>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	761a      	strb	r2, [r3, #24]

  return status;
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	200006e0 	.word	0x200006e0
 8004dbc:	40022000 	.word	0x40022000

08004dc0 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004dc4:	4b09      	ldr	r3, [pc, #36]	@ (8004dec <FLASH_MassErase+0x2c>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004dca:	4b09      	ldr	r3, [pc, #36]	@ (8004df0 <FLASH_MassErase+0x30>)
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	4a08      	ldr	r2, [pc, #32]	@ (8004df0 <FLASH_MassErase+0x30>)
 8004dd0:	f043 0304 	orr.w	r3, r3, #4
 8004dd4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004dd6:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <FLASH_MassErase+0x30>)
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	4a05      	ldr	r2, [pc, #20]	@ (8004df0 <FLASH_MassErase+0x30>)
 8004ddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004de0:	6113      	str	r3, [r2, #16]
}
 8004de2:	bf00      	nop
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	200006e0 	.word	0x200006e0
 8004df0:	40022000 	.word	0x40022000

08004df4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <FLASH_PageErase+0x38>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004e02:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <FLASH_PageErase+0x3c>)
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	4a0a      	ldr	r2, [pc, #40]	@ (8004e30 <FLASH_PageErase+0x3c>)
 8004e08:	f043 0302 	orr.w	r3, r3, #2
 8004e0c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004e0e:	4a08      	ldr	r2, [pc, #32]	@ (8004e30 <FLASH_PageErase+0x3c>)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004e14:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <FLASH_PageErase+0x3c>)
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	4a05      	ldr	r2, [pc, #20]	@ (8004e30 <FLASH_PageErase+0x3c>)
 8004e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e1e:	6113      	str	r3, [r2, #16]
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	200006e0 	.word	0x200006e0
 8004e30:	40022000 	.word	0x40022000

08004e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e42:	e154      	b.n	80050ee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	2101      	movs	r1, #1
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e50:	4013      	ands	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8146 	beq.w	80050e8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d005      	beq.n	8004e74 <HAL_GPIO_Init+0x40>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d130      	bne.n	8004ed6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	2203      	movs	r2, #3
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	43db      	mvns	r3, r3
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004eaa:	2201      	movs	r2, #1
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	091b      	lsrs	r3, r3, #4
 8004ec0:	f003 0201 	and.w	r2, r3, #1
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d017      	beq.n	8004f12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	2203      	movs	r2, #3
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d123      	bne.n	8004f66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	08da      	lsrs	r2, r3, #3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3208      	adds	r2, #8
 8004f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	220f      	movs	r2, #15
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	08da      	lsrs	r2, r3, #3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3208      	adds	r2, #8
 8004f60:	6939      	ldr	r1, [r7, #16]
 8004f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	2203      	movs	r2, #3
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	43db      	mvns	r3, r3
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f003 0203 	and.w	r2, r3, #3
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 80a0 	beq.w	80050e8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fa8:	4b58      	ldr	r3, [pc, #352]	@ (800510c <HAL_GPIO_Init+0x2d8>)
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	4a57      	ldr	r2, [pc, #348]	@ (800510c <HAL_GPIO_Init+0x2d8>)
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	6193      	str	r3, [r2, #24]
 8004fb4:	4b55      	ldr	r3, [pc, #340]	@ (800510c <HAL_GPIO_Init+0x2d8>)
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004fc0:	4a53      	ldr	r2, [pc, #332]	@ (8005110 <HAL_GPIO_Init+0x2dc>)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	089b      	lsrs	r3, r3, #2
 8004fc6:	3302      	adds	r3, #2
 8004fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	220f      	movs	r2, #15
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004fea:	d019      	beq.n	8005020 <HAL_GPIO_Init+0x1ec>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a49      	ldr	r2, [pc, #292]	@ (8005114 <HAL_GPIO_Init+0x2e0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d013      	beq.n	800501c <HAL_GPIO_Init+0x1e8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a48      	ldr	r2, [pc, #288]	@ (8005118 <HAL_GPIO_Init+0x2e4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00d      	beq.n	8005018 <HAL_GPIO_Init+0x1e4>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a47      	ldr	r2, [pc, #284]	@ (800511c <HAL_GPIO_Init+0x2e8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d007      	beq.n	8005014 <HAL_GPIO_Init+0x1e0>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a46      	ldr	r2, [pc, #280]	@ (8005120 <HAL_GPIO_Init+0x2ec>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d101      	bne.n	8005010 <HAL_GPIO_Init+0x1dc>
 800500c:	2304      	movs	r3, #4
 800500e:	e008      	b.n	8005022 <HAL_GPIO_Init+0x1ee>
 8005010:	2305      	movs	r3, #5
 8005012:	e006      	b.n	8005022 <HAL_GPIO_Init+0x1ee>
 8005014:	2303      	movs	r3, #3
 8005016:	e004      	b.n	8005022 <HAL_GPIO_Init+0x1ee>
 8005018:	2302      	movs	r3, #2
 800501a:	e002      	b.n	8005022 <HAL_GPIO_Init+0x1ee>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <HAL_GPIO_Init+0x1ee>
 8005020:	2300      	movs	r3, #0
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	f002 0203 	and.w	r2, r2, #3
 8005028:	0092      	lsls	r2, r2, #2
 800502a:	4093      	lsls	r3, r2
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005032:	4937      	ldr	r1, [pc, #220]	@ (8005110 <HAL_GPIO_Init+0x2dc>)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	089b      	lsrs	r3, r3, #2
 8005038:	3302      	adds	r3, #2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005040:	4b38      	ldr	r3, [pc, #224]	@ (8005124 <HAL_GPIO_Init+0x2f0>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	43db      	mvns	r3, r3
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4013      	ands	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005064:	4a2f      	ldr	r2, [pc, #188]	@ (8005124 <HAL_GPIO_Init+0x2f0>)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800506a:	4b2e      	ldr	r3, [pc, #184]	@ (8005124 <HAL_GPIO_Init+0x2f0>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	43db      	mvns	r3, r3
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4013      	ands	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800508e:	4a25      	ldr	r2, [pc, #148]	@ (8005124 <HAL_GPIO_Init+0x2f0>)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005094:	4b23      	ldr	r3, [pc, #140]	@ (8005124 <HAL_GPIO_Init+0x2f0>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	43db      	mvns	r3, r3
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4013      	ands	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80050b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005124 <HAL_GPIO_Init+0x2f0>)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050be:	4b19      	ldr	r3, [pc, #100]	@ (8005124 <HAL_GPIO_Init+0x2f0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	43db      	mvns	r3, r3
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4013      	ands	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80050e2:	4a10      	ldr	r2, [pc, #64]	@ (8005124 <HAL_GPIO_Init+0x2f0>)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	3301      	adds	r3, #1
 80050ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f47f aea3 	bne.w	8004e44 <HAL_GPIO_Init+0x10>
  }
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	371c      	adds	r7, #28
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	40021000 	.word	0x40021000
 8005110:	40010000 	.word	0x40010000
 8005114:	48000400 	.word	0x48000400
 8005118:	48000800 	.word	0x48000800
 800511c:	48000c00 	.word	0x48000c00
 8005120:	48001000 	.word	0x48001000
 8005124:	40010400 	.word	0x40010400

08005128 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	887b      	ldrh	r3, [r7, #2]
 800513a:	4013      	ands	r3, r2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
 8005144:	e001      	b.n	800514a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005146:	2300      	movs	r3, #0
 8005148:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800514a:	7bfb      	ldrb	r3, [r7, #15]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005160:	4b0b      	ldr	r3, [pc, #44]	@ (8005190 <HAL_PWREx_EnableSDADC+0x38>)
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	4a0a      	ldr	r2, [pc, #40]	@ (8005190 <HAL_PWREx_EnableSDADC+0x38>)
 8005166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800516a:	61d3      	str	r3, [r2, #28]
 800516c:	4b08      	ldr	r3, [pc, #32]	@ (8005190 <HAL_PWREx_EnableSDADC+0x38>)
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8005178:	4b06      	ldr	r3, [pc, #24]	@ (8005194 <HAL_PWREx_EnableSDADC+0x3c>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	4905      	ldr	r1, [pc, #20]	@ (8005194 <HAL_PWREx_EnableSDADC+0x3c>)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4313      	orrs	r3, r2
 8005182:	600b      	str	r3, [r1, #0]
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	40021000 	.word	0x40021000
 8005194:	40007000 	.word	0x40007000

08005198 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80051a2:	4b49      	ldr	r3, [pc, #292]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a48      	ldr	r2, [pc, #288]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	6013      	str	r3, [r2, #0]

  /* Insure HSIRDY bit is set before writing default HSITRIM value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80051ae:	f7fd ff8d 	bl	80030cc <HAL_GetTick>
 80051b2:	60f8      	str	r0, [r7, #12]

  /* Wait till HSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_DeInit+0x30>
  {
    if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b6:	f7fd ff89 	bl	80030cc <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e07b      	b.n	80052c0 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80051c8:	4b3f      	ldr	r3, [pc, #252]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM default value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, RCC_CR_HSITRIM_4);
 80051d4:	4b3c      	ldr	r3, [pc, #240]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80051dc:	4a3a      	ldr	r2, [pc, #232]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 80051de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051e2:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2 | RCC_CFGR_MCO);
 80051e4:	4b38      	ldr	r3, [pc, #224]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	4937      	ldr	r1, [pc, #220]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 80051ea:	4b38      	ldr	r3, [pc, #224]	@ (80052cc <HAL_RCC_DeInit+0x134>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	604b      	str	r3, [r1, #4]

  /* Insure HSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80051f0:	f7fd ff6c 	bl	80030cc <HAL_GetTick>
 80051f4:	60f8      	str	r0, [r7, #12]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80051f6:	e00a      	b.n	800520e <HAL_RCC_DeInit+0x76>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f8:	f7fd ff68 	bl	80030cc <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005206:	4293      	cmp	r3, r2
 8005208:	d901      	bls.n	800520e <HAL_RCC_DeInit+0x76>
    {
      return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e058      	b.n	80052c0 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800520e:	4b2e      	ldr	r3, [pc, #184]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f003 030c 	and.w	r3, r3, #12
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1ee      	bne.n	80051f8 <HAL_RCC_DeInit+0x60>
    }
  }

  /* Update the SystemCoreClock global variable for HSI as system clock source */
  SystemCoreClock = HSI_VALUE;
 800521a:	4b2d      	ldr	r3, [pc, #180]	@ (80052d0 <HAL_RCC_DeInit+0x138>)
 800521c:	4a2d      	ldr	r2, [pc, #180]	@ (80052d4 <HAL_RCC_DeInit+0x13c>)
 800521e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8005220:	4b2d      	ldr	r3, [pc, #180]	@ (80052d8 <HAL_RCC_DeInit+0x140>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4618      	mov	r0, r3
 8005226:	f7fd ff0d 	bl	8003044 <HAL_InitTick>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <HAL_RCC_DeInit+0x9c>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e045      	b.n	80052c0 <HAL_RCC_DeInit+0x128>
  }

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 8005234:	4b24      	ldr	r3, [pc, #144]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a23      	ldr	r2, [pc, #140]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 800523a:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 800523e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005242:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005244:	4b20      	ldr	r3, [pc, #128]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1f      	ldr	r2, [pc, #124]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 800524a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800524e:	6013      	str	r3, [r2, #0]

  /* Insure PLLRDY is reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8005250:	f7fd ff3c 	bl	80030cc <HAL_GetTick>
 8005254:	60f8      	str	r0, [r7, #12]
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005256:	e008      	b.n	800526a <HAL_RCC_DeInit+0xd2>
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005258:	f7fd ff38 	bl	80030cc <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_DeInit+0xd2>
    {
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e02a      	b.n	80052c0 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800526a:	4b17      	ldr	r3, [pc, #92]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_DeInit+0xc0>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8005276:	4b14      	ldr	r3, [pc, #80]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 8005278:	2200      	movs	r2, #0
 800527a:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 800527c:	4b12      	ldr	r3, [pc, #72]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 800527e:	2200      	movs	r2, #0
 8005280:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 8005282:	4b11      	ldr	r3, [pc, #68]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8005288:	4b0f      	ldr	r3, [pc, #60]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	4a0e      	ldr	r2, [pc, #56]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 800528e:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8005292:	6093      	str	r3, [r2, #8]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8005294:	4b0c      	ldr	r3, [pc, #48]	@ (80052c8 <HAL_RCC_DeInit+0x130>)
 8005296:	2200      	movs	r2, #0
 8005298:	609a      	str	r2, [r3, #8]
 800529a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800529e:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	fa93 f3a3 	rbit	r3, r3
 80052a6:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052a8:	687b      	ldr	r3, [r7, #4]

  /* Reset all CSR flags */
  __HAL_RCC_CLEAR_RESET_FLAGS();
 80052aa:	fab3 f383 	clz	r3, r3
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	4b0a      	ldr	r3, [pc, #40]	@ (80052dc <HAL_RCC_DeInit+0x144>)
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	461a      	mov	r2, r3
 80052ba:	2301      	movs	r3, #1
 80052bc:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40021000 	.word	0x40021000
 80052cc:	f8ffc00c 	.word	0xf8ffc00c
 80052d0:	20000004 	.word	0x20000004
 80052d4:	007a1200 	.word	0x007a1200
 80052d8:	20000008 	.word	0x20000008
 80052dc:	10908120 	.word	0x10908120

080052e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052f0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d102      	bne.n	8005306 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	f000 bff4 	b.w	80062ee <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800530a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 816d 	beq.w	80055f6 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800531c:	4bb4      	ldr	r3, [pc, #720]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f003 030c 	and.w	r3, r3, #12
 8005324:	2b04      	cmp	r3, #4
 8005326:	d00c      	beq.n	8005342 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005328:	4bb1      	ldr	r3, [pc, #708]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f003 030c 	and.w	r3, r3, #12
 8005330:	2b08      	cmp	r3, #8
 8005332:	d157      	bne.n	80053e4 <HAL_RCC_OscConfig+0x104>
 8005334:	4bae      	ldr	r3, [pc, #696]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800533c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005340:	d150      	bne.n	80053e4 <HAL_RCC_OscConfig+0x104>
 8005342:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005346:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800534e:	fa93 f3a3 	rbit	r3, r3
 8005352:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
  return result;
 8005356:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800535a:	fab3 f383 	clz	r3, r3
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b3f      	cmp	r3, #63	@ 0x3f
 8005362:	d802      	bhi.n	800536a <HAL_RCC_OscConfig+0x8a>
 8005364:	4ba2      	ldr	r3, [pc, #648]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	e015      	b.n	8005396 <HAL_RCC_OscConfig+0xb6>
 800536a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800536e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005372:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8005376:	fa93 f3a3 	rbit	r3, r3
 800537a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800537e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005382:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8005386:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800538a:	fa93 f3a3 	rbit	r3, r3
 800538e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8005392:	4b97      	ldr	r3, [pc, #604]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 8005394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005396:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800539a:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800539e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80053a2:	fa92 f2a2 	rbit	r2, r2
 80053a6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80053aa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80053ae:	fab2 f282 	clz	r2, r2
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	f042 0220 	orr.w	r2, r2, #32
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	f002 021f 	and.w	r2, r2, #31
 80053be:	2101      	movs	r1, #1
 80053c0:	fa01 f202 	lsl.w	r2, r1, r2
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 8114 	beq.w	80055f4 <HAL_RCC_OscConfig+0x314>
 80053cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f040 810b 	bne.w	80055f4 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	f000 bf85 	b.w	80062ee <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80053e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053f4:	d106      	bne.n	8005404 <HAL_RCC_OscConfig+0x124>
 80053f6:	4b7e      	ldr	r3, [pc, #504]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a7d      	ldr	r2, [pc, #500]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 80053fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	e036      	b.n	8005472 <HAL_RCC_OscConfig+0x192>
 8005404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005408:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10c      	bne.n	800542e <HAL_RCC_OscConfig+0x14e>
 8005414:	4b76      	ldr	r3, [pc, #472]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a75      	ldr	r2, [pc, #468]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 800541a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	4b73      	ldr	r3, [pc, #460]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a72      	ldr	r2, [pc, #456]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 8005426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	e021      	b.n	8005472 <HAL_RCC_OscConfig+0x192>
 800542e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005432:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800543e:	d10c      	bne.n	800545a <HAL_RCC_OscConfig+0x17a>
 8005440:	4b6b      	ldr	r3, [pc, #428]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a6a      	ldr	r2, [pc, #424]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 8005446:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	4b68      	ldr	r3, [pc, #416]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a67      	ldr	r2, [pc, #412]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 8005452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	e00b      	b.n	8005472 <HAL_RCC_OscConfig+0x192>
 800545a:	4b65      	ldr	r3, [pc, #404]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a64      	ldr	r2, [pc, #400]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 8005460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	4b62      	ldr	r3, [pc, #392]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a61      	ldr	r2, [pc, #388]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 800546c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005470:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005472:	4b5f      	ldr	r3, [pc, #380]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 8005474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005476:	f023 020f 	bic.w	r2, r3, #15
 800547a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800547e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	495a      	ldr	r1, [pc, #360]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 8005488:	4313      	orrs	r3, r2
 800548a:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800548c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005490:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d054      	beq.n	8005546 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549c:	f7fd fe16 	bl	80030cc <HAL_GetTick>
 80054a0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054a4:	e00a      	b.n	80054bc <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a6:	f7fd fe11 	bl	80030cc <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b64      	cmp	r3, #100	@ 0x64
 80054b4:	d902      	bls.n	80054bc <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	f000 bf19 	b.w	80062ee <HAL_RCC_OscConfig+0x100e>
 80054bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80054c0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80054c8:	fa93 f3a3 	rbit	r3, r3
 80054cc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80054d0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d4:	fab3 f383 	clz	r3, r3
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b3f      	cmp	r3, #63	@ 0x3f
 80054dc:	d802      	bhi.n	80054e4 <HAL_RCC_OscConfig+0x204>
 80054de:	4b44      	ldr	r3, [pc, #272]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	e015      	b.n	8005510 <HAL_RCC_OscConfig+0x230>
 80054e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80054e8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80054f0:	fa93 f3a3 	rbit	r3, r3
 80054f4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80054f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80054fc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005500:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8005504:	fa93 f3a3 	rbit	r3, r3
 8005508:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800550c:	4b38      	ldr	r3, [pc, #224]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 800550e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005510:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005514:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005518:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800551c:	fa92 f2a2 	rbit	r2, r2
 8005520:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8005524:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8005528:	fab2 f282 	clz	r2, r2
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	f042 0220 	orr.w	r2, r2, #32
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	f002 021f 	and.w	r2, r2, #31
 8005538:	2101      	movs	r1, #1
 800553a:	fa01 f202 	lsl.w	r2, r1, r2
 800553e:	4013      	ands	r3, r2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0b0      	beq.n	80054a6 <HAL_RCC_OscConfig+0x1c6>
 8005544:	e057      	b.n	80055f6 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005546:	f7fd fdc1 	bl	80030cc <HAL_GetTick>
 800554a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800554e:	e00a      	b.n	8005566 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005550:	f7fd fdbc 	bl	80030cc <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b64      	cmp	r3, #100	@ 0x64
 800555e:	d902      	bls.n	8005566 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	f000 bec4 	b.w	80062ee <HAL_RCC_OscConfig+0x100e>
 8005566:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800556a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005572:	fa93 f3a3 	rbit	r3, r3
 8005576:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800557a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800557e:	fab3 f383 	clz	r3, r3
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b3f      	cmp	r3, #63	@ 0x3f
 8005586:	d802      	bhi.n	800558e <HAL_RCC_OscConfig+0x2ae>
 8005588:	4b19      	ldr	r3, [pc, #100]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	e015      	b.n	80055ba <HAL_RCC_OscConfig+0x2da>
 800558e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005592:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005596:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800559a:	fa93 f3a3 	rbit	r3, r3
 800559e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80055a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80055a6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80055aa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80055ae:	fa93 f3a3 	rbit	r3, r3
 80055b2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80055b6:	4b0e      	ldr	r3, [pc, #56]	@ (80055f0 <HAL_RCC_OscConfig+0x310>)
 80055b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80055be:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80055c2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80055c6:	fa92 f2a2 	rbit	r2, r2
 80055ca:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80055ce:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80055d2:	fab2 f282 	clz	r2, r2
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	f042 0220 	orr.w	r2, r2, #32
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	f002 021f 	and.w	r2, r2, #31
 80055e2:	2101      	movs	r1, #1
 80055e4:	fa01 f202 	lsl.w	r2, r1, r2
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1b0      	bne.n	8005550 <HAL_RCC_OscConfig+0x270>
 80055ee:	e002      	b.n	80055f6 <HAL_RCC_OscConfig+0x316>
 80055f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 816c 	beq.w	80058e4 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800560c:	4bcc      	ldr	r3, [pc, #816]	@ (8005940 <HAL_RCC_OscConfig+0x660>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f003 030c 	and.w	r3, r3, #12
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00b      	beq.n	8005630 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005618:	4bc9      	ldr	r3, [pc, #804]	@ (8005940 <HAL_RCC_OscConfig+0x660>)
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f003 030c 	and.w	r3, r3, #12
 8005620:	2b08      	cmp	r3, #8
 8005622:	d16d      	bne.n	8005700 <HAL_RCC_OscConfig+0x420>
 8005624:	4bc6      	ldr	r3, [pc, #792]	@ (8005940 <HAL_RCC_OscConfig+0x660>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d167      	bne.n	8005700 <HAL_RCC_OscConfig+0x420>
 8005630:	2302      	movs	r3, #2
 8005632:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005636:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800563a:	fa93 f3a3 	rbit	r3, r3
 800563e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8005642:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005646:	fab3 f383 	clz	r3, r3
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b3f      	cmp	r3, #63	@ 0x3f
 800564e:	d802      	bhi.n	8005656 <HAL_RCC_OscConfig+0x376>
 8005650:	4bbb      	ldr	r3, [pc, #748]	@ (8005940 <HAL_RCC_OscConfig+0x660>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	e013      	b.n	800567e <HAL_RCC_OscConfig+0x39e>
 8005656:	2302      	movs	r3, #2
 8005658:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8005660:	fa93 f3a3 	rbit	r3, r3
 8005664:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005668:	2302      	movs	r3, #2
 800566a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800566e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8005672:	fa93 f3a3 	rbit	r3, r3
 8005676:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800567a:	4bb1      	ldr	r3, [pc, #708]	@ (8005940 <HAL_RCC_OscConfig+0x660>)
 800567c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567e:	2202      	movs	r2, #2
 8005680:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8005684:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8005688:	fa92 f2a2 	rbit	r2, r2
 800568c:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8005690:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8005694:	fab2 f282 	clz	r2, r2
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	f042 0220 	orr.w	r2, r2, #32
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	f002 021f 	and.w	r2, r2, #31
 80056a4:	2101      	movs	r1, #1
 80056a6:	fa01 f202 	lsl.w	r2, r1, r2
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <HAL_RCC_OscConfig+0x3e6>
 80056b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d002      	beq.n	80056c6 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	f000 be14 	b.w	80062ee <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c6:	4b9e      	ldr	r3, [pc, #632]	@ (8005940 <HAL_RCC_OscConfig+0x660>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	21f8      	movs	r1, #248	@ 0xf8
 80056dc:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e0:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80056e4:	fa91 f1a1 	rbit	r1, r1
 80056e8:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80056ec:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80056f0:	fab1 f181 	clz	r1, r1
 80056f4:	b2c9      	uxtb	r1, r1
 80056f6:	408b      	lsls	r3, r1
 80056f8:	4991      	ldr	r1, [pc, #580]	@ (8005940 <HAL_RCC_OscConfig+0x660>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056fe:	e0f1      	b.n	80058e4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005704:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8083 	beq.w	8005818 <HAL_RCC_OscConfig+0x538>
 8005712:	2301      	movs	r3, #1
 8005714:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005718:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800571c:	fa93 f3a3 	rbit	r3, r3
 8005720:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8005724:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005728:	fab3 f383 	clz	r3, r3
 800572c:	b2db      	uxtb	r3, r3
 800572e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005732:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	461a      	mov	r2, r3
 800573a:	2301      	movs	r3, #1
 800573c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573e:	f7fd fcc5 	bl	80030cc <HAL_GetTick>
 8005742:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005746:	e00a      	b.n	800575e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005748:	f7fd fcc0 	bl	80030cc <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d902      	bls.n	800575e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	f000 bdc8 	b.w	80062ee <HAL_RCC_OscConfig+0x100e>
 800575e:	2302      	movs	r3, #2
 8005760:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005764:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8005768:	fa93 f3a3 	rbit	r3, r3
 800576c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8005770:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005774:	fab3 f383 	clz	r3, r3
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b3f      	cmp	r3, #63	@ 0x3f
 800577c:	d802      	bhi.n	8005784 <HAL_RCC_OscConfig+0x4a4>
 800577e:	4b70      	ldr	r3, [pc, #448]	@ (8005940 <HAL_RCC_OscConfig+0x660>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	e013      	b.n	80057ac <HAL_RCC_OscConfig+0x4cc>
 8005784:	2302      	movs	r3, #2
 8005786:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800578e:	fa93 f3a3 	rbit	r3, r3
 8005792:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8005796:	2302      	movs	r3, #2
 8005798:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800579c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80057a0:	fa93 f3a3 	rbit	r3, r3
 80057a4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80057a8:	4b65      	ldr	r3, [pc, #404]	@ (8005940 <HAL_RCC_OscConfig+0x660>)
 80057aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ac:	2202      	movs	r2, #2
 80057ae:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80057b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80057b6:	fa92 f2a2 	rbit	r2, r2
 80057ba:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80057be:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80057c2:	fab2 f282 	clz	r2, r2
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	f042 0220 	orr.w	r2, r2, #32
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	f002 021f 	and.w	r2, r2, #31
 80057d2:	2101      	movs	r1, #1
 80057d4:	fa01 f202 	lsl.w	r2, r1, r2
 80057d8:	4013      	ands	r3, r2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d0b4      	beq.n	8005748 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057de:	4b58      	ldr	r3, [pc, #352]	@ (8005940 <HAL_RCC_OscConfig+0x660>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	21f8      	movs	r1, #248	@ 0xf8
 80057f4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80057fc:	fa91 f1a1 	rbit	r1, r1
 8005800:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8005804:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8005808:	fab1 f181 	clz	r1, r1
 800580c:	b2c9      	uxtb	r1, r1
 800580e:	408b      	lsls	r3, r1
 8005810:	494b      	ldr	r1, [pc, #300]	@ (8005940 <HAL_RCC_OscConfig+0x660>)
 8005812:	4313      	orrs	r3, r2
 8005814:	600b      	str	r3, [r1, #0]
 8005816:	e065      	b.n	80058e4 <HAL_RCC_OscConfig+0x604>
 8005818:	2301      	movs	r3, #1
 800581a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005822:	fa93 f3a3 	rbit	r3, r3
 8005826:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800582a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800582e:	fab3 f383 	clz	r3, r3
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005838:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	461a      	mov	r2, r3
 8005840:	2300      	movs	r3, #0
 8005842:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7fd fc42 	bl	80030cc <HAL_GetTick>
 8005848:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800584c:	e00a      	b.n	8005864 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800584e:	f7fd fc3d 	bl	80030cc <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d902      	bls.n	8005864 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	f000 bd45 	b.w	80062ee <HAL_RCC_OscConfig+0x100e>
 8005864:	2302      	movs	r3, #2
 8005866:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800586e:	fa93 f3a3 	rbit	r3, r3
 8005872:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8005876:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800587a:	fab3 f383 	clz	r3, r3
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b3f      	cmp	r3, #63	@ 0x3f
 8005882:	d802      	bhi.n	800588a <HAL_RCC_OscConfig+0x5aa>
 8005884:	4b2e      	ldr	r3, [pc, #184]	@ (8005940 <HAL_RCC_OscConfig+0x660>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	e013      	b.n	80058b2 <HAL_RCC_OscConfig+0x5d2>
 800588a:	2302      	movs	r3, #2
 800588c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005890:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005894:	fa93 f3a3 	rbit	r3, r3
 8005898:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800589c:	2302      	movs	r3, #2
 800589e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80058a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80058a6:	fa93 f3a3 	rbit	r3, r3
 80058aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80058ae:	4b24      	ldr	r3, [pc, #144]	@ (8005940 <HAL_RCC_OscConfig+0x660>)
 80058b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b2:	2202      	movs	r2, #2
 80058b4:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80058b8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80058bc:	fa92 f2a2 	rbit	r2, r2
 80058c0:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80058c4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80058c8:	fab2 f282 	clz	r2, r2
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	f042 0220 	orr.w	r2, r2, #32
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	f002 021f 	and.w	r2, r2, #31
 80058d8:	2101      	movs	r1, #1
 80058da:	fa01 f202 	lsl.w	r2, r1, r2
 80058de:	4013      	ands	r3, r2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1b4      	bne.n	800584e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 8115 	beq.w	8005b24 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80058fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d07e      	beq.n	8005a08 <HAL_RCC_OscConfig+0x728>
 800590a:	2301      	movs	r3, #1
 800590c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005910:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005914:	fa93 f3a3 	rbit	r3, r3
 8005918:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800591c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005920:	fab3 f383 	clz	r3, r3
 8005924:	b2db      	uxtb	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	4b06      	ldr	r3, [pc, #24]	@ (8005944 <HAL_RCC_OscConfig+0x664>)
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	461a      	mov	r2, r3
 8005930:	2301      	movs	r3, #1
 8005932:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005934:	f7fd fbca 	bl	80030cc <HAL_GetTick>
 8005938:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800593c:	e00f      	b.n	800595e <HAL_RCC_OscConfig+0x67e>
 800593e:	bf00      	nop
 8005940:	40021000 	.word	0x40021000
 8005944:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005948:	f7fd fbc0 	bl	80030cc <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d902      	bls.n	800595e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	f000 bcc8 	b.w	80062ee <HAL_RCC_OscConfig+0x100e>
 800595e:	2302      	movs	r3, #2
 8005960:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005964:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005968:	fa93 f3a3 	rbit	r3, r3
 800596c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005974:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005978:	2202      	movs	r2, #2
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005980:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	fa93 f2a3 	rbit	r2, r3
 800598a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800598e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800599c:	2202      	movs	r2, #2
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	fa93 f2a3 	rbit	r2, r3
 80059ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80059b6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059b8:	4bb0      	ldr	r3, [pc, #704]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 80059ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80059c4:	2102      	movs	r1, #2
 80059c6:	6019      	str	r1, [r3, #0]
 80059c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	fa93 f1a3 	rbit	r1, r3
 80059d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80059de:	6019      	str	r1, [r3, #0]
  return result;
 80059e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80059e4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	fab3 f383 	clz	r3, r3
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	f003 031f 	and.w	r3, r3, #31
 80059fa:	2101      	movs	r1, #1
 80059fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005a00:	4013      	ands	r3, r2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0a0      	beq.n	8005948 <HAL_RCC_OscConfig+0x668>
 8005a06:	e08d      	b.n	8005b24 <HAL_RCC_OscConfig+0x844>
 8005a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a0c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005a10:	2201      	movs	r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a18:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	fa93 f2a3 	rbit	r2, r3
 8005a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a26:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005a2a:	601a      	str	r2, [r3, #0]
  return result;
 8005a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a30:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005a34:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a36:	fab3 f383 	clz	r3, r3
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	4b90      	ldr	r3, [pc, #576]	@ (8005c80 <HAL_RCC_OscConfig+0x9a0>)
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	461a      	mov	r2, r3
 8005a46:	2300      	movs	r3, #0
 8005a48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a4a:	f7fd fb3f 	bl	80030cc <HAL_GetTick>
 8005a4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a52:	e00a      	b.n	8005a6a <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a54:	f7fd fb3a 	bl	80030cc <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d902      	bls.n	8005a6a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	f000 bc42 	b.w	80062ee <HAL_RCC_OscConfig+0x100e>
 8005a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a6e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005a72:	2202      	movs	r2, #2
 8005a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a7a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	fa93 f2a3 	rbit	r2, r3
 8005a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a88:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a92:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005a96:	2202      	movs	r2, #2
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005a9e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	fa93 f2a3 	rbit	r2, r3
 8005aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005aac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ab6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005aba:	2202      	movs	r2, #2
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ac2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	fa93 f2a3 	rbit	r2, r3
 8005acc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ad0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005ad4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ad6:	4b69      	ldr	r3, [pc, #420]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005ad8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ade:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005ae2:	2102      	movs	r1, #2
 8005ae4:	6019      	str	r1, [r3, #0]
 8005ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005aea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	fa93 f1a3 	rbit	r1, r3
 8005af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005af8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005afc:	6019      	str	r1, [r3, #0]
  return result;
 8005afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b02:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	fab3 f383 	clz	r3, r3
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	f003 031f 	and.w	r3, r3, #31
 8005b18:	2101      	movs	r1, #1
 8005b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d197      	bne.n	8005a54 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 819e 	beq.w	8005e76 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b40:	4b4e      	ldr	r3, [pc, #312]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d116      	bne.n	8005b7a <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	4a4a      	ldr	r2, [pc, #296]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b56:	61d3      	str	r3, [r2, #28]
 8005b58:	4b48      	ldr	r3, [pc, #288]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8005b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b64:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005b6e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8005b72:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005b74:	2301      	movs	r3, #1
 8005b76:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b7a:	4b42      	ldr	r3, [pc, #264]	@ (8005c84 <HAL_RCC_OscConfig+0x9a4>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d11a      	bne.n	8005bbc <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b86:	4b3f      	ldr	r3, [pc, #252]	@ (8005c84 <HAL_RCC_OscConfig+0x9a4>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a3e      	ldr	r2, [pc, #248]	@ (8005c84 <HAL_RCC_OscConfig+0x9a4>)
 8005b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b92:	f7fd fa9b 	bl	80030cc <HAL_GetTick>
 8005b96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b9a:	e009      	b.n	8005bb0 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b9c:	f7fd fa96 	bl	80030cc <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b64      	cmp	r3, #100	@ 0x64
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e39e      	b.n	80062ee <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb0:	4b34      	ldr	r3, [pc, #208]	@ (8005c84 <HAL_RCC_OscConfig+0x9a4>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0ef      	beq.n	8005b9c <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d106      	bne.n	8005bda <HAL_RCC_OscConfig+0x8fa>
 8005bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	4a2a      	ldr	r2, [pc, #168]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	6213      	str	r3, [r2, #32]
 8005bd8:	e035      	b.n	8005c46 <HAL_RCC_OscConfig+0x966>
 8005bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005bde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10c      	bne.n	8005c04 <HAL_RCC_OscConfig+0x924>
 8005bea:	4b24      	ldr	r3, [pc, #144]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	4a23      	ldr	r2, [pc, #140]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005bf0:	f023 0301 	bic.w	r3, r3, #1
 8005bf4:	6213      	str	r3, [r2, #32]
 8005bf6:	4b21      	ldr	r3, [pc, #132]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	4a20      	ldr	r2, [pc, #128]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005bfc:	f023 0304 	bic.w	r3, r3, #4
 8005c00:	6213      	str	r3, [r2, #32]
 8005c02:	e020      	b.n	8005c46 <HAL_RCC_OscConfig+0x966>
 8005c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	2b05      	cmp	r3, #5
 8005c12:	d10c      	bne.n	8005c2e <HAL_RCC_OscConfig+0x94e>
 8005c14:	4b19      	ldr	r3, [pc, #100]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	4a18      	ldr	r2, [pc, #96]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005c1a:	f043 0304 	orr.w	r3, r3, #4
 8005c1e:	6213      	str	r3, [r2, #32]
 8005c20:	4b16      	ldr	r3, [pc, #88]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	4a15      	ldr	r2, [pc, #84]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	6213      	str	r3, [r2, #32]
 8005c2c:	e00b      	b.n	8005c46 <HAL_RCC_OscConfig+0x966>
 8005c2e:	4b13      	ldr	r3, [pc, #76]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	4a12      	ldr	r2, [pc, #72]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005c34:	f023 0301 	bic.w	r3, r3, #1
 8005c38:	6213      	str	r3, [r2, #32]
 8005c3a:	4b10      	ldr	r3, [pc, #64]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	4a0f      	ldr	r2, [pc, #60]	@ (8005c7c <HAL_RCC_OscConfig+0x99c>)
 8005c40:	f023 0304 	bic.w	r3, r3, #4
 8005c44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 8087 	beq.w	8005d66 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c58:	f7fd fa38 	bl	80030cc <HAL_GetTick>
 8005c5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c60:	e012      	b.n	8005c88 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c62:	f7fd fa33 	bl	80030cc <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d908      	bls.n	8005c88 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e339      	b.n	80062ee <HAL_RCC_OscConfig+0x100e>
 8005c7a:	bf00      	nop
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	10908120 	.word	0x10908120
 8005c84:	40007000 	.word	0x40007000
 8005c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c8c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005c90:	2202      	movs	r2, #2
 8005c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005c98:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	fa93 f2a3 	rbit	r2, r3
 8005ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ca6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cb0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cbc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	fa93 f2a3 	rbit	r2, r3
 8005cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cca:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005cce:	601a      	str	r2, [r3, #0]
  return result;
 8005cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cd4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005cd8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cda:	fab3 f383 	clz	r3, r3
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d102      	bne.n	8005cf0 <HAL_RCC_OscConfig+0xa10>
 8005cea:	4b98      	ldr	r3, [pc, #608]	@ (8005f4c <HAL_RCC_OscConfig+0xc6c>)
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	e013      	b.n	8005d18 <HAL_RCC_OscConfig+0xa38>
 8005cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005cf4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d00:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	fa93 f2a3 	rbit	r2, r3
 8005d0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d0e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	4b8d      	ldr	r3, [pc, #564]	@ (8005f4c <HAL_RCC_OscConfig+0xc6c>)
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d1c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005d20:	2102      	movs	r1, #2
 8005d22:	6011      	str	r1, [r2, #0]
 8005d24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d28:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	fa92 f1a2 	rbit	r1, r2
 8005d32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d36:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005d3a:	6011      	str	r1, [r2, #0]
  return result;
 8005d3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005d40:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005d44:	6812      	ldr	r2, [r2, #0]
 8005d46:	fab2 f282 	clz	r2, r2
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	f002 021f 	and.w	r2, r2, #31
 8005d56:	2101      	movs	r1, #1
 8005d58:	fa01 f202 	lsl.w	r2, r1, r2
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f43f af7f 	beq.w	8005c62 <HAL_RCC_OscConfig+0x982>
 8005d64:	e07d      	b.n	8005e62 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d66:	f7fd f9b1 	bl	80030cc <HAL_GetTick>
 8005d6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d6e:	e00b      	b.n	8005d88 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d70:	f7fd f9ac 	bl	80030cc <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e2b2      	b.n	80062ee <HAL_RCC_OscConfig+0x100e>
 8005d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d8c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005d90:	2202      	movs	r2, #2
 8005d92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005d98:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	fa93 f2a3 	rbit	r2, r3
 8005da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005da6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005db0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005db4:	2202      	movs	r2, #2
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dbc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	fa93 f2a3 	rbit	r2, r3
 8005dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dca:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005dce:	601a      	str	r2, [r3, #0]
  return result;
 8005dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005dd4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005dd8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dda:	fab3 f383 	clz	r3, r3
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d102      	bne.n	8005df0 <HAL_RCC_OscConfig+0xb10>
 8005dea:	4b58      	ldr	r3, [pc, #352]	@ (8005f4c <HAL_RCC_OscConfig+0xc6c>)
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	e013      	b.n	8005e18 <HAL_RCC_OscConfig+0xb38>
 8005df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005df4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005df8:	2202      	movs	r2, #2
 8005dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e00:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	fa93 f2a3 	rbit	r2, r3
 8005e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e0e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	4b4d      	ldr	r3, [pc, #308]	@ (8005f4c <HAL_RCC_OscConfig+0xc6c>)
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005e1c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005e20:	2102      	movs	r1, #2
 8005e22:	6011      	str	r1, [r2, #0]
 8005e24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005e28:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8005e2c:	6812      	ldr	r2, [r2, #0]
 8005e2e:	fa92 f1a2 	rbit	r1, r2
 8005e32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005e36:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005e3a:	6011      	str	r1, [r2, #0]
  return result;
 8005e3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005e40:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005e44:	6812      	ldr	r2, [r2, #0]
 8005e46:	fab2 f282 	clz	r2, r2
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	f002 021f 	and.w	r2, r2, #31
 8005e56:	2101      	movs	r1, #1
 8005e58:	fa01 f202 	lsl.w	r2, r1, r2
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d186      	bne.n	8005d70 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e62:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d105      	bne.n	8005e76 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e6a:	4b38      	ldr	r3, [pc, #224]	@ (8005f4c <HAL_RCC_OscConfig+0xc6c>)
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	4a37      	ldr	r2, [pc, #220]	@ (8005f4c <HAL_RCC_OscConfig+0xc6c>)
 8005e70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e74:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 8232 	beq.w	80062ec <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e88:	4b30      	ldr	r3, [pc, #192]	@ (8005f4c <HAL_RCC_OscConfig+0xc6c>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f003 030c 	and.w	r3, r3, #12
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	f000 8201 	beq.w	8006298 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005e9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	f040 8157 	bne.w	8006156 <HAL_RCC_OscConfig+0xe76>
 8005ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005eac:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005eb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005eba:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	fa93 f2a3 	rbit	r2, r3
 8005ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ec8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005ecc:	601a      	str	r2, [r3, #0]
  return result;
 8005ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ed2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005ed6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ed8:	fab3 f383 	clz	r3, r3
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005ee2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	2300      	movs	r3, #0
 8005eec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eee:	f7fd f8ed 	bl	80030cc <HAL_GetTick>
 8005ef2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ef6:	e009      	b.n	8005f0c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ef8:	f7fd f8e8 	bl	80030cc <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e1f0      	b.n	80062ee <HAL_RCC_OscConfig+0x100e>
 8005f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f10:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005f14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f1e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	fa93 f2a3 	rbit	r2, r3
 8005f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f2c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005f30:	601a      	str	r2, [r3, #0]
  return result;
 8005f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f36:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005f3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f3c:	fab3 f383 	clz	r3, r3
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b3f      	cmp	r3, #63	@ 0x3f
 8005f44:	d804      	bhi.n	8005f50 <HAL_RCC_OscConfig+0xc70>
 8005f46:	4b01      	ldr	r3, [pc, #4]	@ (8005f4c <HAL_RCC_OscConfig+0xc6c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	e029      	b.n	8005fa0 <HAL_RCC_OscConfig+0xcc0>
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f54:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005f58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005f5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f62:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	fa93 f2a3 	rbit	r2, r3
 8005f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f70:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f7a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005f7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f88:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	fa93 f2a3 	rbit	r2, r3
 8005f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005f96:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	4bc3      	ldr	r3, [pc, #780]	@ (80062ac <HAL_RCC_OscConfig+0xfcc>)
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005fa4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005fa8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005fac:	6011      	str	r1, [r2, #0]
 8005fae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005fb2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005fb6:	6812      	ldr	r2, [r2, #0]
 8005fb8:	fa92 f1a2 	rbit	r1, r2
 8005fbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005fc0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005fc4:	6011      	str	r1, [r2, #0]
  return result;
 8005fc6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005fca:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005fce:	6812      	ldr	r2, [r2, #0]
 8005fd0:	fab2 f282 	clz	r2, r2
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	f042 0220 	orr.w	r2, r2, #32
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	f002 021f 	and.w	r2, r2, #31
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d185      	bne.n	8005ef8 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fec:	4baf      	ldr	r3, [pc, #700]	@ (80062ac <HAL_RCC_OscConfig+0xfcc>)
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005ff8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006004:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	430b      	orrs	r3, r1
 800600e:	49a7      	ldr	r1, [pc, #668]	@ (80062ac <HAL_RCC_OscConfig+0xfcc>)
 8006010:	4313      	orrs	r3, r2
 8006012:	604b      	str	r3, [r1, #4]
 8006014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006018:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800601c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006026:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	fa93 f2a3 	rbit	r2, r3
 8006030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006034:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006038:	601a      	str	r2, [r3, #0]
  return result;
 800603a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800603e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8006042:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006044:	fab3 f383 	clz	r3, r3
 8006048:	b2db      	uxtb	r3, r3
 800604a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800604e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	461a      	mov	r2, r3
 8006056:	2301      	movs	r3, #1
 8006058:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800605a:	f7fd f837 	bl	80030cc <HAL_GetTick>
 800605e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006062:	e009      	b.n	8006078 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006064:	f7fd f832 	bl	80030cc <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d901      	bls.n	8006078 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e13a      	b.n	80062ee <HAL_RCC_OscConfig+0x100e>
 8006078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800607c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006080:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800608a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	fa93 f2a3 	rbit	r2, r3
 8006094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006098:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800609c:	601a      	str	r2, [r3, #0]
  return result;
 800609e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060a2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80060a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060a8:	fab3 f383 	clz	r3, r3
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80060b0:	d802      	bhi.n	80060b8 <HAL_RCC_OscConfig+0xdd8>
 80060b2:	4b7e      	ldr	r3, [pc, #504]	@ (80062ac <HAL_RCC_OscConfig+0xfcc>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	e027      	b.n	8006108 <HAL_RCC_OscConfig+0xe28>
 80060b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060bc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80060c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80060c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060ca:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	fa93 f2a3 	rbit	r2, r3
 80060d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060d8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060e2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80060e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060f0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	fa93 f2a3 	rbit	r2, r3
 80060fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80060fe:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	4b69      	ldr	r3, [pc, #420]	@ (80062ac <HAL_RCC_OscConfig+0xfcc>)
 8006106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006108:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800610c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8006110:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006114:	6011      	str	r1, [r2, #0]
 8006116:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800611a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800611e:	6812      	ldr	r2, [r2, #0]
 8006120:	fa92 f1a2 	rbit	r1, r2
 8006124:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006128:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800612c:	6011      	str	r1, [r2, #0]
  return result;
 800612e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006132:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8006136:	6812      	ldr	r2, [r2, #0]
 8006138:	fab2 f282 	clz	r2, r2
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	f042 0220 	orr.w	r2, r2, #32
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	f002 021f 	and.w	r2, r2, #31
 8006148:	2101      	movs	r1, #1
 800614a:	fa01 f202 	lsl.w	r2, r1, r2
 800614e:	4013      	ands	r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d087      	beq.n	8006064 <HAL_RCC_OscConfig+0xd84>
 8006154:	e0ca      	b.n	80062ec <HAL_RCC_OscConfig+0x100c>
 8006156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800615a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800615e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006168:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	fa93 f2a3 	rbit	r2, r3
 8006172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006176:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800617a:	601a      	str	r2, [r3, #0]
  return result;
 800617c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006180:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8006184:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006186:	fab3 f383 	clz	r3, r3
 800618a:	b2db      	uxtb	r3, r3
 800618c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006190:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	461a      	mov	r2, r3
 8006198:	2300      	movs	r3, #0
 800619a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619c:	f7fc ff96 	bl	80030cc <HAL_GetTick>
 80061a0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061a4:	e009      	b.n	80061ba <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a6:	f7fc ff91 	bl	80030cc <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e099      	b.n	80062ee <HAL_RCC_OscConfig+0x100e>
 80061ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061be:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80061c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80061c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061cc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	fa93 f2a3 	rbit	r2, r3
 80061d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061da:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80061de:	601a      	str	r2, [r3, #0]
  return result;
 80061e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061e4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80061e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061ea:	fab3 f383 	clz	r3, r3
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80061f2:	d802      	bhi.n	80061fa <HAL_RCC_OscConfig+0xf1a>
 80061f4:	4b2d      	ldr	r3, [pc, #180]	@ (80062ac <HAL_RCC_OscConfig+0xfcc>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	e027      	b.n	800624a <HAL_RCC_OscConfig+0xf6a>
 80061fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80061fe:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006202:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006206:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800620c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	fa93 f2a3 	rbit	r2, r3
 8006216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800621a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006224:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006228:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006232:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	fa93 f2a3 	rbit	r2, r3
 800623c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8006240:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	4b19      	ldr	r3, [pc, #100]	@ (80062ac <HAL_RCC_OscConfig+0xfcc>)
 8006248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800624e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006252:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8006256:	6011      	str	r1, [r2, #0]
 8006258:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800625c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8006260:	6812      	ldr	r2, [r2, #0]
 8006262:	fa92 f1a2 	rbit	r1, r2
 8006266:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800626a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800626e:	6011      	str	r1, [r2, #0]
  return result;
 8006270:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8006274:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8006278:	6812      	ldr	r2, [r2, #0]
 800627a:	fab2 f282 	clz	r2, r2
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	f042 0220 	orr.w	r2, r2, #32
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	f002 021f 	and.w	r2, r2, #31
 800628a:	2101      	movs	r1, #1
 800628c:	fa01 f202 	lsl.w	r2, r1, r2
 8006290:	4013      	ands	r3, r2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d187      	bne.n	80061a6 <HAL_RCC_OscConfig+0xec6>
 8006296:	e029      	b.n	80062ec <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800629c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d103      	bne.n	80062b0 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e020      	b.n	80062ee <HAL_RCC_OscConfig+0x100e>
 80062ac:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80062b0:	4b11      	ldr	r3, [pc, #68]	@ (80062f8 <HAL_RCC_OscConfig+0x1018>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80062b8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80062bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80062c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d10b      	bne.n	80062e8 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80062d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80062d4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80062d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80062dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d001      	beq.n	80062ec <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e000      	b.n	80062ee <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	40021000 	.word	0x40021000

080062fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b09e      	sub	sp, #120	@ 0x78
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e154      	b.n	80065be <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006314:	4b89      	ldr	r3, [pc, #548]	@ (800653c <HAL_RCC_ClockConfig+0x240>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	429a      	cmp	r2, r3
 8006320:	d910      	bls.n	8006344 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006322:	4b86      	ldr	r3, [pc, #536]	@ (800653c <HAL_RCC_ClockConfig+0x240>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f023 0207 	bic.w	r2, r3, #7
 800632a:	4984      	ldr	r1, [pc, #528]	@ (800653c <HAL_RCC_ClockConfig+0x240>)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	4313      	orrs	r3, r2
 8006330:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006332:	4b82      	ldr	r3, [pc, #520]	@ (800653c <HAL_RCC_ClockConfig+0x240>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d001      	beq.n	8006344 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e13c      	b.n	80065be <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d008      	beq.n	8006362 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006350:	4b7b      	ldr	r3, [pc, #492]	@ (8006540 <HAL_RCC_ClockConfig+0x244>)
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	4978      	ldr	r1, [pc, #480]	@ (8006540 <HAL_RCC_ClockConfig+0x244>)
 800635e:	4313      	orrs	r3, r2
 8006360:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 80cd 	beq.w	800650a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d137      	bne.n	80063e8 <HAL_RCC_ClockConfig+0xec>
 8006378:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800637c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800637e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006380:	fa93 f3a3 	rbit	r3, r3
 8006384:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006386:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006388:	fab3 f383 	clz	r3, r3
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006390:	d802      	bhi.n	8006398 <HAL_RCC_ClockConfig+0x9c>
 8006392:	4b6b      	ldr	r3, [pc, #428]	@ (8006540 <HAL_RCC_ClockConfig+0x244>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	e00f      	b.n	80063b8 <HAL_RCC_ClockConfig+0xbc>
 8006398:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800639c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800639e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063a0:	fa93 f3a3 	rbit	r3, r3
 80063a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80063a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80063aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80063ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063ae:	fa93 f3a3 	rbit	r3, r3
 80063b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063b4:	4b62      	ldr	r3, [pc, #392]	@ (8006540 <HAL_RCC_ClockConfig+0x244>)
 80063b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80063bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80063be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063c0:	fa92 f2a2 	rbit	r2, r2
 80063c4:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80063c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80063c8:	fab2 f282 	clz	r2, r2
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	f042 0220 	orr.w	r2, r2, #32
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	f002 021f 	and.w	r2, r2, #31
 80063d8:	2101      	movs	r1, #1
 80063da:	fa01 f202 	lsl.w	r2, r1, r2
 80063de:	4013      	ands	r3, r2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d171      	bne.n	80064c8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e0ea      	b.n	80065be <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d137      	bne.n	8006460 <HAL_RCC_ClockConfig+0x164>
 80063f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063f4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063f8:	fa93 f3a3 	rbit	r3, r3
 80063fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80063fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006400:	fab3 f383 	clz	r3, r3
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b3f      	cmp	r3, #63	@ 0x3f
 8006408:	d802      	bhi.n	8006410 <HAL_RCC_ClockConfig+0x114>
 800640a:	4b4d      	ldr	r3, [pc, #308]	@ (8006540 <HAL_RCC_ClockConfig+0x244>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	e00f      	b.n	8006430 <HAL_RCC_ClockConfig+0x134>
 8006410:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006414:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006418:	fa93 f3a3 	rbit	r3, r3
 800641c:	647b      	str	r3, [r7, #68]	@ 0x44
 800641e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006422:	643b      	str	r3, [r7, #64]	@ 0x40
 8006424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006426:	fa93 f3a3 	rbit	r3, r3
 800642a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800642c:	4b44      	ldr	r3, [pc, #272]	@ (8006540 <HAL_RCC_ClockConfig+0x244>)
 800642e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006430:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006434:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006436:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006438:	fa92 f2a2 	rbit	r2, r2
 800643c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800643e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006440:	fab2 f282 	clz	r2, r2
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	f042 0220 	orr.w	r2, r2, #32
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	f002 021f 	and.w	r2, r2, #31
 8006450:	2101      	movs	r1, #1
 8006452:	fa01 f202 	lsl.w	r2, r1, r2
 8006456:	4013      	ands	r3, r2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d135      	bne.n	80064c8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e0ae      	b.n	80065be <HAL_RCC_ClockConfig+0x2c2>
 8006460:	2302      	movs	r3, #2
 8006462:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006466:	fa93 f3a3 	rbit	r3, r3
 800646a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800646c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800646e:	fab3 f383 	clz	r3, r3
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b3f      	cmp	r3, #63	@ 0x3f
 8006476:	d802      	bhi.n	800647e <HAL_RCC_ClockConfig+0x182>
 8006478:	4b31      	ldr	r3, [pc, #196]	@ (8006540 <HAL_RCC_ClockConfig+0x244>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	e00d      	b.n	800649a <HAL_RCC_ClockConfig+0x19e>
 800647e:	2302      	movs	r3, #2
 8006480:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006484:	fa93 f3a3 	rbit	r3, r3
 8006488:	627b      	str	r3, [r7, #36]	@ 0x24
 800648a:	2302      	movs	r3, #2
 800648c:	623b      	str	r3, [r7, #32]
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	fa93 f3a3 	rbit	r3, r3
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	4b2a      	ldr	r3, [pc, #168]	@ (8006540 <HAL_RCC_ClockConfig+0x244>)
 8006498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649a:	2202      	movs	r2, #2
 800649c:	61ba      	str	r2, [r7, #24]
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	fa92 f2a2 	rbit	r2, r2
 80064a4:	617a      	str	r2, [r7, #20]
  return result;
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	fab2 f282 	clz	r2, r2
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	f042 0220 	orr.w	r2, r2, #32
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	f002 021f 	and.w	r2, r2, #31
 80064b8:	2101      	movs	r1, #1
 80064ba:	fa01 f202 	lsl.w	r2, r1, r2
 80064be:	4013      	ands	r3, r2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e07a      	b.n	80065be <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006540 <HAL_RCC_ClockConfig+0x244>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f023 0203 	bic.w	r2, r3, #3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	491a      	ldr	r1, [pc, #104]	@ (8006540 <HAL_RCC_ClockConfig+0x244>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064da:	f7fc fdf7 	bl	80030cc <HAL_GetTick>
 80064de:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e0:	e00a      	b.n	80064f8 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064e2:	f7fc fdf3 	bl	80030cc <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e062      	b.n	80065be <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f8:	4b11      	ldr	r3, [pc, #68]	@ (8006540 <HAL_RCC_ClockConfig+0x244>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f003 020c 	and.w	r2, r3, #12
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	429a      	cmp	r2, r3
 8006508:	d1eb      	bne.n	80064e2 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800650a:	4b0c      	ldr	r3, [pc, #48]	@ (800653c <HAL_RCC_ClockConfig+0x240>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0307 	and.w	r3, r3, #7
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d215      	bcs.n	8006544 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006518:	4b08      	ldr	r3, [pc, #32]	@ (800653c <HAL_RCC_ClockConfig+0x240>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f023 0207 	bic.w	r2, r3, #7
 8006520:	4906      	ldr	r1, [pc, #24]	@ (800653c <HAL_RCC_ClockConfig+0x240>)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	4313      	orrs	r3, r2
 8006526:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006528:	4b04      	ldr	r3, [pc, #16]	@ (800653c <HAL_RCC_ClockConfig+0x240>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d006      	beq.n	8006544 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e041      	b.n	80065be <HAL_RCC_ClockConfig+0x2c2>
 800653a:	bf00      	nop
 800653c:	40022000 	.word	0x40022000
 8006540:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	d008      	beq.n	8006562 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006550:	4b1d      	ldr	r3, [pc, #116]	@ (80065c8 <HAL_RCC_ClockConfig+0x2cc>)
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	491a      	ldr	r1, [pc, #104]	@ (80065c8 <HAL_RCC_ClockConfig+0x2cc>)
 800655e:	4313      	orrs	r3, r2
 8006560:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0308 	and.w	r3, r3, #8
 800656a:	2b00      	cmp	r3, #0
 800656c:	d009      	beq.n	8006582 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800656e:	4b16      	ldr	r3, [pc, #88]	@ (80065c8 <HAL_RCC_ClockConfig+0x2cc>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	4912      	ldr	r1, [pc, #72]	@ (80065c8 <HAL_RCC_ClockConfig+0x2cc>)
 800657e:	4313      	orrs	r3, r2
 8006580:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006582:	f000 f829 	bl	80065d8 <HAL_RCC_GetSysClockFreq>
 8006586:	4601      	mov	r1, r0
 8006588:	4b0f      	ldr	r3, [pc, #60]	@ (80065c8 <HAL_RCC_ClockConfig+0x2cc>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006590:	22f0      	movs	r2, #240	@ 0xf0
 8006592:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	fa92 f2a2 	rbit	r2, r2
 800659a:	60fa      	str	r2, [r7, #12]
  return result;
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	fab2 f282 	clz	r2, r2
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	40d3      	lsrs	r3, r2
 80065a6:	4a09      	ldr	r2, [pc, #36]	@ (80065cc <HAL_RCC_ClockConfig+0x2d0>)
 80065a8:	5cd3      	ldrb	r3, [r2, r3]
 80065aa:	fa21 f303 	lsr.w	r3, r1, r3
 80065ae:	4a08      	ldr	r2, [pc, #32]	@ (80065d0 <HAL_RCC_ClockConfig+0x2d4>)
 80065b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80065b2:	4b08      	ldr	r3, [pc, #32]	@ (80065d4 <HAL_RCC_ClockConfig+0x2d8>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fc fd44 	bl	8003044 <HAL_InitTick>
  
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3778      	adds	r7, #120	@ 0x78
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	40021000 	.word	0x40021000
 80065cc:	08008f24 	.word	0x08008f24
 80065d0:	20000004 	.word	0x20000004
 80065d4:	20000008 	.word	0x20000008

080065d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	2300      	movs	r3, #0
 80065e4:	60bb      	str	r3, [r7, #8]
 80065e6:	2300      	movs	r3, #0
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	2300      	movs	r3, #0
 80065ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80065f2:	4b1e      	ldr	r3, [pc, #120]	@ (800666c <HAL_RCC_GetSysClockFreq+0x94>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f003 030c 	and.w	r3, r3, #12
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d002      	beq.n	8006608 <HAL_RCC_GetSysClockFreq+0x30>
 8006602:	2b08      	cmp	r3, #8
 8006604:	d003      	beq.n	800660e <HAL_RCC_GetSysClockFreq+0x36>
 8006606:	e026      	b.n	8006656 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006608:	4b19      	ldr	r3, [pc, #100]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x98>)
 800660a:	613b      	str	r3, [r7, #16]
      break;
 800660c:	e026      	b.n	800665c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	0c9b      	lsrs	r3, r3, #18
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	4a17      	ldr	r2, [pc, #92]	@ (8006674 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006618:	5cd3      	ldrb	r3, [r2, r3]
 800661a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800661c:	4b13      	ldr	r3, [pc, #76]	@ (800666c <HAL_RCC_GetSysClockFreq+0x94>)
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	4a14      	ldr	r2, [pc, #80]	@ (8006678 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006626:	5cd3      	ldrb	r3, [r2, r3]
 8006628:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d008      	beq.n	8006646 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006634:	4a0e      	ldr	r2, [pc, #56]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x98>)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	fbb2 f2f3 	udiv	r2, r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	fb02 f303 	mul.w	r3, r2, r3
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	e004      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a0c      	ldr	r2, [pc, #48]	@ (800667c <HAL_RCC_GetSysClockFreq+0xa4>)
 800664a:	fb02 f303 	mul.w	r3, r2, r3
 800664e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	613b      	str	r3, [r7, #16]
      break;
 8006654:	e002      	b.n	800665c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006656:	4b0a      	ldr	r3, [pc, #40]	@ (8006680 <HAL_RCC_GetSysClockFreq+0xa8>)
 8006658:	613b      	str	r3, [r7, #16]
      break;
 800665a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800665c:	693b      	ldr	r3, [r7, #16]
}
 800665e:	4618      	mov	r0, r3
 8006660:	371c      	adds	r7, #28
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	40021000 	.word	0x40021000
 8006670:	016e3600 	.word	0x016e3600
 8006674:	08008f3c 	.word	0x08008f3c
 8006678:	08008f4c 	.word	0x08008f4c
 800667c:	003d0900 	.word	0x003d0900
 8006680:	007a1200 	.word	0x007a1200

08006684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006684:	b480      	push	{r7}
 8006686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006688:	4b03      	ldr	r3, [pc, #12]	@ (8006698 <HAL_RCC_GetHCLKFreq+0x14>)
 800668a:	681b      	ldr	r3, [r3, #0]
}
 800668c:	4618      	mov	r0, r3
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	20000004 	.word	0x20000004

0800669c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80066a2:	f7ff ffef 	bl	8006684 <HAL_RCC_GetHCLKFreq>
 80066a6:	4601      	mov	r1, r0
 80066a8:	4b0b      	ldr	r3, [pc, #44]	@ (80066d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066b0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80066b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	fa92 f2a2 	rbit	r2, r2
 80066bc:	603a      	str	r2, [r7, #0]
  return result;
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	fab2 f282 	clz	r2, r2
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	40d3      	lsrs	r3, r2
 80066c8:	4a04      	ldr	r2, [pc, #16]	@ (80066dc <HAL_RCC_GetPCLK1Freq+0x40>)
 80066ca:	5cd3      	ldrb	r3, [r2, r3]
 80066cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	40021000 	.word	0x40021000
 80066dc:	08008f34 	.word	0x08008f34

080066e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80066e6:	f7ff ffcd 	bl	8006684 <HAL_RCC_GetHCLKFreq>
 80066ea:	4601      	mov	r1, r0
 80066ec:	4b0b      	ldr	r3, [pc, #44]	@ (800671c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80066f4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80066f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	fa92 f2a2 	rbit	r2, r2
 8006700:	603a      	str	r2, [r7, #0]
  return result;
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	fab2 f282 	clz	r2, r2
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	40d3      	lsrs	r3, r2
 800670c:	4a04      	ldr	r2, [pc, #16]	@ (8006720 <HAL_RCC_GetPCLK2Freq+0x40>)
 800670e:	5cd3      	ldrb	r3, [r2, r3]
 8006710:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	40021000 	.word	0x40021000
 8006720:	08008f34 	.word	0x08008f34

08006724 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b092      	sub	sp, #72	@ 0x48
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006734:	2300      	movs	r3, #0
 8006736:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 80d2 	beq.w	80068ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006748:	4b4d      	ldr	r3, [pc, #308]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10e      	bne.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006754:	4b4a      	ldr	r3, [pc, #296]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	4a49      	ldr	r2, [pc, #292]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800675a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800675e:	61d3      	str	r3, [r2, #28]
 8006760:	4b47      	ldr	r3, [pc, #284]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006768:	60bb      	str	r3, [r7, #8]
 800676a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800676c:	2301      	movs	r3, #1
 800676e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006772:	4b44      	ldr	r3, [pc, #272]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800677a:	2b00      	cmp	r3, #0
 800677c:	d118      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800677e:	4b41      	ldr	r3, [pc, #260]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a40      	ldr	r2, [pc, #256]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006788:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800678a:	f7fc fc9f 	bl	80030cc <HAL_GetTick>
 800678e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006790:	e008      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006792:	f7fc fc9b 	bl	80030cc <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b64      	cmp	r3, #100	@ 0x64
 800679e:	d901      	bls.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e12b      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a4:	4b37      	ldr	r3, [pc, #220]	@ (8006884 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0f0      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067b0:	4b33      	ldr	r3, [pc, #204]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 8082 	beq.w	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d07a      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80067de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e2:	fa93 f3a3 	rbit	r3, r3
 80067e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80067e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067ea:	fab3 f383 	clz	r3, r3
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	461a      	mov	r2, r3
 80067f2:	4b25      	ldr	r3, [pc, #148]	@ (8006888 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	461a      	mov	r2, r3
 80067fa:	2301      	movs	r3, #1
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006802:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006806:	fa93 f3a3 	rbit	r3, r3
 800680a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800680c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800680e:	fab3 f383 	clz	r3, r3
 8006812:	b2db      	uxtb	r3, r3
 8006814:	461a      	mov	r2, r3
 8006816:	4b1c      	ldr	r3, [pc, #112]	@ (8006888 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006818:	4413      	add	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	461a      	mov	r2, r3
 800681e:	2300      	movs	r3, #0
 8006820:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006822:	4a17      	ldr	r2, [pc, #92]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8006824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006826:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d049      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006832:	f7fc fc4b 	bl	80030cc <HAL_GetTick>
 8006836:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006838:	e00a      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800683a:	f7fc fc47 	bl	80030cc <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006848:	4293      	cmp	r3, r2
 800684a:	d901      	bls.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e0d5      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006850:	2302      	movs	r3, #2
 8006852:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006856:	fa93 f3a3 	rbit	r3, r3
 800685a:	627b      	str	r3, [r7, #36]	@ 0x24
 800685c:	2302      	movs	r3, #2
 800685e:	623b      	str	r3, [r7, #32]
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	fa93 f3a3 	rbit	r3, r3
 8006866:	61fb      	str	r3, [r7, #28]
  return result;
 8006868:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800686a:	fab3 f383 	clz	r3, r3
 800686e:	b2db      	uxtb	r3, r3
 8006870:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d108      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800687a:	4b01      	ldr	r3, [pc, #4]	@ (8006880 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	e00d      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8006880:	40021000 	.word	0x40021000
 8006884:	40007000 	.word	0x40007000
 8006888:	10908100 	.word	0x10908100
 800688c:	2302      	movs	r3, #2
 800688e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	fa93 f3a3 	rbit	r3, r3
 8006896:	617b      	str	r3, [r7, #20]
 8006898:	4b5a      	ldr	r3, [pc, #360]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800689a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689c:	2202      	movs	r2, #2
 800689e:	613a      	str	r2, [r7, #16]
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	fa92 f2a2 	rbit	r2, r2
 80068a6:	60fa      	str	r2, [r7, #12]
  return result;
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	fab2 f282 	clz	r2, r2
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	f002 021f 	and.w	r2, r2, #31
 80068ba:	2101      	movs	r1, #1
 80068bc:	fa01 f202 	lsl.w	r2, r1, r2
 80068c0:	4013      	ands	r3, r2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0b9      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80068c6:	4b4f      	ldr	r3, [pc, #316]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	494c      	ldr	r1, [pc, #304]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80068d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d105      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068e0:	4b48      	ldr	r3, [pc, #288]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	4a47      	ldr	r2, [pc, #284]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80068e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d008      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068f8:	4b42      	ldr	r3, [pc, #264]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80068fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068fc:	f023 0203 	bic.w	r2, r3, #3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	493f      	ldr	r1, [pc, #252]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006906:	4313      	orrs	r3, r2
 8006908:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d008      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006916:	4b3b      	ldr	r3, [pc, #236]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800691a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	4938      	ldr	r1, [pc, #224]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006924:	4313      	orrs	r3, r2
 8006926:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	2b00      	cmp	r3, #0
 8006932:	d008      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006934:	4b33      	ldr	r3, [pc, #204]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006938:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	4930      	ldr	r1, [pc, #192]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006942:	4313      	orrs	r3, r2
 8006944:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b00      	cmp	r3, #0
 8006950:	d008      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006952:	4b2c      	ldr	r3, [pc, #176]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006956:	f023 0210 	bic.w	r2, r3, #16
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	4929      	ldr	r1, [pc, #164]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006960:	4313      	orrs	r3, r2
 8006962:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d008      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006970:	4b24      	ldr	r3, [pc, #144]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800697c:	4921      	ldr	r1, [pc, #132]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800697e:	4313      	orrs	r3, r2
 8006980:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d008      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800698e:	4b1d      	ldr	r3, [pc, #116]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006992:	f023 0220 	bic.w	r2, r3, #32
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	491a      	ldr	r1, [pc, #104]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800699c:	4313      	orrs	r3, r2
 800699e:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d008      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80069ac:	4b15      	ldr	r3, [pc, #84]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	4912      	ldr	r1, [pc, #72]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d008      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 80069ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	490b      	ldr	r1, [pc, #44]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d008      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069e8:	4b06      	ldr	r3, [pc, #24]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80069ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ec:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f4:	4903      	ldr	r1, [pc, #12]	@ (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3748      	adds	r7, #72	@ 0x48
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	40021000 	.word	0x40021000

08006a08 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check SDADC handle */
  if(hsdadc == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e07f      	b.n	8006b1a <HAL_SDADC_Init+0x112>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));

  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	629a      	str	r2, [r3, #40]	@ 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006a44:	631a      	str	r2, [r3, #48]	@ 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	639a      	str	r2, [r3, #56]	@ 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7fb ffdf 	bl	8002a1c <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8006a6c:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6819      	ldr	r1, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8006a94:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6859      	ldr	r1, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8006aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8006b24 <HAL_SDADC_Init+0x11c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d00f      	beq.n	8006ad8 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8006ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8006b24 <HAL_SDADC_Init+0x11c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a19      	ldr	r2, [pc, #100]	@ (8006b24 <HAL_SDADC_Init+0x11c>)
 8006abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ac2:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8006ac4:	4b17      	ldr	r3, [pc, #92]	@ (8006b24 <HAL_SDADC_Init+0x11c>)
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	4915      	ldr	r1, [pc, #84]	@ (8006b24 <HAL_SDADC_Init+0x11c>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	600b      	str	r3, [r1, #0]

    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 8006ad2:	2002      	movs	r0, #2
 8006ad4:	f7fc fb06 	bl	80030e4 <HAL_Delay>
  }

  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  tickstart = HAL_GetTick();
 8006ae8:	f7fc faf0 	bl	80030cc <HAL_GetTick>
 8006aec:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8006aee:	e008      	b.n	8006b02 <HAL_SDADC_Init+0xfa>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8006af0:	f7fc faec 	bl	80030cc <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2bc8      	cmp	r3, #200	@ 0xc8
 8006afc:	d901      	bls.n	8006b02 <HAL_SDADC_Init+0xfa>
    {
      return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e00b      	b.n	8006b1a <HAL_SDADC_Init+0x112>
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1ef      	bne.n	8006af0 <HAL_SDADC_Init+0xe8>
    }
  }

  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return HAL status */
  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	40016000 	.word	0x40016000

08006b28 <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d002      	beq.n	8006b48 <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	75fb      	strb	r3, [r7, #23]
 8006b46:	e025      	b.n	8006b94 <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 fa7d 	bl	8007048 <SDADC_EnterInitMode>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d006      	beq.n	8006b62 <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	22ff      	movs	r2, #255	@ 0xff
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	75fb      	strb	r3, [r7, #23]
 8006b60:	e018      	b.n	8006b94 <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8006b6c:	4413      	add	r3, r2
 8006b6e:	3320      	adds	r3, #32
 8006b70:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006b7a:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 8006b80:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006b88:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 8006b8a:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8006b8c:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 fa7d 	bl	800708e <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8006b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d002      	beq.n	8006bc0 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	75fb      	strb	r3, [r7, #23]
 8006bbe:	e037      	b.n	8006c30 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 fa41 	bl	8007048 <SDADC_EnterInitMode>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d006      	beq.n	8006bda <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	22ff      	movs	r2, #255	@ 0xff
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	75fb      	strb	r3, [r7, #23]
 8006bd8:	e02a      	b.n	8006c30 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	4a17      	ldr	r2, [pc, #92]	@ (8006c3c <HAL_SDADC_AssociateChannelConfig+0x9c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d01f      	beq.n	8006c22 <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	0c1b      	lsrs	r3, r3, #16
 8006be6:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	f003 031f 	and.w	r3, r3, #31
 8006bf6:	2203      	movs	r2, #3
 8006bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfc:	43da      	mvns	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	400a      	ands	r2, r1
 8006c04:	641a      	str	r2, [r3, #64]	@ 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	f003 031f 	and.w	r3, r3, #31
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	409a      	lsls	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006c20:	e003      	b.n	8006c2a <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 fa2f 	bl	800708e <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	00080100 	.word	0x00080100

08006c40 <HAL_SDADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_ConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                          uint32_t Channel,
                                          uint32_t ContinuousMode)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d02a      	beq.n	8006cb0 <HAL_SDADC_ConfigChannel+0x70>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c60:	2bff      	cmp	r3, #255	@ 0xff
 8006c62:	d025      	beq.n	8006cb0 <HAL_SDADC_ConfigChannel+0x70>
  {
    /* Set RCH[3:0] and RCONT bits in SDADC_CR2 */
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 029e 	bic.w	r2, r2, #5177344	@ 0x4f0000
 8006c72:	605a      	str	r2, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d10c      	bne.n	8006c94 <HAL_SDADC_ConfigChannel+0x54>
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK) | SDADC_CR2_RCONT);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	68b9      	ldr	r1, [r7, #8]
 8006c82:	4b10      	ldr	r3, [pc, #64]	@ (8006cc4 <HAL_SDADC_ConfigChannel+0x84>)
 8006c84:	400b      	ands	r3, r1
 8006c86:	431a      	orrs	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8006c90:	605a      	str	r2, [r3, #4]
 8006c92:	e009      	b.n	8006ca8 <HAL_SDADC_ConfigChannel+0x68>
    }
    else
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK));
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6859      	ldr	r1, [r3, #4]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	0c1b      	lsrs	r3, r3, #16
 8006c9e:	041b      	lsls	r3, r3, #16
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	6812      	ldr	r2, [r2, #0]
 8006ca4:	430b      	orrs	r3, r1
 8006ca6:	6053      	str	r3, [r2, #4]
    }
    /* Store continuous mode information */
    hsdadc->RegularContMode = ContinuousMode;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	619a      	str	r2, [r3, #24]
 8006cae:	e001      	b.n	8006cb4 <HAL_SDADC_ConfigChannel+0x74>
  }
  else
  {
    status = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	ffbf0000 	.word	0xffbf0000

08006cc8 <HAL_SDADC_InjectedConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_InjectedConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                                  uint32_t Channel,
                                                  uint32_t ContinuousMode)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d027      	beq.n	8006d32 <HAL_SDADC_InjectedConfigChannel+0x6a>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ce8:	2bff      	cmp	r3, #255	@ 0xff
 8006cea:	d022      	beq.n	8006d32 <HAL_SDADC_InjectedConfigChannel+0x6a>
  {
    /* Set JCHG[8:0] bits in SDADC_JCHG */
    hsdadc->Instance->JCHGR = (uint32_t) (Channel & SDADC_LSB_MASK);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	b292      	uxth	r2, r2
 8006cf4:	615a      	str	r2, [r3, #20]
    /* Set or clear JCONT bit in SDADC_CR2 */
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d108      	bne.n	8006d0e <HAL_SDADC_InjectedConfigChannel+0x46>
    {
      hsdadc->Instance->CR2 |= SDADC_CR2_JCONT;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0220 	orr.w	r2, r2, #32
 8006d0a:	605a      	str	r2, [r3, #4]
 8006d0c:	e007      	b.n	8006d1e <HAL_SDADC_InjectedConfigChannel+0x56>
    }
    else
    {
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JCONT);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0220 	bic.w	r2, r2, #32
 8006d1c:	605a      	str	r2, [r3, #4]
    }
    /* Store continuous mode information */
    hsdadc->InjectedContMode = ContinuousMode;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	61da      	str	r2, [r3, #28]
    /* Store number of injected channels */
    hsdadc->InjectedChannelsNbr = SDADC_GetInjChannelsNbr(Channel);
 8006d24:	68b8      	ldr	r0, [r7, #8]
 8006d26:	f000 f9c4 	bl	80070b2 <SDADC_GetInjChannelsNbr>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	621a      	str	r2, [r3, #32]
 8006d30:	e001      	b.n	8006d36 <HAL_SDADC_InjectedConfigChannel+0x6e>
  }
  else
  {
    status = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_SDADC_SelectInjectedTrigger>:
  *            @arg SDADC_SYNCHRONOUS_TRIGGER : Synchronous with SDADC1 (only for SDADC2 and SDADC3).
  *            @arg SDADC_EXTERNAL_TRIGGER : External trigger.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedTrigger(SDADC_HandleTypeDef *hsdadc, uint32_t Trigger)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_TRIGGER(Trigger));

  /* Check parameters compatibility */
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a12      	ldr	r2, [pc, #72]	@ (8006d9c <HAL_SDADC_SelectInjectedTrigger+0x5c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d105      	bne.n	8006d64 <HAL_SDADC_SelectInjectedTrigger+0x24>
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d102      	bne.n	8006d64 <HAL_SDADC_SelectInjectedTrigger+0x24>
  {
    status = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	73fb      	strb	r3, [r7, #15]
 8006d62:	e014      	b.n	8006d8e <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d009      	beq.n	8006d82 <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d004      	beq.n	8006d82 <HAL_SDADC_SelectInjectedTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_REG))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d103      	bne.n	8006d8a <HAL_SDADC_SelectInjectedTrigger+0x4a>
  {
    /* Store regular trigger information */
    hsdadc->InjectedTrigger = Trigger;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006d88:	e001      	b.n	8006d8e <HAL_SDADC_SelectInjectedTrigger+0x4e>
  }
  else
  {
    status = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	40016000 	.word	0x40016000

08006da0 <HAL_SDADC_SelectInjectedDelay>:
  *         This parameter can be a value of @ref SDADC_InjectedDelay.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectInjectedDelay(SDADC_HandleTypeDef *hsdadc,
                                                uint32_t InjectedDelay)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_INJECTED_DELAY(InjectedDelay));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d120      	bne.n	8006dfa <HAL_SDADC_SelectInjectedDelay+0x5a>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f945 	bl	8007048 <SDADC_EnterInitMode>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d006      	beq.n	8006dd2 <HAL_SDADC_SelectInjectedDelay+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	22ff      	movs	r2, #255	@ 0xff
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	73fb      	strb	r3, [r7, #15]
 8006dd0:	e015      	b.n	8006dfe <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
    else
    {
      /* Set JDS bit in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_JDS);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006de0:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= InjectedDelay;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6859      	ldr	r1, [r3, #4]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f94b 	bl	800708e <SDADC_ExitInitMode>
 8006df8:	e001      	b.n	8006dfe <HAL_SDADC_SelectInjectedDelay+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_SDADC_CalibrationStart>:
  *         This parameter can be a value of @ref SDADC_CalibrationSequence.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_CalibrationStart(SDADC_HandleTypeDef *hsdadc,
                                             uint32_t CalibrationSequence)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_CALIB_SEQUENCE(CalibrationSequence));

  /* Check SDADC state */
  if(hsdadc->State == HAL_SDADC_STATE_READY)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d12c      	bne.n	8006e7a <HAL_SDADC_CalibrationStart+0x72>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f911 	bl	8007048 <SDADC_EnterInitMode>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d006      	beq.n	8006e3a <HAL_SDADC_CalibrationStart+0x32>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	22ff      	movs	r2, #255	@ 0xff
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	73fb      	strb	r3, [r7, #15]
 8006e38:	e021      	b.n	8006e7e <HAL_SDADC_CalibrationStart+0x76>
    }
    else
    {
      /* Set CALIBCNT[1:0] bits in SDADC_CR2 register */
      hsdadc->Instance->CR2 &= ~(SDADC_CR2_CALIBCNT);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0206 	bic.w	r2, r2, #6
 8006e48:	605a      	str	r2, [r3, #4]
      hsdadc->Instance->CR2 |= CalibrationSequence;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6859      	ldr	r1, [r3, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f917 	bl	800708e <SDADC_ExitInitMode>

      /* Set STARTCALIB in SDADC_CR2 */
      hsdadc->Instance->CR2 |= SDADC_CR2_STARTCALIB;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 0210 	orr.w	r2, r2, #16
 8006e6e:	605a      	str	r2, [r3, #4]

      /* Set SDADC in calibration state */
      hsdadc->State = HAL_SDADC_STATE_CALIB;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006e78:	e001      	b.n	8006e7e <HAL_SDADC_CalibrationStart+0x76>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_SDADC_PollForCalibEvent>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForCalibEvent(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if(hsdadc->State != HAL_SDADC_STATE_CALIB)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d001      	beq.n	8006ea0 <HAL_SDADC_PollForCalibEvent+0x18>
  {
    /* Return error status */
    return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e028      	b.n	8006ef2 <HAL_SDADC_PollForCalibEvent+0x6a>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006ea0:	f7fc f914 	bl	80030cc <HAL_GetTick>
 8006ea4:	60f8      	str	r0, [r7, #12]

    /* Wait EOCALF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8006ea6:	e010      	b.n	8006eca <HAL_SDADC_PollForCalibEvent+0x42>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eae:	d00c      	beq.n	8006eca <HAL_SDADC_PollForCalibEvent+0x42>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8006eb0:	f7fc f90c 	bl	80030cc <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d302      	bcc.n	8006ec6 <HAL_SDADC_PollForCalibEvent+0x3e>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_SDADC_PollForCalibEvent+0x42>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e013      	b.n	8006ef2 <HAL_SDADC_PollForCalibEvent+0x6a>
    while((hsdadc->Instance->ISR & SDADC_ISR_EOCALF) != SDADC_ISR_EOCALF)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d1e7      	bne.n	8006ea8 <HAL_SDADC_PollForCalibEvent+0x20>
        }
      }
    }
    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0201 	orr.w	r2, r2, #1
 8006ee6:	60da      	str	r2, [r3, #12]

    /* Set SDADC in ready state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return function status */
    return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
  }
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_SDADC_Start>:
  *         or if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Start(SDADC_HandleTypeDef *hsdadc)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d004      	beq.n	8006f16 <HAL_SDADC_Start+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_INJ))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	d105      	bne.n	8006f22 <HAL_SDADC_Start+0x28>
  {
    /* Start regular conversion */
    status = SDADC_RegConvStart(hsdadc);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f8ef 	bl	80070fa <SDADC_RegConvStart>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	73fb      	strb	r3, [r7, #15]
 8006f20:	e001      	b.n	8006f26 <HAL_SDADC_Start+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <HAL_SDADC_PollForConversion>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForConversion(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d006      	beq.n	8006f52 <HAL_SDADC_PollForConversion+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8006f4a:	2b05      	cmp	r3, #5
 8006f4c:	d001      	beq.n	8006f52 <HAL_SDADC_PollForConversion+0x22>
  {
    /* Return error status */
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e044      	b.n	8006fdc <HAL_SDADC_PollForConversion+0xac>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006f52:	f7fc f8bb 	bl	80030cc <HAL_GetTick>
 8006f56:	60f8      	str	r0, [r7, #12]

    /* Wait REOCF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 8006f58:	e010      	b.n	8006f7c <HAL_SDADC_PollForConversion+0x4c>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f60:	d00c      	beq.n	8006f7c <HAL_SDADC_PollForConversion+0x4c>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8006f62:	f7fc f8b3 	bl	80030cc <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d302      	bcc.n	8006f78 <HAL_SDADC_PollForConversion+0x48>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <HAL_SDADC_PollForConversion+0x4c>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e02f      	b.n	8006fdc <HAL_SDADC_PollForConversion+0xac>
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	2b08      	cmp	r3, #8
 8006f88:	d1e7      	bne.n	8006f5a <HAL_SDADC_PollForConversion+0x2a>
        }
      }
    }
    /* Check if overrun occurs */
    if((hsdadc->Instance->ISR & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f003 0310 	and.w	r3, r3, #16
 8006f94:	2b10      	cmp	r3, #16
 8006f96:	d10d      	bne.n	8006fb4 <HAL_SDADC_PollForConversion+0x84>
    {
      /* Update error code and call error callback */
      hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
      hsdadc->ErrorCallback(hsdadc);
#else
      HAL_SDADC_ErrorCallback(hsdadc);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f848 	bl	8007034 <HAL_SDADC_ErrorCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

      /* Set CLRROVRF bit in SDADC_CLRISR register */
      hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0210 	orr.w	r2, r2, #16
 8006fb2:	60da      	str	r2, [r3, #12]
    }
    /* Update SDADC state only if not continuous conversion and SW trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10e      	bne.n	8006fda <HAL_SDADC_PollForConversion+0xaa>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10a      	bne.n	8006fda <HAL_SDADC_PollForConversion+0xaa>
    {
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d101      	bne.n	8006fd2 <HAL_SDADC_PollForConversion+0xa2>
 8006fce:	2201      	movs	r2, #1
 8006fd0:	e000      	b.n	8006fd4 <HAL_SDADC_PollForConversion+0xa4>
 8006fd2:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Return function status */
    return HAL_OK;
 8006fda:	2300      	movs	r3, #0
  }
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HAL_SDADC_Stop>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Stop(SDADC_HandleTypeDef *hsdadc)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d007      	beq.n	8007006 <HAL_SDADC_Stop+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8006ffc:	2b05      	cmp	r3, #5
 8006ffe:	d002      	beq.n	8007006 <HAL_SDADC_Stop+0x22>
  {
    /* Return error status */
    status = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	73fb      	strb	r3, [r7, #15]
 8007004:	e004      	b.n	8007010 <HAL_SDADC_Stop+0x2c>
  }
  else
  {
    /* Stop regular conversion */
    status = SDADC_RegConvStop(hsdadc);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f8b5 	bl	8007176 <SDADC_RegConvStop>
 800700c:	4603      	mov	r3, r0
 800700e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8007010:	7bfb      	ldrb	r3, [r7, #15]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <HAL_SDADC_GetValue>:
  * @brief  This function allows to get regular conversion value.
  * @param  hsdadc SDADC handle.
  * @retval Regular conversion value
  */
uint32_t HAL_SDADC_GetValue(SDADC_HandleTypeDef *hsdadc)
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Return regular conversion value */
  return hsdadc->Instance->RDATAR;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
}
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800705e:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 8007060:	f7fc f834 	bl	80030cc <HAL_GetTick>
 8007064:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8007066:	e008      	b.n	800707a <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8007068:	f7fc f830 	bl	80030cc <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2bc8      	cmp	r3, #200	@ 0xc8
 8007074:	d901      	bls.n	800707a <SDADC_EnterInitMode+0x32>
    {
      return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e005      	b.n	8007086 <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	daf1      	bge.n	8007068 <SDADC_EnterInitMode+0x20>
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80070a4:	601a      	str	r2, [r3, #0]
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <SDADC_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t SDADC_GetInjChannelsNbr(uint32_t Channels)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b087      	sub	sp, #28
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0UL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	617b      	str	r3, [r7, #20]
  uint32_t tmp,i;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & SDADC_LSB_MASK);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	e00d      	b.n	80070e6 <SDADC_GetInjChannelsNbr+0x34>
  {
    if((tmp & 0x00000001UL) != 0UL)
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <SDADC_GetInjChannelsNbr+0x28>
    {
      nbChannels++;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	3301      	adds	r3, #1
 80070d8:	617b      	str	r3, [r7, #20]
    }
    tmp = (uint32_t) (tmp >> 1UL);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	085b      	lsrs	r3, r3, #1
 80070de:	613b      	str	r3, [r7, #16]
  for(i = 0UL ; i < 9UL ; i++)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3301      	adds	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d9ee      	bls.n	80070ca <SDADC_GetInjChannelsNbr+0x18>
  }
  return nbChannels;
 80070ec:	697b      	ldr	r3, [r7, #20]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <SDADC_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710a:	2b00      	cmp	r3, #0
 800710c:	d108      	bne.n	8007120 <SDADC_RegConvStart+0x26>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800711c:	605a      	str	r2, [r3, #4]
 800711e:	e017      	b.n	8007150 <SDADC_RegConvStart+0x56>
  }
  else /* synchronous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7ff ff91 	bl	8007048 <SDADC_EnterInitMode>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d006      	beq.n	800713a <SDADC_RegConvStart+0x40>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	22ff      	movs	r2, #255	@ 0xff
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      status = HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	73fb      	strb	r3, [r7, #15]
 8007138:	e00a      	b.n	8007150 <SDADC_RegConvStart+0x56>
    }
    else
    {
      /* Set RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007148:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff ff9f 	bl	800708e <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10a      	bne.n	800716c <SDADC_RegConvStart+0x72>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <SDADC_RegConvStart+0x6a>
 8007160:	2203      	movs	r2, #3
 8007162:	e000      	b.n	8007166 <SDADC_RegConvStart+0x6c>
 8007164:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  /* Return function status */
  return status;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <SDADC_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStop(SDADC_HandleTypeDef* hsdadc)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t dummy_read_for_register_reset;

  /* Check continuous mode */
  if(hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_ON)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d10c      	bne.n	80071a0 <SDADC_RegConvStop+0x2a>
  {
    /* Clear REOCF by reading SDADC_RDATAR register */
    dummy_read_for_register_reset = hsdadc->Instance->RDATAR;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800718c:	60bb      	str	r3, [r7, #8]
    UNUSED(dummy_read_for_register_reset);
 800718e:	68bb      	ldr	r3, [r7, #8]

    /* Clear RCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 &= ~(SDADC_CR2_RCONT);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 800719e:	605a      	str	r2, [r3, #4]
  }
  /* Wait for the end of regular conversion */
  tickstart = HAL_GetTick();
 80071a0:	f7fb ff94 	bl	80030cc <HAL_GetTick>
 80071a4:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_RCIP) != 0UL)
 80071a6:	e00c      	b.n	80071c2 <SDADC_RegConvStop+0x4c>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 80071a8:	f7fb ff90 	bl	80030cc <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80071b4:	d905      	bls.n	80071c2 <SDADC_RegConvStop+0x4c>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	22ff      	movs	r2, #255	@ 0xff
 80071ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e046      	b.n	8007250 <SDADC_RegConvStop+0xda>
  while((hsdadc->Instance->ISR & SDADC_ISR_RCIP) != 0UL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1eb      	bne.n	80071a8 <SDADC_RegConvStop+0x32>
    }
  }
  /* Check if trigger is synchronous */
  if(hsdadc->RegularTrigger == SDADC_SYNCHRONOUS_TRIGGER)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d116      	bne.n	8007206 <SDADC_RegConvStop+0x90>
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff ff35 	bl	8007048 <SDADC_EnterInitMode>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <SDADC_RegConvStop+0x7a>
    {
      /* Set SDADC in error state and return timeout status */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	22ff      	movs	r2, #255	@ 0xff
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e02f      	b.n	8007250 <SDADC_RegConvStop+0xda>
    }
    else
    {
      /* Clear RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_RSYNC);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80071fe:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff ff44 	bl	800708e <SDADC_ExitInitMode>
    }
  }
  /* Check if continuous mode */
  if(hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_ON)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d107      	bne.n	800721e <SDADC_RegConvStop+0xa8>
  {
    /* Restore RCONT bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RCONT;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685a      	ldr	r2, [r3, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800721c:	605a      	str	r2, [r3, #4]
  }
  /* Clear REOCF by reading SDADC_RDATAR register */
  dummy_read_for_register_reset = hsdadc->Instance->RDATAR;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007224:	60bb      	str	r3, [r7, #8]
  UNUSED(dummy_read_for_register_reset);
 8007226:	68bb      	ldr	r3, [r7, #8]

  /* Set CLRROVRF bit in SDADC_CLRISR register */
  hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0210 	orr.w	r2, r2, #16
 8007236:	60da      	str	r2, [r3, #12]

  /* Update SDADC state */
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
                  HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 800723e:	2b03      	cmp	r3, #3
 8007240:	d101      	bne.n	8007246 <SDADC_RegConvStop+0xd0>
 8007242:	2201      	movs	r2, #1
 8007244:	e000      	b.n	8007248 <SDADC_RegConvStop+0xd2>
 8007246:	2204      	movs	r2, #4
  hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e041      	b.n	80072ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d106      	bne.n	8007284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7fb fdb8 	bl	8002df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	3304      	adds	r3, #4
 8007294:	4619      	mov	r1, r3
 8007296:	4610      	mov	r0, r2
 8007298:	f000 fa80 	bl	800779c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3708      	adds	r7, #8
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b01      	cmp	r3, #1
 800730a:	d001      	beq.n	8007310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e049      	b.n	80073a4 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2202      	movs	r2, #2
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0201 	orr.w	r2, r2, #1
 8007326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007330:	d01d      	beq.n	800736e <HAL_TIM_Base_Start_IT+0x76>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a1e      	ldr	r2, [pc, #120]	@ (80073b0 <HAL_TIM_Base_Start_IT+0xb8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d018      	beq.n	800736e <HAL_TIM_Base_Start_IT+0x76>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a1c      	ldr	r2, [pc, #112]	@ (80073b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d013      	beq.n	800736e <HAL_TIM_Base_Start_IT+0x76>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a1b      	ldr	r2, [pc, #108]	@ (80073b8 <HAL_TIM_Base_Start_IT+0xc0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d00e      	beq.n	800736e <HAL_TIM_Base_Start_IT+0x76>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a19      	ldr	r2, [pc, #100]	@ (80073bc <HAL_TIM_Base_Start_IT+0xc4>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d009      	beq.n	800736e <HAL_TIM_Base_Start_IT+0x76>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a18      	ldr	r2, [pc, #96]	@ (80073c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d004      	beq.n	800736e <HAL_TIM_Base_Start_IT+0x76>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a16      	ldr	r2, [pc, #88]	@ (80073c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d111      	bne.n	8007392 <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b06      	cmp	r3, #6
 800737e:	d010      	beq.n	80073a2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f042 0201 	orr.w	r2, r2, #1
 800738e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007390:	e007      	b.n	80073a2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 0201 	orr.w	r2, r2, #1
 80073a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	40000400 	.word	0x40000400
 80073b4:	40000800 	.word	0x40000800
 80073b8:	40000c00 	.word	0x40000c00
 80073bc:	40001800 	.word	0x40001800
 80073c0:	40014000 	.word	0x40014000
 80073c4:	40015c00 	.word	0x40015c00

080073c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d020      	beq.n	800742c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01b      	beq.n	800742c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f06f 0202 	mvn.w	r2, #2
 80073fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f9a3 	bl	800775e <HAL_TIM_IC_CaptureCallback>
 8007418:	e005      	b.n	8007426 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f995 	bl	800774a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f9a6 	bl	8007772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f003 0304 	and.w	r3, r3, #4
 8007432:	2b00      	cmp	r3, #0
 8007434:	d020      	beq.n	8007478 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01b      	beq.n	8007478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0204 	mvn.w	r2, #4
 8007448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2202      	movs	r2, #2
 800744e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f97d 	bl	800775e <HAL_TIM_IC_CaptureCallback>
 8007464:	e005      	b.n	8007472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f96f 	bl	800774a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f980 	bl	8007772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f003 0308 	and.w	r3, r3, #8
 800747e:	2b00      	cmp	r3, #0
 8007480:	d020      	beq.n	80074c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01b      	beq.n	80074c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0208 	mvn.w	r2, #8
 8007494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2204      	movs	r2, #4
 800749a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f957 	bl	800775e <HAL_TIM_IC_CaptureCallback>
 80074b0:	e005      	b.n	80074be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f949 	bl	800774a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f95a 	bl	8007772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f003 0310 	and.w	r3, r3, #16
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d020      	beq.n	8007510 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f003 0310 	and.w	r3, r3, #16
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d01b      	beq.n	8007510 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f06f 0210 	mvn.w	r2, #16
 80074e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2208      	movs	r2, #8
 80074e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f931 	bl	800775e <HAL_TIM_IC_CaptureCallback>
 80074fc:	e005      	b.n	800750a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f923 	bl	800774a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f934 	bl	8007772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00c      	beq.n	8007534 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d007      	beq.n	8007534 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f06f 0201 	mvn.w	r2, #1
 800752c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f901 	bl	8007736 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00c      	beq.n	8007558 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fae0 	bl	8007b18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00c      	beq.n	800757c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007568:	2b00      	cmp	r3, #0
 800756a:	d007      	beq.n	800757c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f905 	bl	8007786 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f003 0320 	and.w	r3, r3, #32
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00c      	beq.n	80075a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f003 0320 	and.w	r3, r3, #32
 800758c:	2b00      	cmp	r3, #0
 800758e:	d007      	beq.n	80075a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f06f 0220 	mvn.w	r2, #32
 8007598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fab2 	bl	8007b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075a0:	bf00      	nop
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d101      	bne.n	80075c4 <HAL_TIM_ConfigClockSource+0x1c>
 80075c0:	2302      	movs	r3, #2
 80075c2:	e0b4      	b.n	800772e <HAL_TIM_ConfigClockSource+0x186>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80075e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075fc:	d03e      	beq.n	800767c <HAL_TIM_ConfigClockSource+0xd4>
 80075fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007602:	f200 8087 	bhi.w	8007714 <HAL_TIM_ConfigClockSource+0x16c>
 8007606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800760a:	f000 8086 	beq.w	800771a <HAL_TIM_ConfigClockSource+0x172>
 800760e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007612:	d87f      	bhi.n	8007714 <HAL_TIM_ConfigClockSource+0x16c>
 8007614:	2b70      	cmp	r3, #112	@ 0x70
 8007616:	d01a      	beq.n	800764e <HAL_TIM_ConfigClockSource+0xa6>
 8007618:	2b70      	cmp	r3, #112	@ 0x70
 800761a:	d87b      	bhi.n	8007714 <HAL_TIM_ConfigClockSource+0x16c>
 800761c:	2b60      	cmp	r3, #96	@ 0x60
 800761e:	d050      	beq.n	80076c2 <HAL_TIM_ConfigClockSource+0x11a>
 8007620:	2b60      	cmp	r3, #96	@ 0x60
 8007622:	d877      	bhi.n	8007714 <HAL_TIM_ConfigClockSource+0x16c>
 8007624:	2b50      	cmp	r3, #80	@ 0x50
 8007626:	d03c      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0xfa>
 8007628:	2b50      	cmp	r3, #80	@ 0x50
 800762a:	d873      	bhi.n	8007714 <HAL_TIM_ConfigClockSource+0x16c>
 800762c:	2b40      	cmp	r3, #64	@ 0x40
 800762e:	d058      	beq.n	80076e2 <HAL_TIM_ConfigClockSource+0x13a>
 8007630:	2b40      	cmp	r3, #64	@ 0x40
 8007632:	d86f      	bhi.n	8007714 <HAL_TIM_ConfigClockSource+0x16c>
 8007634:	2b30      	cmp	r3, #48	@ 0x30
 8007636:	d064      	beq.n	8007702 <HAL_TIM_ConfigClockSource+0x15a>
 8007638:	2b30      	cmp	r3, #48	@ 0x30
 800763a:	d86b      	bhi.n	8007714 <HAL_TIM_ConfigClockSource+0x16c>
 800763c:	2b20      	cmp	r3, #32
 800763e:	d060      	beq.n	8007702 <HAL_TIM_ConfigClockSource+0x15a>
 8007640:	2b20      	cmp	r3, #32
 8007642:	d867      	bhi.n	8007714 <HAL_TIM_ConfigClockSource+0x16c>
 8007644:	2b00      	cmp	r3, #0
 8007646:	d05c      	beq.n	8007702 <HAL_TIM_ConfigClockSource+0x15a>
 8007648:	2b10      	cmp	r3, #16
 800764a:	d05a      	beq.n	8007702 <HAL_TIM_ConfigClockSource+0x15a>
 800764c:	e062      	b.n	8007714 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800765e:	f000 f9bd 	bl	80079dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	609a      	str	r2, [r3, #8]
      break;
 800767a:	e04f      	b.n	800771c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800768c:	f000 f9a6 	bl	80079dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689a      	ldr	r2, [r3, #8]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800769e:	609a      	str	r2, [r3, #8]
      break;
 80076a0:	e03c      	b.n	800771c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ae:	461a      	mov	r2, r3
 80076b0:	f000 f91a 	bl	80078e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2150      	movs	r1, #80	@ 0x50
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 f973 	bl	80079a6 <TIM_ITRx_SetConfig>
      break;
 80076c0:	e02c      	b.n	800771c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076ce:	461a      	mov	r2, r3
 80076d0:	f000 f939 	bl	8007946 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2160      	movs	r1, #96	@ 0x60
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 f963 	bl	80079a6 <TIM_ITRx_SetConfig>
      break;
 80076e0:	e01c      	b.n	800771c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ee:	461a      	mov	r2, r3
 80076f0:	f000 f8fa 	bl	80078e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2140      	movs	r1, #64	@ 0x40
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 f953 	bl	80079a6 <TIM_ITRx_SetConfig>
      break;
 8007700:	e00c      	b.n	800771c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4619      	mov	r1, r3
 800770c:	4610      	mov	r0, r2
 800770e:	f000 f94a 	bl	80079a6 <TIM_ITRx_SetConfig>
      break;
 8007712:	e003      	b.n	800771c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	73fb      	strb	r3, [r7, #15]
      break;
 8007718:	e000      	b.n	800771c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800771a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007766:	bf00      	nop
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800777a:	bf00      	nop
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
	...

0800779c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077b2:	d00f      	beq.n	80077d4 <TIM_Base_SetConfig+0x38>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a42      	ldr	r2, [pc, #264]	@ (80078c0 <TIM_Base_SetConfig+0x124>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d00b      	beq.n	80077d4 <TIM_Base_SetConfig+0x38>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a41      	ldr	r2, [pc, #260]	@ (80078c4 <TIM_Base_SetConfig+0x128>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d007      	beq.n	80077d4 <TIM_Base_SetConfig+0x38>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a40      	ldr	r2, [pc, #256]	@ (80078c8 <TIM_Base_SetConfig+0x12c>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d003      	beq.n	80077d4 <TIM_Base_SetConfig+0x38>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a3f      	ldr	r2, [pc, #252]	@ (80078cc <TIM_Base_SetConfig+0x130>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d108      	bne.n	80077e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ec:	d027      	beq.n	800783e <TIM_Base_SetConfig+0xa2>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a33      	ldr	r2, [pc, #204]	@ (80078c0 <TIM_Base_SetConfig+0x124>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d023      	beq.n	800783e <TIM_Base_SetConfig+0xa2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a32      	ldr	r2, [pc, #200]	@ (80078c4 <TIM_Base_SetConfig+0x128>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d01f      	beq.n	800783e <TIM_Base_SetConfig+0xa2>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a31      	ldr	r2, [pc, #196]	@ (80078c8 <TIM_Base_SetConfig+0x12c>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d01b      	beq.n	800783e <TIM_Base_SetConfig+0xa2>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a31      	ldr	r2, [pc, #196]	@ (80078d0 <TIM_Base_SetConfig+0x134>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d017      	beq.n	800783e <TIM_Base_SetConfig+0xa2>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a30      	ldr	r2, [pc, #192]	@ (80078d4 <TIM_Base_SetConfig+0x138>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d013      	beq.n	800783e <TIM_Base_SetConfig+0xa2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a2f      	ldr	r2, [pc, #188]	@ (80078d8 <TIM_Base_SetConfig+0x13c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d00f      	beq.n	800783e <TIM_Base_SetConfig+0xa2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a2e      	ldr	r2, [pc, #184]	@ (80078dc <TIM_Base_SetConfig+0x140>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d00b      	beq.n	800783e <TIM_Base_SetConfig+0xa2>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a2d      	ldr	r2, [pc, #180]	@ (80078e0 <TIM_Base_SetConfig+0x144>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d007      	beq.n	800783e <TIM_Base_SetConfig+0xa2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a2c      	ldr	r2, [pc, #176]	@ (80078e4 <TIM_Base_SetConfig+0x148>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d003      	beq.n	800783e <TIM_Base_SetConfig+0xa2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a24      	ldr	r2, [pc, #144]	@ (80078cc <TIM_Base_SetConfig+0x130>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d108      	bne.n	8007850 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	4313      	orrs	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	4313      	orrs	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	689a      	ldr	r2, [r3, #8]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a19      	ldr	r2, [pc, #100]	@ (80078dc <TIM_Base_SetConfig+0x140>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d007      	beq.n	800788c <TIM_Base_SetConfig+0xf0>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a18      	ldr	r2, [pc, #96]	@ (80078e0 <TIM_Base_SetConfig+0x144>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d003      	beq.n	800788c <TIM_Base_SetConfig+0xf0>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a17      	ldr	r2, [pc, #92]	@ (80078e4 <TIM_Base_SetConfig+0x148>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d103      	bne.n	8007894 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d105      	bne.n	80078b2 <TIM_Base_SetConfig+0x116>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f023 0201 	bic.w	r2, r3, #1
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	611a      	str	r2, [r3, #16]
  }
}
 80078b2:	bf00      	nop
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	40000400 	.word	0x40000400
 80078c4:	40000800 	.word	0x40000800
 80078c8:	40000c00 	.word	0x40000c00
 80078cc:	40015c00 	.word	0x40015c00
 80078d0:	40001800 	.word	0x40001800
 80078d4:	40001c00 	.word	0x40001c00
 80078d8:	40002000 	.word	0x40002000
 80078dc:	40014000 	.word	0x40014000
 80078e0:	40014400 	.word	0x40014400
 80078e4:	40014800 	.word	0x40014800

080078e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	f023 0201 	bic.w	r2, r3, #1
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	011b      	lsls	r3, r3, #4
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f023 030a 	bic.w	r3, r3, #10
 8007924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	4313      	orrs	r3, r2
 800792c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	621a      	str	r2, [r3, #32]
}
 800793a:	bf00      	nop
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007946:	b480      	push	{r7}
 8007948:	b087      	sub	sp, #28
 800794a:	af00      	add	r7, sp, #0
 800794c:	60f8      	str	r0, [r7, #12]
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6a1b      	ldr	r3, [r3, #32]
 800795c:	f023 0210 	bic.w	r2, r3, #16
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007970:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	031b      	lsls	r3, r3, #12
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	4313      	orrs	r3, r2
 800797a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007982:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	4313      	orrs	r3, r2
 800798c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	621a      	str	r2, [r3, #32]
}
 800799a:	bf00      	nop
 800799c:	371c      	adds	r7, #28
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b085      	sub	sp, #20
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	f043 0307 	orr.w	r3, r3, #7
 80079c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	609a      	str	r2, [r3, #8]
}
 80079d0:	bf00      	nop
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079dc:	b480      	push	{r7}
 80079de:	b087      	sub	sp, #28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
 80079e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	021a      	lsls	r2, r3, #8
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	431a      	orrs	r2, r3
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	609a      	str	r2, [r3, #8]
}
 8007a10:	bf00      	nop
 8007a12:	371c      	adds	r7, #28
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d101      	bne.n	8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a30:	2302      	movs	r3, #2
 8007a32:	e055      	b.n	8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a76:	d01d      	beq.n	8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8007aec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d018      	beq.n	8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a1a      	ldr	r2, [pc, #104]	@ (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d013      	beq.n	8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a18      	ldr	r2, [pc, #96]	@ (8007af4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d00e      	beq.n	8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a17      	ldr	r2, [pc, #92]	@ (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d009      	beq.n	8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a15      	ldr	r2, [pc, #84]	@ (8007afc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d004      	beq.n	8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a14      	ldr	r2, [pc, #80]	@ (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d10c      	bne.n	8007ace <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007aba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	40000400 	.word	0x40000400
 8007af0:	40000800 	.word	0x40000800
 8007af4:	40000c00 	.word	0x40000c00
 8007af8:	40001800 	.word	0x40001800
 8007afc:	40014000 	.word	0x40014000
 8007b00:	40015c00 	.word	0x40015c00

08007b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e040      	b.n	8007bc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d106      	bne.n	8007b54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7fb f9c0 	bl	8002ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2224      	movs	r2, #36	@ 0x24
 8007b58:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f022 0201 	bic.w	r2, r2, #1
 8007b68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fd80 	bl	8008678 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fc03 	bl	8008384 <UART_SetConfig>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e01b      	b.n	8007bc0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ba6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f042 0201 	orr.w	r2, r2, #1
 8007bb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fdff 	bl	80087bc <UART_CheckIdleState>
 8007bbe:	4603      	mov	r3, r0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b08a      	sub	sp, #40	@ 0x28
 8007bcc:	af02      	add	r7, sp, #8
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bdc:	2b20      	cmp	r3, #32
 8007bde:	d177      	bne.n	8007cd0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <HAL_UART_Transmit+0x24>
 8007be6:	88fb      	ldrh	r3, [r7, #6]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d101      	bne.n	8007bf0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e070      	b.n	8007cd2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2221      	movs	r2, #33	@ 0x21
 8007bfc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bfe:	f7fb fa65 	bl	80030cc <HAL_GetTick>
 8007c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	88fa      	ldrh	r2, [r7, #6]
 8007c08:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	88fa      	ldrh	r2, [r7, #6]
 8007c10:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c1c:	d108      	bne.n	8007c30 <HAL_UART_Transmit+0x68>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d104      	bne.n	8007c30 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	61bb      	str	r3, [r7, #24]
 8007c2e:	e003      	b.n	8007c38 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c34:	2300      	movs	r3, #0
 8007c36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c38:	e02f      	b.n	8007c9a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2200      	movs	r2, #0
 8007c42:	2180      	movs	r1, #128	@ 0x80
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 fe61 	bl	800890c <UART_WaitOnFlagUntilTimeout>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d004      	beq.n	8007c5a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2220      	movs	r2, #32
 8007c54:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e03b      	b.n	8007cd2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10b      	bne.n	8007c78 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	881a      	ldrh	r2, [r3, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c6c:	b292      	uxth	r2, r2
 8007c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	3302      	adds	r3, #2
 8007c74:	61bb      	str	r3, [r7, #24]
 8007c76:	e007      	b.n	8007c88 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	781a      	ldrb	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	3301      	adds	r3, #1
 8007c86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	3b01      	subs	r3, #1
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1c9      	bne.n	8007c3a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2200      	movs	r2, #0
 8007cae:	2140      	movs	r1, #64	@ 0x40
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 fe2b 	bl	800890c <UART_WaitOnFlagUntilTimeout>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d004      	beq.n	8007cc6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e005      	b.n	8007cd2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	e000      	b.n	8007cd2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007cd0:	2302      	movs	r3, #2
  }
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b08a      	sub	sp, #40	@ 0x28
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cee:	2b20      	cmp	r3, #32
 8007cf0:	d132      	bne.n	8007d58 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <HAL_UART_Receive_DMA+0x24>
 8007cf8:	88fb      	ldrh	r3, [r7, #6]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e02b      	b.n	8007d5a <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d018      	beq.n	8007d48 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	e853 3f00 	ldrex	r3, [r3]
 8007d22:	613b      	str	r3, [r7, #16]
   return(result);
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	461a      	mov	r2, r3
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d34:	623b      	str	r3, [r7, #32]
 8007d36:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d38:	69f9      	ldr	r1, [r7, #28]
 8007d3a:	6a3a      	ldr	r2, [r7, #32]
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e6      	bne.n	8007d16 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007d48:	88fb      	ldrh	r3, [r7, #6]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	68b9      	ldr	r1, [r7, #8]
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 fe4a 	bl	80089e8 <UART_Start_Receive_DMA>
 8007d54:	4603      	mov	r3, r0
 8007d56:	e000      	b.n	8007d5a <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007d58:	2302      	movs	r3, #2
  }
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3728      	adds	r7, #40	@ 0x28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b0ba      	sub	sp, #232	@ 0xe8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	69db      	ldr	r3, [r3, #28]
 8007d72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007d8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007d92:	4013      	ands	r3, r2
 8007d94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d115      	bne.n	8007dcc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da4:	f003 0320 	and.w	r3, r3, #32
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00f      	beq.n	8007dcc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007db0:	f003 0320 	and.w	r3, r3, #32
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d009      	beq.n	8007dcc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 82ab 	beq.w	8008318 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	4798      	blx	r3
      }
      return;
 8007dca:	e2a5      	b.n	8008318 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 8117 	beq.w	8008004 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d106      	bne.n	8007df0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007de2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007de6:	4b85      	ldr	r3, [pc, #532]	@ (8007ffc <HAL_UART_IRQHandler+0x298>)
 8007de8:	4013      	ands	r3, r2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 810a 	beq.w	8008004 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d011      	beq.n	8007e20 <HAL_UART_IRQHandler+0xbc>
 8007dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e16:	f043 0201 	orr.w	r2, r3, #1
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d011      	beq.n	8007e50 <HAL_UART_IRQHandler+0xec>
 8007e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00b      	beq.n	8007e50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e46:	f043 0204 	orr.w	r2, r3, #4
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e54:	f003 0304 	and.w	r3, r3, #4
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d011      	beq.n	8007e80 <HAL_UART_IRQHandler+0x11c>
 8007e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2204      	movs	r2, #4
 8007e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e76:	f043 0202 	orr.w	r2, r3, #2
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e84:	f003 0308 	and.w	r3, r3, #8
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d017      	beq.n	8007ebc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e90:	f003 0320 	and.w	r3, r3, #32
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d105      	bne.n	8007ea4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00b      	beq.n	8007ebc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2208      	movs	r2, #8
 8007eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007eb2:	f043 0208 	orr.w	r2, r3, #8
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d012      	beq.n	8007eee <HAL_UART_IRQHandler+0x18a>
 8007ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ecc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00c      	beq.n	8007eee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ee4:	f043 0220 	orr.w	r2, r3, #32
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 8211 	beq.w	800831c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00d      	beq.n	8007f22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f0a:	f003 0320 	and.w	r3, r3, #32
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d007      	beq.n	8007f22 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f36:	2b40      	cmp	r3, #64	@ 0x40
 8007f38:	d005      	beq.n	8007f46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d04f      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fe14 	bl	8008b74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f56:	2b40      	cmp	r3, #64	@ 0x40
 8007f58:	d141      	bne.n	8007fde <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3308      	adds	r3, #8
 8007f60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f68:	e853 3f00 	ldrex	r3, [r3]
 8007f6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3308      	adds	r3, #8
 8007f82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f96:	e841 2300 	strex	r3, r2, [r1]
 8007f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1d9      	bne.n	8007f5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d013      	beq.n	8007fd6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fb2:	4a13      	ldr	r2, [pc, #76]	@ (8008000 <HAL_UART_IRQHandler+0x29c>)
 8007fb4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fc fc17 	bl	80047ee <HAL_DMA_Abort_IT>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d017      	beq.n	8007ff6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd4:	e00f      	b.n	8007ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f9be 	bl	8008358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fdc:	e00b      	b.n	8007ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f9ba 	bl	8008358 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe4:	e007      	b.n	8007ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f9b6 	bl	8008358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007ff4:	e192      	b.n	800831c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff6:	bf00      	nop
    return;
 8007ff8:	e190      	b.n	800831c <HAL_UART_IRQHandler+0x5b8>
 8007ffa:	bf00      	nop
 8007ffc:	04000120 	.word	0x04000120
 8008000:	08008e1f 	.word	0x08008e1f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008008:	2b01      	cmp	r3, #1
 800800a:	f040 814b 	bne.w	80082a4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800800e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008012:	f003 0310 	and.w	r3, r3, #16
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 8144 	beq.w	80082a4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800801c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008020:	f003 0310 	and.w	r3, r3, #16
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 813d 	beq.w	80082a4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2210      	movs	r2, #16
 8008030:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800803c:	2b40      	cmp	r3, #64	@ 0x40
 800803e:	f040 80b5 	bne.w	80081ac <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800804e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 8164 	beq.w	8008320 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800805e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008062:	429a      	cmp	r2, r3
 8008064:	f080 815c 	bcs.w	8008320 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800806e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	2b20      	cmp	r3, #32
 800807a:	f000 8086 	beq.w	800818a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800808a:	e853 3f00 	ldrex	r3, [r3]
 800808e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008092:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008096:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800809a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80080a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080ac:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80080b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080b8:	e841 2300 	strex	r3, r2, [r1]
 80080bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1da      	bne.n	800807e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3308      	adds	r3, #8
 80080ce:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80080d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080da:	f023 0301 	bic.w	r3, r3, #1
 80080de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3308      	adds	r3, #8
 80080e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080ec:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80080f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80080f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80080f8:	e841 2300 	strex	r3, r2, [r1]
 80080fc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80080fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1e1      	bne.n	80080c8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3308      	adds	r3, #8
 800810a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008114:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008116:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800811a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3308      	adds	r3, #8
 8008124:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008128:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800812a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800812e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008130:	e841 2300 	strex	r3, r2, [r1]
 8008134:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008136:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e3      	bne.n	8008104 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2220      	movs	r2, #32
 8008140:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008152:	e853 3f00 	ldrex	r3, [r3]
 8008156:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800815a:	f023 0310 	bic.w	r3, r3, #16
 800815e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	461a      	mov	r2, r3
 8008168:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800816c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800816e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008170:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008172:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008174:	e841 2300 	strex	r3, r2, [r1]
 8008178:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800817a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1e4      	bne.n	800814a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008184:	4618      	mov	r0, r3
 8008186:	f7fc faf4 	bl	8004772 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2202      	movs	r2, #2
 800818e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800819c:	b29b      	uxth	r3, r3
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f8e1 	bl	800836c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081aa:	e0b9      	b.n	8008320 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 80ab 	beq.w	8008324 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80081ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 80a6 	beq.w	8008324 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	461a      	mov	r2, r3
 80081f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80081fc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008200:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008202:	e841 2300 	strex	r3, r2, [r1]
 8008206:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e4      	bne.n	80081d8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	3308      	adds	r3, #8
 8008214:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008218:	e853 3f00 	ldrex	r3, [r3]
 800821c:	623b      	str	r3, [r7, #32]
   return(result);
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	f023 0301 	bic.w	r3, r3, #1
 8008224:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3308      	adds	r3, #8
 800822e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008232:	633a      	str	r2, [r7, #48]	@ 0x30
 8008234:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008236:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e3      	bne.n	800820e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2220      	movs	r2, #32
 800824a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	e853 3f00 	ldrex	r3, [r3]
 8008266:	60fb      	str	r3, [r7, #12]
   return(result);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 0310 	bic.w	r3, r3, #16
 800826e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	461a      	mov	r2, r3
 8008278:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800827c:	61fb      	str	r3, [r7, #28]
 800827e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	69b9      	ldr	r1, [r7, #24]
 8008282:	69fa      	ldr	r2, [r7, #28]
 8008284:	e841 2300 	strex	r3, r2, [r1]
 8008288:	617b      	str	r3, [r7, #20]
   return(result);
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1e4      	bne.n	800825a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2202      	movs	r2, #2
 8008294:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008296:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f865 	bl	800836c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082a2:	e03f      	b.n	8008324 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00e      	beq.n	80082ce <HAL_UART_IRQHandler+0x56a>
 80082b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d008      	beq.n	80082ce <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80082c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fde9 	bl	8008e9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082cc:	e02d      	b.n	800832a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80082ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00e      	beq.n	80082f8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80082da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d008      	beq.n	80082f8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d01c      	beq.n	8008328 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	4798      	blx	r3
    }
    return;
 80082f6:	e017      	b.n	8008328 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80082f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008300:	2b00      	cmp	r3, #0
 8008302:	d012      	beq.n	800832a <HAL_UART_IRQHandler+0x5c6>
 8008304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00c      	beq.n	800832a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fd9a 	bl	8008e4a <UART_EndTransmit_IT>
    return;
 8008316:	e008      	b.n	800832a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008318:	bf00      	nop
 800831a:	e006      	b.n	800832a <HAL_UART_IRQHandler+0x5c6>
    return;
 800831c:	bf00      	nop
 800831e:	e004      	b.n	800832a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008320:	bf00      	nop
 8008322:	e002      	b.n	800832a <HAL_UART_IRQHandler+0x5c6>
      return;
 8008324:	bf00      	nop
 8008326:	e000      	b.n	800832a <HAL_UART_IRQHandler+0x5c6>
    return;
 8008328:	bf00      	nop
  }

}
 800832a:	37e8      	adds	r7, #232	@ 0xe8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b088      	sub	sp, #32
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	431a      	orrs	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	431a      	orrs	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	69db      	ldr	r3, [r3, #28]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80083b2:	f023 030c 	bic.w	r3, r3, #12
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	6812      	ldr	r2, [r2, #0]
 80083ba:	6979      	ldr	r1, [r7, #20]
 80083bc:	430b      	orrs	r3, r1
 80083be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68da      	ldr	r2, [r3, #12]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	697a      	ldr	r2, [r7, #20]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a99      	ldr	r2, [pc, #612]	@ (8008664 <UART_SetConfig+0x2e0>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d120      	bne.n	8008446 <UART_SetConfig+0xc2>
 8008404:	4b98      	ldr	r3, [pc, #608]	@ (8008668 <UART_SetConfig+0x2e4>)
 8008406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008408:	f003 0303 	and.w	r3, r3, #3
 800840c:	2b03      	cmp	r3, #3
 800840e:	d817      	bhi.n	8008440 <UART_SetConfig+0xbc>
 8008410:	a201      	add	r2, pc, #4	@ (adr r2, 8008418 <UART_SetConfig+0x94>)
 8008412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008416:	bf00      	nop
 8008418:	08008429 	.word	0x08008429
 800841c:	08008435 	.word	0x08008435
 8008420:	0800843b 	.word	0x0800843b
 8008424:	0800842f 	.word	0x0800842f
 8008428:	2301      	movs	r3, #1
 800842a:	77fb      	strb	r3, [r7, #31]
 800842c:	e061      	b.n	80084f2 <UART_SetConfig+0x16e>
 800842e:	2302      	movs	r3, #2
 8008430:	77fb      	strb	r3, [r7, #31]
 8008432:	e05e      	b.n	80084f2 <UART_SetConfig+0x16e>
 8008434:	2304      	movs	r3, #4
 8008436:	77fb      	strb	r3, [r7, #31]
 8008438:	e05b      	b.n	80084f2 <UART_SetConfig+0x16e>
 800843a:	2308      	movs	r3, #8
 800843c:	77fb      	strb	r3, [r7, #31]
 800843e:	e058      	b.n	80084f2 <UART_SetConfig+0x16e>
 8008440:	2310      	movs	r3, #16
 8008442:	77fb      	strb	r3, [r7, #31]
 8008444:	e055      	b.n	80084f2 <UART_SetConfig+0x16e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a88      	ldr	r2, [pc, #544]	@ (800866c <UART_SetConfig+0x2e8>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d124      	bne.n	800849a <UART_SetConfig+0x116>
 8008450:	4b85      	ldr	r3, [pc, #532]	@ (8008668 <UART_SetConfig+0x2e4>)
 8008452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008454:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008458:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800845c:	d011      	beq.n	8008482 <UART_SetConfig+0xfe>
 800845e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008462:	d817      	bhi.n	8008494 <UART_SetConfig+0x110>
 8008464:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008468:	d011      	beq.n	800848e <UART_SetConfig+0x10a>
 800846a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800846e:	d811      	bhi.n	8008494 <UART_SetConfig+0x110>
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <UART_SetConfig+0xf8>
 8008474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008478:	d006      	beq.n	8008488 <UART_SetConfig+0x104>
 800847a:	e00b      	b.n	8008494 <UART_SetConfig+0x110>
 800847c:	2300      	movs	r3, #0
 800847e:	77fb      	strb	r3, [r7, #31]
 8008480:	e037      	b.n	80084f2 <UART_SetConfig+0x16e>
 8008482:	2302      	movs	r3, #2
 8008484:	77fb      	strb	r3, [r7, #31]
 8008486:	e034      	b.n	80084f2 <UART_SetConfig+0x16e>
 8008488:	2304      	movs	r3, #4
 800848a:	77fb      	strb	r3, [r7, #31]
 800848c:	e031      	b.n	80084f2 <UART_SetConfig+0x16e>
 800848e:	2308      	movs	r3, #8
 8008490:	77fb      	strb	r3, [r7, #31]
 8008492:	e02e      	b.n	80084f2 <UART_SetConfig+0x16e>
 8008494:	2310      	movs	r3, #16
 8008496:	77fb      	strb	r3, [r7, #31]
 8008498:	e02b      	b.n	80084f2 <UART_SetConfig+0x16e>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a74      	ldr	r2, [pc, #464]	@ (8008670 <UART_SetConfig+0x2ec>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d124      	bne.n	80084ee <UART_SetConfig+0x16a>
 80084a4:	4b70      	ldr	r3, [pc, #448]	@ (8008668 <UART_SetConfig+0x2e4>)
 80084a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80084ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80084b0:	d011      	beq.n	80084d6 <UART_SetConfig+0x152>
 80084b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80084b6:	d817      	bhi.n	80084e8 <UART_SetConfig+0x164>
 80084b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80084bc:	d011      	beq.n	80084e2 <UART_SetConfig+0x15e>
 80084be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80084c2:	d811      	bhi.n	80084e8 <UART_SetConfig+0x164>
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d003      	beq.n	80084d0 <UART_SetConfig+0x14c>
 80084c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80084cc:	d006      	beq.n	80084dc <UART_SetConfig+0x158>
 80084ce:	e00b      	b.n	80084e8 <UART_SetConfig+0x164>
 80084d0:	2300      	movs	r3, #0
 80084d2:	77fb      	strb	r3, [r7, #31]
 80084d4:	e00d      	b.n	80084f2 <UART_SetConfig+0x16e>
 80084d6:	2302      	movs	r3, #2
 80084d8:	77fb      	strb	r3, [r7, #31]
 80084da:	e00a      	b.n	80084f2 <UART_SetConfig+0x16e>
 80084dc:	2304      	movs	r3, #4
 80084de:	77fb      	strb	r3, [r7, #31]
 80084e0:	e007      	b.n	80084f2 <UART_SetConfig+0x16e>
 80084e2:	2308      	movs	r3, #8
 80084e4:	77fb      	strb	r3, [r7, #31]
 80084e6:	e004      	b.n	80084f2 <UART_SetConfig+0x16e>
 80084e8:	2310      	movs	r3, #16
 80084ea:	77fb      	strb	r3, [r7, #31]
 80084ec:	e001      	b.n	80084f2 <UART_SetConfig+0x16e>
 80084ee:	2310      	movs	r3, #16
 80084f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084fa:	d15a      	bne.n	80085b2 <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 80084fc:	7ffb      	ldrb	r3, [r7, #31]
 80084fe:	2b08      	cmp	r3, #8
 8008500:	d827      	bhi.n	8008552 <UART_SetConfig+0x1ce>
 8008502:	a201      	add	r2, pc, #4	@ (adr r2, 8008508 <UART_SetConfig+0x184>)
 8008504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008508:	0800852d 	.word	0x0800852d
 800850c:	08008535 	.word	0x08008535
 8008510:	0800853d 	.word	0x0800853d
 8008514:	08008553 	.word	0x08008553
 8008518:	08008543 	.word	0x08008543
 800851c:	08008553 	.word	0x08008553
 8008520:	08008553 	.word	0x08008553
 8008524:	08008553 	.word	0x08008553
 8008528:	0800854b 	.word	0x0800854b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800852c:	f7fe f8b6 	bl	800669c <HAL_RCC_GetPCLK1Freq>
 8008530:	61b8      	str	r0, [r7, #24]
        break;
 8008532:	e013      	b.n	800855c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008534:	f7fe f8d4 	bl	80066e0 <HAL_RCC_GetPCLK2Freq>
 8008538:	61b8      	str	r0, [r7, #24]
        break;
 800853a:	e00f      	b.n	800855c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800853c:	4b4d      	ldr	r3, [pc, #308]	@ (8008674 <UART_SetConfig+0x2f0>)
 800853e:	61bb      	str	r3, [r7, #24]
        break;
 8008540:	e00c      	b.n	800855c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008542:	f7fe f849 	bl	80065d8 <HAL_RCC_GetSysClockFreq>
 8008546:	61b8      	str	r0, [r7, #24]
        break;
 8008548:	e008      	b.n	800855c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800854a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800854e:	61bb      	str	r3, [r7, #24]
        break;
 8008550:	e004      	b.n	800855c <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	77bb      	strb	r3, [r7, #30]
        break;
 800855a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d074      	beq.n	800864c <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	005a      	lsls	r2, r3, #1
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	085b      	lsrs	r3, r3, #1
 800856c:	441a      	add	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	fbb2 f3f3 	udiv	r3, r2, r3
 8008576:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	2b0f      	cmp	r3, #15
 800857c:	d916      	bls.n	80085ac <UART_SetConfig+0x228>
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008584:	d212      	bcs.n	80085ac <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	b29b      	uxth	r3, r3
 800858a:	f023 030f 	bic.w	r3, r3, #15
 800858e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	085b      	lsrs	r3, r3, #1
 8008594:	b29b      	uxth	r3, r3
 8008596:	f003 0307 	and.w	r3, r3, #7
 800859a:	b29a      	uxth	r2, r3
 800859c:	89fb      	ldrh	r3, [r7, #14]
 800859e:	4313      	orrs	r3, r2
 80085a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	89fa      	ldrh	r2, [r7, #14]
 80085a8:	60da      	str	r2, [r3, #12]
 80085aa:	e04f      	b.n	800864c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	77bb      	strb	r3, [r7, #30]
 80085b0:	e04c      	b.n	800864c <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085b2:	7ffb      	ldrb	r3, [r7, #31]
 80085b4:	2b08      	cmp	r3, #8
 80085b6:	d828      	bhi.n	800860a <UART_SetConfig+0x286>
 80085b8:	a201      	add	r2, pc, #4	@ (adr r2, 80085c0 <UART_SetConfig+0x23c>)
 80085ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085be:	bf00      	nop
 80085c0:	080085e5 	.word	0x080085e5
 80085c4:	080085ed 	.word	0x080085ed
 80085c8:	080085f5 	.word	0x080085f5
 80085cc:	0800860b 	.word	0x0800860b
 80085d0:	080085fb 	.word	0x080085fb
 80085d4:	0800860b 	.word	0x0800860b
 80085d8:	0800860b 	.word	0x0800860b
 80085dc:	0800860b 	.word	0x0800860b
 80085e0:	08008603 	.word	0x08008603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085e4:	f7fe f85a 	bl	800669c <HAL_RCC_GetPCLK1Freq>
 80085e8:	61b8      	str	r0, [r7, #24]
        break;
 80085ea:	e013      	b.n	8008614 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085ec:	f7fe f878 	bl	80066e0 <HAL_RCC_GetPCLK2Freq>
 80085f0:	61b8      	str	r0, [r7, #24]
        break;
 80085f2:	e00f      	b.n	8008614 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085f4:	4b1f      	ldr	r3, [pc, #124]	@ (8008674 <UART_SetConfig+0x2f0>)
 80085f6:	61bb      	str	r3, [r7, #24]
        break;
 80085f8:	e00c      	b.n	8008614 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085fa:	f7fd ffed 	bl	80065d8 <HAL_RCC_GetSysClockFreq>
 80085fe:	61b8      	str	r0, [r7, #24]
        break;
 8008600:	e008      	b.n	8008614 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008606:	61bb      	str	r3, [r7, #24]
        break;
 8008608:	e004      	b.n	8008614 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800860a:	2300      	movs	r3, #0
 800860c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	77bb      	strb	r3, [r7, #30]
        break;
 8008612:	bf00      	nop
    }

    if (pclk != 0U)
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d018      	beq.n	800864c <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	085a      	lsrs	r2, r3, #1
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	441a      	add	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	fbb2 f3f3 	udiv	r3, r2, r3
 800862c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	2b0f      	cmp	r3, #15
 8008632:	d909      	bls.n	8008648 <UART_SetConfig+0x2c4>
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800863a:	d205      	bcs.n	8008648 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	b29a      	uxth	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	60da      	str	r2, [r3, #12]
 8008646:	e001      	b.n	800864c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008658:	7fbb      	ldrb	r3, [r7, #30]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3720      	adds	r7, #32
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	40013800 	.word	0x40013800
 8008668:	40021000 	.word	0x40021000
 800866c:	40004400 	.word	0x40004400
 8008670:	40004800 	.word	0x40004800
 8008674:	007a1200 	.word	0x007a1200

08008678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008684:	f003 0308 	and.w	r3, r3, #8
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00a      	beq.n	80086a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00a      	beq.n	80086c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	430a      	orrs	r2, r1
 80086c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c8:	f003 0302 	and.w	r3, r3, #2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00a      	beq.n	80086e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	430a      	orrs	r2, r1
 80086e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ea:	f003 0304 	and.w	r3, r3, #4
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00a      	beq.n	8008708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	430a      	orrs	r2, r1
 8008706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800870c:	f003 0310 	and.w	r3, r3, #16
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00a      	beq.n	800872a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	430a      	orrs	r2, r1
 8008728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800872e:	f003 0320 	and.w	r3, r3, #32
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00a      	beq.n	800874c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	430a      	orrs	r2, r1
 800874a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01a      	beq.n	800878e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	430a      	orrs	r2, r1
 800876c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008776:	d10a      	bne.n	800878e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	430a      	orrs	r2, r1
 800878c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	605a      	str	r2, [r3, #4]
  }
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b098      	sub	sp, #96	@ 0x60
 80087c0:	af02      	add	r7, sp, #8
 80087c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087cc:	f7fa fc7e 	bl	80030cc <HAL_GetTick>
 80087d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0308 	and.w	r3, r3, #8
 80087dc:	2b08      	cmp	r3, #8
 80087de:	d12e      	bne.n	800883e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087e8:	2200      	movs	r2, #0
 80087ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f88c 	bl	800890c <UART_WaitOnFlagUntilTimeout>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d021      	beq.n	800883e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008802:	e853 3f00 	ldrex	r3, [r3]
 8008806:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800880a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800880e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	461a      	mov	r2, r3
 8008816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008818:	647b      	str	r3, [r7, #68]	@ 0x44
 800881a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800881e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008820:	e841 2300 	strex	r3, r2, [r1]
 8008824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1e6      	bne.n	80087fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2220      	movs	r2, #32
 8008830:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e062      	b.n	8008904 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b04      	cmp	r3, #4
 800884a:	d149      	bne.n	80088e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800884c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008854:	2200      	movs	r2, #0
 8008856:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f856 	bl	800890c <UART_WaitOnFlagUntilTimeout>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d03c      	beq.n	80088e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886e:	e853 3f00 	ldrex	r3, [r3]
 8008872:	623b      	str	r3, [r7, #32]
   return(result);
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800887a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	461a      	mov	r2, r3
 8008882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008884:	633b      	str	r3, [r7, #48]	@ 0x30
 8008886:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008888:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800888a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800888c:	e841 2300 	strex	r3, r2, [r1]
 8008890:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1e6      	bne.n	8008866 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3308      	adds	r3, #8
 800889e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	e853 3f00 	ldrex	r3, [r3]
 80088a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f023 0301 	bic.w	r3, r3, #1
 80088ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3308      	adds	r3, #8
 80088b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088b8:	61fa      	str	r2, [r7, #28]
 80088ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088bc:	69b9      	ldr	r1, [r7, #24]
 80088be:	69fa      	ldr	r2, [r7, #28]
 80088c0:	e841 2300 	strex	r3, r2, [r1]
 80088c4:	617b      	str	r3, [r7, #20]
   return(result);
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1e5      	bne.n	8008898 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2220      	movs	r2, #32
 80088d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088dc:	2303      	movs	r3, #3
 80088de:	e011      	b.n	8008904 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2220      	movs	r2, #32
 80088e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2220      	movs	r2, #32
 80088ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3758      	adds	r7, #88	@ 0x58
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	603b      	str	r3, [r7, #0]
 8008918:	4613      	mov	r3, r2
 800891a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800891c:	e04f      	b.n	80089be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008924:	d04b      	beq.n	80089be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008926:	f7fa fbd1 	bl	80030cc <HAL_GetTick>
 800892a:	4602      	mov	r2, r0
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	69ba      	ldr	r2, [r7, #24]
 8008932:	429a      	cmp	r2, r3
 8008934:	d302      	bcc.n	800893c <UART_WaitOnFlagUntilTimeout+0x30>
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d101      	bne.n	8008940 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e04e      	b.n	80089de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0304 	and.w	r3, r3, #4
 800894a:	2b00      	cmp	r3, #0
 800894c:	d037      	beq.n	80089be <UART_WaitOnFlagUntilTimeout+0xb2>
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2b80      	cmp	r3, #128	@ 0x80
 8008952:	d034      	beq.n	80089be <UART_WaitOnFlagUntilTimeout+0xb2>
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2b40      	cmp	r3, #64	@ 0x40
 8008958:	d031      	beq.n	80089be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	f003 0308 	and.w	r3, r3, #8
 8008964:	2b08      	cmp	r3, #8
 8008966:	d110      	bne.n	800898a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2208      	movs	r2, #8
 800896e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 f8ff 	bl	8008b74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2208      	movs	r2, #8
 800897a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e029      	b.n	80089de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	69db      	ldr	r3, [r3, #28]
 8008990:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008998:	d111      	bne.n	80089be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80089a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 f8e5 	bl	8008b74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2220      	movs	r2, #32
 80089ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e00f      	b.n	80089de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	69da      	ldr	r2, [r3, #28]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4013      	ands	r3, r2
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	bf0c      	ite	eq
 80089ce:	2301      	moveq	r3, #1
 80089d0:	2300      	movne	r3, #0
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	461a      	mov	r2, r3
 80089d6:	79fb      	ldrb	r3, [r7, #7]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d0a0      	beq.n	800891e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b096      	sub	sp, #88	@ 0x58
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	4613      	mov	r3, r2
 80089f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	88fa      	ldrh	r2, [r7, #6]
 8008a00:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2222      	movs	r2, #34	@ 0x22
 8008a10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d028      	beq.n	8008a6e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a20:	4a3e      	ldr	r2, [pc, #248]	@ (8008b1c <UART_Start_Receive_DMA+0x134>)
 8008a22:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a28:	4a3d      	ldr	r2, [pc, #244]	@ (8008b20 <UART_Start_Receive_DMA+0x138>)
 8008a2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a30:	4a3c      	ldr	r2, [pc, #240]	@ (8008b24 <UART_Start_Receive_DMA+0x13c>)
 8008a32:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a38:	2200      	movs	r2, #0
 8008a3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3324      	adds	r3, #36	@ 0x24
 8008a46:	4619      	mov	r1, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	88fb      	ldrh	r3, [r7, #6]
 8008a50:	f7fb fe30 	bl	80046b4 <HAL_DMA_Start_IT>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d009      	beq.n	8008a6e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2210      	movs	r2, #16
 8008a5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2220      	movs	r2, #32
 8008a66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e051      	b.n	8008b12 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d018      	beq.n	8008aa8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a7e:	e853 3f00 	ldrex	r3, [r3]
 8008a82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a96:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a9c:	e841 2300 	strex	r3, r2, [r1]
 8008aa0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e6      	bne.n	8008a76 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3308      	adds	r3, #8
 8008aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab2:	e853 3f00 	ldrex	r3, [r3]
 8008ab6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aba:	f043 0301 	orr.w	r3, r3, #1
 8008abe:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3308      	adds	r3, #8
 8008ac6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ac8:	637a      	str	r2, [r7, #52]	@ 0x34
 8008aca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ace:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e5      	bne.n	8008aa8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	3308      	adds	r3, #8
 8008ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	613b      	str	r3, [r7, #16]
   return(result);
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3308      	adds	r3, #8
 8008afa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008afc:	623a      	str	r2, [r7, #32]
 8008afe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	69f9      	ldr	r1, [r7, #28]
 8008b02:	6a3a      	ldr	r2, [r7, #32]
 8008b04:	e841 2300 	strex	r3, r2, [r1]
 8008b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e5      	bne.n	8008adc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3758      	adds	r7, #88	@ 0x58
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	08008c3d 	.word	0x08008c3d
 8008b20:	08008d63 	.word	0x08008d63
 8008b24:	08008da1 	.word	0x08008da1

08008b28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b089      	sub	sp, #36	@ 0x24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008b44:	61fb      	str	r3, [r7, #28]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	61bb      	str	r3, [r7, #24]
 8008b50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b52:	6979      	ldr	r1, [r7, #20]
 8008b54:	69ba      	ldr	r2, [r7, #24]
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1e6      	bne.n	8008b30 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2220      	movs	r2, #32
 8008b66:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008b68:	bf00      	nop
 8008b6a:	3724      	adds	r7, #36	@ 0x24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b095      	sub	sp, #84	@ 0x54
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b84:	e853 3f00 	ldrex	r3, [r3]
 8008b88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ba0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e6      	bne.n	8008b7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	f023 0301 	bic.w	r3, r3, #1
 8008bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3308      	adds	r3, #8
 8008bcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bd6:	e841 2300 	strex	r3, r2, [r1]
 8008bda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1e5      	bne.n	8008bae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d118      	bne.n	8008c1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f023 0310 	bic.w	r3, r3, #16
 8008bfe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	461a      	mov	r2, r3
 8008c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c08:	61bb      	str	r3, [r7, #24]
 8008c0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	6979      	ldr	r1, [r7, #20]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	e841 2300 	strex	r3, r2, [r1]
 8008c14:	613b      	str	r3, [r7, #16]
   return(result);
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e6      	bne.n	8008bea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008c30:	bf00      	nop
 8008c32:	3754      	adds	r7, #84	@ 0x54
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b09c      	sub	sp, #112	@ 0x70
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c48:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	2b20      	cmp	r3, #32
 8008c50:	d071      	beq.n	8008d36 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8008c52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c54:	2200      	movs	r2, #0
 8008c56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c62:	e853 3f00 	ldrex	r3, [r3]
 8008c66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	461a      	mov	r2, r3
 8008c76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c7a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c80:	e841 2300 	strex	r3, r2, [r1]
 8008c84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1e6      	bne.n	8008c5a <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3308      	adds	r3, #8
 8008c92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c96:	e853 3f00 	ldrex	r3, [r3]
 8008c9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c9e:	f023 0301 	bic.w	r3, r3, #1
 8008ca2:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ca4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	3308      	adds	r3, #8
 8008caa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008cac:	647a      	str	r2, [r7, #68]	@ 0x44
 8008cae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cb4:	e841 2300 	strex	r3, r2, [r1]
 8008cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e5      	bne.n	8008c8c <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3308      	adds	r3, #8
 8008cc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cca:	e853 3f00 	ldrex	r3, [r3]
 8008cce:	623b      	str	r3, [r7, #32]
   return(result);
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
 8008cd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3308      	adds	r3, #8
 8008cde:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ce0:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ce8:	e841 2300 	strex	r3, r2, [r1]
 8008cec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1e5      	bne.n	8008cc0 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008cf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d118      	bne.n	8008d36 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	e853 3f00 	ldrex	r3, [r3]
 8008d10:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f023 0310 	bic.w	r3, r3, #16
 8008d18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d22:	61fb      	str	r3, [r7, #28]
 8008d24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d26:	69b9      	ldr	r1, [r7, #24]
 8008d28:	69fa      	ldr	r2, [r7, #28]
 8008d2a:	e841 2300 	strex	r3, r2, [r1]
 8008d2e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1e6      	bne.n	8008d04 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d38:	2200      	movs	r2, #0
 8008d3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d107      	bne.n	8008d54 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008d4e:	f7ff fb0d 	bl	800836c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d52:	e002      	b.n	8008d5a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008d54:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008d56:	f7f9 fc75 	bl	8002644 <HAL_UART_RxCpltCallback>
}
 8008d5a:	bf00      	nop
 8008d5c:	3770      	adds	r7, #112	@ 0x70
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d6e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2201      	movs	r2, #1
 8008d74:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d109      	bne.n	8008d92 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008d84:	085b      	lsrs	r3, r3, #1
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	4619      	mov	r1, r3
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f7ff faee 	bl	800836c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d90:	e002      	b.n	8008d98 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7ff fad6 	bl	8008344 <HAL_UART_RxHalfCpltCallback>
}
 8008d98:	bf00      	nop
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008db2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dc6:	2b80      	cmp	r3, #128	@ 0x80
 8008dc8:	d109      	bne.n	8008dde <UART_DMAError+0x3e>
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	2b21      	cmp	r3, #33	@ 0x21
 8008dce:	d106      	bne.n	8008dde <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8008dd8:	6978      	ldr	r0, [r7, #20]
 8008dda:	f7ff fea5 	bl	8008b28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008de8:	2b40      	cmp	r3, #64	@ 0x40
 8008dea:	d109      	bne.n	8008e00 <UART_DMAError+0x60>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2b22      	cmp	r3, #34	@ 0x22
 8008df0:	d106      	bne.n	8008e00 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008dfa:	6978      	ldr	r0, [r7, #20]
 8008dfc:	f7ff feba 	bl	8008b74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e06:	f043 0210 	orr.w	r2, r3, #16
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e10:	6978      	ldr	r0, [r7, #20]
 8008e12:	f7ff faa1 	bl	8008358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e16:	bf00      	nop
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f7ff fa8b 	bl	8008358 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e42:	bf00      	nop
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b088      	sub	sp, #32
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	e853 3f00 	ldrex	r3, [r3]
 8008e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e66:	61fb      	str	r3, [r7, #28]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	61bb      	str	r3, [r7, #24]
 8008e72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e74:	6979      	ldr	r1, [r7, #20]
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	e841 2300 	strex	r3, r2, [r1]
 8008e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1e6      	bne.n	8008e52 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2220      	movs	r2, #32
 8008e88:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f7ff fa4d 	bl	8008330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e96:	bf00      	nop
 8008e98:	3720      	adds	r7, #32
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008e9e:	b480      	push	{r7}
 8008ea0:	b083      	sub	sp, #12
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ea6:	bf00      	nop
 8008ea8:	370c      	adds	r7, #12
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr

08008eb2 <memset>:
 8008eb2:	4402      	add	r2, r0
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d100      	bne.n	8008ebc <memset+0xa>
 8008eba:	4770      	bx	lr
 8008ebc:	f803 1b01 	strb.w	r1, [r3], #1
 8008ec0:	e7f9      	b.n	8008eb6 <memset+0x4>
	...

08008ec4 <__libc_init_array>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	4d0d      	ldr	r5, [pc, #52]	@ (8008efc <__libc_init_array+0x38>)
 8008ec8:	4c0d      	ldr	r4, [pc, #52]	@ (8008f00 <__libc_init_array+0x3c>)
 8008eca:	1b64      	subs	r4, r4, r5
 8008ecc:	10a4      	asrs	r4, r4, #2
 8008ece:	2600      	movs	r6, #0
 8008ed0:	42a6      	cmp	r6, r4
 8008ed2:	d109      	bne.n	8008ee8 <__libc_init_array+0x24>
 8008ed4:	4d0b      	ldr	r5, [pc, #44]	@ (8008f04 <__libc_init_array+0x40>)
 8008ed6:	4c0c      	ldr	r4, [pc, #48]	@ (8008f08 <__libc_init_array+0x44>)
 8008ed8:	f000 f818 	bl	8008f0c <_init>
 8008edc:	1b64      	subs	r4, r4, r5
 8008ede:	10a4      	asrs	r4, r4, #2
 8008ee0:	2600      	movs	r6, #0
 8008ee2:	42a6      	cmp	r6, r4
 8008ee4:	d105      	bne.n	8008ef2 <__libc_init_array+0x2e>
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}
 8008ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eec:	4798      	blx	r3
 8008eee:	3601      	adds	r6, #1
 8008ef0:	e7ee      	b.n	8008ed0 <__libc_init_array+0xc>
 8008ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef6:	4798      	blx	r3
 8008ef8:	3601      	adds	r6, #1
 8008efa:	e7f2      	b.n	8008ee2 <__libc_init_array+0x1e>
 8008efc:	08008f5c 	.word	0x08008f5c
 8008f00:	08008f5c 	.word	0x08008f5c
 8008f04:	08008f5c 	.word	0x08008f5c
 8008f08:	08008f60 	.word	0x08008f60

08008f0c <_init>:
 8008f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0e:	bf00      	nop
 8008f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f12:	bc08      	pop	{r3}
 8008f14:	469e      	mov	lr, r3
 8008f16:	4770      	bx	lr

08008f18 <_fini>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	bf00      	nop
 8008f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1e:	bc08      	pop	{r3}
 8008f20:	469e      	mov	lr, r3
 8008f22:	4770      	bx	lr
